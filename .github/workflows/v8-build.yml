name: Build V8 for Android

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      target_arch:
        description: 'Target architecture'
        required: false
        default: 'arm64'
        type: choice
        options:
        - arm
        - arm64
        - x86
        - x64
      build_type:
        description: 'Build type'
        required: false
        default: 'release'
        type: choice
        options:
        - release
        - debug

jobs:
  build-v8-android:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [arm, arm64, x86, x64]
        build_type: [release]
      fail-fast: false
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '11'
        
    - name: Setup Android NDK
      uses: nttld/setup-ndk@v1
      with:
        ndk-version: r25c
        
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y git python3 python3-pip build-essential
        sudo apt-get install -y ninja-build pkg-config
        
    - name: Setup depot_tools
      run: |
        git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git
        echo "$PWD/depot_tools" >> $GITHUB_PATH
        
    - name: Configure environment
      run: |
        echo "ANDROID_NDK_ROOT=$ANDROID_NDK_ROOT" >> $GITHUB_ENV
        echo "PATH=$PWD/depot_tools:$PATH" >> $GITHUB_ENV
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install Yarn
      run: npm install -g yarn
        
    - name: Setup V8 dependencies
      run: yarn setup
      
    - name: Build V8 for Android
      run: yarn start
      env:
        ANDROID_NDK_ROOT: ${{ env.ANDROID_NDK_ROOT }}
        
    - name: Prepare artifacts
      run: |
        mkdir -p artifacts/v8-android-${{ matrix.arch }}-${{ matrix.build_type }}
        
        # Copy built libraries from dist folder
        if [ -d "dist" ]; then
          cp -r dist/* artifacts/v8-android-${{ matrix.arch }}-${{ matrix.build_type }}/
        fi
        
        # Copy from any build output directories
        find . -name "*.so" -o -name "*.a" -o -name "libv8*.so" | \
          xargs -I {} cp {} artifacts/v8-android-${{ matrix.arch }}-${{ matrix.build_type }}/ 2>/dev/null || true
        
        # Copy build info
        echo "Build Info:" > artifacts/v8-android-${{ matrix.arch }}-${{ matrix.build_type }}/build_info.txt
        echo "Architecture: ${{ matrix.arch }}" >> artifacts/v8-android-${{ matrix.arch }}-${{ matrix.build_type }}/build_info.txt
        echo "Build Type: ${{ matrix.build_type }}" >> artifacts/v8-android-${{ matrix.arch }}-${{ matrix.build_type }}/build_info.txt
        echo "Build Date: $(date)" >> artifacts/v8-android-${{ matrix.arch }}-${{ matrix.build_type }}/build_info.txt
        echo "Commit: ${{ github.sha }}" >> artifacts/v8-android-${{ matrix.arch }}-${{ matrix.build_type }}/build_info.txt
        
        # List contents
        ls -la artifacts/v8-android-${{ matrix.arch }}-${{ matrix.build_type }}/
        
    - name: Upload V8 Android artifacts
      uses: actions/upload-artifact@v4
      with:
        name: v8-android-${{ matrix.arch }}-${{ matrix.build_type }}
        path: artifacts/v8-android-${{ matrix.arch }}-${{ matrix.build_type }}/*
        retention-days: 30
        
    - name: Upload build logs
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: build-logs-${{ matrix.arch }}-${{ matrix.build_type }}
        path: |
          *.log
          v8/**/*.log
        retention-days: 7

  create-release-bundle:
    needs: build-v8-android
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        pattern: v8-android-*
        merge-multiple: true
        
    - name: Create release bundle
      run: |
        mkdir -p release-bundle
        
        # Organize by architecture
        for arch in arm arm64 x86 x64; do
          if [ -d "v8-android-${arch}-release" ]; then
            mkdir -p "release-bundle/${arch}"
            cp -r v8-android-${arch}-release/* "release-bundle/${arch}/"
          fi
        done
        
        # Create combined package info
        echo "V8 Android Build Bundle" > release-bundle/README.txt
        echo "Generated: $(date)" >> release-bundle/README.txt
        echo "Architectures: $(ls release-bundle/ | grep -v README.txt | tr '\n' ' ')" >> release-bundle/README.txt
        
        # Create archive
        tar -czf v8-android-bundle.tar.gz -C release-bundle .
        
    - name: Upload release bundle
      uses: actions/upload-artifact@v4
      with:
        name: v8-android-complete-bundle
        path: v8-android-bundle.tar.gz
        retention-days: 90
