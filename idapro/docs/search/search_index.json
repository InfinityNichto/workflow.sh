{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"developer-guide.html","title":"Developer Guide","text":"<p>Welcome to the Hex-Rays Developer Guide, where you can learn how to enhance IDA's capabilities and extend its features.</p> <p>Utilize scripting options with the IDC language (IDA's native language) or IDAPython, or delve deeper into our SDK to build advanced modules and plugins.</p>"},{"location":"developer-guide.html#reference-documentation","title":"Reference documentation","text":"<p>Check our reference documentation for C++ SDK and IDAPython.</p> C++ SDK referencehttps://cpp.docs.hex-rays.comIDAPython referencehttps://python.docs.hex-rays.com/"},{"location":"developer-guide.html#getting-started","title":"Getting Started","text":"<p>Begin your journey by learning about core concepts and exploring common examples relevant to your language of choice.</p> Start using C++ SDKc++-sdk-getting-started.mdc++Start using IDAPythonidapython-getting-started.mdidapythonStart using IDCcore-concepts.mdidc"},{"location":"getting-started.html","title":"Getting Started","text":"<p>First experience with IDA? Great, you are in the right place. Here you can find guides designed to quickly onboard you into IDA. We will walk you through license activation and IDA installation to the essential tasks you can perform in IDA.</p> Activate your license Check how to activate your license in My Hex-Rays portal. Install your IDA Get smoothly through installation process on your machine. Start using IDA Check basic features of IDA and reverse your first binary."},{"location":"user-guide.html","title":"User Guide","text":"<p>Explore our in-depth guides, crafted to help you navigate through IDA features and master its advanced capabilities. </p> User Interface Check the overview of the IDA interface with menu and windows views and their corresponding options Disassembler Analize your binary and learn how to manipulate the disassembly output Decompiler Discover strategies for optimizing pseudocode Debugger Learn how to take advantage of all debugger features and dynamic analysis Signatures Check how to identify known code functions and standard libraries Type Libraries Improve your work with collections of predefined data types Configuration Personalize IDA to meet your needs\u2014change themes, fonts, shortcuts and more Teams Get advantage of collaborative engineering work  Lumina Get fast function recognition with Lumina server Plugins Learn how to install plugins and write your own Helper Tools Check all utilities ready to extend IDA functionality Subviews Explore the various subviews available in IDA"},{"location":"developer-guide/c%2B%2B-sdk.html","title":"C++ SDK","text":"<p>Our IDA SDK exposes API in the form of C++ libraries and header files, allowing you to create custom processor modules and plugins, automate tasks, or integrate new features directly into IDA. Our IDA API is defined and organized by the contents of the header files, that you can browse in our IDA C++ SDK Reference.</p>"},{"location":"developer-guide/c%2B%2B-sdk.html#typical-use-cases","title":"Typical use cases","text":"<p>With IDA SDK, you can develop loaders for unsupported binary formats or custom processors modules to disassemble and analyze non-standard files. What's more, you can write plugins to perform complex, automated tasks and more, allowing you to go far beyong the basic IDC scripting.</p>"},{"location":"developer-guide/c%2B%2B-sdk.html#what-to-check-next","title":"What to check next?","text":"C++ SDK Getting StartedExplore this guide to introduce yourself to the core capabilities of IDA SDK.c++-sdk-getting-started.mdC++ SDK ExamplesTry complex examples that show the full power and and flexibility of our SDK.c++-sdk-examples.mdC++ SDK ReferenceCheck in-depth overview of header files with extensive description of data structures and functions.https://cpp.docs.hex-rays.com/Writing Plugins in C++Learn the best practices for creating plugins with IDA SDKhow-to-create-a-plugin.md"},{"location":"developer-guide/c%2B%2B-sdk.html#sdk-porting-guide","title":"SDK Porting Guide","text":"<p>Check out our Porting Guide, which is prepared to help you migrate and adapt your existing modules and plugins from IDA 8.x to IDA 9.0.</p>"},{"location":"developer-guide/idapython.html","title":"IDAPython","text":"<p>IDAPython allows you to use the Python code in IDA to write scripts and customize basic IDA functionality. It offers more advanced and powerful automation than the IDC language and gives you access to Python modules and native Python abilities to interact with our API.</p>"},{"location":"developer-guide/idapython.html#typical-use-cases","title":"Typical use cases","text":"<p>When you are asking yourself how to automate work in IDA, like renaming variables or performing custom analyses, the IDAPython API comes in handy. You can use simple code snippets directly inside the IDA output window to perform specific tasks or more advanced scripts for complex usage. Moreover, with IDAPython, you can write plugins to expand basic IDA capabilities even further.</p>"},{"location":"developer-guide/idapython.html#what-to-check-next","title":"What to check next?","text":"IDAPython Getting StartedCheck this guide to kickstart learning IDAPython with simple snippets.idapython-getting-started.mdIDAPython ExamplesDig into complex examples that showcase the full potential and versatility of our PythonAPI.migration-guides.mdIDAPython ReferenceExplore the technical details of all functions, classes, and more.https://python.docs.hex-rays.comWriting Plugins in IDAPythonLearn the best practices for creating plugins with IDAPython.how-to-create-a-plugin.md"},{"location":"developer-guide/idapython.html#idapython-porting-guide","title":"IDAPython Porting Guide","text":"<p>Check out our Porting Guide, which is prepared to help you migrate and adapt your existing scripts and plugins from IDA 8.x to IDA 9.0.</p>"},{"location":"developer-guide/idc.html","title":"IDC","text":"<p>IDC is an IDA native, embedded scripting language semantically similar to C/C++.</p>"},{"location":"developer-guide/idc.html#typical-use-cases","title":"Typical use cases","text":"<p>With IDC, you can write simple scripts for automating repetitive tasks and extending out-of-the-box IDA functionality (for example, for getting the list of all functions or marked positions) without creating more complex plugins with C++ SDK or IDAPython.</p>"},{"location":"developer-guide/idc.html#what-to-check-next","title":"What to check next?","text":"IDC Getting StartedLearn core concepts of IDC.core-concepts.mdIDC ReferenceCheck the list of all IDC functions with detailsidc-api-reference.mdIDC ExamplesExplore ready-to-use samples.idc-examples.md"},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-examples.html","title":"Examples","text":"<p>{% hint style=\"info\" %} This page is currently a stub. We're working on additional examples tailored for beginners, so expect more samples soon.</p> <p>The IDA SDK, which you can get from our Download Center in My Hex-Rays Portal, provides sample code in addition to necessary libraries and headers. These exemplary plugins, processor modules, or file loaders are designed to help you create your own plugins, modules, and more.</p>"},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-examples.html#where-can-i-find-all-the-examples","title":"Where can I find all the examples?","text":"<p>The IDA SDK is shipped with plenty of samples (including, for example, sample processor modules or loaders) and exemplary plugins that you can find in the IDA SDK folder. To kickstart your journey with the IDA SDK, we encourage you to check out the included samples, compile them, and run them.</p>"},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-examples.html#sample-plugins","title":"Sample plugins","text":"<p>The <code>plugins</code> folder contains sample plugins written in C++. Usually, the subfolders contains at minimum the cpp file(s) and a makefile.</p> <p>Below, we present only a selection of samples to familiarize yourself with the possibilities of the C++ SDK. All of these samples and their corresponding makefiles can be found in your <code>plugins</code> folder inside the SDK directory.</p>"},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-examples.html#hello","title":"hello","text":"<p>Simple hello word plugin ideal to get started with IDA SDK.</p> <pre><code>#include &lt;ida.hpp&gt;\n#include &lt;idp.hpp&gt;\n#include &lt;loader.hpp&gt;\n#include &lt;kernwin.hpp&gt;\n\n//--------------------------------------------------------------------------\nstruct plugin_ctx_t : public plugmod_t\n{\n  virtual bool idaapi run(size_t) override;\n};\n\n//--------------------------------------------------------------------------\nbool idaapi plugin_ctx_t::run(size_t)\n{\n  msg(\"Hello, world! (cpp)\\n\");\n  return true;\n}\n\n//--------------------------------------------------------------------------\nstatic plugmod_t *idaapi init()\n{\n  return new plugin_ctx_t;\n}\n\n//--------------------------------------------------------------------------\nplugin_t PLUGIN =\n{\n  IDP_INTERFACE_VERSION,\n  PLUGIN_UNL            // Unload the plugin immediately after calling 'run'\n  | PLUGIN_MULTI,       // The plugin can work with multiple idbs in parallel\n  init,                 // initialize\n  nullptr,\n  nullptr,\n  nullptr,              // long comment about the plugin\n  nullptr,              // multiline help about the plugin\n  \"Hello, world\",       // the preferred short name of the plugin\n  nullptr,              // the preferred hotkey to run the plugin\n};\n</code></pre>"},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-examples.html#vcsample","title":"vcsample","text":"<p>Sample plugin, ideal to get familiar with plugins structure.</p> <pre><code>/*\n *  This is a sample plugin module\n *\n *  It can be compiled by any of the supported compilers:\n *\n *      - Visual C++\n *      - GCC\n *\n */\n\n#include &lt;ida.hpp&gt;\n#include &lt;idp.hpp&gt;\n#include &lt;expr.hpp&gt;\n#include &lt;bytes.hpp&gt;\n#include &lt;loader.hpp&gt;\n#include &lt;kernwin.hpp&gt;\n\n//#define INSTALL_SAMPLE_CALLBACK\n//#define HAS_USER_DEFINED_PREFIX\n\n//--------------------------------------------------------------------------\n//lint -e754 struct member not referenced\nstruct plugin_data_t : public plugmod_t, public event_listener_t\n{\n  ea_t old_ea = BADADDR;\n  int old_lnnum = -1;\n  virtual ssize_t idaapi on_event(ssize_t event_id, va_list) override;\n  virtual bool idaapi run(size_t arg) override;\n\n  idaapi ~plugin_data_t();\n};\n\n//--------------------------------------------------------------------------\n// Example of a user-defined IDC function in C++\n\n//#define DEFINE_IDC_FUNC\n#ifdef DEFINE_IDC_FUNC\nstatic error_t idaapi myfunc5(idc_value_t *argv, idc_value_t *res)\n{\n  msg(\"myfunc is called with arg0=%x and arg1=%s\\n\", argv[0].num, argv[1].c_str());\n  res-&gt;num = 5;     // let's return 5\n  return eOk;\n}\nstatic const char myfunc5_args[] = { VT_LONG, VT_STR, 0 };\nstatic const ext_idcfunc_t myfunc5_desc =\n{\n  { \"MyFunc5\", myfunc5, myfunc5_args, nullptr, 0, 0 }\n};\n#endif // DEFINE_IDC_FUNC\n\n//--------------------------------------------------------------------------\n// This callback is called for UI notification events\nssize_t idaapi plugin_data_t::on_event(ssize_t event_id, va_list)\n{\n  if ( event_id != ui_msg     // avoid recursion\n    &amp;&amp; event_id != ui_refreshmarked ) // ignore uninteresting events\n  {\n    msg(\"ui_callback %\" FMT_ZS \"\\n\", event_id);\n  }\n  return 0; // 0 means \"continue processing the event\"\n            // otherwise the event is considered as processed\n}\n\n//--------------------------------------------------------------------------\n// A sample how to generate user-defined line prefixes\n#ifdef HAS_USER_DEFINED_PREFIX\nstatic const int prefix_width = 8;\n\nstruct sample_prefix_t : public user_defined_prefix_t\n{\n  plugin_data_t *pd;\n  sample_prefix_t(plugin_data_t *d) :\n    user_defined_prefix_t(prefix_width, d), pd(d) {}\n  virtual void idaapi get_user_defined_prefix(\n        qstring *out,\n        ea_t ea,\n        const insn_t &amp; /*insn*/,\n        int lnnum,\n        int indent,\n        const char *line) override\n  {\n    out-&gt;qclear();        // empty prefix by default\n\n    // We want to display the prefix only the lines which\n    // contain the instruction itself\n\n    if ( indent != -1 )           // a directive\n      return;\n\n    if ( line[0] == '\\0' )        // empty line\n      return;\n\n    if ( tag_advance(line,1)[-1] == ash.cmnt[0] ) // comment line...\n      return;\n\n    // We don't want the prefix to be printed again for other lines of the\n    // same instruction/data. For that we remember the line number\n    // and compare it before generating the prefix\n\n    if ( pd-&gt;old_ea == ea &amp;&amp; pd-&gt;old_lnnum == lnnum )\n      return;\n\n    // Ok, seems that we found an instruction line.\n\n    // Let's display the size of the current item as the user-defined prefix\n    asize_t our_size = get_item_size(ea);\n\n    // We don't bother about the width of the prefix\n    // because it will be padded with spaces by the kernel\n\n    out-&gt;sprnt(\" %\" FMT_64 \"d\", our_size);\n\n    // Remember the address and line number we produced the line prefix for:\n    pd-&gt;old_ea = ea;\n    pd-&gt;old_lnnum = lnnum;\n  }\n};\n#endif // HAS_USER_DEFINED_PREFIX\n\n//--------------------------------------------------------------------------\nstatic plugmod_t *idaapi init()\n{\n  if ( inf_get_filetype() == f_ELF )\n    return nullptr; // we do not want to work with this idb\n\n  plugin_data_t *pd = new plugin_data_t;\n\n  // notifications\n#ifdef INSTALL_SAMPLE_CALLBACK\n  hook_event_listener(HT_UI, pd, pd);\n#endif // INSTALL_SAMPLE_CALLBACK\n\n  // user-defined prefix. will be automatically uninstalled by the kernel\n  // when our plugin gets unloaded.\n#ifdef HAS_USER_DEFINED_PREFIX\n  new sample_prefix_t(pd);\n#endif // HAS_USER_DEFINED_PREFIX\n\n  // custom IDC function\n#ifdef DEFINE_IDC_FUNC\n  add_idc_func(myfunc5_desc);\n#endif // DEFINE_IDC_FUNC\n\n  // an example how to retrieve plugin options\n  const char *options = get_plugin_options(\"vcsample\");\n  if ( options != nullptr )\n    warning(\"command line options: %s\", options);\n\n  return pd;\n}\n\n//--------------------------------------------------------------------------\nplugin_data_t::~plugin_data_t()\n{\n#ifdef DEFINE_IDC_FUNC\n  del_idc_func(myfunc5_desc.name);\n#endif\n}\n\n//--------------------------------------------------------------------------\nbool idaapi plugin_data_t::run(size_t arg)\n{\n  warning(\"vcsample plugin has been called with arg %\" FMT_Z, arg);\n  // msg(\"just fyi: the current screen address is: %a\\n\", get_screen_ea());\n  return true;\n}\n\n//--------------------------------------------------------------------------\nstatic const char comment[] = \"This is a sample plugin. It does nothing useful\";\n\nstatic const char help[] =\n  \"A sample plugin module\\n\"\n  \"\\n\"\n  \"This module shows you how to create plugin modules.\\n\"\n  \"\\n\"\n  \"It does nothing useful - just prints a message that is was called\\n\"\n  \"and shows the current address.\\n\";\n\n//--------------------------------------------------------------------------\n// This is the preferred name of the plugin module in the menu system\n// The preferred name may be overridden in plugins.cfg file\n\nstatic const char wanted_name[] = \"Sample plugin\";\n\n\n// This is the preferred hotkey for the plugin module\n// The preferred hotkey may be overridden in plugins.cfg file\n\nstatic const char wanted_hotkey[] = \"\";\n\n\n//--------------------------------------------------------------------------\n//\n//      PLUGIN DESCRIPTION BLOCK\n//\n//--------------------------------------------------------------------------\nplugin_t PLUGIN =\n{\n  IDP_INTERFACE_VERSION,\n  PLUGIN_MULTI,         // plugin flags\n  init,                 // initialize\n\n  nullptr,              // terminate. this pointer may be nullptr.\n\n  nullptr,              // invoke plugin\n\n  comment,              // long comment about the plugin\n                        // it could appear in the status line\n                        // or as a hint\n\n  help,                 // multiline help about the plugin\n\n  wanted_name,          // the preferred short name of the plugin\n  wanted_hotkey         // the preferred hotkey to run the plugin\n};\n</code></pre>"},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-examples.html#calle","title":"calle","text":"<p>Sample plugin that allows the user to change the address of the called function.</p> <pre><code>/*\n *  Change the callee address for constructions like\n *\n *  call esi    ; LocalFree\n *\n */\n\n#include &lt;ida.hpp&gt;\n#include &lt;idp.hpp&gt;\n#include &lt;loader.hpp&gt;\n#include &lt;kernwin.hpp&gt;\n#include &lt;bytes.hpp&gt;\n#include &lt;auto.hpp&gt;\n#include &lt;segregs.hpp&gt;\n#define T 20\n\nstruct callee_vars_t : public plugmod_t\n{\n  processor_t &amp;ph;\n  callee_vars_t(processor_t &amp;_ph) : ph(_ph) {}\n  virtual bool idaapi run(size_t arg) override;\n};\n\n//--------------------------------------------------------------------------\nstatic plugmod_t *idaapi init()\n{\n  processor_t &amp;ph = PH;\n  if ( ph.id != PLFM_386 &amp;&amp; ph.id != PLFM_MIPS &amp;&amp; ph.id != PLFM_ARM )\n    return nullptr; // only for x86, MIPS and ARM\n  return new callee_vars_t(ph);\n}\n\n//--------------------------------------------------------------------------\nstatic const char comment[] = \"Change the callee address\";\nstatic const char help[] =\n  \"This plugin allows the user to change the address of the called function\\n\"\n  \"in constructs like\\n\"\n  \"\\n\"\n  \"       call esi\\n\"\n  \"\\n\"\n  \"You can enter a function name instead of its address\\n\";\n\n//--------------------------------------------------------------------------\nstatic const char *const form =\n  \"HELP\\n\"\n  \"%s\\n\"\n  \"ENDHELP\\n\"\n  \"Enter the callee address\\n\"\n  \"\\n\"\n  \"  &lt;~C~allee:$::40:::&gt;\\n\"\n  \"\\n\"\n  \"\\n\";\n\nbool idaapi callee_vars_t::run(size_t)\n{\n  const char *nname;\n  if ( ph.id == PLFM_MIPS )\n    nname = \"$ mips\";\n  else if ( ph.id == PLFM_ARM )\n    nname = \" $arm\";\n  else\n    nname = \"$ vmm functions\";\n  netnode n(nname);\n  ea_t ea = get_screen_ea();    // get current address\n  if ( !is_code(get_flags(ea)) )\n    return false; // not an instruction\n  // get the callee address from the database\n  ea_t callee = node2ea(n.altval_ea(ea)-1);\n  // remove thumb bit for arm\n  if ( ph.id == PLFM_ARM )\n    callee &amp;= ~1;\n  char buf[MAXSTR];\n  qsnprintf(buf, sizeof(buf), form, help);\n  if ( ask_form(buf, &amp;callee) )\n  {\n    if ( callee == BADADDR )\n    {\n      n.altdel_ea(ea);\n    }\n    else\n    {\n      if ( ph.id == PLFM_ARM &amp;&amp; (callee &amp; 1) == 0 )\n      {\n        // if we're calling a thumb function, set bit 0\n        sel_t tbit = get_sreg(callee, T);\n        if ( tbit != 0 &amp;&amp; tbit != BADSEL )\n          callee |= 1;\n      }\n      // save the new address\n      n.altset_ea(ea, ea2node(callee)+1);\n    }\n    gen_idb_event(idb_event::callee_addr_changed, ea, callee);\n    plan_ea(ea);                 // reanalyze the current instruction\n  }\n  return true;\n}\n\n//--------------------------------------------------------------------------\nstatic const char wanted_name[] = \"Change the callee address\";\nstatic const char wanted_hotkey[] = \"Alt-F11\";\n\n//--------------------------------------------------------------------------\n//\n//      PLUGIN DESCRIPTION BLOCK\n//\n//--------------------------------------------------------------------------\nplugin_t PLUGIN =\n{\n  IDP_INTERFACE_VERSION,\n  PLUGIN_MULTI,         // plugin flags\n  init,                 // initialize\n\n  nullptr,              // terminate. this pointer may be nullptr.\n  nullptr,              // invoke plugin\n\n  comment,              // long comment about the plugin\n                        // it could appear in the status line\n                        // or as a hint\n\n  help,                 // multiline help about the plugin\n\n  wanted_name,          // the preferred short name of the plugin\n  wanted_hotkey         // the preferred hotkey to run the plugin\n};\n</code></pre>"},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-examples.html#choose","title":"choose","text":"<p>Sample plugin module that demonstrates the use of the choose() function.</p> <pre><code>/*\n *  This is a sample plugin module\n *\n *  It demonstrates the use of the choose() function\n *\n */\n\n#include &lt;ida.hpp&gt;\n#include &lt;idp.hpp&gt;\n#include &lt;loader.hpp&gt;\n#include &lt;bytes.hpp&gt;\n#include &lt;kernwin.hpp&gt;\n\nstruct plugin_ctx_t : public plugmod_t\n{\n  virtual bool idaapi run(size_t arg) override;\n};\n\n//--------------------------------------------------------------------------\nstatic plugmod_t *idaapi init()\n{\n  return new plugin_ctx_t;\n}\n\n//-------------------------------------------------------------------------\n// non-modal call instruction chooser\nstruct calls_chooser_t : public chooser_t\n{\nprotected:\n  static const int widths_[];\n  static const char *const header_[];\n\npublic:\n  // remember the call instruction addresses in this qvector\n  eavec_t list;\n\n  // this object must be allocated using `new`\n  calls_chooser_t(const char *title, bool ok, func_item_iterator_t *fii);\n\n  // function that is used to decide whether a new chooser should be opened\n  // or we can use the existing one.\n  // The contents of the window are completely determined by its title\n  virtual const void *get_obj_id(size_t *len) const override\n  {\n    *len = strlen(title);\n    return title;\n  }\n\n  // function that returns number of lines in the list\n  virtual size_t idaapi get_count() const override { return list.size(); }\n\n  // function that generates the list line\n  virtual void idaapi get_row(\n        qstrvec_t *cols,\n        int *icon_,\n        chooser_item_attrs_t *attrs,\n        size_t n) const override;\n\n  // function that is called when the user hits Enter\n  virtual cbret_t idaapi enter(size_t n) override\n  {\n    if ( n &lt; list.size() )\n      jumpto(list[n]);\n    return cbret_t(); // nothing changed\n  }\n\nprotected:\n  void build_list(bool ok, func_item_iterator_t *fii)\n  {\n    insn_t insn;\n    while ( ok )\n    {\n      ea_t ea = fii-&gt;current();\n      if ( decode_insn(&amp;insn, ea) &gt; 0 &amp;&amp; is_call_insn(insn) ) // a call instruction is found\n        list.push_back(ea);\n      ok = fii-&gt;next_code();\n    }\n  }\n};\n\n// column widths\nconst int calls_chooser_t::widths_[] =\n{\n  CHCOL_HEX | 8,  // Address\n  32,             // Instruction\n};\n// column headers\nconst char *const calls_chooser_t::header_[] =\n{\n  \"Address\",      // 0\n  \"Instruction\",  // 1\n};\n\ninline calls_chooser_t::calls_chooser_t(\n        const char *title_,\n        bool ok,\n        func_item_iterator_t *fii)\n  : chooser_t(0, qnumber(widths_), widths_, header_, title_),\n    list()\n{\n  CASSERT(qnumber(widths_) == qnumber(header_));\n\n  // build the list of calls\n  build_list(ok, fii);\n}\n\nvoid idaapi calls_chooser_t::get_row(\n        qstrvec_t *cols_,\n        int *,\n        chooser_item_attrs_t *,\n        size_t n) const\n{\n  // assert: n &lt; list.size()\n  ea_t ea = list[n];\n\n  // generate the line\n  qstrvec_t &amp;cols = *cols_;\n  cols[0].sprnt(\"%08a\", ea);\n  generate_disasm_line(&amp;cols[1], ea, GENDSM_REMOVE_TAGS);\n  CASSERT(qnumber(header_) == 2);\n}\n\n\n//--------------------------------------------------------------------------\n// The plugin method\n// This is the main function of the plugin.\nbool idaapi plugin_ctx_t::run(size_t)\n{\n  qstring title;\n  // Let's display the functions called from the current one\n  // or from the selected area\n\n  // First we determine the working area\n  func_item_iterator_t fii;\n  bool ok;\n  ea_t ea1, ea2;\n  if ( read_range_selection(nullptr, &amp;ea1, &amp;ea2) ) // the selection is present?\n  {\n    callui(ui_unmarksel);                       // unmark selection\n    title.sprnt(\"Functions called from %08a..%08a\", ea1, ea2);\n    ok = fii.set_range(ea1, ea2);\n  }\n  else                                          // nothing is selected\n  {\n    func_t *pfn = get_func(get_screen_ea());    // try the current function\n    if ( pfn == nullptr )\n    {\n      warning(\"Please position the cursor on a function or select an area\");\n      return true;\n    }\n    ok = fii.set(pfn);\n    get_func_name(&amp;title, pfn-&gt;start_ea);\n    title.insert(\"Functions called from \");\n  }\n\n  // now open the window\n  calls_chooser_t *ch = new calls_chooser_t(title.c_str(), ok, &amp;fii);\n  ch-&gt;choose(); // the default cursor position is 0 (first row)\n  return true; //-V773\n}\n\n//--------------------------------------------------------------------------\n//\n//      PLUGIN DESCRIPTION BLOCK\n//\n//--------------------------------------------------------------------------\nplugin_t PLUGIN =\n{\n  IDP_INTERFACE_VERSION,\n  // plugin flags\n  PLUGIN_MULTI,\n  // initialize\n  init,\n  nullptr,\n  nullptr,\n  // long comment about the plugin\n  // it could appear in the status line\n  // or as a hint\n  \"This is a sample plugin. It displays the chooser window\",\n  // multiline help about the plugin\n  \"A sample plugin module\\n\"\n  \"\\n\"\n  \"This module shows you how to use choose() function.\\n\",\n\n  // the preferred short name of the plugin\n  \"Called functions\",\n  // the preferred hotkey to run the plugin\n  \"\"\n};\n</code></pre>"},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-examples.html#custdata","title":"custdata","text":"<p>This sample plugin demonstates how to install a custom data type and a custom data format.</p>"},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-examples.html#custview","title":"custview","text":"<p>This sample plugin demonstates how to create and manipulate a simple custom viewer, that allows you to create a view which displays colored lines.</p>"},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-examples.html#cvt64_sample","title":"cvt64_sample","text":"<p>Plugin with CVT64 examples.</p>"},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-examples.html#dwarf","title":"dwarf","text":"<p>The source code of the dwarf plugin</p>"},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-examples.html#ex_debidc","title":"ex_debidc","text":"<p>This sample Debugger IDC Helper executes IDC script when the process is launched and allows to hook IDC scripts to various debugger events.</p> <pre><code>// Debugger IDC Helper\n// Executes IDC script when the process is launched\n// In fact, this approach can be used to hook IDC scripts to various debugger\n// events.\n\n#include &lt;ida.hpp&gt;\n#include &lt;idp.hpp&gt;\n#include &lt;dbg.hpp&gt;\n#include &lt;expr.hpp&gt;\n#include &lt;loader.hpp&gt;\n\nint data_id;\n\n//--------------------------------------------------------------------------\n// The plugin stores the IDC file name in the database\n// It will create a node for this purpose\nstatic const char node_name[] = \"$ debugger idc file\";\n\n\n//--------------------------------------------------------------------------\nstruct plugin_ctx_t;\n\nDECLARE_LISTENER(dbg_listener_t, plugin_ctx_t, ctx);\nDECLARE_LISTENER(idp_listener_t, plugin_ctx_t, ctx);\n\nstruct plugin_ctx_t : public plugmod_t\n{\n  dbg_listener_t dbg_listener = dbg_listener_t(*this);\n  idp_listener_t idp_listener = idp_listener_t(*this);\n  plugin_ctx_t()\n  {\n    hook_event_listener(HT_DBG, &amp;dbg_listener);\n#ifdef ENABLE_MERGE\n    hook_event_listener(HT_IDP, &amp;idp_listener);\n#endif\n    set_module_data(&amp;data_id, this);\n  }\n  ~plugin_ctx_t()\n  {\n    clr_module_data(data_id);\n    // listeners are uninstalled automatically\n    // when the owner module is unloaded\n  }\n\n  virtual bool idaapi run(size_t) override;\n};\n\n//--------------------------------------------------------------------------\n// Get the IDC file name from the database\nstatic bool get_idc_name(char *buf, size_t bufsize)\n{\n  // access the node\n  netnode mynode(node_name);\n  // retrieve the value\n  return mynode.valstr(buf, bufsize) &gt; 0;\n}\n\n//--------------------------------------------------------------------------\n// Store the IDC file name in the database\nstatic void set_idc_name(const char *idc)\n{\n  // access the node\n  netnode mynode;\n  // if it doesn't exist yet, create it\n  // otherwise get its id\n  mynode.create(node_name);\n  // store the value\n  mynode.set(idc, strlen(idc)+1);\n}\n\n//--------------------------------------------------------------------------\nssize_t idaapi idp_listener_t::on_event(ssize_t code, va_list va)\n{\n  return 0;\n}\n\n//--------------------------------------------------------------------------\nssize_t idaapi dbg_listener_t::on_event(ssize_t code, va_list /*va*/)\n{\n  switch ( code )\n  {\n    case dbg_process_start:\n    case dbg_process_attach:\n      // it is time to run the script\n      char idc[QMAXPATH];\n      if ( get_idc_name(idc, sizeof(idc)) )\n      {\n        qstring errbuf;\n        if ( !exec_idc_script(nullptr, idc, \"main\", nullptr, 0, &amp;errbuf) )\n          warning(\"%s\", errbuf.c_str());\n      }\n      break;\n  }\n  return 0;\n}\n\n//--------------------------------------------------------------------------\nbool idaapi plugin_ctx_t::run(size_t)\n{\n  // retrieve the old IDC name from the database\n  char idc[QMAXPATH];\n  if ( !get_idc_name(idc, sizeof(idc)) )\n    qstrncpy(idc, \"*.idc\", sizeof(idc));\n\n  char *newidc = ask_file(false, idc, \"Specify the script to run upon debugger launch\");\n  if ( newidc != nullptr )\n  {\n    // store it back in the database\n    set_idc_name(newidc);\n    msg(\"Script %s will be run when the debugger is launched\\n\", newidc);\n  }\n  return true;\n}\n\n//--------------------------------------------------------------------------\nstatic plugmod_t *idaapi init()\n{\n  // Our plugin works only for x86 PE executables\n  processor_t &amp;ph = PH;\n  if ( ph.id != PLFM_386 || inf_get_filetype() != f_PE )\n    return nullptr;\n  return new plugin_ctx_t;\n}\n\n//--------------------------------------------------------------------------\nstatic const char wanted_name[] = \"Specify Debugger IDC Script\";\nstatic const char wanted_hotkey[] = \"\";\n\n//--------------------------------------------------------------------------\n//\n//      PLUGIN DESCRIPTION BLOCK\n//\n//--------------------------------------------------------------------------\nplugin_t PLUGIN =\n{\n  IDP_INTERFACE_VERSION,\n  PLUGIN_MULTI,         // The plugin can work with multiple idbs in parallel\n  init,                 // initialize\n  nullptr,\n  nullptr,\n  wanted_name,          // long comment about the plugin\n  wanted_name,          // multiline help about the plugin\n  wanted_name,          // the preferred short name of the plugin\n  wanted_hotkey         // the preferred hotkey to run the plugin\n};\n</code></pre>"},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-examples.html#ex_events1","title":"ex_events1","text":"<p>Sample plugin illustrating analysis improvement; it checks branch targets for newly created instructions.</p> <pre><code>/*\n        This is a sample plugin.\n\n        It illustrates how the analysis can be improved\n\n        The plugin checks branch targets for newly created instructions.\n        If the target does not exist in the program, the plugin\n        forbids the instruction creation.\n\n*/\n\n#include &lt;ida.hpp&gt;\n#include &lt;idp.hpp&gt;\n#include &lt;loader.hpp&gt;\n#include &lt;kernwin.hpp&gt;\n#include &lt;allins.hpp&gt;\n\n//--------------------------------------------------------------------------\nstruct plugin_ctx_t : public plugmod_t, public event_listener_t\n{\n  plugin_ctx_t()\n  {\n    hook_event_listener(HT_IDB, this);\n  }\n  ~plugin_ctx_t()\n  {\n    // listeners are uninstalled automatically\n    // when the owner module is unloaded\n  }\n\n  virtual bool idaapi run(size_t) override;\n  virtual ssize_t idaapi on_event(ssize_t code, va_list va) override;\n};\n\n//--------------------------------------------------------------------------\n// This callback is called by the kernel when database related events happen\nssize_t idaapi plugin_ctx_t::on_event(ssize_t event_id, va_list va)\n{\n  switch ( event_id )\n  {\n    case idb_event::make_code:  // An instruction is being created\n                                // args: insn_t *\n                                // returns: 1-ok, &lt;=0-the kernel should stop\n      insn_t *insn = va_arg(va, insn_t *);\n      // we are interested in the branch instructions\n      if ( insn-&gt;itype &gt;= NN_ja &amp;&amp; insn-&gt;itype &lt;= NN_jmpshort )\n      {\n        // the first operand contains the jump target\n        ea_t target = to_ea(insn-&gt;cs, insn-&gt;Op1.addr);\n        if ( !is_mapped(target) )\n          return -1;\n      }\n  }\n  return 0; // event not processed\n            // let other plugins handle it\n}\n\n//--------------------------------------------------------------------------\nstatic plugmod_t *idaapi init()\n{\n  return new plugin_ctx_t;\n}\n\n//--------------------------------------------------------------------------\nbool idaapi plugin_ctx_t::run(size_t)\n{\n  // since the plugin is fully automatic, there is nothing to do\n  warning(\"Branch checker is fully automatic\");\n  return true;\n}\n\n//--------------------------------------------------------------------------\nplugin_t PLUGIN =\n{\n  IDP_INTERFACE_VERSION,\n  PLUGIN_HIDE           // Plugin should not appear in the Edit, Plugins menu\n  | PLUGIN_MULTI,       // The plugin can work with multiple idbs in parallel\n  init,                 // initialize\n  nullptr,\n  nullptr,\n  nullptr,              // long comment about the plugin\n  nullptr,              // multiline help about the plugin\n  \"Branch checker\",     // the preferred short name of the plugin\n  nullptr,              // the preferred hotkey to run the plugin\n};\n</code></pre>"},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-examples.html#extlang","title":"extlang","text":"<p>Sample plugin that illustrates how to register a thid party language interpreter.</p> <pre><code>/*\n        This is a sample plugin. It illustrates\n\n          how to register a thid party language interpreter\n\n*/\n\n#include &lt;ida.hpp&gt;\n#include &lt;idp.hpp&gt;\n#include &lt;loader.hpp&gt;\n#include &lt;expr.hpp&gt;\n#include &lt;kernwin.hpp&gt;\n\n//--------------------------------------------------------------------------\nstatic bool idaapi compile_expr(// Compile an expression\n        const char *name,       // in: name of the function which will\n                                //     hold the compiled expression\n        ea_t current_ea,        // in: current address. if unknown then BADADDR\n        const char *expr,       // in: expression to compile\n        qstring *errbuf)        // out: error message if compilation fails\n{                               // Returns: success\n  qnotused(name);\n  qnotused(current_ea);\n  qnotused(expr);\n  // our toy interpreter doesn't support separate compilation/evaluation\n  // some entry fields in ida won't be useable (bpt conditions, for example)\n  if ( errbuf != nullptr )\n    *errbuf = \"compilation error\";\n  return false;\n}\n\n//--------------------------------------------------------------------------\nstatic bool idaapi call_func(   // Evaluate a previously compiled expression\n        idc_value_t *result,    // out: function result\n        const char *name,       // in: function to call\n        const idc_value_t args[], // in: input arguments\n        size_t nargs,           // in: number of input arguments\n        qstring *errbuf)        // out: error message if compilation fails\n{                               // Returns: success\n  qnotused(name);\n  qnotused(nargs);\n  qnotused(args);\n  qnotused(result);\n  if ( errbuf != nullptr )\n    *errbuf = \"evaluation error\";\n  return false;\n}\n\n//--------------------------------------------------------------------------\nbool idaapi eval_expr(          // Compile and evaluate expression\n        idc_value_t *rv,        // out: expression value\n        ea_t current_ea,        // in: current address. if unknown then BADADDR\n        const char *expr,       // in: expression to evaluation\n        qstring *errbuf)        // out: error message if compilation fails\n{                               // Returns: success\n  qnotused(current_ea);\n  // we know to parse and decimal and hexadecimal numbers\n  int radix = 10;\n  const char *ptr = skip_spaces(expr);\n  bool neg = false;\n  if ( *ptr == '-' )\n  {\n    neg = true;\n    ptr = skip_spaces(ptr+1);\n  }\n  if ( *ptr == '0' &amp;&amp; *(ptr+1) == 'x' )\n  {\n    radix = 16;\n    ptr += 2;\n  }\n  sval_t value = 0;\n  while ( radix == 10 ? qisdigit(*ptr) : qisxdigit(*ptr) )\n  {\n    int d = *ptr &lt;= '9' ? *ptr-'0' : qtolower(*ptr)-'a'+10;\n    value *= radix;\n    value += d;\n    ptr++;\n  }\n  if ( neg )\n    value = -value;\n  ptr = skip_spaces(ptr);\n  if ( *ptr != '\\0' )\n  {\n    msg(\"EVAL FAILED: %s\\n\", expr);\n    if ( errbuf != nullptr )\n      *errbuf = \"syntax error\";\n    return false;\n  }\n\n  // we have the result, store it in the return value\n  if ( rv != nullptr )\n  {\n    rv-&gt;clear();\n    rv-&gt;num = value;\n  }\n  msg(\"EVAL %\" FMT_EA \"d: %s\\n\", value, expr);\n  return true;\n}\n\n//--------------------------------------------------------------------------\nstruct plugin_ctx_t : public plugmod_t\n{\n  extlang_t my_extlang =\n  {\n    sizeof(extlang_t),            // Size of this structure\n    0,                            // Language features, currently 0\n    0,                            // refcnt\n    \"extlang sample\",             // Language name\n    nullptr,                      // fileext\n    nullptr,                      // syntax highlighter\n    compile_expr,\n    nullptr,                      // compile_file\n    call_func,\n    eval_expr,\n    nullptr,                      // create_object\n    nullptr,                      // get_attr\n    nullptr,                      // set_attr\n    nullptr,                      // call_method\n    nullptr,                      // eval_snippet\n    nullptr,                      // load_procmod\n    nullptr,                      // unload_procmod\n  };\n  bool installed = false;\n\n  plugin_ctx_t()\n  {\n    installed = install_extlang(&amp;my_extlang) &gt;= 0;\n  }\n  ~plugin_ctx_t()\n  {\n    if ( installed )\n      remove_extlang(&amp;my_extlang);\n  }\n\n  virtual bool idaapi run(size_t) override { return false; }\n};\n\n//--------------------------------------------------------------------------\nstatic plugmod_t *idaapi init()\n{\n  plugin_ctx_t *ctx = new plugin_ctx_t;\n  if ( !ctx-&gt;installed )\n  {\n    msg(\"extlang: install_extlang() failed\\n\");\n    delete ctx;\n    ctx = nullptr;\n  }\n  return ctx;\n}\n\n//--------------------------------------------------------------------------\nplugin_t PLUGIN =\n{\n  IDP_INTERFACE_VERSION,\n  PLUGIN_HIDE           // Plugin should not appear in the Edit, Plugins menu\n  | PLUGIN_FIX          // Load plugin when IDA starts and keep it in the\n                        // memory until IDA stops\n  | PLUGIN_MULTI,       // The plugin can work with multiple idbs in parallel\n  init,                 // initialize\n  nullptr,\n  nullptr,\n  nullptr,              // long comment about the plugin\n  nullptr,              // multiline help about the plugin\n  \"Sample third party language\", // the preferred short name of the plugin\n  nullptr,              // the preferred hotkey to run the plugin\n};\n</code></pre>"},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-examples.html#formsample","title":"formsample","text":"<p>This plugin demonstrates how to use complex forms.</p> <pre><code>/*\n *  This plugin demonstrates how to use complex forms.\n *\n */\n\n#include &lt;ida.hpp&gt;\n#include &lt;idp.hpp&gt;\n#include &lt;loader.hpp&gt;\n#include &lt;kernwin.hpp&gt;\n\n//--------------------------------------------------------------------------\nstruct plugin_ctx_t : public plugmod_t\n{\n  virtual bool idaapi run(size_t) override;\n};\n\n//--------------------------------------------------------------------------\nstatic int idaapi btn_cb(int, form_actions_t &amp;)\n{\n  warning(\"button pressed\");\n  return 0;\n}\n\n//--------------------------------------------------------------------------\nstatic int idaapi modcb(int fid, form_actions_t &amp;fa)\n{\n  switch ( fid )\n  {\n    case CB_INIT:\n      msg(\"initializing\\n\");\n      break;\n    case CB_YES:\n      msg(\"terminating\\n\");\n      break;\n    case 5:     // operand\n      msg(\"changed operand\\n\");\n      break;\n    case 6:     // check\n      msg(\"changed check\\n\");\n      break;\n    case 7:     // button\n      msg(\"changed button\\n\");\n      break;\n    case 8:     // color button\n      msg(\"changed color button\\n\");\n      break;\n    default:\n      msg(\"unknown id %d\\n\", fid);\n      break;\n  }\n\n  bool is_gui = is_idaq();\n\n  qstring buf0;\n  if ( !fa.get_string_value(5, &amp;buf0) )\n    INTERR(30145);\n\n  if ( buf0 == \"on\" )\n    fa.enable_field(12, true);\n\n  if ( buf0 == \"off\" )\n    fa.enable_field(12, false);\n\n  ushort buf1;\n  if ( !fa.get_cbgroup_value(12, &amp;buf1) )\n    INTERR(30146);\n\n  fa.show_field(7, (buf1 &amp; 1) != 0);\n  fa.enable_field(8, (buf1 &amp; 2) != 0);\n\n\n  ushort c13;\n  if ( !fa.get_checkbox_value(13, &amp;c13) )\n    INTERR(30147);\n  fa.enable_field(10, c13 != 0);\n\n  ushort c14;\n  if ( !fa.get_checkbox_value(14, &amp;c14) )\n    INTERR(30148);\n  fa.enable_field(5, c14 != 0);\n\n  ushort c15;\n  if ( !fa.get_checkbox_value(15, &amp;c15) )\n    INTERR(30149);\n\n  if ( (buf1 &amp; 8) != 0 )\n  {\n    sval_t x, y, w, h;\n    fa.get_signed_value(4, &amp;x);\n    fa.get_signed_value(3, &amp;y);\n    fa.get_signed_value(2, &amp;w);\n    fa.get_signed_value(1, &amp;h);\n    fa.move_field(5, x, y, w, h);\n    if ( x != -1 &amp;&amp; c15 )\n      fa.move_field(-5, x-7, y, w, h);\n  }\n\n  // get_field_value() for buttons must return false always\n  if ( fa._get_field_value(7, nullptr) )\n    INTERR(30150);\n\n  bgcolor_t bgc = -1;\n  if ( is_gui &amp;&amp; !fa.get_color_value(8, &amp;bgc) )\n    INTERR(30151);\n  msg(\"  op=%s change=%x color=%x\\n\", buf0.c_str(), buf1, bgc);\n\n  fa.set_label_value(9, buf0.c_str());\n  return 1;\n}\n\n//--------------------------------------------------------------------------\nbool idaapi plugin_ctx_t::run(size_t)\n{\n  static const char form[] =\n    \"@0:477[]\\n\"\n    \"Manual operand\\n\"\n    \"\\n\"\n    \"%/Enter alternate string for the %9X operand\\n\"\n    \"\\n\"\n    \"  &lt;~O~perand:q5:100:40::&gt;\\n\"\n    \"  &lt;~X~:D4:100:10::&gt;\\n\"\n    \"  &lt;~Y~:D3:100:10::&gt;\\n\"\n    \"  &lt;~W~:D2:100:10::&gt;\\n\"\n    \"  &lt;~H~:D1:100:10::&gt;\\n\"\n    \"\\n\"\n    \"  &lt;S~h~ow Button:C10&gt;\\n\"\n    \"  &lt;~E~nable color Button:C11&gt;\\n\"\n    \"  &lt;~E~nable C10:C13&gt;\\n\"\n    \"  &lt;~S~et operand bounds:C6&gt;\\n\"\n    \"  &lt;Enable operand:C14&gt;\\n\"\n    \"  &lt;Move label:C15&gt;12&gt;\\n\"\n    \"\\n\"\n    \" &lt;~B~utton:B7:0:::&gt; &lt;~C~olor button:K8::::&gt;\\n\"\n    \"\\n\"\n    \"\\n\";\n  qstring buf(\"original\");\n  ushort check = 0x12;\n  bgcolor_t bgc = 0x556677;\n  uval_t x = -1;\n  uval_t y = -1;\n  uval_t w = -1;\n  uval_t h = -1;\n  CASSERT(IS_FORMCHGCB_T(modcb));\n  CASSERT(IS_QSTRING(buf));\n  if ( ask_form(form, modcb, buf.c_str(), &amp;buf, &amp;x, &amp;y, &amp;w, &amp;h, &amp;check, btn_cb, &amp;bgc) &gt; 0 )\n  {\n    msg(\"operand: %s\\n\", buf.c_str());\n    msg(\"check = %d\\n\", check);\n    msg(\"dim = %a %a %a %a\\n\", x, y, w, h);\n    msg(\"bgc = %x\\n\", bgc);\n  }\n  return true;\n}\n\n//--------------------------------------------------------------------------\nstatic plugmod_t *idaapi init()\n{\n  return new plugin_ctx_t;\n}\n</code></pre>"},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-examples.html#funclist","title":"funclist","text":"<p>This sample plugin demonstrates how to get the the entry point prototypes.</p> <pre><code>/*\n *  This is a sample plugin module\n *\n *      It demonstrates how to get the the entry point prototypes\n *\n */\n\n#include &lt;ida.hpp&gt;\n#include &lt;idp.hpp&gt;\n#include &lt;auto.hpp&gt;\n#include &lt;entry.hpp&gt;\n#include &lt;bytes.hpp&gt;\n#include &lt;loader.hpp&gt;\n#include &lt;kernwin.hpp&gt;\n#include &lt;typeinf.hpp&gt;\n\n//--------------------------------------------------------------------------\nstruct plugin_ctx_t : public plugmod_t\n{\n  virtual bool idaapi run(size_t) override;\n};\n\n//-------------------------------------------------------------------------\n// non-modal entry point chooser\nstruct entry_chooser_t : public chooser_t\n{\nprotected:\n  struct item_t\n  {\n    ea_t ea;\n    qstring decl;\n    int ord;\n    uint32 argsize;\n  };\n  // remember the information about an entry point in this qvector\n  qvector&lt;item_t&gt; list;\n\n  static const int widths_[];\n  static const char *const header_[];\n\npublic:\n  // this object must be allocated using `new`\n  entry_chooser_t();\n\n  // function that is used to decide whether a new chooser should be opened\n  // or we can use the existing one.\n  // There should be the only window as the entry points data are static.\n  virtual const void *get_obj_id(size_t *len) const override { *len = 1; return \"\"; }\n\n  // function that returns number of lines in the list\n  virtual size_t idaapi get_count() const override { return list.size(); }\n\n  // function that generates the list line\n  virtual void idaapi get_row(\n        qstrvec_t *cols,\n        int *icon_,\n        chooser_item_attrs_t *attrs,\n        size_t n) const override;\n\n  // function that is called when the user hits Enter\n  virtual cbret_t idaapi enter(size_t n) override\n  {\n    if ( n &lt; list.size() )\n      jumpto(list[n].ea);\n    return cbret_t(); // nothing changed\n  }\n\n  // function that is called when the chooser is initialized\n  virtual bool idaapi init() override\n  {\n    // rebuild the list\n    list.clear();\n    size_t n = get_entry_qty();\n    // gather information about the entry points\n    for ( size_t i = 0; i &lt; n; ++i )\n    {\n      asize_t ord = get_entry_ordinal(int(i));\n      ea_t ea = get_entry(ord);\n      if ( ord == ea )\n        continue;\n      tinfo_t type;\n      qstring decl;\n      qstring long_name;\n      qstring true_name;\n      asize_t argsize = 0;\n      qstring entry_name;\n      get_entry_name(&amp;entry_name, ord);\n      if ( get_tinfo(&amp;type, ea) &amp;&amp; type.print(&amp;decl, entry_name.c_str()) )\n      {\n        // found type info, calc the size of arguments\n        func_type_data_t fi;\n        if ( type.get_func_details(&amp;fi) &amp;&amp; !fi.empty() )\n        {\n          for ( int k=0; k &lt; fi.size(); k++ )\n          {\n            int s1 = fi[k].type.get_size();\n            uchar szi = inf_get_cc_size_i();\n            s1 = qmax(s1, szi);\n            argsize += s1;\n          }\n        }\n      }\n      else if ( get_long_name(&amp;long_name, ea) &gt; 0\n             &amp;&amp; get_name(&amp;true_name, ea, GN_NOT_DUMMY) &gt; 0\n             &amp;&amp; long_name != true_name )\n      {\n        // found mangled name\n      }\n      else\n      {\n        // found nothing, just show the name\n        if ( get_visible_name(&amp;decl, ea) &lt;= 0 )\n          continue;\n      }\n      if ( argsize == 0 )\n      {\n        func_t *pfn = get_func(ea);\n        if ( pfn != nullptr )\n          argsize = pfn-&gt;argsize;\n      }\n      item_t x;\n      x.ord = ord;\n      x.ea = ea;\n      x.decl.swap(decl);\n      x.argsize = uint32(argsize);\n      list.push_back(x);\n    }\n    return true;\n  }\n\n  // function that is called when the user wants to refresh the chooser\n  virtual cbret_t idaapi refresh(ssize_t n) override\n  {\n    init();\n    if ( n &lt; 0 )\n      return NO_SELECTION;\n    return adjust_last_item(n);  // try to preserve the cursor\n  }\n};\nDECLARE_TYPE_AS_MOVABLE(entry_chooser_t::item_t);\n\n// column widths\nconst int entry_chooser_t::widths_[] =\n{\n  CHCOL_DEC | 4,  // Ordinal\n  CHCOL_HEX | 8,  // Address\n  CHCOL_HEX | 6,  // ArgSize\n  70,             // Declaration\n};\n// column headers\nconst char *const entry_chooser_t::header_[] =\n{\n  \"Ordinal\",      // 0\n  \"Address\",      // 1\n  \"ArgSize\",      // 2\n  \"Declaration\",  // 3\n};\n\ninline entry_chooser_t::entry_chooser_t()\n  : chooser_t(CH_CAN_REFRESH, // user can refresh the chooser using Ctrl-U\n              qnumber(widths_), widths_, header_,\n              \"Exported functions\"),\n    list()\n{\n  CASSERT(qnumber(widths_) == qnumber(header_));\n}\n\nvoid idaapi entry_chooser_t::get_row(\n        qstrvec_t *cols_,\n        int *,\n        chooser_item_attrs_t *,\n        size_t n) const\n{\n  // assert: n &lt; list.size()\n  const item_t &amp;item = list[n];\n\n  // generate the line\n  qstrvec_t &amp;cols = *cols_;\n  cols[0].sprnt(\"%d\", item.ord);\n  cols[1].sprnt(\"%08a\", item.ea);\n  if ( item.argsize != 0 )\n    cols[2].sprnt(\"%04x\", item.argsize);\n  cols[3] = item.decl;\n  CASSERT(qnumber(header_) == 4);\n}\n\n//--------------------------------------------------------------------------\nbool idaapi plugin_ctx_t::run(size_t)\n{\n  if ( !auto_is_ok()\n    &amp;&amp; ask_yn(ASKBTN_NO,\n              \"HIDECANCEL\\n\"\n              \"The autoanalysis has not finished yet.\\n\"\n              \"The result might be incomplete.\\n\"\n              \"Do you want to continue?\") &lt; ASKBTN_YES )\n  {\n    return true;\n  }\n\n  // open the window\n  entry_chooser_t *ch = new entry_chooser_t();\n  ch-&gt;choose();\n  return true; //-V773\n} //lint !e429 'ch' has not been freed or returned\n\n//--------------------------------------------------------------------------\nstatic plugmod_t *idaapi init()\n{\n  if ( get_entry_qty() == 0 )\n    return nullptr;\n  return new plugin_ctx_t;\n}\n\n//--------------------------------------------------------------------------\nplugin_t PLUGIN =\n{\n  IDP_INTERFACE_VERSION,\n  PLUGIN_MULTI,         // The plugin can work with multiple idbs in parallel\n  init,                 // initialize\n  nullptr,\n  nullptr,\n  \"Generate list of exported function prototypes\",\n  \"Generate list of exported function prototypes\",\n  \"List of exported functions\",\n  \"Ctrl-F11\",\n};\n</code></pre>"},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-examples.html#getlines","title":"getlines","text":"<p>This sample plugin demonstrates how to get the disassembly lines for one address.</p> <pre><code>/*\n *  This is a sample plugin module\n *\n *      It demonstrates how to get the disassembly lines for one address\n *\n */\n\n#include &lt;ida.hpp&gt;\n#include &lt;idp.hpp&gt;\n#include &lt;bytes.hpp&gt;\n#include &lt;loader.hpp&gt;\n#include &lt;kernwin.hpp&gt;\n\n//--------------------------------------------------------------------------\nstruct plugin_ctx_t : public plugmod_t\n{\n  virtual bool idaapi run(size_t) override;\n};\n\n//--------------------------------------------------------------------------\nbool idaapi plugin_ctx_t::run(size_t)\n{\n  ea_t ea = get_screen_ea();\n  if ( ask_addr(&amp;ea, \"Please enter the disassembly address\")\n    &amp;&amp; is_mapped(ea) )                              // address belongs to disassembly\n  {\n    int flags = calc_default_idaplace_flags();\n    linearray_t ln(&amp;flags);\n    idaplace_t pl;\n    pl.ea = ea;\n    pl.lnnum = 0;\n    ln.set_place(&amp;pl);\n    msg(\"printing disassembly lines:\\n\");\n    int n = ln.get_linecnt();                // how many lines for this address?\n    for ( int i=0; i &lt; n; i++ )              // process all of them\n    {\n      qstring buf;\n      tag_remove(&amp;buf, *ln.down());          // get line and remove color codes\n      msg(\"%d: %s\\n\", i, buf.c_str());       // display it on the message window\n    }\n    msg(\"total %d lines\\n\", n);\n  }\n  return true;\n}\n\n//--------------------------------------------------------------------------\nstatic plugmod_t *idaapi init()\n{\n  return new plugin_ctx_t;\n}\n\n//--------------------------------------------------------------------------\nstatic const char comment[] = \"Generate disassembly lines for one address\";\nstatic const char help[] = \"Generate disassembly lines for one address\\n\";\n\n\n//--------------------------------------------------------------------------\n// This is the preferred name of the plugin module in the menu system\n// The preferred name may be overridden in plugins.cfg file\n\nstatic const char wanted_name[] = \"Disassembly lines sample\";\n\n\n// This is the preferred hotkey for the plugin module\n// The preferred hotkey may be overridden in plugins.cfg file\n\nstatic const char wanted_hotkey[] = \"\";\n\n\n//--------------------------------------------------------------------------\n//\n//      PLUGIN DESCRIPTION BLOCK\n//\n//--------------------------------------------------------------------------\nplugin_t PLUGIN =\n{\n  IDP_INTERFACE_VERSION,\n  PLUGIN_MULTI,         // The plugin can work with multiple idbs in parallel\n  init,                 // initialize\n  nullptr,\n  nullptr,\n  comment,              // long comment about the plugin\n  help,                 // multiline help about the plugin\n  wanted_name,          // the preferred short name of the plugin\n  wanted_hotkey         // the preferred hotkey to run the plugin\n};\n</code></pre>"},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-examples.html#highlighter","title":"highlighter","text":"<p>This plugin will display a colored box at the executed instructions.</p> <pre><code>// Highlighter plugin v1.0\n// Highlights executed instructions\n\n// This plugin will display a colored box at the executed instructions.\n// It will take into account only the instructions where the application\n// has been suspended.\n\n// http://www.hexblog.com/2005/11/the_highlighter.html\n\n// Copyright 2005 Ilfak Guilfanov, &lt;ig@hexblog.com&gt;\n\n#include &lt;ida.hpp&gt;\n#include &lt;idp.hpp&gt;\n#include &lt;dbg.hpp&gt;\n#include &lt;loader.hpp&gt;\n#include &lt;kernwin.hpp&gt;\n\n//--------------------------------------------------------------------------\nstruct plugin_ctx_t;\nstruct idd_post_events_t : public post_event_visitor_t\n{\n  plugin_ctx_t &amp;ctx;\n  idd_post_events_t(plugin_ctx_t &amp;_ctx) : ctx(_ctx) {}\n  virtual ssize_t idaapi handle_post_event(\n        ssize_t code,\n        int notification_code,\n        va_list va) override;\n};\n\n//--------------------------------------------------------------------------\nstruct exec_prefix_t : public user_defined_prefix_t\n{\n  static const int prefix_width = 1;\n\n  plugin_ctx_t &amp;ctx;\n  exec_prefix_t(plugin_ctx_t &amp;_ctx)\n    : user_defined_prefix_t(prefix_width, &amp;_ctx), ctx(_ctx) {}\n\n  virtual void idaapi get_user_defined_prefix(\n        qstring *out,\n        ea_t ea,\n        const insn_t &amp;insn,\n        int lnnum,\n        int indent,\n        const char *line) override;\n};\n\n//--------------------------------------------------------------------------\ntypedef std::set&lt;ea_t&gt; easet_t;\nstruct plugin_ctx_t : public plugmod_t, public event_listener_t\n{\n  idd_post_events_t idd_post_events = idd_post_events_t(*this);\n\n  exec_prefix_t *exec_prefix = nullptr;\n\n  // List of executed addresses\n  easet_t execset;\n\n  ea_t old_ea = BADADDR;\n  int old_lnnum = 0;\n\n  plugin_ctx_t()\n  {\n    hook_event_listener(HT_DBG, this);\n  }\n  ~plugin_ctx_t()\n  {\n    // listeners are uninstalled automatically\n    // when the owner module is unloaded\n    exec_prefix = nullptr; // make lint happy\n  }\n\n  virtual bool idaapi run(size_t) override;\n  virtual ssize_t idaapi on_event(ssize_t code, va_list va) override;\n};\n\n//--------------------------------------------------------------------------\n// A sample how to generate user-defined line prefixes\nstatic const char highlight_prefix[] = { COLOR_INV, ' ', COLOR_INV, 0 };\nvoid idaapi exec_prefix_t::get_user_defined_prefix(\n        qstring *buf,\n        ea_t ea,\n        const insn_t &amp;,\n        int lnnum,\n        int indent,\n        const char *line)\n{\n  buf-&gt;qclear();        // empty prefix by default\n\n  // We want to display the prefix only the lines which\n  // contain the instruction itself\n\n  if ( indent != -1 )\n    return;           // a directive\n  if ( line[0] == '\\0' )\n    return;        // empty line\n  if ( tag_advance(line,1)[-1] == ASH.cmnt[0] )\n    return; // comment line...\n\n  // We don't want the prefix to be printed again for other lines of the\n  // same instruction/data. For that we remember the line number\n  // and compare it before generating the prefix\n\n  if ( ctx.old_ea == ea &amp;&amp; ctx.old_lnnum == lnnum )\n    return;\n\n  if ( ctx.execset.find(ea) != ctx.execset.end() )\n    *buf = highlight_prefix;\n\n  // Remember the address and line number we produced the line prefix for:\n  ctx.old_ea = ea;\n  ctx.old_lnnum = lnnum;\n}\n\n//--------------------------------------------------------------------------\nssize_t idaapi idd_post_events_t::handle_post_event(\n        ssize_t retcode,\n        int notification_code,\n        va_list va)\n{\n  switch ( notification_code )\n  {\n    case debugger_t::ev_get_debug_event:\n      {\n        gdecode_t *code = va_arg(va, gdecode_t *);\n        debug_event_t *event = va_arg(va, debug_event_t *);\n        if ( *code == GDE_ONE_EVENT )    // got an event?\n          ctx.execset.insert(event-&gt;ea);\n      }\n      break;\n  }\n  return retcode;\n}\n\n//--------------------------------------------------------------------------\nbool idaapi plugin_ctx_t::run(size_t)\n{\n  info(\"AUTOHIDE NONE\\n\"\n       \"This is the highlighter plugin.\\n\"\n       \"It highlights executed instructions if a debug event occurs at them.\\n\"\n       \"The plugins is fully automatic and has no parameters.\\n\");\n  return true;\n}\n\n//--------------------------------------------------------------------------\nssize_t idaapi plugin_ctx_t::on_event(ssize_t code, va_list /*va*/)\n{\n  // We set our debug event handler at the beginning and remove it at the end\n  // of a debug session\n  switch ( code )\n  {\n    case dbg_process_start:\n    case dbg_process_attach:\n      exec_prefix = new exec_prefix_t(*this);\n      register_post_event_visitor(HT_IDD, &amp;idd_post_events, this);\n      break;\n    case dbg_process_exit:\n      // do not unregister idd_post_events - it should be removed automatically\n      delete exec_prefix;\n      exec_prefix = nullptr;\n      execset.clear();\n      break;\n  }\n  return 0;\n}\n\n//--------------------------------------------------------------------------\nstatic plugmod_t *idaapi init()\n{\n  return new plugin_ctx_t;\n}\n\n//--------------------------------------------------------------------------\nstatic const char wanted_name[] = \"Highlighter\";\nstatic const char wanted_hotkey[] = \"\";\n\n//--------------------------------------------------------------------------\n//\n//      PLUGIN DESCRIPTION BLOCK\n//\n//--------------------------------------------------------------------------\nplugin_t PLUGIN =\n{\n  IDP_INTERFACE_VERSION,\n  PLUGIN_MULTI,         // The plugin can work with multiple idbs in parallel\n  init,                 // initialize\n  nullptr,\n  nullptr,\n  wanted_name,          // long comment about the plugin\n  wanted_name,          // multiline help about the plugin\n  wanted_name,          // the preferred short name of the plugin\n  wanted_hotkey,        // the preferred hotkey to run the plugin\n};\n</code></pre>"},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-examples.html#ht_output","title":"ht_output","text":"<p>This sample plugin demonstrates receiving output window notification callbacks and usage of new output window functions.</p> <pre><code>/*\n *  This is a sample plugin demonstrating receiving output window notification callbacks\n *  and using of new output window functions: get_output_curline, get_output_cursor,\n *  get_output_selected_text, add_output_popup\n *\n */\n\n#include &lt;idp.hpp&gt;\n#include &lt;loader.hpp&gt;\n#include &lt;kernwin.hpp&gt;\n\n//-------------------------------------------------------------------------\nstruct ht_output_plugin_t : public plugmod_t, public event_listener_t\n{\n  form_actions_t *fa = nullptr;\n  qstring selected_data;\n\n  virtual bool idaapi run(size_t arg) override;\n  virtual ssize_t idaapi on_event(ssize_t code, va_list va) override;\n\n  void desc_notification(\n        const char *notification_name) const;\n  ~ht_output_plugin_t();\n};\n\n//-------------------------------------------------------------------------\nAS_PRINTF(2, 3) static void form_msg(form_actions_t *fa, const char *format, ...)\n{\n  textctrl_info_t ti;\n  fa-&gt;get_text_value(1, &amp;ti);\n  va_list va;\n  va_start(va, format);\n  ti.text.cat_vsprnt(format, va);\n  va_end(va);\n  fa-&gt;set_text_value(1, &amp;ti);\n}\n\n//---------------------------------------------------------------------------\nvoid ht_output_plugin_t::desc_notification(\n        const char *notification_name) const\n{\n  form_msg(fa, \"Received notification from output window: \\\"%s\\\"\\n\",\n           notification_name);\n}\n\n//-------------------------------------------------------------------------\nstruct printsel_ah_t : public action_handler_t\n{\n  ht_output_plugin_t *plugmod;\n\n  printsel_ah_t(ht_output_plugin_t *_plgmod) : plugmod(_plgmod) {}\n\n  virtual int idaapi activate(action_activation_ctx_t *) override\n  {\n    form_msg(plugmod-&gt;fa,\n             \"User menu item is called for selection: \\\"%s\\\"\\n\",\n             plugmod-&gt;selected_data.c_str());\n    return 1;\n  }\n\n  virtual action_state_t idaapi update(action_update_ctx_t *) override\n  {\n    return AST_ENABLE_ALWAYS;\n  }\n};\n\n//---------------------------------------------------------------------------\n// Callback for ui notifications\nstatic ssize_t idaapi ui_callback(void *ud, int notification_code, va_list va)\n{\n  switch ( notification_code )\n  {\n    // called when IDA is preparing a context menu for a view\n    // Here dynamic context-depending user menu items can be added.\n    case ui_populating_widget_popup:\n      {\n        TWidget *f = va_arg(va, TWidget *);\n        if ( get_widget_type(f) == BWN_OUTPUT )\n        {\n          TPopupMenu *p = va_arg(va, TPopupMenu *);\n          ht_output_plugin_t *plgmod = (ht_output_plugin_t *) ud;\n          plgmod-&gt;selected_data.qclear();\n          if ( get_output_selected_text(&amp;plgmod-&gt;selected_data) )\n          {\n            action_desc_t desc = DYNACTION_DESC_LITERAL(\n                    \"Print selection\",\n                    new printsel_ah_t(plgmod),\n                    nullptr, nullptr, -1);\n            attach_dynamic_action_to_popup(nullptr, p, desc);\n          }\n          plgmod-&gt;desc_notification(\"msg_popup\");\n        }\n      }\n      break;\n  }\n  return 0;\n}\n\n//---------------------------------------------------------------------------\nht_output_plugin_t::~ht_output_plugin_t()\n{\n  unhook_from_notification_point(HT_UI, ui_callback, this);\n}\n\n//---------------------------------------------------------------------------\n// Callback for view notifications\nssize_t idaapi ht_output_plugin_t::on_event(\n        ssize_t notification_code,\n        va_list va)\n{\n  switch ( notification_code )\n  {\n    case msg_activated:\n      desc_notification(\"msg_activated\");\n      break;\n    case msg_deactivated:\n      desc_notification(\"msg_deactivated\");\n      break;\n    case msg_keydown:\n      {\n        desc_notification(\"msg_keydown\");\n        int key = va_arg(va, int);\n        int state = va_arg(va, int);\n        form_msg(fa, \"Parameters: Key:%d(\\'%c\\') State:%d\\n\", key, key, state);\n      }\n      break;\n    case msg_click:\n    case msg_dblclick:\n      {\n        desc_notification(notification_code == msg_click ? \"msg_click\" : \"msg_dblclick\");\n        int px = va_arg(va, int);\n        int py = va_arg(va, int);\n        int state = va_arg(va, int);\n        qstring buf;\n        if ( get_output_curline(&amp;buf, false) )\n          form_msg(fa, \"Clicked string: %s\\n\", buf.c_str());\n        int cx,cy;\n        get_output_cursor(&amp;cx, &amp;cy);\n        msg(\"Parameters: x:%d, y:%d, state:%d\\n\", px, py, state);\n        msg(\"Cursor position:(%d, %d)\\n\", cx, cy);\n      }\n      break;\n    case msg_closed:\n      desc_notification(\"msg_closed\");\n  }\n  return 0;\n}\n\n//--------------------------------------------------------------------------\nstatic plugmod_t *idaapi init()\n{\n  return new ht_output_plugin_t;\n}\n\n//--------------------------------------------------------------------------\n// this callback is called when something happens in our editor form\nstatic int idaapi editor_modcb(int fid, form_actions_t &amp;f_actions)\n{\n  ht_output_plugin_t *plgmod = (ht_output_plugin_t *) f_actions.get_ud();\n  if ( fid == CB_INIT ) // Initialization\n  {\n    /* set callback for output window notifications */\n    hook_to_notification_point(HT_UI, ui_callback, plgmod);\n    hook_event_listener(HT_OUTPUT, plgmod, plgmod);\n    plgmod-&gt;fa = &amp;f_actions;\n  }\n  else if ( fid == CB_CLOSE )\n  {\n    unhook_event_listener(HT_OUTPUT, plgmod);\n    unhook_from_notification_point(HT_UI, ui_callback, plgmod);\n  }\n  return 1;\n}\n\n//--------------------------------------------------------------------------\nbool idaapi ht_output_plugin_t::run(size_t)\n{\n  static const char formdef[] =\n    \"BUTTON NO NONE\\n\"        // we do not want the standard buttons on the form\n    \"BUTTON YES NONE\\n\"\n    \"BUTTON CANCEL NONE\\n\"\n    \"Editor form\\n\"           // the form title. it is also used to refer to the form later\n    \"\\n\"\n    \"%/%*\"                    // placeholder for the 'editor_modcb' callback, and its userdata\n    \"&lt;Text:t1::40:::&gt;\\n\"      // text edit control\n    \"\\n\";\n\n  // structure for text edit control\n  textctrl_info_t ti;\n  ti.cb = sizeof(textctrl_info_t);\n  ti.text = \"\";\n\n  open_form(formdef, 0, editor_modcb, this, &amp;ti);\n  return true;\n}\n\nstatic const char wanted_name[] = \"HT_OUTPUT notifications handling example\";\nstatic const char wanted_hotkey[] = \"Ctrl-Alt-F11\";\n//--------------------------------------------------------------------------\nstatic const char comment[] = \"HT_OUTPUT notifications handling\";\nstatic const char help[] =\n        \"This pluging demonstrates handling of output window\\n\"\n        \"notifications: Activation/Desactivation, adding\\n\"\n        \"popup menus, keyboard and mouse events, changing of current\\n\"\n        \"cursor position and closing of view\\n\";\n\n//--------------------------------------------------------------------------\n//\n//      PLUGIN DESCRIPTION BLOCK\n//\n//--------------------------------------------------------------------------\nplugin_t PLUGIN =\n{\n  IDP_INTERFACE_VERSION,\n  PLUGIN_MULTI,         // plugin flags\n  init,                 // initialize\n  nullptr,\n  nullptr,\n  comment,              // long comment about the plugin\n                        // it could appear in the status line\n                        // or as a hint\n\n  help,                 // multiline help about the plugin\n\n  wanted_name,          // the preferred short name of the plugin\n  wanted_hotkey         // the preferred hotkey to run the plugin\n};\n</code></pre>"},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-examples.html#ht_view","title":"ht_view","text":"<p>This sample plugin demonstrates usage of the view callbacks and adding custom menu items to popup menus.</p> <pre><code>/*\n *  This is a sample plugin demonstrating usage of the view callbacks\n *  and adding custom menu items to popup menus\n *\n */\n\n#include &lt;ida.hpp&gt;\n#include &lt;idp.hpp&gt;\n#include &lt;loader.hpp&gt;\n#include &lt;kernwin.hpp&gt;\n#include &lt;bytes.hpp&gt;\n#include &lt;graph.hpp&gt;\n\n#define ACTION1_NAME \"ht_view:Act1\"\n#define ACTION2_NAME \"ht_view:Act2\"\n\n//-------------------------------------------------------------------------\nstruct ht_view_plugin_t : public plugmod_t, public event_listener_t\n{\n  bool hooked = false;\n\n  ht_view_plugin_t();\n  virtual ~ht_view_plugin_t();\n  virtual bool idaapi run(size_t arg) override;\n  virtual ssize_t idaapi on_event(ssize_t code, va_list va) override;\n\n  void desc_notification(\n        const char *notification_name,\n        TWidget *view) const;\n  void desc_mouse_event(\n        const view_mouse_event_t *event) const;\n};\n\n//---------------------------------------------------------------------------\n// Callback for ui notifications\nstatic ssize_t idaapi ui_callback(void *ud, int notification_code, va_list va)\n{\n  switch ( notification_code )\n  {\n    // called when IDA is preparing a context menu for a view\n    // Here dynamic context-depending user menu items can be added.\n    case ui_populating_widget_popup:\n      {\n        TWidget *view = va_arg(va, TWidget *);\n        if ( get_widget_type(view) == BWN_DISASM )\n        {\n          TPopupMenu *p = va_arg(va, TPopupMenu *);\n          ht_view_plugin_t *plgmod = (ht_view_plugin_t *) ud;\n          plgmod-&gt;desc_notification(\"view_popup\", view);\n          attach_action_to_popup(view, p, ACTION1_NAME);\n          attach_action_to_popup(view, p, ACTION2_NAME);\n        }\n      }\n      break;\n  }\n  return 0;\n}\n\n//-------------------------------------------------------------------------\nstruct ahandler_t : public action_handler_t\n{\n  bool first;\n  ahandler_t(bool _first) : first(_first) {}\n  virtual int idaapi activate(action_activation_ctx_t *) override\n  {\n    msg(\"User %s menu item is called\\n\", first ? \"first\" : \"second\");\n    return true;\n  }\n\n  virtual action_state_t idaapi update(action_update_ctx_t *) override\n  {\n    return AST_ENABLE_ALWAYS;\n  }\n};\nstatic ahandler_t ah1(true);\nstatic ahandler_t ah2(false);\n\n//--------------------------------------------------------------------------\nstatic plugmod_t *idaapi init()\n{\n  return new ht_view_plugin_t;\n}\n\n//-------------------------------------------------------------------------\nht_view_plugin_t::ht_view_plugin_t()\n{\n  // Register actions\n  const action_desc_t actions[] =\n  {\n#define ROW(name, label, handler) ACTION_DESC_LITERAL_PLUGMOD(name, label, handler, this, nullptr, nullptr, -1)\n    ROW(ACTION1_NAME, \"First ht_view's popup menu item\", &amp;ah1),\n    ROW(ACTION2_NAME, \"Second ht_view's popup menu item\", &amp;ah2),\n#undef ROW\n  };\n\n  for ( size_t i = 0, n = qnumber(actions); i &lt; n; ++i )\n    register_action(actions[i]);\n}\n\n//-------------------------------------------------------------------------\nht_view_plugin_t::~ht_view_plugin_t()\n{\n  unhook_from_notification_point(HT_UI, ui_callback, this);\n}\n\n//-------------------------------------------------------------------------\nbool idaapi ht_view_plugin_t::run(size_t)\n{\n  /* set callback for view notifications */\n  if ( !hooked )\n  {\n    hook_event_listener(HT_VIEW, this);\n    hook_to_notification_point(HT_UI, ui_callback, this);\n    hooked = true;\n    msg(\"HT_VIEW: installed view notification hook.\\n\");\n  }\n\n  return true;\n}\n\n//---------------------------------------------------------------------------\nssize_t idaapi ht_view_plugin_t::on_event(\n        ssize_t notification_code,\n        va_list va)\n{\n  TWidget *view = va_arg(va, TWidget *);\n  switch ( notification_code )\n  {\n    case view_activated:\n      desc_notification(\"view_activated\", view);\n      break;\n    case view_deactivated:\n      desc_notification(\"view_deactivated\", view);\n      break;\n    case view_keydown:\n      {\n        desc_notification(\"view_keydown\", view);\n        int key = va_arg(va, int);\n        int state = va_arg(va, int);\n        msg(\"Parameters: Key:%d(\\'%c\\') State:%d\\n\", key, key, state);\n      }\n      break;\n    case view_click:\n    case view_dblclick:\n      {\n        desc_notification(notification_code == view_click ? \"view_click\" : \"view_dblclick\", view);\n        desc_mouse_event(va_arg(va, view_mouse_event_t*));\n        int cx,cy;\n        get_cursor(&amp;cx, &amp;cy);\n        msg(\"Cursor position:(%d, %d)\\n\", cx, cy);\n      }\n      break;\n    case view_curpos:\n      {\n        desc_notification(\"view_curpos\", view);\n        if ( is_idaview(view) )\n        {\n          char buf[MAXSTR];\n          ea2str(buf, sizeof(buf), get_screen_ea());\n          msg(\"New address: %s\\n\", buf);\n        }\n      }\n      break;\n    case view_mouse_over:\n      {\n        desc_notification(\"view_mouse_over\", view);\n        desc_mouse_event(va_arg(va, view_mouse_event_t*));\n      }\n      break;\n    case view_close:\n      desc_notification(\"view_close\", view);\n  }\n  return 0;\n}\n\n//-------------------------------------------------------------------------\nvoid ht_view_plugin_t::desc_notification(\n        const char *notification_name,\n        TWidget *view) const\n{\n  qstring buffer;\n  get_widget_title(&amp;buffer, view);\n  msg(\"Received notification from view %s: \\\"%s\\\"\\n\",\n      buffer.c_str(),\n      notification_name);\n}\n\n//-------------------------------------------------------------------------\nvoid ht_view_plugin_t::desc_mouse_event(\n        const view_mouse_event_t *event) const\n{\n  int px = event-&gt;x;\n  int py = event-&gt;y;\n  int state = event-&gt;state;\n  qstring over_txt;\n  const selection_item_t *item = event-&gt;location.item;\n  if ( event-&gt;rtype != TCCRT_FLAT &amp;&amp; item != nullptr )\n  {\n    if ( item-&gt;is_node )\n      over_txt.sprnt(\"node %d\", item-&gt;node);\n    else\n      over_txt.sprnt(\"edge %d -&gt; %d\", item-&gt;elp.e.src, item-&gt;elp.e.dst);\n  }\n  else\n  {\n    over_txt = \"(nothing)\";\n  }\n  msg(\"Parameters: x:%d, y:%d, state:%d, over:%s\\n\", px, py, state, over_txt.c_str());\n}\n\n\n//-------------------------------------------------------------------------\nstatic const char wanted_name[] = \"HT_VIEW notification handling example\";\nstatic const char wanted_hotkey[] = \"\";\n//--------------------------------------------------------------------------\nstatic const char comment[] = \"HT_VIEW notification Handling\";\nstatic const char help[] =\n        \"This pluging demonstrates handling of custom and IdaView\\n\"\n        \"notifications: Activation/Desactivation of views, adding\\n\"\n        \"popup menus, keyboard and mouse events, changing of current\\n\"\n        \"address and closing of view\\n\";\n\n//--------------------------------------------------------------------------\n//\n//      PLUGIN DESCRIPTION BLOCK\n//\n//--------------------------------------------------------------------------\nplugin_t PLUGIN =\n{\n  IDP_INTERFACE_VERSION,\n  PLUGIN_MULTI,         // plugin flags\n  init,                 // initialize\n  nullptr,\n  nullptr,\n  comment,              // long comment about the plugin\n                        // it could appear in the status line\n                        // or as a hint\n\n  help,                 // multiline help about the plugin\n\n  wanted_name,          // the preferred short name of the plugin\n  wanted_hotkey         // the preferred hotkey to run the plugin\n};\n</code></pre>"},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-examples.html#mtsample","title":"mtsample","text":"<p>Sample multi-threaded plugin module.</p> <pre><code>/*\n *  This is a sample multi-threaded plugin module\n *\n *  It creates 3 new threads. Each threads sleeps and prints a message in a loop\n *\n */\n\n#ifdef __NT__\n#include &lt;windows.h&gt;\n#endif\n\n#include &lt;ida.hpp&gt;\n#include &lt;idp.hpp&gt;\n#include &lt;loader.hpp&gt;\n#include &lt;kernwin.hpp&gt;\n\n#ifdef __NT__\n#include &lt;windows.h&gt;\n#endif\n\n\n//--------------------------------------------------------------------------\nstruct plugin_ctx_t : public plugmod_t\n{\n  qthread_t children[10] = { nullptr };\n  int nchilds = 0;\n\n  ~plugin_ctx_t() { term(); }\n  void term()\n  {\n    if ( nchilds &gt; 0 )\n    {\n      msg(\"Killing all threads\\n\");\n      for ( int i=0; i &lt; nchilds; i++ )\n      {\n        qthread_kill(children[i]);\n        qthread_join(children[i]);\n        // cancel all pending requests from the killed thread\n        cancel_thread_exec_requests(children[i]);\n        qthread_free(children[i]);\n      }\n      msg(\"Killed all threads\\n\");\n      nchilds = 0;\n    }\n  }\n  virtual bool idaapi run(size_t) override;\n};\n\n//--------------------------------------------------------------------------\nstatic void say_hello(size_t id, qthread_t tid, int cnt)\n{\n  struct ida_local hello_t : public exec_request_t\n  {\n    uint64 nsecs;\n    size_t id;\n    qthread_t tid;\n    int cnt;\n    int idaapi execute(void) override\n    {\n      uint64 now = get_nsec_stamp();\n      int64 delay = now - nsecs;\n      msg(\"Hello %d from thread %\" FMT_Z \". tid=%p. current tid=%p (delay=%\" FMT_64 \"d)\\n\",\n          cnt, id, tid, qthread_self(), delay);\n      return 0;\n    }\n    hello_t(size_t _id, qthread_t _tid, int _cnt) : id(_id), tid(_tid), cnt(_cnt)\n    {\n      nsecs = get_nsec_stamp();\n    }\n  };\n  hello_t hi(id, tid, cnt);\n\n  int mff;\n  switch ( id % 3 )\n  {\n    case 0: mff = MFF_FAST;  break;\n    case 1: mff = MFF_READ;  break;\n    default:\n    case 2: mff = MFF_WRITE; break;\n  }\n  execute_sync(hi, mff);\n}\n\n//--------------------------------------------------------------------------\nstatic int idaapi thread_func(void *ud)\n{\n  size_t id = (size_t)ud;\n  qthread_t tid = qthread_self();\n  int cnt = 0;\n  srand(id ^ (size_t)tid);\n  while ( true )\n  {\n    say_hello(id, tid, cnt++);\n    int r = rand() % 1000;\n    qsleep(r);\n  }\n  return 0;\n}\n\n//--------------------------------------------------------------------------\nbool idaapi plugin_ctx_t::run(size_t)\n{\n  if ( nchilds == 0 )\n  {\n    children[nchilds] = qthread_create(thread_func, (void *)(ssize_t)nchilds); nchilds++;\n    children[nchilds] = qthread_create(thread_func, (void *)(ssize_t)nchilds); nchilds++;\n    children[nchilds] = qthread_create(thread_func, (void *)(ssize_t)nchilds); nchilds++;\n    msg(\"Three new threads have been created. Main thread id %p\\n\", qthread_self());\n    for ( int i=0; i &lt; 5; i++ )\n      say_hello(-1, 0, 0);\n  }\n  else\n  {\n    term();\n  }\n  return true;\n}\n\n//--------------------------------------------------------------------------\nstatic plugmod_t *idaapi init()\n{\n  return new plugin_ctx_t;\n}\n\n//--------------------------------------------------------------------------\nplugin_t PLUGIN =\n{\n  IDP_INTERFACE_VERSION,\n  PLUGIN_MULTI,         // The plugin can work with multiple idbs in parallel\n  init,                 // initialize\n  nullptr,\n  nullptr,\n  nullptr,              // long comment about the plugin\n  nullptr,              // multiline help about the plugin\n  \"Multi-threaded sample\", // the preferred short name of the plugin\n  nullptr,              // the preferred hotkey to run the plugin\n};\n</code></pre>"},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-examples.html#navcolor","title":"navcolor","text":"<p>This sample plugin demonstrates how to customize navigation band colors.</p> <pre><code>/*\n *  This plugin demonstrates how to customize navigation band colors.\n *  Launch the plugin like so:\n *    - to install: ida_loader.load_and_run_plugin(\"navcolor\", 1)\n *    - to uninstall: ida_loader.load_and_run_plugin(\"navcolor\", 0)\n */\n\n#include &lt;ida.hpp&gt;\n#include &lt;idp.hpp&gt;\n#include &lt;loader.hpp&gt;\n#include &lt;kernwin.hpp&gt;\n\n\n//--------------------------------------------------------------------------\nstruct plugin_ctx_t : public plugmod_t\n{\n  nav_colorizer_t *old_col_fun = nullptr;\n  void *old_col_ud = nullptr;\n  bool installed = false;\n\n  //lint -esym(1540, plugin_ctx_t::old_col_fun, plugin_ctx_t::old_col_ud)\n  ~plugin_ctx_t()\n  {\n    // uninstall our callback for navigation band, otherwise ida will crash\n    maybe_uninstall();\n  }\n  virtual bool idaapi run(size_t) override;\n\n  bool maybe_install();\n  bool maybe_uninstall();\n};\n\n//--------------------------------------------------------------------------\nbool idaapi plugin_ctx_t::run(size_t code)\n{\n  return code == 1 ? maybe_install() : maybe_uninstall();\n}\n\n//--------------------------------------------------------------------------\n// Callback that calculates the pixel color given the address and the number of bytes\nstatic uint32 idaapi my_colorizer(ea_t ea, asize_t nbytes, void *ud)\n{\n  plugin_ctx_t &amp;ctx = *(plugin_ctx_t *)ud;\n  // you are at your own here. just for the sake of illustrating how things work\n  // we will invert all colors\n  uint32 color = ctx.old_col_fun(ea, nbytes, ctx.old_col_ud);\n  return ~color;\n}\n\n//-------------------------------------------------------------------------\nbool plugin_ctx_t::maybe_install()\n{\n  bool ok = !installed;\n  if ( ok )\n  {\n    set_nav_colorizer(&amp;old_col_fun, &amp;old_col_ud, my_colorizer, this);\n    installed = true;\n  }\n  return ok;\n}\n\n//-------------------------------------------------------------------------\nbool plugin_ctx_t::maybe_uninstall()\n{\n  bool ok = installed;\n  if ( ok )\n  {\n    set_nav_colorizer(nullptr, nullptr, old_col_fun, old_col_ud);\n    installed = false;\n  }\n  return ok;\n}\n\n//--------------------------------------------------------------------------\n// initialize the plugin\nstatic plugmod_t *idaapi init()\n{\n  return new plugin_ctx_t;\n}\n\n//--------------------------------------------------------------------------\nplugin_t PLUGIN =\n{\n  IDP_INTERFACE_VERSION,\n  PLUGIN_MULTI,         // The plugin can work with multiple idbs in parallel\n  init,                 // initialize\n  nullptr,\n  nullptr,\n  nullptr,              // long comment about the plugin\n  nullptr,              // multiline help about the plugin\n  \"Modify navigation band colors\",// the preferred short name of the plugin\n  nullptr,              // the preferred hotkey to run the plugin\n};\n</code></pre>"},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-examples.html#openform","title":"openform","text":"<p>This plugin demonstrates how to use non modal forms.</p> <pre><code>/*\n *  This plugin demonstrates how to use non modal forms.\n *  It creates 2 windows on the screen:\n *      - a window with 4 buttons: dock, undock, show, hide      (CONTROL FORM)\n *      - a window with a text edit control and a list control   (EDITOR FORM)\n *  The buttons of the first window can be used to manage the second window.\n *  We will call the first window 'CONTROL FORM' and the second window 'EDITOR\n *  FORM', just to be able to reference them easily.\n */\n\n#include &lt;ida.hpp&gt;\n#include &lt;idp.hpp&gt;\n#include &lt;loader.hpp&gt;\n#include &lt;kernwin.hpp&gt;\n\n//---------------------------------------------------------------------------\n// chooser (list view) items\nstatic const char *const names[] =\n{\n  \"Item one\",\n  \"Item two\",\n  \"Item three\"\n};\n\n//--------------------------------------------------------------------------\nstruct plugin_ctx_t : public plugmod_t\n{\n  // the editor form\n  TWidget *editor_widget = nullptr;\n\n  // contents of the text field for each item\n  qstring txts[qnumber(names)] =\n  {\n    \"Text one:\\n This is text for item one\",\n    \"Text two:\\n And this is text for item two\",\n    \"Text three:\\n And finally text for the last item\"\n  };\n\n  // Current index for chooser list view\n  size_t curidx = 0;\n  // Form actions for control dialog\n  form_actions_t *control_fa = nullptr;\n  // Defines where to place new/existing editor window\n  bool dock = false;\n\n  virtual bool idaapi run(size_t) override;\n\n  int editor_modcb(int fid, form_actions_t &amp;fa);\n  void open_editor_form(int options = 0);\n  void close_editor_form();\n  int control_modcb(int fid, form_actions_t &amp;fa);\n  void update_buttons(form_actions_t &amp;fa);\n};\n\n//---------------------------------------------------------------------------\nstruct of_chooser_t : public chooser_t\n{\npublic:\n  // this object must be allocated using `new`\n  // as it used in the non-modal form\n  of_chooser_t() : chooser_t()\n  {\n    columns = 1;\n    static const int widths_[] = { 12 };\n    static const char *const header_[] = { \"Name\" };\n    widths = widths_;\n    header = header_;\n  }\n\n  virtual size_t idaapi get_count() const override { return qnumber(names); }\n  virtual void idaapi get_row(\n        qstrvec_t *cols,\n        int *,\n        chooser_item_attrs_t *,\n        size_t n) const override\n  {\n    (*cols)[0] = names[n];\n  }\n};\n\n// Form actions for editor window\nenum editor_form_actions\n{\n  TEXT_CHANGED  = 1,\n  ITEM_SELECTED = 2,\n};\n\n// Form actions for control window\nenum control_form_actions\n{\n  BTN_DOCK   = 10,\n  BTN_UNDOCK = 11,\n  BTN_OPEN   = 12,\n  BTN_CLOSE  = 13,\n};\n\n//--------------------------------------------------------------------------\ninline void enable_button(form_actions_t &amp;fa, int fid, bool enabled)\n{\n  fa.enable_field(fid, enabled);\n}\n\n//--------------------------------------------------------------------------\n// Update control window buttons state\nvoid plugin_ctx_t::update_buttons(form_actions_t &amp;fa)\n{\n  bool visible = editor_widget != nullptr;\n  enable_button(fa, 10, !dock &amp;&amp; visible);\n  enable_button(fa, 11, dock &amp;&amp; visible);\n  enable_button(fa, 12, !visible);\n  enable_button(fa, 13, visible);\n}\n\n//--------------------------------------------------------------------------\n// this callback is called when the user clicks on a button\nstatic int idaapi btn_cb(int, form_actions_t &amp;)\n{\n  msg(\"button has been pressed -&gt; \\n\");\n  return 0;\n}\n\n//--------------------------------------------------------------------------\n// this callback is called when something happens in our non-modal editor form\nstatic int idaapi editor_modcb_(int fid, form_actions_t &amp;fa)\n{\n  plugin_ctx_t &amp;ctx = *(plugin_ctx_t *)fa.get_ud();\n  return ctx.editor_modcb(fid, fa);\n}\nint plugin_ctx_t::editor_modcb(int fid, form_actions_t &amp;fa)\n{\n  switch ( fid )\n  {\n    case CB_INIT:     // Initialization\n      msg(\"init editor form\\n\");\n      break;\n    case CB_CLOSE:    // Closing the form\n      msg(\"closing editor form\\n\");\n      // mark the form as closed\n      editor_widget = nullptr;\n      // If control form exists then update buttons\n      if ( control_fa != nullptr )\n        update_buttons(*control_fa);\n      break;\n    case TEXT_CHANGED:     // Text changed\n      {\n        textctrl_info_t ti;\n        fa.get_text_value(1, &amp;ti);\n        txts[curidx] = ti.text;\n      }\n      msg(\"text has been changed\\n\");\n      break;\n    case ITEM_SELECTED:    // list item selected\n      {\n        sizevec_t sel;\n        if ( fa.get_chooser_value(2, &amp;sel) )\n        {\n          curidx = sel[0];\n          textctrl_info_t ti;\n          ti.cb = sizeof(textctrl_info_t);\n          ti.text = txts[curidx];\n          fa.set_text_value(1, &amp;ti);\n        }\n      }\n      msg(\"selection has been changed\\n\");\n      break;\n    default:\n      msg(\"unknown id %d\\n\", fid);\n      break;\n  }\n  return 1;\n}\n//---------------------------------------------------------------------------\n// create and open the editor form\nvoid plugin_ctx_t::open_editor_form(int options)\n{\n  static const char formdef[] =\n    \"BUTTON NO NONE\\n\"        // we do not want the standard buttons on the form\n    \"BUTTON YES NONE\\n\"\n    \"BUTTON CANCEL NONE\\n\"\n    \"Editor form\\n\"           // the form title. it is also used to refer to the form later\n    \"\\n\"\n    \"%/%*\"                    // placeholder for the 'editor_modcb' callback\n    \"\\n\"\n    \"&lt;List:E2::30:1::&gt;&lt;|&gt;&lt;Text:t1::60:::&gt;\\n\" // text edit control and chooser control separated by splitter\n    \"\\n\";\n  // structure for text edit control\n  textctrl_info_t ti;\n  ti.cb = sizeof(textctrl_info_t);\n  ti.text = txts[0];\n  // structure for chooser list view\n  of_chooser_t *ofch = new of_chooser_t();\n  // selection for chooser list view\n  sizevec_t selected;\n  selected.push_back(0);  // first item by default\n  editor_widget = open_form(formdef,\n                            options,\n                            editor_modcb_, this,\n                            ofch, &amp;selected,\n                            &amp;ti);\n} //lint !e429 custodial pointer 'ofch' likely not freed nor returned\n\n\n//---------------------------------------------------------------------------\nvoid plugin_ctx_t::close_editor_form()\n{\n  msg(\"closing editor widget\\n\");\n  close_widget(editor_widget, WCLS_CLOSE_LATER);\n  editor_widget = nullptr;\n}\n//--------------------------------------------------------------------------\ninline void dock_form(bool _dock)\n{\n  set_dock_pos(\"Editor form\",\n               \"IDA View-A\",\n               _dock ? DP_TAB : DP_FLOATING);\n}\n\n//--------------------------------------------------------------------------\n// this callback is called when something happens in our non-modal control form\nstatic int idaapi control_modcb_(int fid, form_actions_t &amp;fa)\n{\n  plugin_ctx_t &amp;ctx = *(plugin_ctx_t *)fa.get_ud();\n  return ctx.control_modcb(fid, fa);\n}\nint plugin_ctx_t::control_modcb(int fid, form_actions_t &amp;fa)\n{\n  switch ( fid )\n  {\n    case CB_INIT:   // Initialization\n      msg(\"init control form\\n\");\n      dock = false;\n      control_fa = &amp;fa;   // remember the 'fa' for the future\n      break;\n    case CB_CLOSE:  // Closing\n      msg(\"closing control form\\n\");\n      control_fa = nullptr;\n      return 1;\n    case BTN_DOCK:\n      msg(\"dock editor form\\n\");\n      dock = true;\n      dock_form(dock);\n      break;\n    case BTN_UNDOCK:\n      msg(\"undock editor form\\n\");\n      dock = false;\n      dock_form(dock);\n      break;\n    case BTN_OPEN:\n      msg(\"open editor form\\n\");\n      open_editor_form(WOPN_DP_TAB|WOPN_RESTORE);\n      dock_form(dock);\n      break;\n    case BTN_CLOSE:\n      close_editor_form();\n      break;\n    default:\n      msg(\"unknown id %d\\n\", fid);\n      return 1;\n  }\n  update_buttons(fa);\n  return 1;\n}\n\n//--------------------------------------------------------------------------\n// the main function of the plugin\nbool idaapi plugin_ctx_t::run(size_t)\n{\n  // first open the editor form\n  open_editor_form(WOPN_RESTORE);\n\n  static const char control_form[] =\n    \"BUTTON NO NONE\\n\"          // do not display standard buttons at the bottom\n    \"BUTTON YES NONE\\n\"\n    \"BUTTON CANCEL NONE\\n\"\n    \"Control form\\n\"            // the title. it is used to refer to the form later\n    \"%/%*\"                      // placeholder for control_modcb\n    \"&lt;Dock:B10:30:::&gt;&lt;Undock:B11:30:::&gt;&lt;Show:B12:30:::&gt;&lt;Hide:B13:30:::&gt;\\n\"; // Create control buttons\n\n  open_form(control_form,\n            WOPN_RESTORE,\n            control_modcb_, this,\n            btn_cb, btn_cb, btn_cb, btn_cb);\n  set_dock_pos(\"Control form\", nullptr, DP_FLOATING, 0, 0, 300, 100);\n  return true;\n}\n\n//--------------------------------------------------------------------------\n// initialize the plugin\nstatic plugmod_t *idaapi init()\n{\n  return new plugin_ctx_t;\n}\n\n//--------------------------------------------------------------------------\nplugin_t PLUGIN =\n{\n  IDP_INTERFACE_VERSION,\n  PLUGIN_MULTI,         // The plugin can work with multiple idbs in parallel\n  init,\n  nullptr,\n  nullptr,\n  nullptr,\n  nullptr,\n  \"Open non-modal form sample\",// the preferred short name of the plugin\n  nullptr,\n};\n</code></pre>"},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-examples.html#procext","title":"procext","text":"<p>Sample plugin that extends the IBM PC processor module to disassemble some NEC V20 instructions.</p> <pre><code>/*\n *  This is a sample plugin module\n *  It extends the IBM PC processor module to disassemble some NEC V20 instructions\n *  This is a sample file, it supports just two instructions!\n *\n */\n\n#include &lt;ida.hpp&gt;\n#include &lt;idp.hpp&gt;\n#include &lt;bytes.hpp&gt;\n#include &lt;loader.hpp&gt;\n#include &lt;kernwin.hpp&gt;\n\nint data_id;\n\n//--------------------------------------------------------------------------\n// Context data for the plugin. This object is created by the init()\n// function and hold all local data.\nstruct plugin_ctx_t : public plugmod_t, public event_listener_t\n{\n  ea_t ea = 0; // current address within the instruction\n\n  netnode nec_node;\n  bool hooked = false;\n\n  plugin_ctx_t();\n  ~plugin_ctx_t();\n\n  // This function is called when the user invokes the plugin.\n  virtual bool idaapi run(size_t) override;\n  // This function is called upon some events.\n  virtual ssize_t idaapi on_event(ssize_t code, va_list va) override;\n\n  size_t ana(insn_t &amp;insn);\n  void process_rm(insn_t &amp;insn, op_t &amp;x, uchar postbyte);\n};\n\nstatic const char node_name[] = \"$ sample NEC processor extender parameters\";\n\n\n// Some definitions from IBM PC:\n\n#define segrg specval_shorts.high  // IBM PC expects the segment address\n                                   // to be here\n#define aux_short       0x0020  // short (byte) displacement used\n#define aux_basess      0x0200  // SS based instruction\n\n#define R_ss  18\n#define R_ds  19\n//--------------------------------------------------------------------------\n// This plugin supports just 2 instructions:\n// Feel free to add more...\n\n// 0FH 20H                      ADD4S       ; Addition for packed BCD strings\n// 0FH 12H Postbyte     CLEAR1  reg/mem8,CL ; Clear one bit\n\nenum nec_insn_type_t\n{\n  NEC_add4s = CUSTOM_INSN_ITYPE,\n  NEC_clear1,\n};\n\n//----------------------------------------------------------------------\nstatic int get_dataseg(insn_t &amp;insn, int defseg)\n{\n  if ( defseg == R_ss )\n    insn.auxpref |= aux_basess;\n  return defseg;\n}\n\n//--------------------------------------------------------------------------\n//\n//              process r/m byte of the instruction\n//\nvoid plugin_ctx_t::process_rm(insn_t &amp;insn, op_t &amp;x, uchar postbyte)\n{\n  int Mod = (postbyte &gt;&gt; 6) &amp; 3;\n  x.reg = postbyte &amp; 7;\n  if ( Mod == 3 )               // register\n  {\n    if ( x.dtype == dt_byte )\n      x.reg += 8;\n    x.type = o_reg;\n  }\n  else                          // memory\n  {\n    if ( Mod == 0 &amp;&amp; x.reg == 6 )\n    {\n      x.type = o_mem;\n      x.offb = uchar(ea-insn.ea);\n      x.addr = get_word(ea); ea+=2;\n      x.segrg = (uint16)get_dataseg(insn, R_ds);\n    }\n    else\n    {\n      x.type = o_phrase;        // x.phrase contains the base register\n      x.addr = 0;\n      int reg = (x.phrase == 2 || x.phrase == 3 || x.phrase == 6) ? R_ss : R_ds;\n      x.segrg = (uint16)get_dataseg(insn, reg);\n                                // [bp+si],[bp+di],[bp] by SS\n      if ( Mod != 0 )\n      {\n        x.type = o_displ;       // i.e. phrase + offset\n        x.offb = uchar(ea-insn.ea);\n        if ( Mod == 1 )\n        {\n          x.addr = char(get_byte(ea++));\n          insn.auxpref |= aux_short;\n        }\n        else\n        {\n          x.addr = get_word(ea); ea+=2;\n        }\n      }\n    }\n  }\n}\n\n//--------------------------------------------------------------------------\n// Analyze an instruction and fill the 'insn' structure\nsize_t plugin_ctx_t::ana(insn_t &amp;insn)\n{\n  int code = get_byte(ea++);\n  if ( code != 0x0F )\n    return 0;\n  code = get_byte(ea++);\n  switch ( code )\n  {\n    case 0x20:\n      insn.itype = NEC_add4s;\n      return 2;\n    case 0x12:\n      insn.itype = NEC_clear1;\n      {\n        uchar postbyte = get_byte(ea++);\n        process_rm(insn, insn.Op1, postbyte);\n        insn.Op2.type = o_reg;\n        insn.Op2.reg  = 9; // 9 is CL for IBM PC\n        return size_t(ea - insn.ea);\n      }\n    default:\n      return 0;\n  }\n}\n\n//--------------------------------------------------------------------------\n// Return the instruction mnemonics\nconst char *get_insn_mnem(const insn_t &amp;insn)\n{\n  if ( insn.itype == NEC_add4s )\n    return \"add4s\";\n  return \"clear1\";\n}\n\n//--------------------------------------------------------------------------\n// This function can be hooked to various kernel events.\n// In this particular plugin we hook to the HT_IDP group.\n// As soon the kernel needs to decode and print an instruction, it will\n// generate some events that we intercept and provide our own response.\n//\n// We extend the processor module to disassemble opcode 0x0F\n// (This is a hypothetical example)\n// There are 2 different possible approaches for the processor extensions:\n//  A. Quick &amp; dirty\n//       Implement reaction to ev_ana_insn and ev_out_insn.\n//       The first checks if the instruction is valid.\n//       The second generates its text.\n//  B. Thourough and clean\n//       Implement all relevant callbacks.\n//       ev_ana_insn fills the 'insn' structure.\n//       ev_emu_insn creates all xrefs using ua_add_[cd]ref functions.\n//       ev_out_insn generates the textual representation of the instruction.\n//          It is required only if the instruction requires special processing\n//          or the processor module cannot handle the custom instruction for\n//          any reason.\n//       ev_out_operand generates the operand representation (only if the\n//          operand requires special processing).\n//       ev_out_mnem generates the instruction mnemonics.\n// The main difference between these 2 approaches is in the creation of\n// cross-references and the amount of special processing required by the\n// new instructions.\n\n// The quick &amp; dirty approach.\n// We just produce the instruction mnemonics along with its operands.\n// No cross-references are created. No special processing.\nssize_t idaapi plugin_ctx_t::on_event(ssize_t code, va_list va)\n{\n  switch ( code )\n  {\n    case processor_t::ev_ana_insn:\n      {\n        insn_t *insn = va_arg(va, insn_t *);\n        ea = insn-&gt;ea;\n        size_t length = ana(*insn);\n        if ( length )\n        {\n          insn-&gt;size = (uint16)length;\n          return insn-&gt;size;       // event processed\n        }\n      }\n      break;\n    case processor_t::ev_out_mnem:\n      {\n        outctx_t *ctx = va_arg(va, outctx_t *);\n        const insn_t &amp;insn = ctx-&gt;insn;\n        if ( insn.itype &gt;= CUSTOM_INSN_ITYPE )\n        {\n          ctx-&gt;out_line(get_insn_mnem(insn), COLOR_INSN);\n          return 1;\n        }\n      }\n      break;\n#ifdef ENABLE_MERGE\n#endif\n    case processor_t::ev_privrange_changed:\n      // recreate node as it was migrated\n      if ( nec_node != BADNODE )\n        nec_node.create(node_name);\n      break;\n  }\n  return 0;                     // event is not processed\n}\n\n//--------------------------------------------------------------------------\n// Initialize the plugin.\n// IDA will call this function only once.\n// If this function returns nullptr, IDA will unload the plugin.\n// Otherwise the plugin returns a pointer to a newly created context structure.\n//\n// In this example we check the processor type and make the decision.\n// You may or may not check any other conditions to decide what you do:\n// whether your plugin wants to work with the database or not.\n\nstatic plugmod_t *idaapi init()\n{\n  processor_t &amp;ph = PH;\n  if ( ph.id != PLFM_386 )\n    return nullptr;\n  auto plugmod = new plugin_ctx_t;\n  set_module_data(&amp;data_id, plugmod);\n  return plugmod;\n}\n\n//-------------------------------------------------------------------------\nplugin_ctx_t::plugin_ctx_t()\n{\n  nec_node.create(node_name);\n  hooked = nec_node.altval(0) != 0;\n  if ( hooked )\n  {\n    hook_event_listener(HT_IDP, this);\n    msg(\"NEC V20 processor extender is enabled\\n\");\n  }\n}\n\n//--------------------------------------------------------------------------\n// Terminate the plugin.\n// This destructor will be called before unloading the plugin.\nplugin_ctx_t::~plugin_ctx_t()\n{\n  clr_module_data(data_id);\n  // listeners are uninstalled automatically\n  // when the owner module is unloaded\n}\n\n//--------------------------------------------------------------------------\n// The plugin method\n// This is the main function of plugin.\n// It will be called when the user selects the plugin from the menu.\n// The input argument is usually zero. Non-zero values can be specified\n// by using load_and_run_plugin() or through plugins.cfg file (discouraged).\nbool idaapi plugin_ctx_t::run(size_t)\n{\n  if ( hooked )\n    unhook_event_listener(HT_IDP, this);\n  else\n    hook_event_listener(HT_IDP, this);\n  hooked = !hooked;\n  nec_node.create(node_name);\n  nec_node.altset(0, hooked);\n  info(\"AUTOHIDE NONE\\n\"\n       \"NEC V20 processor extender now is %s\", hooked ? \"enabled\" : \"disabled\");\n  return true;\n}\n\n//--------------------------------------------------------------------------\nstatic const char comment[] = \"NEC V20 processor extender\";\nstatic const char help[] =\n  \"A sample plugin module\\n\"\n  \"\\n\"\n  \"This module shows you how to create plugin modules.\\n\"\n  \"\\n\"\n  \"It supports some NEC V20 instructions\\n\"\n  \"and shows the current address.\\n\";\n\n//--------------------------------------------------------------------------\n// This is the preferred name of the plugin module in the menu system\n// The preferred name may be overridden in plugins.cfg file\n\nstatic const char desired_name[] = \"NEC V20 processor extender\";\n\n// This is the preferred hotkey for the plugin module\n// The preferred hotkey may be overridden in plugins.cfg file\n\nstatic const char desired_hotkey[] = \"\";\n\n//--------------------------------------------------------------------------\n//\n//      PLUGIN DESCRIPTION BLOCK\n//\n//--------------------------------------------------------------------------\nplugin_t PLUGIN =\n{\n  IDP_INTERFACE_VERSION,\n  PLUGIN_PROC           // this is a processor extension plugin\n| PLUGIN_MULTI,         // this plugin can work with multiple idbs in parallel\n  init,                 // initialize\n  nullptr,\n  nullptr,\n  comment,              // long comment about the plugin. not used.\n  help,                 // multiline help about the plugin. not used.\n  desired_name,         // the preferred short name of the plugin\n  desired_hotkey        // the preferred hotkey to run the plugin\n};\n</code></pre>"},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-examples.html#ui_requests","title":"ui_requests","text":"<p>This plugin demonstrates the UI requests and the process_ui_action()</p> <pre><code>/*\n* This is a sample plugin to demonstrate the UI requests and the process_ui_action()\n* One process_ui_action() can be processed during an UI request.\n* The UI request is a nice example to show how to schedule UI actions for sequential execution\n*/\n\n#include &lt;ida.hpp&gt;\n#include &lt;idp.hpp&gt;\n#include &lt;graph.hpp&gt;\n#include &lt;loader.hpp&gt;\n#include &lt;kernwin.hpp&gt;\n\n\n//--------------------------------------------------------------------------\nstruct plugin_ctx_t : public plugmod_t\n{\n  int req_id = 0;\n\n  ~plugin_ctx_t()\n  {\n    if ( req_id != 0 &amp;&amp; cancel_exec_request(req_id) )\n      msg(\"Cancelled unexecuted ui_request\\n\");\n  }\n\n  virtual bool idaapi run(size_t) override;\n};\n\n//--------------------------------------------------------------------------\nbool idaapi plugin_ctx_t::run(size_t)\n{\n  class msg_req_t: public ui_request_t\n  {\n    const char *_msg;\n  public:\n    msg_req_t(const char *mesg): _msg(qstrdup(mesg)) {}\n    ~msg_req_t() { qfree((void *)_msg); }\n    virtual bool idaapi run() override\n    {\n      msg(\"%s\", _msg);\n      return false;\n    }\n  };\n\n  class msgs_req_t: public ui_request_t\n  {\n    int count;\n  public:\n    msgs_req_t(int cnt): count(cnt) {}\n    virtual bool idaapi run() override\n    {\n      msg(\"%d\\n\", count);\n      return --count != 0;\n    }\n  };\n\n  req_id = execute_ui_requests(\n    new msg_req_t(\"print \"),\n    new msg_req_t(\"3 countdown \"),\n    new msg_req_t(\"mesages:\\n\"),\n    new msgs_req_t(3),\n    nullptr);\n  return true;\n}\n\n\n//--------------------------------------------------------------------------\nstatic plugmod_t *idaapi init()\n{\n  return new plugin_ctx_t;\n}\n\n//--------------------------------------------------------------------------\n//\n//      PLUGIN DESCRIPTION BLOCK\n//\n//--------------------------------------------------------------------------\nplugin_t PLUGIN =\n{\n  IDP_INTERFACE_VERSION,\n  PLUGIN_MULTI,         // The plugin can work with multiple idbs in parallel\n  init,                 // initialize\n  nullptr,\n  nullptr,\n  \"This is a sample ui_requests plugin.\",\n                        // long comment about the plugin\n  \"A sample ui_requests and process_ui_commands plugin\",\n                        // multiline help about the plugin\n  \"UI requests demo\",   // the preferred short name of the plugin\n  \"Shift-F8\"            // the preferred hotkey to run the plugin\n};\n</code></pre>"},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-examples.html#more-plugin-samples","title":"More plugin samples","text":"<p>We encourage you to browse the <code>plugins</code> folder inside the SDK directory to check out all of examples, including more complex and advances ones, like FindCrypt program, that finds constants used in crypto algorithms, or qproject, that demonstrates how to fully use the Qt environment in IDA.</p>"},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-examples.html#modules-samples","title":"Modules samples","text":"<p>The <code>modules</code> folder contains sample processor modules, that are used to add support for new instruction sets or architectures to IDA. Inside the README file you will find instructions on how to compile and run the modules.</p> <p>If you are going to write a new processor module, it's recommended to follow the below steps:</p> <ol> <li>copy the sample module files to a new directory</li> <li>edit <code>ins.cpp</code> and <code>ins.hpp</code> files</li> <li>write the analyser <code>ana.cpp</code></li> <li>then outputter</li> <li>and emulator (you can start with an almost empty emulator)</li> <li>describe the processor &amp; assembler, write the notify() function</li> </ol>"},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-examples.html#loaders-samples","title":"Loaders samples","text":"<p>The <code>ldr</code> folder includes source code for new file format loaders:</p> <ul> <li><code>aif</code> ARM Image File</li> <li><code>amiga</code> Amige Hunk File</li> <li><code>aof</code> ARM Object File</li> <li><code>aout</code> a.out</li> <li><code>dos</code> MS DOS File</li> <li><code>dump</code> Memory Dump File</li> <li><code>geos</code> GEOS File</li> <li><code>hex</code> Intel/Motorola HEX File</li> <li><code>hpsom</code> HP SOM</li> <li><code>intelomf</code> Intel Object File</li> <li><code>javaldr</code> Java Class Loader</li> <li><code>mas</code> Macro Assembler</li> <li><code>nlm</code> Netware Loader Module</li> <li><code>os9</code> FLEX/9</li> <li><code>pef</code> Portable Executable Format (MAC)</li> <li><code>pilot</code> Palm Pilot</li> <li><code>qnx</code> Qnx</li> <li><code>rt11</code> RT/11</li> <li><code>w32run</code> Watcom RUN32</li> </ul> <p>ready to be compiled, similarly as processor module samples.</p>"},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-examples.html#decompiler-sdk-sample-plugins","title":"Decompiler SDK sample plugins","text":"<p>The exemplary decompiler plugins are shipped with the C++ SDK and can be found in the <code>plugins</code> folder (vds1-vds20) alongside other plugins.</p> <p>Below are descriptions of sample decompiler plugins.</p>"},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-examples.html#sample-1","title":"Sample 1","text":"<p>This plugin decompiles the current function and prints the result in the message window. It is useful to learn how to initialize a decompiler plugin. Please note that all decompiler sample plugins have the \"hexrays_\" prefix in their names. This is done to make sure that the decompiler plugins are loaded after the hexrays plugin. Otherwise they would see that the decompiler is missing and immediately terminate.</p> <p>We recommend you to keep the same naming scheme: please use the \"hexrays_\" prefix for your decompiler plugins.</p> <p>N.B.: if you're writing a plugin for non-x86 version of the decompiler, you should use another prefix. For example, the x64 decompiler is named \"hexx64\", ARM is \"hexarm\" and so on. To be certain, check IDA's \"plugins\" directory. To debug plugin loading issues, you can use -z20 switch when running IDA.</p>"},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-examples.html#sample-2","title":"Sample 2","text":"<p>This plugin shows how to hook to decompiler events and react to them. It also shows how to visit all ctree elements and modify them.</p> <p>This plugin waits for the decompilation result to be ready and replaces zeroes in pointer contexts with NULLs. One might say that this is just cosmetic change, but it makes the output more readable.</p> <p>Since the plugin hooks to events, it is fully automatic. The user can disable it by selecting it from the Edit, Plugins menu.</p>"},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-examples.html#sample-3","title":"Sample 3","text":"<p>This plugin shows</p> <pre><code>- how to add a new popup menu item\n- how to map the cursor position to ctree element\n- how to modify ctree\n- how to make the changes persistent\n</code></pre> <p>This is a quite complex plugin but it is thoroughly commented.</p>"},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-examples.html#sample-4","title":"Sample 4","text":"<p>This plugin dumps all user-defined information to the message window. Read the source code to learn how to access various user-defined data from your plugins:</p> <pre><code>- label names\n- indented comments\n- number formats\n- local variable names, types, comments\n</code></pre>"},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-examples.html#sample-5","title":"Sample 5","text":"<p>This plugin generates a graph from the current pseudocode and displays it with wingraph32.</p> <p>The source code can be used to learn ctree details.</p>"},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-examples.html#sample-6","title":"Sample 6","text":"<p>This plugin modifies the decompilation output: removes some space characters.</p> <p>The source code can be used to learn the output text.</p>"},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-examples.html#sample-7","title":"Sample 7","text":"<p>This plugin demonstrates how to use the cblock_t::iterator class. It enumerates all instructions of a block statement.</p>"},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-examples.html#sample-8","title":"Sample 8","text":"<p>This plugin demonstrates how to use the udc_filter_t (User-Defined Call generator) class, which allows replacing cryptic function calls, with a simpler/more-readable counterpart.</p>"},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-examples.html#sample-9","title":"Sample 9","text":"<p>This plugin demonstrates how to generate microcode for a given function and print it into the output window. It displays fully optimized microcode but it is also possible to retrieve microcode from earlier stages of decompilation. Generating the microcode text should be used only for debugging purposes. Printing microcode in production code may lead to crashes or wrong info.</p>"},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-examples.html#sample-10","title":"Sample 10","text":"<p>This plugin installs a custom microcode optimization rule: call !DbgRaiseAssertionFailure fast:.0 =&gt; call !DbgRaiseAssertionFailure \\.0 <p>See also sample19 for another example.</p>"},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-examples.html#sample-11","title":"Sample 11","text":"<p>This plugin installs a custom inter-block optimization rule:</p> <pre><code>goto L1     =&gt;        goto L@\n...\n</code></pre> <p>L1: goto L2</p> <p>In other words we fix a goto target if it points to a chain of gotos. This improves the decompiler output is some cases.</p>"},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-examples.html#sample-12","title":"Sample 12","text":"<p>This plugin displays list of direct references to a register from the current instruction.</p>"},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-examples.html#sample-13","title":"Sample 13","text":"<p>This plugin generates microcode for selection and dumps it to the output window.</p>"},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-examples.html#sample-14","title":"Sample 14","text":"<p>This plugin shows xrefs to the called function as the decompiler output. All calls are displayed with the call arguments.</p>"},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-examples.html#sample-15","title":"Sample 15","text":"<p>This plugin shows list of possible values of a register using the value range analysis.</p>"},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-examples.html#sample-16","title":"Sample 16","text":"<p>This plugin installs a custom instruction optimization rule:</p> <pre><code>mov #N, var.4                  mov #N, var.4\nxor var@1.1, #M, var@1.1    =&gt; mov #NM, var@1.1\n                                 where NM == (N&gt;&gt;8)^M\n</code></pre> <p>We need this rule because the decompiler cannot propagate the second byte of VAR into the xor instruction.</p> <p>The XOR opcode can be replaced by any other, we do not rely on it. Also operand sizes can vary.</p>"},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-examples.html#sample-17","title":"Sample 17","text":"<p>This plugin shows how to use \"Select offsets\" widget (select_udt_by_offset() API). This plugin repeats the Alt-Y functionality.</p>"},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-examples.html#sample-18","title":"Sample 18","text":"<p>This plugin shows how to specify a register value at a desired location. Such a functionality may be useful when the code to decompile is obfuscated and uses opaque predicates.</p>"},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-examples.html#sample-19","title":"Sample 19","text":"<p>This plugin shows how to install a custom microcode optimization rule. Custom rules are useful to handle obfuscated code. See also sample10 for another example.</p>"},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-examples.html#sample-20","title":"Sample 20","text":"<p>This plugin shows how to modify the decompiler output on the fly by adding dynamic comments.</p>"},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-getting-started.html","title":"Getting Started","text":""},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-getting-started.html#getting-started-with-c-sdk","title":"Getting started with C++ SDK","text":"<p>IN PROGRESS</p>"},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-getting-started.html#intro","title":"Intro","text":"<p>The IDA C++ SDK provides set of tools to interact with IDA Pro's disassembler, allowing you to navigate, analyze, and manipulate various elements such as functions, instructions, and data. This guide is designed to accelerate your learning curve with the IDA C++ SDK and kickstart your development journey, assuming you are already familiar with IDA Pro and its basic usage.</p>"},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-getting-started.html#how-this-guide-is-structured","title":"How This Guide is Structured","text":"<p>First, check Basics for core concepts and commonly used variables. Next, explore our Code Snippets to see examples of commonly used functions. Once you're comfortable with these, you can delve into more complex Examples that showcase advanced usage of the SDK.</p>"},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-getting-started.html#c-sdk-installation","title":"C++ SDK Installation","text":"<p>You can download the latest C++ SDK Zip file from our Download Center in My Hex-Rays portal. The SDK package includes in the top-level directory a README file with instructions on how to install it on your local machine and additional README files in other directories for processor modules templates, loaders and so on.</p>"},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-getting-started.html#basics","title":"Basics","text":""},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-getting-started.html#common-types-and-constants","title":"Common Types and Constants","text":"<p>One of the most extensivly used type is <code>ea_t</code>, commonly used to represent an effective address (EA) within a binary.</p>"},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-getting-started.html#common-header-files-and-namespaces","title":"Common header files and namespaces","text":"<p>The IDA C++ SDK is organized into header files containing various classes and functions. Below is a short desription of commonly used IDA SDK header files:</p> <ul> <li><code>pro.h</code>: This is the first header included in the IDA project. It defines the most common types, functions, and data. It also contains compiler- and platform-related definitions.</li> <li><code>ida.hpp</code>: In this file the 'inf' structure is defined: it keeps all parameters of the disassembled file.</li> <li><code>idp.hpp</code>: The 'main' header file for IDP modules. Contains definition of the interface to IDP modules. The interface consists of 2 structures: processor_t - description of processor\\   asm_t - description of assembler\\   Each IDP has one processor_t and several asm_t structures.</li> <li><code>loader.hpp</code>: Definitions of IDP, LDR, and PLUGIN module interfaces. This file also contains:</li> <li>functions to load files into the database</li> <li>functions to generate output files</li> <li>high level functions to work with the database (open, save, close)</li> <li><code>ua.hpp</code>: Functions that deal with the disassembling of program instructions. Disassembly of an instruction is made in three steps:</li> <li>analysis</li> <li>emulation</li> <li>conversion to text</li> <li><code>kernwin.hpp</code>: Defines the interface between the kernel and the UI. Some string processing functions are also kept in this header.</li> <li><code>idd.hpp</code>: Debugger plugin API for debugger module writers. Contains definition of the interface to IDD modules.</li> <li><code>bytes.hpp</code>: Functions and definitions used to describe and manipulate each byte of the disassembled program. Information about the byte includes associated features (comments, names, references, etc), data types (dword, qword, string literal, etc), instruction operands, status (mapped, loaded, patched, etc), among others.</li> <li><code>netnode.hpp</code>: Functions that provide the lowest level public interface to the database. Modules can use this to keep some private information in the database. A description of the concept is available in the header file itself.</li> <li><code>allins.hpp</code>: List of instructions available from all processor modules.</li> <li><code>auto.hpp</code>: Auto-analysis related functions.</li> <li><code>compress.hpp</code>: Data compression functions.</li> <li><code>config.hpp</code>: Functions that deal with configuration options and files.</li> <li><code>dbg.hpp</code>: Contains functions to control the debugging of a process.</li> <li><code>diskio.hpp</code>: File I/O functions for IDA. You should not use standard C file I/O functions in modules. Use functions from this header, pro.h, and fpro.h instead.</li> <li><code>entry.hpp</code>: Functions that deal with entry points to the program being disassembled.</li> <li><code>enum.hpp</code>: Enumeration type management (assembly level types).</li> <li><code>err.h</code>: Thread safe functions that deal with error codes.</li> <li><code>expr.hpp</code>: Functions that deal with C-like expressions, external languages, and the built-in IDC language.</li> <li><code>fixup.hpp</code>: Functions that deal with fixup (relocation) information.</li> <li><code>fpro.h</code>: System independent counterparts of file I/O functions. These functions do check errors but never exit even if an error occurs. They return extended error code in qerrno variable. NOTE: You must use these functions instead of the C standard I/O functions.</li> <li><code>frame.hpp</code>: Routines to manipulate function stack frames, stack variables, register variables and local labels.</li> <li><code>funcs.hpp</code>: Routines for working with functions within the disassembled program. This file also contains routines for working with library signatures (e.g. FLIRT).</li> <li><code>gdl.hpp</code>: Low level graph drawing operations.</li> <li><code>graph.hpp</code>: Graph view management.</li> <li><code>help.h</code>: Help subsystem. This subsystem is not used in IDP files. We put it just in case.</li> <li><code>ieee.h</code>: IEEE floating point functions.</li> <li><code>intel.hpp</code>: Header file from the IBM PC module. For information only. It will not compile because it contains references to internal files!</li> <li><code>lex.hpp</code>: Tools for parsing C-like input.</li> <li><code>lines.hpp</code>: High level functions that deal with the generation of the disassembled text lines.</li> <li><code>nalt.hpp</code>: Definitions of various information kept in netnodes. These functions should not be used directly since they are very low level.</li> <li><code>moves.hpp</code>: Functions and classes related to location history.</li> <li><code>name.hpp</code>: Functions that deal with names (setting, deleting, getting, validating, etc).</li> <li><code>offset.hpp</code>: Functions that deal with offsets.</li> <li><code>problems.hpp</code>: Functions that deal with the list of problems.</li> <li><code>prodir.h</code>: Low level functions to find files in the file system. It is better to use enumerate_files2() from diskio.hpp.</li> <li><code>pronet.h</code>: Network related functions.</li> <li><code>range.hpp</code>: Contains the definition of the 'range_t' class. This is a base class used by many parts of IDA, such as the 'segment_t' and 'segreg_range_t' (segment register) classes.</li> <li><code>registry.hpp</code>: Registry related functions. IDA uses the registry to store global configuration options that must persist after IDA has been closed.</li> <li><code>segment.hpp</code>: Functions that deal with program segmentation.</li> <li><code>segregs.hpp</code>: Functions that deal with the segment registers. If your processor doesn't use segment registers, then you don't need this file.</li> <li><code>strlist.hpp</code>: Functions that deal with the strings list.</li> <li><code>struct.hpp</code>: Structure type management (assembly level types).</li> <li><code>typeinf.hpp</code>: Describes the type information records in IDA.</li> <li><code>xref.hpp</code>: Functions that deal with cross-references.</li> </ul> <p>{% hint style=\"info\" %} All functions usable in the modules are marked by the \"ida_export\" keyword.</p> <p>Here are the most common namespaces to start with:</p> <p><code>idc</code>: This namespace provides access to IDC scripting functions via C++ SDK. It is often used for common tasks like setting comments or modifying bytes.</p> <p><code>idati</code>: This namespace is used for interacting with type information, such as function signatures and type definitions.</p> <p><code>idaapi</code>: This namespace contains core classes and functions for interacting with IDA's API, including functions for handling UI elements, plugins, and database access.</p> <p><code>idamisc</code>: This namespace includes utility functions for various tasks, such as working with the address space and disassembly.</p>"},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-getting-started.html#code-snippets","title":"Code Snippets","text":"<p>Here are common functions and examples grouped by topics:</p>"},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-getting-started.html#part-1-addresses-and-names","title":"Part 1: Addresses and Names","text":""},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-getting-started.html#get-the-current-address","title":"Get the Current Address","text":"<pre><code>ea_t ea = get_screen_ea();  // Get the current address\nprintf(\"Current address: %llx\\n\", ea);\n</code></pre>"},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-getting-started.html#jump-to-the-address","title":"Jump to the address","text":"<pre><code>jumpto(0x401000);  // Jump to address 0x401000\n</code></pre>"},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-getting-started.html#get-the-minimum-and-maximum-address-in-idb","title":"Get the Minimum and Maximum Address in IDB","text":"<pre><code>ea_t min_ea = get_inf_attr(INF_MIN_EA);\nea_t max_ea = get_inf_attr(INF_MAX_EA);\n</code></pre>"},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-getting-started.html#list-all-instruction-addresses","title":"List All Instruction Addresses","text":"<pre><code>for (ea_t ea = get_segm_by_name(\"CODE\"); ea != BADADDR; ea = get_next_head(ea, badaddr)) {\n    printf(\"Instruction address: %llx\\n\", ea);\n}\n</code></pre>"},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-getting-started.html#get-the-name-associated-with-a-given-address","title":"Get the Name Associated with a Given Address","text":"<pre><code>const char* name = get_name(0x100000da0);\nprintf(\"Name: %s\\n\", name);\n</code></pre>"},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-getting-started.html#get-the-address-associated-with-a-given-name","title":"Get the Address Associated with a Given Name","text":"<pre><code>ea_t address = get_name_ea(0, \"_main\");\nprintf(\"Address: %llx\\n\", address);\n</code></pre>"},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-getting-started.html#part-2-reading-and-writing-data","title":"Part 2: Reading and Writing Data","text":""},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-getting-started.html#reading-bytes-and-words","title":"Reading Bytes and Words","text":"<pre><code>u8 byte_value = get_byte(0x401000);  // Read a byte at address 0x401000\nu16 word_value = get_word(0x401002);  // Read a word (2 bytes) at address 0x401002\nu32 dword_value = get_dword(0x401004);  // Read a double word (4 bytes) at address 0x401004\n\nprintf(\"Byte: %x, Word: %x, Dword: %x\\n\", byte_value, word_value, dword_value);\n</code></pre>"},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-getting-started.html#writing-bytes-and-words","title":"Writing Bytes and Words","text":"<pre><code>patch_byte(0x401000, 0x90);  // Write a byte (0x90) at address 0x401000\npatch_word(0x401002, 0x9090);  // Write a word (0x9090) at address 0x401002\npatch_dword(0x401004, 0x90909090);  // Write a double word (0x90909090) at address 0x401004\n</code></pre>"},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-getting-started.html#part-3-comments","title":"Part 3: Comments","text":""},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-getting-started.html#add-a-regular-or-repeatable-comment","title":"Add a Regular or Repeatable Comment","text":"<pre><code>set_cmt(0x401000, \"This is a comment\", false);  // Add a regular comment at address 0x401000\nset_cmt(0x401000, \"This is a repeatable comment\", true);  // Add a repeatable comment at address 0x401000\n</code></pre>"},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-getting-started.html#get-a-regular-comment","title":"Get a Regular Comment","text":"<pre><code>const char* comment = get_cmt(0x401000, false);  // Get a regular comment at address 0x401000\nprintf(\"Comment: %s\\n\", comment);\n</code></pre>"},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-getting-started.html#part-4-segments","title":"Part 4: Segments","text":""},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-getting-started.html#get-a-segment-name","title":"Get a Segment Name","text":"<pre><code>const char* seg_name = get_segm_name(ea);\nprintf(\"Segment name: %s\\n\", seg_name);\n</code></pre>"},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-getting-started.html#iterate-through-all-segments","title":"Iterate Through All Segments","text":"<pre><code>for (seg_t* seg = get_first_seg(); seg != nullptr; seg = get_next_seg(seg)) {\n    printf(\"Segment name: %s\\n\", get_segm_name(seg-&gt;start_ea));\n}\n</code></pre>"},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-getting-started.html#part-5-functions","title":"Part 5: Functions","text":""},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-getting-started.html#create-and-delete-function","title":"Create and Delete Function","text":"<pre><code>add_func(0x401000, 0x401050);  // Create a function starting at 0x401000 and ending at 0x401050\ndel_func(0x401000);  // Delete the function at 0x401000\n</code></pre>"},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-getting-started.html#get-the-name-of-the-function","title":"Get the Name of the Function","text":"<pre><code>const char* func_name = get_func_name(0x401000);\nprintf(\"Function name: %s\\n\", func_name);\n</code></pre>"},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-getting-started.html#iterate-through-all-functions","title":"Iterate Through All Functions","text":"<pre><code>for (func_t* func = get_first_func(); func != nullptr; func = get_next_func(func)) {\n    printf(\"Function address: %llx, name: %s\\n\", func-&gt;start_ea, get_func_name(func-&gt;start_ea));\n}\n</code></pre>"},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-getting-started.html#part-6-navigating-cross-references-xrefs","title":"Part 6: Navigating Cross-References (Xrefs)","text":""},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-getting-started.html#list-cross-references-to-an-address","title":"List Cross-References to an Address","text":"<pre><code>for (xref_t* xref = get_first_xref_to(0x401000); xref != nullptr; xref = get_next_xref_to(xref)) {\n    printf(\"Xref to 0x401000 from %llx\\n\", xref-&gt;from);\n}\n</code></pre>"},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-getting-started.html#list-cross-references-from-an-address","title":"List Cross-References from an Address","text":"<pre><code>for (xref_t* xref = get_first_xref_from(0x401000); xref != nullptr; xref = get_next_xref_from(xref)) {\n    printf(\"Xref from 0x401000 to %llx\\n\", xref-&gt;to);\n}\n</code></pre>"},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-getting-started.html#part-7-ui","title":"Part 7: UI","text":""},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-getting-started.html#set-background-color-of-a-function","title":"Set Background Color of a Function","text":"<pre><code>set_color(0x401000, CIC_ITEM, 0x007fff);  // Set background color for the function starting at address 0x401000\n</code></pre>"},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-getting-started.html#display-a-custom-dialog","title":"Display a Custom Dialog","text":"<pre><code>msg(\"This is a custom message dialog. Good luck with learning the IDA C++ SDK!\\n\");\n</code></pre>"},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-getting-started.html#complex-script-examples","title":"Complex Script Examples","text":"<p>If you\u2019re comfortable with the basics, explore advanced examples included in the SDK itself. These examples often leverage multiple modules to accomplish more sophisticated tasks.</p>"},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-getting-started.html#whats-next","title":"What\u2019s Next?","text":"<p>Explore our tutorial on how to create your first custom plugin in IDA using C++.</p>"},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-porting-guide-ida-9.html","title":"Porting Guide from IDA 8.x to 9.0","text":"<p>IDA 9.0 API Changes and porting guide</p> <ul> <li>Introduction</li> <li>struct.hpp</li> <li>Removed classes</li> <li>Removed APIs</li> <li>enum.hpp</li> <li>Removed APIs</li> <li>bytes.hpp</li> <li>Added APIs</li> <li>Modified APIs</li> <li>Removed APIs</li> <li>dirtree.hpp</li> <li>Modified APIs</li> <li>diskio.hpp</li> <li>Modified APIs</li> <li>Removed APIs</li> <li>err.h</li> <li>Removed APIs</li> <li>expr.hpp</li> <li>Modified APIs</li> <li>frame.hpp</li> <li>Added APIs</li> <li>Modified PIs</li> <li>Removed APIs</li> <li>funcs.hpp</li> <li>Added APIs</li> <li>Removed APIs</li> <li>gdl.hpp</li> <li>Added classes/structures</li> <li>hexrays.hpp</li> <li>Added classes/structures</li> <li>Added APIs<ul> <li>lvar_t</li> <li>lvars_t</li> <li>simple_graph_t</li> <li>fnumber_t</li> <li>minsn_t</li> <li>mba_t</li> <li>codegen_t</li> <li>vd_failure_t</li> </ul> </li> <li>Modified APIs<ul> <li>stkvar_ref_t</li> <li>mop_t</li> <li>mba_t</li> <li>valrng_t</li> </ul> </li> <li>Removed APIs:<ul> <li>valrng_t</li> <li>ctree_item_t</li> <li>ctree_parentee_t</li> <li>vdui_t</li> </ul> </li> <li>graph.hpp</li> <li>Removed classes/structures</li> <li>Modified classes/structures</li> <li>Modified APIs</li> <li>idalib.hpp</li> <li>Added APIs</li> <li>idd.hpp</li> <li>Added APIs</li> <li>idp.hpp</li> <li>Removed APIs:</li> <li>Modified APIs:</li> <li>Added APIs<ul> <li>procmod_t</li> </ul> </li> <li>kernwin.hpp</li> <li>Removed APIs</li> <li>Removed classes/structures</li> <li>Added APIs<ul> <li>tagged_line_section_t</li> <li>chooser_base_t</li> </ul> </li> <li>Modified APIs</li> <li>lex.hpp</li> <li>Modified APIs</li> <li>lines.hpp</li> <li>Removed APIs</li> <li>Modified APIs</li> <li>nalt.hpp</li> <li>Modified APIs</li> <li>parsejson.hpp</li> <li>Added APIs<ul> <li>jvalue_t</li> <li>jobj_t</li> </ul> </li> <li>pro.h</li> <li>Removed APIs</li> <li>Added APIs<ul> <li>bytevec_t</li> <li>qlist</li> </ul> </li> <li>Added classes/structures</li> <li>regex.hpp</li> <li>Removed APIs</li> <li>regfinder.hpp</li> <li>Modified APIs</li> <li>Removed APIs</li> <li>Added APIs</li> <li>registry.hpp</li> <li>Removed APIs</li> <li>search.hpp</li> <li>Removed APIs</li> <li>typeinf.hpp</li> <li>Removed APIs</li> <li>Modified APIs</li> <li>Added classes/structures</li> <li>Added APIs<ul> <li>til_t</li> <li>callregs_t</li> <li>tinfo_t</li> <li>func_type_data_t</li> <li>enum_type_data_t</li> <li>udm_t</li> <li>udt_type_data_t</li> </ul> </li> <li>IDB events</li> </ul>"},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-porting-guide-ida-9.html#introduction","title":"Introduction","text":"<p>The largest change is the removal of two headers:</p> <ul> <li><code>struct.hpp</code></li> <li><code>enum.hpp</code></li> </ul> <p>The functionalities for working with user-defined types are now available in <code>typeinf.hpp</code> (<code>tinfo_t</code> class).</p>"},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-porting-guide-ida-9.html#structhpp","title":"struct.hpp","text":""},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-porting-guide-ida-9.html#removed-classes","title":"Removed classes","text":"<ul> <li><code>class member_t;</code></li> <li><code>class struc_t;</code></li> </ul> <p>struc_t is replaced by the notion of \"user-defined type\" (<code>udt_type_data_t</code> class) and member_t by dt member (<code>udm_t</code> class).</p>"},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-porting-guide-ida-9.html#removed-apis","title":"Removed APIs","text":"<ul> <li><code>get_struc_qty()</code> Rough equivalent is <code>get_ordinal_limit()</code> or <code>get_ordinal_count()</code> but note that it also includes enums and typedefs.</li> <li><code>get_first_struc_idx()</code></li> <li><code>get_last_struc_idx()</code></li> <li><code>get_prev_struc_idx()</code></li> <li><code>get_next_struc_idx()</code></li> </ul> <p>Local type ordinals always start at 1 (0 is invalid ordinal) and go up to <code>get_ordinal_limit()</code>.</p> <ul> <li><code>get_struc_idx(tid_t id)</code></li> <li><code>get_struc_by_idx(uval_t idx)</code></li> </ul>"},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-porting-guide-ida-9.html#enumhpp","title":"enum.hpp","text":"<p>Enumerations are now manipulated via:</p> <ul> <li><code>tinfo_t</code> class</li> <li><code>enum_type_data_t</code> class</li> <li><code>edm_t</code> class. in <code>typeinf.hpp</code></li> </ul>"},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-porting-guide-ida-9.html#removed-apis_1","title":"Removed APIs","text":"<ul> <li><code>get_enum_qty(void)</code></li> <li><code>getn_enum(size_t idx)</code></li> <li><code>get_enum_idx(enum_t id)</code></li> <li><code>get_enum(const char *name)</code></li> <li><code>is_bf(enum_t id)</code></li> <li><code>is_enum_hidden(enum_t id)</code></li> <li><code>set_enum_hidden(enum_t id, bool hidden)</code></li> <li><code>is_enum_fromtil(enum_t id)</code></li> <li><code>set_enum_fromtil(enum_t id, bool fromtil)</code></li> <li><code>is_ghost_enum(enum_t id)</code></li> <li><code>set_enum_ghost(enum_t id, bool ghost)</code></li> <li><code>get_enum_name(qstring *out, enum_t id)</code></li> <li><code>get_enum_name2(qstring *out, enum_t id, int flags=0)</code></li> <li><code>get_enum_name(tid_t id, int flags=0)</code></li> <li><code>get_enum_width(enum_t id)</code></li> <li><code>set_enum_width(enum_t id, int width)</code></li> <li><code>get_enum_cmt(qstring *buf, enum_t id, bool repeatable)</code></li> <li><code>get_enum_size(enum_t id)</code></li> <li><code>get_enum_flag(enum_t id)</code></li> <li><code>get_enum_member_by_name(const char *name)</code></li> <li><code>get_enum_member_value(const_t id)</code></li> <li><code>get_enum_member_enum(const_t id)</code></li> <li><code>get_enum_member_bmask(const_t id)</code></li> <li><code>get_enum_member(enum_t id, uval_t value, int serial, bmask_t mask)</code></li> <li><code>get_first_bmask(enum_t enum_id)</code></li> <li><code>get_last_bmask(enum_t enum_id)</code></li> <li><code>get_next_bmask(enum_t enum_id, bmask_t bmask\\)</code></li> <li><code>get_prev_bmask(enum_t enum_id, bmask_t bmask)</code></li> <li><code>get_first_enum_member(enum_t id, bmask_t bmask=DEFMASK)</code></li> <li><code>get_last_enum_member(enum_t id, bmask_t bmask=DEFMASK)</code></li> <li><code>get_next_enum_member(enum_t id, uval_t value, bmask_t bmask=DEFMASK)</code></li> <li><code>get_prev_enum_member(enum_t id, uval_t value, bmask_t bmask=DEFMASK)</code></li> <li><code>get_enum_member_name(qstring *out, const_t id)</code></li> <li><code>get_enum_member_cmt(qstring *buf, const_t id, bool repeatable)</code></li> <li><code>get_first_serial_enum_member(uchar *out_serial, enum_t id, uval_t value, bmask_t bmask)</code></li> <li><code>get_last_serial_enum_member(uchar *out_serial, enum_t id, uval_t value, bmask_t bmask)</code></li> <li><code>get_next_serial_enum_member(uchar *in_out_serial, const_t first_cid)</code></li> <li><code>get_prev_serial_enum_member(uchar *in_out_serial, const_t first_cid)</code></li> <li><code>for_all_enum_members(enum_t id, enum_member_visitor_t &amp;cv)</code></li> <li><code>ida_export get_enum_member_serial(const_t cid)</code></li> <li><code>get_enum_type_ordinal(enum_t id)</code></li> <li><code>set_enum_type_ordinal(enum_t id, int32 ord)</code></li> <li><code>add_enum(size_t idx, const char *name, flags64_t flag)</code></li> <li><code>del_enum(enum_t id)</code></li> <li><code>set_enum_idx(enum_t id, size_t idx)</code></li> <li><code>set_enum_bf(enum_t id, bool bf)</code></li> <li><code>set_enum_name(enum_t id, const char *name)</code></li> <li><code>set_enum_cmt(enum_t id, const char *cmt, bool repeatable)</code></li> <li><code>set_enum_flag(enum_t id, flags64_t flag)</code></li> <li><code>add_enum_member(enum_t id, const char *name, uval_t value, bmask_t bmask=DEFMASK)</code></li> <li><code>del_enum_member(enum_t id, uval_t value, uchar serial, bmask_t bmask)</code></li> <li><code>set_enum_member_name(const_t id, const char *name)</code></li> <li><code>set_enum_member_cmt(const_t id, const char *cmt, bool repeatable)</code></li> <li><code>is_one_bit_mask(bmask_t mask)</code></li> <li><code>set_bmask_name(enum_t id, bmask_t bmask, const char *name)</code></li> <li><code>get_bmask_name(qstring *out, enum_t id, bmask_t bmask)</code></li> <li><code>set_bmask_cmt(enum_t id, bmask_t bmask, const char *cmt, bool repeatable)</code></li> <li><code>get_bmask_cmt(qstring *buf, enum_t id, bmask_t bmask, bool repeatable)</code></li> </ul>"},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-porting-guide-ida-9.html#byteshpp","title":"bytes.hpp","text":""},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-porting-guide-ida-9.html#added-apis","title":"Added APIs","text":"<ul> <li><code>idaman ea_t ida_export find_binary(ea_t startea, ea_t endea, const char *ubinstr, int radix, int sflag, int strlits_encoding=0)</code></li> </ul>"},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-porting-guide-ida-9.html#modified-apis","title":"Modified APIs","text":"In 8.4 In 9.0 <code>idaman bool ida_export get_octet2(uchar *out, octet_generator_t *ogen)</code> <code>idaman bool ida_export get_octet(uchar *out, octet_generator_t *ogen)</code> <code>idaman bool ida_export op_enum(ea_t ea, int n, enum_t id, uchar serial=0)</code> <code>idaman bool ida_export op_enum(ea_t ea, int n, tid_t id, uchar serial=0)</code> <code>idaman enum_t ida_export get_enum_id(uchar *serial, ea_t ea, int n)</code> <code>idaman tid_t ida_export get_enum_id(uchar *serial, ea_t ea, int n)</code> <code>idaman ea_t ida_export bin_search3(size_t *out_matched_idx, ea_t start_ea, ea_t end_ea, const compiled_binpat_vec_t &amp;data, int flags)</code> <code>idaman ea_t ida_export bin_search(ea_t start_ea, ea_t end_ea, const compiled_binpat_vec_t &amp;data, int flags, size_t *out_matched_idx=nullptr)</code>"},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-porting-guide-ida-9.html#removed-apis_2","title":"Removed APIs","text":"<ul> <li><code>bin_search2(ea_t start_ea, ea_t end_ea, const compiled_binpat_vec_t &amp;data, int flags)</code></li> <li><code>bin_search(ea_t, ea_t, const uchar *, const uchar *, size_t, int, int)</code></li> <li><code>get_8bit(ea_t *ea, uint32 *v, int *nbit)</code></li> <li><code>get_octet(ea_t *ea, uint64 *v, int *nbit)</code></li> <li><code>free_chunk(ea_t bottom, asize_t size, int32 step)</code></li> </ul>"},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-porting-guide-ida-9.html#dirtreehpp","title":"dirtree.hpp","text":""},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-porting-guide-ida-9.html#modified-apis_1","title":"Modified APIs","text":"In 8.4 In 9.0 <code>idaman bool ida_export dirtree_get_abspath_by_cursor2(qstring *out, const dirtree_impl_t *d, const dirtree_cursor_t &amp;cursor, uint32 name_flags)</code> <code>idaman bool ida_export dirtree_get_abspath_by_cursor(qstring *out, const dirtree_impl_t *d, const dirtree_cursor_t &amp;cursor, uint32 name_flags)</code>"},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-porting-guide-ida-9.html#diskiohpp","title":"diskio.hpp","text":""},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-porting-guide-ida-9.html#modified-apis_2","title":"Modified APIs","text":"In 8.4 In 9.0 <code>idaman THREAD_SAFE int ida_export enumerate_files2(char *answer, size_t answer_size, const char *path, const char *fname, file_enumerator_t &amp;fv)</code> <code>idaman THREAD_SAFE int ida_export enumerate_files(char *answer, size_t answer_size, const char *path, const char *fname, file_enumerator_t &amp;fv)</code>"},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-porting-guide-ida-9.html#removed-apis_3","title":"Removed APIs","text":"<ul> <li><code>ecreate(const char *file)</code></li> <li><code>eclose(FILE *fp)</code></li> <li><code>eread(FILE *fp, void *buf, size_t size)</code></li> <li><code>ewrite(FILE *fp, const void *buf, size_t size)</code></li> <li><code>eseek(FILE *fp, qoff64_t pos)</code></li> <li><code>enumerate_files(char *answer, size_t answer_size, const char *path, const char *fname, int (idaapi*func)(const char *file,void *ud), void *ud=nullptr)</code></li> </ul>"},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-porting-guide-ida-9.html#errh","title":"err.h","text":""},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-porting-guide-ida-9.html#removed-apis_4","title":"Removed APIs","text":"<ul> <li><code>qerrcode(int new_code=-1)</code></li> </ul>"},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-porting-guide-ida-9.html#exprhpp","title":"expr.hpp","text":""},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-porting-guide-ida-9.html#modified-apis_3","title":"Modified APIs","text":"In 8.4 In 9.0 <code>bool extlang_t::(idaapi *compile_file)(const char *file, qstring *errbuf)</code> <code>bool extlang_t::(idaapi *compile_file)(const char *file, const char *requested_namespace, qstring *errbuf)</code>"},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-porting-guide-ida-9.html#framehpp","title":"frame.hpp","text":""},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-porting-guide-ida-9.html#added-apis_1","title":"Added APIs","text":"<ul> <li><code>idaman bool ida_export add_frame_member(const func_t *pfn, const char *name, uval_t offset, const tinfo_t &amp;tif, const struct value_repr_t *repr=nullptr, uint etf_flags=0)</code></li> <li><code>THREAD_SAFE bool is_anonymous_member_name(const char *name)</code></li> <li><code>THREAD_SAFE bool is_dummy_member_name(const char *name)</code></li> <li><code>idaman bool ida_export is_special_frame_member(tid_t tid)</code></li> <li><code>idaman bool ida_export set_frame_member_type(const func_t *pfn, uval_t offset, const tinfo_t &amp;tif, const struct value_repr_t *repr=nullptr, uint etf_flags=0)</code></li> <li><code>idaman bool ida_export delete_frame_members(const func_t *pfn, uval_t start_offset, uval_t end_offset)</code></li> <li><code>idaman sval_t ida_export calc_frame_offset(func_t *pfn, sval_t off, const insn_t *insn = nullptr, const op_t *op = nullptr)</code></li> </ul>"},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-porting-guide-ida-9.html#modified-pis","title":"Modified PIs","text":"In 8.4 In 9.0 <code>idaman struc_t *ida_export get_frame(const func_t *pfn)</code> <code>idaman bool ida_export get_func_frame(tinfo_t *out, const func_t *pfn)</code> <code>idaman bool ida_export define_stkvar(func_t *pfn, const char *name, sval_t off, flags64_t flags, const opinfo_t *ti, asize_t nbytes)</code> <code>idaman bool ida_export define_stkvar(func_t *pfn, const char *name, sval_t off, const tinfo_t &amp;tif, const struct value_repr_t *repr=nullptr)</code> <code>idaman void ida_export build_stkvar_xrefs(xreflist_t *out, func_t *pfn, const member_t *mptr)</code> <code>idaman void ida_export build_stkvar_xrefs(xreflist_t *out, func_t *pfn, uval_t start_offset, uval_t end_offset)</code>"},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-porting-guide-ida-9.html#removed-apis_5","title":"Removed APIs","text":"<ul> <li><code>get_frame_member_by_id(qstring *out_mname, struc_t **out_fptr, tid_t mid)</code></li> <li><code>get_stkvar(sval_t *actval, const insn_t &amp;insn, const op_t &amp;x, sval_t v)</code> See get_stkvar in ida_typeinf.tinfo_t</li> <li><code>get_min_spd_ea(func_t *pfn)</code></li> <li><code>delete_unreferenced_stkvars(func_t *pfn)</code></li> <li><code>delete_wrong_stkvar_ops(func_t *pfn)</code></li> </ul>"},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-porting-guide-ida-9.html#funcshpp","title":"funcs.hpp","text":""},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-porting-guide-ida-9.html#added-apis_2","title":"Added APIs","text":"<ul> <li><code>bool func_item_iterator_t::set_ea(ea_t _ea)</code></li> </ul>"},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-porting-guide-ida-9.html#removed-apis_6","title":"Removed APIs","text":"<ul> <li><code>save_signatures(void)</code></li> <li><code>invalidate_sp_analysis(func_t *pfn)</code></li> <li><code>invalidate_sp_analysis(ea_t ea)</code></li> </ul>"},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-porting-guide-ida-9.html#gdlhpp","title":"gdl.hpp","text":""},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-porting-guide-ida-9.html#added-classesstructures","title":"Added classes/structures","text":"<ul> <li><code>struct edge_t</code></li> <li><code>class node_ordering_t</code></li> </ul>"},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-porting-guide-ida-9.html#hexrayshpp","title":"hexrays.hpp","text":""},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-porting-guide-ida-9.html#added-classesstructures_1","title":"Added classes/structures","text":"<ul> <li><code>class control_graph_t</code></li> <li><code>class edge_mapper_t</code></li> <li><code>class node_bitset_t</code></li> <li><code>class array_of_node_bitset_t</code></li> <li><code>struct ctry_t</code></li> <li><code>struct cthrow_t</code></li> <li><code>struct catchexpr_t</code></li> <li><code>struct ccatch_t</code></li> <li><code>struct cblock_pos_t</code></li> </ul>"},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-porting-guide-ida-9.html#added-apis_3","title":"Added APIs","text":"<ul> <li><code>uvlr_t max_vlr_value(int size)</code></li> <li><code>uvlr_t min_vlr_svalue(int size)</code></li> <li><code>uvlr_t max_vlr_svalue(int size)</code></li> <li><code>bool is_unsigned_cmpop(cmpop_t cmpop)</code></li> <li><code>bool is_signed_cmpop(cmpop_t cmpop)</code></li> <li><code>bool is_cmpop_with_eq(cmpop_t cmpop)</code></li> <li><code>bool is_cmpop_without_eq(cmpop_t cmpop)</code></li> </ul>"},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-porting-guide-ida-9.html#lvar_t","title":"lvar_t","text":"<ul> <li><code>bool was_scattered_arg() const</code></li> <li><code>void set_scattered_arg()</code></li> <li><code>void clr_scattered_arg()</code></li> </ul>"},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-porting-guide-ida-9.html#lvars_t","title":"lvars_t","text":"<ul> <li><code>int find_input_reg(int reg, int _size=1)</code></li> </ul>"},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-porting-guide-ida-9.html#simple_graph_t","title":"simple_graph_t","text":"<ul> <li><code>virtual bool ignore_edge(int /*src*/, int /*dst*/ ) const</code></li> <li><code>void hexapi compute_dominators(array_of_node_bitset_t &amp;domin, bool post=false) const</code></li> <li><code>void hexapi compute_immediate_dominators(const array_of_node_bitset_t &amp;domin, intvec_t &amp;idomin, bool post=false) const</code></li> <li><code>int hexapi depth_first_preorder(node_ordering_t *pre) const</code></li> <li><code>int hexapi depth_first_postorder(node_ordering_t *post) const</code></li> <li><code>void depth_first_postorder(node_ordering_t *post, edge_mapper_t *et) const</code></li> <li><code>void depth_first_postorder_for_all_entries(node_ordering_t *post) const</code></li> <li><code>intvec_t find_dead_nodes() const</code></li> <li><code>void find_reaching_nodes(int n, node_bitset_t &amp;reaching) const</code></li> <li><code>bool path_exists(int m, int n) const</code></li> <li><code>bool path_back(const array_of_node_bitset_t &amp;domin, int m, int n) const</code></li> <li><code>bool path_back(const edge_mapper_t &amp;et, int m, int n) const</code></li> <li><code>iterator begin() const</code></li> <li><code>iterator end()</code></li> <li><code>int front()</code></li> <li><code>void inc(iterator &amp;p, int n=1) const</code></li> <li><code>virtual int hexapi goup(int node) const</code></li> </ul>"},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-porting-guide-ida-9.html#fnumber_t","title":"fnumber_t","text":"<ul> <li><code>int calc_max_exp() const</code></li> <li><code>bool is_nan() const</code></li> </ul>"},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-porting-guide-ida-9.html#minsn_t","title":"minsn_t","text":"<ul> <li><code>bool was_unpaired() const</code></li> </ul>"},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-porting-guide-ida-9.html#mba_t","title":"mba_t","text":"<ul> <li><code>mblock_t *hexapi split_block(mblock_t *blk, minsn_t *start_insn)</code></li> <li><code>merror_t hexapi inline_func(codegen_t &amp;cdg, int blknum, mba_ranges_t &amp;ranges, int decomp_flags=0, int inline_flags=0)</code></li> <li><code>const stkpnt_t *hexapi locate_stkpnt(ea_t ea) const</code></li> </ul>"},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-porting-guide-ida-9.html#codegen_t","title":"codegen_t","text":"<ul> <li><code>void hexapi clear()</code></li> </ul>"},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-porting-guide-ida-9.html#vd_failure_t","title":"vd_failure_t","text":"<ul> <li><code>virtual const char *what() const noexcept override</code></li> </ul>"},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-porting-guide-ida-9.html#modified-apis_4","title":"Modified APIs","text":"In 8.4 In 9.0 <code>void hexapi save_user_labels2(ea_t func_ea, const user_labels_t *user_labels, const cfunc_t *func=nullptr)</code> <code>void hexapi save_user_labels(ea_t func_ea, const user_labels_t *user_labels, const cfunc_t *func=nullptr)</code> <code>user_labels_t *hexapi restore_user_labels2(ea_t func_ea, const cfunc_t *func=nullptr)</code> <code>user_labels_t *hexapi restore_user_labels(ea_t func_ea, const cfunc_t *func=nullptr)</code>"},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-porting-guide-ida-9.html#stkvar_ref_t","title":"stkvar_ref_t","text":"In 8.4 In 9.0 <code>member_t *hexapi get_stkvar(uval_t *p_off=nullptr) const</code> <code>ssize_t hexapi get_stkvar(udm_t *udm=nullptr, uval_t *p_off=nullptr) const</code>"},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-porting-guide-ida-9.html#mop_t","title":"mop_t","text":"In 8.4 In 9.0 <code>member_t *get_stkvar(uval_t *p_off) const</code> <code>ssize_t get_stkvar(udm_t *udm=nullptr, uval_t *p_off=nullptr) const</code>"},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-porting-guide-ida-9.html#mba_t_1","title":"mba_t","text":"In 8.4 In 9.0 <code>member_t *get_stkvar(sval_t vd_stkoff, uval_t *poff) const</code> <code>ssize_t get_stkvar(udm_t *udm, sval_t vd_stkoff, uval_t *poff=nullptr) const</code> <code>const mblock_t *get_mblock(int n) const</code> <code>const mblock_t *get_mblock(uint n) const</code> <code>mblock_t *get_mblock(int n)</code> <code>mblock_t *get_mblock(uint n)</code> <code>bool hexapi combine_blocks()</code> <code>bool hexapi merge_blocks()</code>"},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-porting-guide-ida-9.html#valrng_t","title":"valrng_t","text":"In 8.4 In 9.0 <code>bool cvt_to_cmp(cmpop_t *cmp, uvlr_t *val, bool strict) const</code> <code>bool valrng_t::cvt_to_cmp(cmpop_t *cmp, uvlr_t *val) const</code>"},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-porting-guide-ida-9.html#removed-apis_7","title":"Removed APIs:","text":"<ul> <li><code>bool hexapi get_member_type(const member_t *mptr, tinfo_t *type)</code></li> <li><code>bool hexapi checkout_hexrays_license(bool silent)</code></li> <li><code>bool get_member_type(const member_t *mptr, tinfo_t *type)</code></li> </ul>"},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-porting-guide-ida-9.html#valrng_t_1","title":"valrng_t","text":"<ul> <li><code>static uvlr_t max_value(int size_)</code></li> <li><code>static uvlr_t min_svalue(int size_)</code></li> <li><code>static uvlr_t max_svalue(int size_)</code></li> </ul>"},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-porting-guide-ida-9.html#ctree_item_t","title":"ctree_item_t","text":"<ul> <li><code>member_t *hexapi get_memptr(struc_t **p_sptr=nullptr) const</code></li> </ul>"},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-porting-guide-ida-9.html#ctree_parentee_t","title":"ctree_parentee_t","text":"<ul> <li><code>cblock_t *get_block()</code></li> </ul>"},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-porting-guide-ida-9.html#vdui_t","title":"vdui_t","text":"<ul> <li><code>bool hexapi set_strmem_type(struc_t *sptr, member_t *mptr)</code></li> <li><code>bool hexapi rename_strmem(struc_t *sptr, member_t *mptr)</code></li> </ul>"},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-porting-guide-ida-9.html#graphhpp","title":"graph.hpp","text":""},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-porting-guide-ida-9.html#removed-classesstructures","title":"Removed classes/structures","text":"<ul> <li><code>class node_ordering_t</code> See <code>code</code></li> <li><code>struct edge_t</code> See <code>code</code></li> </ul>"},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-porting-guide-ida-9.html#modified-classesstructures","title":"Modified classes/structures","text":"In 8.4 In 9.0 <code>class abstract_graph_t</code> <code>class drawable_graph_t</code> <code>class mutable_graph_t</code> <code>class interactive_graph_t</code>"},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-porting-guide-ida-9.html#modified-apis_5","title":"Modified APIs","text":"In 8.4 In 9.0 <code>mutable_graph_t *idaapi create_mutable_graph(uval_t id)</code> <code>interactive_graph_t *idaapi create_interactive_graph(uval_t id)</code> <code>mutable_graph_t *idaapi create_disasm_graph(ea_t ea)</code> <code>interactive_graph_t *idaapi create_disasm_graph(ea_t ea)</code> <code>mutable_graph_t *idaapi create_disasm_graph(const rangevec_t &amp;ranges)</code> <code>interactive_graph_t *idaapi create_disasm_graph(const rangevec_t &amp;ranges)</code> <code>mutable_graph_t *idaapi get_viewer_graph(graph_viewer_t *gv)</code> <code>interactive_graph_t *idaapi get_viewer_graph(graph_viewer_t *gv)</code> <code>void idaapi set_viewer_graph(graph_viewer_t *gv, mutable_graph_t *g)</code> <code>void idaapi set_viewer_graph(graph_viewer_t *gv, interactive_graph_t *g)</code> <code>void idaapi delete_mutable_graph(mutable_graph_t *g)</code> <code>void idaapi delete_interactive_graph(interactive_graph_t *g)</code> <code>void idaapi mutable_graph_t::del_custom_layout(void)</code> <code>void idaapi interactive_graph_t::del_custom_layout(void)</code> <code>void idaapi mutable_graph_t::set_custom_layout(void) const</code> <code>void idaapi interactive_graph_t::set_custom_layout(void) const</code> <code>void idaapi mutable_graph_t::set_graph_groups(void) const</code> <code>void idaapi interactive_graph_t::set_graph_groups(void) const</code> <code>void idaapi mutable_graph_t::clear(void)</code> <code>void idaapi interactive_graph_t::clear(void)</code> <code>bool idaapi mutable_graph_t::create_digraph_layout(void)</code> <code>bool idaapi interactive_graph_t::create_digraph_layout(void)</code> <code>bool idaapi abstract_graph_t::create_tree_layout(void)</code> <code>bool idaapi drawable_graph_t::create_tree_layout(void)</code> <code>bool idaapi abstract_graph_t::create_circle_layout(point_t c, int radius)</code> <code>bool idaapi drawable_graph_t::create_circle_layout(point_t c, int radius)</code> <code>int idaapi mutable_graph_t::get_node_representative(int node)</code> <code>int idaapi interactive_graph_t::get_node_representative(int node)</code> <code>int idaapi mutable_graph_t::_find_subgraph_node(int gr, int n) const</code> <code>int idaapi interactive_graph_t::_find_subgraph_node(int gr, int n) const</code> <code>int idaapi mutable_graph_t::create_group(const intvec_t &amp;_nodes)</code> <code>int idaapi interactive_graph_t::create_group(const intvec_t &amp;_nodes)</code> <code>bool idaapi mutable_graph_t::get_custom_layout(void)</code> <code>bool idaapi interactive_graph_t::get_custom_layout(void)</code> <code>bool idaapi mutable_graph_t::get_graph_groups(void)</code> <code>bool idaapi interactive_graph_t::get_graph_groups(void)</code> <code>bool idaapi mutable_graph_t::empty(void) const</code> <code>bool idaapi interactive_graph_t::empty(void) const</code> <code>bool idaapi mutable_graph_t::is_visible_node(int node) const</code> <code>bool idaapi interactive_graph_t::is_visible_node(int node) const</code> <code>bool idaapi mutable_graph_t::delete_group(int group)</code> <code>bool idaapi interactive_graph_t::delete_group(int group)</code> <code>bool idaapi mutable_graph_t::change_group_visibility(int gr, bool exp)</code> <code>bool idaapi interactive_graph_t::change_group_visibility(int gr, bool exp)</code> <code>bool idaapi mutable_graph_t::set_edge(edge_t e, const edge_info_t *ei)</code> <code>bool idaapi interactive_graph_t::set_edge(edge_t e, const edge_info_t *ei)</code> <code>int idaapi mutable_graph_t::node_qty(void) const</code> <code>int idaapi interactive_graph_t::node_qty(void) const</code> <code>rect_t &amp;idaapi mutable_graph_t::nrect(int n)</code> <code>rect_t &amp;idaapi interactive_graph_t::nrect(int n)</code>"},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-porting-guide-ida-9.html#idalibhpp","title":"idalib.hpp","text":"<p>The new header for the IDA library</p>"},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-porting-guide-ida-9.html#added-apis_4","title":"Added APIs","text":"<ul> <li><code>idaman int ida_export init_library(int argc = 0, char *argv[] = nullptr)</code></li> <li><code>idaman int ida_export open_database(const char *file_path, bool run_auto)</code></li> <li><code>idaman void ida_export close_database(bool save)</code></li> </ul>"},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-porting-guide-ida-9.html#iddhpp","title":"idd.hpp","text":""},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-porting-guide-ida-9.html#added-apis_5","title":"Added APIs","text":"<ul> <li><code>idaman int ida_export cpu2ieee(fpvalue_t *ieee_out, const void *cpu_fpval, int size)</code></li> <li><code>idaman int ida_export ieee2cpu(void *cpu_fpval, const fpvalue_t &amp;ieee_out, int size)</code></li> </ul>"},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-porting-guide-ida-9.html#idphpp","title":"idp.hpp","text":""},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-porting-guide-ida-9.html#removed-apis_8","title":"Removed APIs:","text":"<ul> <li><code>processor_t::has_realcvt(void) const</code></li> </ul>"},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-porting-guide-ida-9.html#modified-apis_6","title":"Modified APIs:","text":"In 8.4 In 9.0 <code>static ssize_t processor_t::gen_stkvar_def(outctx_t &amp;ctx, const class member_t *mptr, sval_t v)</code> <code>static ssize_t processor_t::gen_stkvar_def(outctx_t &amp;ctx, const struct udm_t *mptr, sval_t v, tid_t tid)</code>"},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-porting-guide-ida-9.html#added-apis_6","title":"Added APIs","text":""},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-porting-guide-ida-9.html#procmod_t","title":"procmod_t","text":"<ul> <li><code>const op_t *procmod_t::make_op_reg(op_t *op, int reg, int8 dtype = -1) const</code></li> <li><code>const op_t *procmod_t::make_op_imm(op_t *op, uval_t val, int8 dtype = -1) const</code></li> <li><code>const op_t *procmod_t::make_op_displ(op_t *op, int base_reg, uval_t displ, int8 dtype = -1) const</code></li> <li><code>const op_t *procmod_t::make_op_phrase(op_t *op, int base_reg, int index_reg, int8 dtype = -1) const</code></li> </ul> <p>See also IDB events for a table providing a list a event replacement and removal.</p>"},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-porting-guide-ida-9.html#kernwinhpp","title":"kernwin.hpp","text":""},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-porting-guide-ida-9.html#removed-apis_9","title":"Removed APIs","text":"<ul> <li><code>open_enums_window(tid_t const_id=BADADDR)</code></li> <li><code>open_structs_window(tid_t id=BADADDR, uval_t offset=0)</code></li> <li><code>choose_struc(const char *title)</code></li> <li><code>choose_enum_by_value(const char *title, enum_t default_id, uint64 value, int nbytes, uchar *serial)</code></li> </ul>"},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-porting-guide-ida-9.html#removed-classesstructures_1","title":"Removed classes/structures","text":"<ul> <li><code>class enumplace_t</code></li> <li><code>class structplace_t</code></li> </ul>"},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-porting-guide-ida-9.html#added-apis_7","title":"Added APIs","text":"<ul> <li><code>bool is_ida_library(char *path, size_t pathsize, void** handle)</code></li> </ul>"},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-porting-guide-ida-9.html#tagged_line_section_t","title":"tagged_line_section_t","text":"<ul> <li><code>const tagged_line_section_t::tagged_line_section_t *nearest_before(const tagged_line_section_t &amp;range, cpidx_t start, color_t tag=0) const</code></li> <li><code>const tagged_line_section_t::tagged_line_section_t *nearest_after(const tagged_line_section_t &amp;range, cpidx_t start, color_t tag=0) const</code></li> </ul>"},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-porting-guide-ida-9.html#chooser_base_t","title":"chooser_base_t","text":"<ul> <li><code>bool chooser_base_t::has_widget_lifecycle() const</code></li> </ul>"},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-porting-guide-ida-9.html#modified-apis_7","title":"Modified APIs","text":"In 8.4 In 9.0 <code>ea_t choose_stkvar_xref(func_t *pfn, member_t *mptr)</code> <code>ea_t choose_stkvar_xref(func_t *pfn, tid_t srkvar_tid)</code> <code>bool tagged_line_section_t::substr(qstring *out, const qstring &amp;in) const</code> <code>bool tagged_line_section_t::substr(qstring *out,,const qstring &amp;in, const tagged_line_section_t *end = nullptr) const</code>"},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-porting-guide-ida-9.html#lexhpp","title":"lex.hpp","text":""},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-porting-guide-ida-9.html#modified-apis_8","title":"Modified APIs","text":"In 8.4 In 9.0 <code>idaman lexer_t *ida_export create_lexer(const char *const *keys, size_t size, void *ud=nullptr)</code> <code>idaman lexer_t *ida_export create_lexer(const char *const *keys, size_t size, void *ud=nullptr, uint32 macro_flags=0)</code>"},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-porting-guide-ida-9.html#lineshpp","title":"lines.hpp","text":""},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-porting-guide-ida-9.html#removed-apis_10","title":"Removed APIs","text":"<ul> <li><code>set_user_defined_prefix(size_t width, void (idaapi *get_user_defined_prefix)(qstring *buf, ea_t ea, int lnnum, int indent, const char *line))</code></li> </ul>"},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-porting-guide-ida-9.html#modified-apis_9","title":"Modified APIs","text":"In 8.4 In 9.0 <code>idaman void ida_export update_extra_cmt(ea_t ea, int what, const char *str)</code> <code>idaman bool ida_export update_extra_cmt(ea_t ea, int what, const char *str)</code> <code>idaman void ida_export del_extra_cmt(ea_t ea, int what)</code> <code>idaman bool ida_export del_extra_cmt(ea_t ea, int what)</code>"},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-porting-guide-ida-9.html#nalthpp","title":"nalt.hpp","text":""},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-porting-guide-ida-9.html#modified-apis_10","title":"Modified APIs","text":"In 8.4 In 9.0 <code>idaman int ida_export validate_idb_names2(bool do_repair)</code> <code>idaman int ida_export validate_idb_names(bool do_repair)</code>"},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-porting-guide-ida-9.html#parsejsonhpp","title":"parsejson.hpp","text":""},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-porting-guide-ida-9.html#added-apis_8","title":"Added APIs","text":""},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-porting-guide-ida-9.html#jvalue_t","title":"jvalue_t","text":"<ul> <li><code>void jvalue_t::set_str(const char *s)</code></li> </ul>"},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-porting-guide-ida-9.html#jobj_t","title":"jobj_t","text":"<ul> <li><code>void jobj_t::put(const char *key, const jobj_t &amp;value)</code></li> </ul>"},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-porting-guide-ida-9.html#proh","title":"pro.h","text":""},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-porting-guide-ida-9.html#removed-apis_11","title":"Removed APIs","text":"<ul> <li><code>unpack_memory(void *buf, size_t size, const uchar **pptr, const uchar *end)</code></li> </ul>"},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-porting-guide-ida-9.html#added-apis_9","title":"Added APIs","text":"<ul> <li><code>idaman THREAD_SAFE bool ida_export get_login_name(qstring *out)</code></li> <li><code>idaman void *ida_export pipe_process(qhandle_t *read_handle, qhandle_t *write_handle, launch_process_params_t *lpp, qstring *errbuf=nullptr)</code></li> </ul>"},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-porting-guide-ida-9.html#bytevec_t","title":"bytevec_t","text":"<ul> <li><code>qstring bytevec_t::tohex(bool upper_case=true) const</code></li> </ul>"},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-porting-guide-ida-9.html#qlist","title":"qlist","text":"<ul> <li><code>void qlist::splice(iterator pos, qlist &amp;other, iterator first, iterator last)</code></li> </ul>"},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-porting-guide-ida-9.html#added-classesstructures_2","title":"Added classes/structures","text":"<ul> <li><code>struct memory_serializer_t</code></li> </ul>"},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-porting-guide-ida-9.html#regexhpp","title":"regex.hpp","text":""},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-porting-guide-ida-9.html#removed-apis_12","title":"Removed APIs","text":"<ul> <li><code>regcomp(struct regex_t *preg, const char *pattern, int cflags)</code></li> <li><code>regerror(int errcode, const struct regex_t *preg, char *errbuf, size_t errbuf_size)</code></li> <li><code>regexec(const struct regex_t *preg, const char *str, size_t nmatch, struct regmatch_t pmatch[], int eflags)</code></li> <li><code>regfree(struct regex_t *preg)</code></li> </ul>"},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-porting-guide-ida-9.html#regfinderhpp","title":"regfinder.hpp","text":""},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-porting-guide-ida-9.html#modified-apis_11","title":"Modified APIs","text":"In 8.4 In 9.0 <code>void ida_export reg_finder_invalidate_cache(reg_finder_t *_this, ea_t ea)</code> <code>void ida_export reg_finder_invalidate_cache(reg_finder_t *_this, ea_t to, ea_t from)</code> <code>bool ida_export reg_finder_calc_op_addr(reg_finder_t *_this, reg_value_info_t *addr, const op_t *memop, const insn_t *insn, ea_t ea, ea_t ds)</code> <code>bool ida_export reg_finder_calc_op_addr(reg_finder_t *_this, reg_value_info_t *addr, const op_t *memop, const insn_t *insn, ea_t ea, ea_t ds, int max_depth)</code> <code>bool ida_export reg_finder_may_modify_stkvars(const reg_finder_t *_this, reg_finder_op_t op, const insn_t *insn)</code> <code>bool ida_export reg_finder_may_modify_stkvar(const reg_finder_t *_this, reg_finder_op_t op, const insn_t *insn)</code> <code>void idaapi invalidate_regfinder_cache(ea_t ea = BADADDR)</code> <code>void idaapi invalidate_regfinder_cache(ea_t to = BADADDR, ea_t from = BADADDR)</code>"},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-porting-guide-ida-9.html#removed-apis_13","title":"Removed APIs","text":"<ul> <li><code>reg_finder_op_make_rfop(func_t *pfn, const insn_t &amp;insn, const op_t &amp;op)</code></li> </ul>"},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-porting-guide-ida-9.html#added-apis_10","title":"Added APIs","text":"<ul> <li><code>void reg_value_info_t::movt(const reg_value_info_t &amp;r, const insn_t &amp;insn)</code></li> <li><code>static int reg_finder_op_t::get_op_width(const op_t &amp;op)</code></li> <li><code>static reg_finder_op_t reg_finder_op_t::make_stkoff(sval_t stkoff, int width)</code></li> </ul>"},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-porting-guide-ida-9.html#registryhpp","title":"registry.hpp","text":""},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-porting-guide-ida-9.html#removed-apis_14","title":"Removed APIs","text":"<ul> <li><code>reg_load(void)</code></li> <li><code>reg_flush(void)</code></li> </ul>"},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-porting-guide-ida-9.html#searchhpp","title":"search.hpp","text":""},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-porting-guide-ida-9.html#removed-apis_15","title":"Removed APIs","text":"<ul> <li><code>user2bin(uchar *, uchar *, ea_t, const char *, int, bool)</code></li> <li><code>find_binary(ea_t, ea_t, const char *, int, int)</code></li> </ul>"},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-porting-guide-ida-9.html#typeinfhpp","title":"typeinf.hpp","text":""},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-porting-guide-ida-9.html#removed-apis_16","title":"Removed APIs","text":"<ul> <li><code>set_numbered_type(til_t *ti, uint32 ordinal, int ntf_flags, const char *name, const type_t *type, const p_list *fields=nullptr, const char *cmt=nullptr, const p_list *fldcmts=nullptr, const sclass_t *sclass=nullptr)</code></li> <li><code>get_ordinal_from_idb_type(const char *name, const type_t *type)</code></li> <li><code>is_autosync(const char *name, const type_t *type)</code></li> <li><code>is_autosync(const char *name, const tinfo_t &amp;tif)</code></li> <li><code>import_type(const til_t *til, int idx, const char *name, int flags=0)</code></li> <li><code>get_udm_tid(const udm_t *udm, const char *udt_name)</code></li> </ul>"},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-porting-guide-ida-9.html#modified-apis_12","title":"Modified APIs","text":"In 8.4 In 9.0 <code>bool ida_export create_tinfo2(tinfo_t *_this, type_t bt, type_t bt2, void *ptr)</code> <code>bool ida_export create_tinfo(tinfo_t *_this, type_t bt, type_t bt2, void *ptr)</code> <code>int ida_export verify_tinfo(uint32 typid)</code> <code>int ida_export verify_tinfo(typid_t typid)</code> <code>bool ida_export get_tinfo_details2(uint32 typid, type_t bt2, void *buf)</code> <code>bool ida_export get_tinfo_details(typid_t typid, type_t bt2, void *buf)</code> <code>size_t ida_export get_tinfo_size(uint32 *p_effalign, uint32 typid, int gts_code)</code> <code>size_t ida_export get_tinfo_size(uint32 *p_effalign, typid_t typid, int gts_code)</code> <code>size_t ida_export get_tinfo_pdata(void *outptr, uint32 typid, int what)</code> <code>size_t ida_export get_tinfo_pdata(void *outptr, typid_t typid, int what)</code> <code>size_t ida_export get_tinfo_property(uint32 typid, int gta_prop)</code> <code>size_t ida_export get_tinfo_property(typid_t typid, int gta_prop)</code> <code>size_t ida_export get_tinfo_property4(uint32 typid, int gta_prop, size_t p1, size_t p2, size_t p3, size_t p4)</code> <code>size_t ida_export get_tinfo_property4(typid_t typid, int gta_prop, size_t p1, size_t p2, size_t p3, size_t p4)</code> <code>bool ida_export deserialize_tinfo2(tinfo_t *tif, const til_t *til, const type_t **ptype, const p_list **pfields, const p_list **pfldcmts, const char *cmt)</code> <code>bool ida_export deserialize_tinfo(tinfo_t *tif, const til_t *til, const type_t **ptype, const p_list **pfields, const p_list **pfldcmts, const char *cmt)</code> <code>int ida_export find_tinfo_udt_member(udm_t *udm, uint32 typid, int strmem_flags)</code> <code>int ida_export find_tinfo_udt_member(udm_t *udm, typid_t typid, int strmem_flags)</code> <code>bool ida_export compare_tinfo(uint32 t1, uint32 t2, int tcflags)</code> <code>bool ida_export compare_tinfo(typid_t t1, typid_t t2, int tcflags)</code> <code>int ida_export lexcompare_tinfo(uint32 t1, uint32 t2, int)</code> <code>int ida_export lexcompare_tinfo(typid_t t1, typid_t t2, int)</code> <code>uint64 ida_export read_tinfo_bitfield_value(uint32 typid, uint64 v, int bitoff)</code> <code>uint64 ida_export read_tinfo_bitfield_value(typid_t typid, uint64 v, int bitoff)</code> <code>uint64 ida_export write_tinfo_bitfield_value(uint32 typid, uint64 dst, uint64 v, int bitoff)</code> <code>uint64 ida_export write_tinfo_bitfield_value(typid_t typid, uint64 dst, uint64 v, int bitoff)</code> <code>bool ida_export get_tinfo_attr(uint32 typid, const qstring &amp;key, bytevec_t *bv, bool all_attrs)</code> <code>bool ida_export get_tinfo_attr(typid_t typid, const qstring &amp;key, bytevec_t *bv, bool all_attrs)</code> <code>bool ida_export get_tinfo_attrs(uint32 typid, type_attrs_t *tav, bool include_ref_attrs)</code> <code>bool ida_export get_tinfo_attrs(typid_t typid, type_attrs_t *tav, bool include_ref_attrs)</code> <code>bool ida_export append_tinfo_covered(rangeset_t *out, uint32 typid, uint64 offset)</code> <code>bool ida_export append_tinfo_covered(rangeset_t *out, typid_t typid, uint64 offset)</code> <code>bool ida_export calc_tinfo_gaps(rangeset_t *out, uint32 typid)</code> <code>bool ida_export calc_tinfo_gaps(rangeset_t *out, typid_t typid)</code> <code>bool ida_export name_requires_qualifier(qstring *out, uint32 typid, const char *name, uint64 offset)</code> <code>bool ida_export name_requires_qualifier(qstring *out, typid_t typid, const char *name, uint64 offset)</code> <code>void ida_export tinfo_get_innermost_udm(tinfo_t *itif, const tinfo_t *tif, uint64 offset, size_t *udm_idx, uint64 *bit_offset)</code> <code>void ida_export tinfo_get_innermost_udm(tinfo_t *itif, const tinfo_t *tif, uint64 offset, size_t *udm_idx, uint64 *bit_offset, bool return_member_type)</code> <code>tinfo_code_t tinfo_t::find_edm(edm_t *edm, uint64 value, bmask64_t bmask=DEFMASK64, uchar serial=0) const</code> <code>ssize_t tinfo_t::find_edm(edm_t *edm, uint64 value, bmask64_t bmask=DEFMASK64, uchar serial=0) const</code> <code>tinfo_code_t tinfo_t::find_edm(edm_t *edm, const char *name) const</code> <code>ssize_t tinfo_t::find_edm(edm_t *edm, const char *name) const</code> <code>bool tinfo_t::get_type_by_edm_name(const char *mname, til_t *til=nullptr)</code> <code>ssize_t tinfo_t::get_edm_by_name(const char *mname, const til_t *til=nullptr)</code> <code>void ida_export gen_use_arg_tinfos2(struct argtinfo_helper_t *_this, ea_t caller, func_type_data_t *fti, funcargvec_t *rargs)</code> <code>void ida_export gen_use_arg_tinfos(struct argtinfo_helper_t *_this, ea_t caller, func_type_data_t *fti, funcargvec_t *rargs)</code>"},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-porting-guide-ida-9.html#added-classesstructures_3","title":"Added classes/structures","text":"<ul> <li><code>struct udm_visitor_t</code></li> </ul>"},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-porting-guide-ida-9.html#added-apis_11","title":"Added APIs","text":"<ul> <li><code>bool ida_export detach_tinfo_t(tinfo_t *_this)</code></li> <li><code>bool stroff_as_size(int plen, const tinfo_t &amp;tif, asize_t value)</code></li> <li><code>int ida_export visit_stroff_udms(udm_visitor_t &amp;sfv, const tid_t *path, int plen, adiff_t *disp, bool appzero)</code></li> <li><code>bool is_one_bit_mask(uval_t mask)</code></li> </ul>"},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-porting-guide-ida-9.html#til_t","title":"til_t","text":"<ul> <li><code>til_t *til_t::find_base(const char *n)</code></li> </ul>"},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-porting-guide-ida-9.html#callregs_t","title":"callregs_t","text":"<ul> <li><code>void callregs_t::set_registers(reg_kind_t kind, int first_reg, int last_reg)</code></li> </ul>"},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-porting-guide-ida-9.html#tinfo_t","title":"tinfo_t","text":"<ul> <li><code>bool tinfo_t::get_named_type(const char *name, type_t decl_type=BTF_TYPEDEF, bool resolve=true, bool try_ordinal=true)</code></li> <li><code>bool tinfo_t::get_numbered_type(uint32 ordinal, type_t decl_type=BTF_TYPEDEF, bool resolve=true)</code></li> <li><code>bool tinfo_t::detach()</code></li> <li><code>bool tinfo_t::is_punknown()</code></li> <li><code>int tinfo_t::find_udm(uint64 offset, int strmem_flags=0) const</code></li> <li><code>int tinfo_t::find_udm(const char *name, int strmem_flags=0) const</code></li> <li><code>size_t tinfo_t::get_enum_nmembers() const</code></li> <li><code>bool tinfo_t::is_empty_enum() const</code></li> <li><code>tinfo_code_t tinfo_t::get_enum_repr(value_repr_t *repr) const</code></li> <li><code>int tinfo_t::get_enum_width() const</code></li> <li><code>uint64 tinfo_t::calc_enum_mask() const</code></li> <li><code>tid_t tnfo_t::get_edm_tid(size_t idx) const</code></li> <li><code>tinfo_t tinfo_t::get_innermost_member_type(uint64 bitoffset, uint64 *out_bitoffset=nullptr) const</code></li> <li><code>bool tinfo_t::is_udm_by_til(size_t idx) const</code></li> <li><code>tinfo_code_t tinfo_t::set_udm_by_til(size_t idx, bool on=true, uint etf_flags=0)</code></li> <li><code>tinfo_code_t tinfo_t::set_fixed_struct(bool on=true)</code></li> <li><code>tinfo_code_t tinfo_t::set_struct_size(size_t new_size)</code></li> <li><code>bool tinfo_t::is_fixed_struct() const</code></li> <li><code>bool tinfo_t::get_func_frame(const func_t *pfn)</code></li> <li><code>bool tinfo_t::is_frame() const</code></li> <li><code>ea_t tinfo_t::get_frame_func() const</code></li> <li><code>ssize_t tinfo_t::get_stkvar(sval_t *actval, const insn_t &amp;insn, const op_t *x, sval_t v)</code></li> <li><code>tinfo_code_t tinfo_t::set_enum_radix(int radix, bool sign, uint etf_flags=0)</code></li> <li><code>tinfo_code_t tinfo_t::set_funcarg_type(size_t index, const tinfo_t &amp;tif, uint etf_flags=0)</code></li> <li><code>tinfo_code_t tinfo_t::set_func_rettype(const tinfo_t &amp;tif, uint etf_flags=0)</code></li> <li><code>tinfo_code_t tinfo_t::del_funcargs(size_t idx1, size_t idx2, uint etf_flags=0)</code></li> <li><code>tinfo_code_t tinfo_t::del_funcarg(size_t idx, uint etf_flags=0)</code></li> <li><code>tinfo_code_t tinfo_t::add_funcarg(const funcarg_t &amp;farg, uint etf_flags=0, ssize_t idx=-1)</code></li> <li><code>tinfo_code_t tinfo_t::set_func_cc(cm_t cc, uint etf_flags=0)</code></li> <li><code>tinfo_code_t tinfo_t::set_funcarg_loc(size_t index, const argloc_t &amp;argloc, uint etf_flags=0)</code></li> <li><code>tinfo_code_t tinfo_t::et_func_retloc(const argloc_t &amp;argloc, uint etf_flags=0)</code></li> </ul>"},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-porting-guide-ida-9.html#func_type_data_t","title":"func_type_data_t","text":"<ul> <li><code>ssize_t func_type_data_t::find_argument(const char *name, size_t from=0, size_t to=size_t(-1)) const</code></li> </ul>"},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-porting-guide-ida-9.html#enum_type_data_t","title":"enum_type_data_t","text":"<ul> <li><code>tinfo_code_t enum_type_data_t::get_value_repr(value_repr_t *repr) const</code></li> <li><code>uchar enum_type_data_t::get_serial(size_t index) const</code></li> <li><code>uchar enum_type_data_t::get_max_serial(uint64 value) const</code></li> </ul>"},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-porting-guide-ida-9.html#udm_t","title":"udm_t","text":"<ul> <li><code>bool udm_t::is_retaddr() const</code></li> <li><code>bool udm_t::is_savregs() const</code></li> <li><code>bool udm_t::is_special_member() const</code></li> <li><code>bool udm_t::is_by_til() const</code></li> <li><code>void udm_t::set_retaddr(bool on=true)</code></li> <li><code>void udm_t::set_savregs(bool on=true)</code></li> <li><code>void udm_t::set_by_til(bool on=true)</code></li> </ul>"},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-porting-guide-ida-9.html#udt_type_data_t","title":"udt_type_data_t","text":"<ul> <li><code>bool udt_type_data_t::is_fixed() const</code></li> <li><code>void udt_type_data_t::set_fixed(bool on=true)</code></li> </ul>"},{"location":"developer-guide/c%2B%2B-sdk/c%2B%2B-sdk-porting-guide-ida-9.html#idb-events","title":"IDB events","text":"<p>The following table provide a list of IDB events that have been replaced or, in some cases, removed.</p> Since 7 In 9.0 <code>truc_created</code> <code>local_types_changed</code> <code>deleting_struc</code> none <code>struc_deleted</code> <code>local_types_changed</code> <code>changing_struc_align</code> none <code>struc_align_changed</code> <code>local_types_changed</code> <code>renaming_struc</code> none <code>struc_renamed</code> <code>local_types_changed</code> <code>expanding_struc</code> none <code>struc_expanded</code> <code>lt_udt_expanded, frame_expanded, local_types_changed</code> <code>struc_member_created</code> <code>lt_udm_created, frame_udm_created, local_types_changed</code> <code>deleting_struc_member</code> none <code>struc_member_deleted</code> <code>lt_udm_deleted, frame_udm_deleted, local_types_changed</code> <code>renaming_struc_member</code> none <code>struc_member_renamed</code> <code>lt_udm_renamed, frame_udm_renamed, local_types_changed</code> <code>changing_struc_member</code> none <code>struc_member_changed</code> <code>lt_udm_changed, frame_udm_changed, local_types_changed</code> <code>changing_struc_cmt</code> none <code>struc_cmt_changed</code> <code>local_types_changed</code> <code>enum_created</code> <code>local_types_changed</code> <code>deleting_enum</code> none <code>enum_deleted</code> <code>local_types_changed</code> <code>renaming_enum</code> none <code>enum_renamed</code> <code>local_types_changed</code> <code>changing_enum_bf</code> <code>local_types_changed</code> <code>enum_bf_changed</code> <code>local_types_changed</code> <code>changing_enum_cmt</code> none <code>enum_cmt_changed</code> <code>local_types_changed</code> <code>enum_member_created</code> <code>local_types_changed</code> <code>deleting_enum_member</code> none <code>enum_member_deleted</code> <code>local_types_changed</code> <code>enum_width_changed</code> <code>local_types_changed</code> <code>enum_flag_changed</code> <code>local_types_changed</code> <code>enum_ordinal_changed</code> none"},{"location":"developer-guide/c%2B%2B-sdk/how-to-create-a-plugin.html","title":"How to create a plugin with C++ SDK?","text":""},{"location":"developer-guide/c%2B%2B-sdk/how-to-create-a-plugin.html#intro","title":"Intro","text":"<p>The C++ SDK allows developers to create powerful plugins that can extend the IDA Pro capabilities, that enable deeper integration and more control over IDA's core functionality.</p> <p>This guide will walk you through creating a basic plugin using the C++ SDK, demonstrating the structure and best practices for developing C++ plugins for IDA Pro.</p>"},{"location":"developer-guide/c%2B%2B-sdk/how-to-create-a-plugin.html#prerequistes","title":"Prerequistes","text":"<ul> <li>Installed the lastest C++ SDK. You can get it from our Download Center in My Hex-Rays portal. </li> <li>A working C++ development environment (compiler, debugger, etc.). For the Windows Visual Studio users, a plugin template has been created that can be used to create plugin solutions. It can be found in the C++ SDK with a corresponding README file.</li> </ul>"},{"location":"developer-guide/c%2B%2B-sdk/how-to-create-a-plugin.html#before-you-start","title":"Before you start","text":"<ol> <li> <p>Check the C++ SDK Reference Documentation for a comprehensive list of classes, functions, and available APIs.</p> </li> <li> <p>Familiarize yourself with the <code>plugin_t</code> class and <code>plugmod_t</code>, that are fundamental for creating plugins using the C++ SDK.</p> </li> <li> <p>Ensure compatibility with the latest version of IDA Pro and refer to the C++ SDK Porting Guide for any recent changes that might affect your plugin.</p> </li> </ol>"},{"location":"developer-guide/c%2B%2B-sdk/how-to-create-a-plugin.html#overview-of-the-plugin-structure","title":"Overview of the Plugin Structure","text":"<p>An IDA Pro plugin written in C++ typically involves:</p> <ul> <li>A class that inherits from <code>plugmod_t</code>, this class will implement the actual plugin functionality.</li> <li>An init() function that will return a pointer to the above mentioned class.</li> <li>Flags that specify when and how the plugin should be loaded and unloaded.</li> </ul>"},{"location":"developer-guide/c%2B%2B-sdk/how-to-create-a-plugin.html#writing-a-plugin-in-cbasic-steps","title":"Writing a plugin in C++\u2014basic steps","text":""},{"location":"developer-guide/c%2B%2B-sdk/how-to-create-a-plugin.html#create-a-basic-plugin-structure","title":"Create a basic plugin structure","text":"<p>Start by creating a new C++ source file for your plugin. This file will contain the main logic and define the necessary classes and methods for your plugin.</p>"},{"location":"developer-guide/c%2B%2B-sdk/how-to-create-a-plugin.html#define-base-classes","title":"Define base classes","text":"<p>When creating a plugin, it's recommended to create an instace of the class <code>plugin_t</code> with specific flags and a class inheriting from <code>plugmod_t</code> that performs the core functionality.</p> <p>Example of `implementation:</p> <pre><code>#include &lt;ida.hpp&gt;\n#include &lt;idp.hpp&gt;\n#include &lt;loader.hpp&gt;\n#include &lt;funcs.hpp&gt;\n\n// Define the class that inherits from plugmod_t\nclass MyPlugmod : public plugmod_t \n{\npublic:\n    // Constructor\n    MyPlugmod() \n    {\n        msg(\"MyPlugmod: Constructor called.\\n\");\n    }\n\n    // Destructor\n    virtual ~MyPlugmod() \n    {\n        msg(\"MyPlugmod: Destructor called.\\n\");\n    }\n\n    // Method that gets called when the plugin is activated\n    virtual bool idaapi run(size_t arg) override\n    {\n        msg(\"MyPlugmod.run() called with arg: %d\\n\", arg);\n\n        // Iterate through all functions and print their names and addresses\n        int n = get_func_qty();\n        for (int i = 0; i &lt; n; i++) {\n            func_t* pfn = getn_func(i);\n            if (pfn == nullptr)\n                continue;\n\n            qstring name;\n            get_func_name(&amp;name, pfn-&gt;start_ea);\n            msg(\"Function %s at address 0x%llX\\n\", name.length() ? name.c_str(): \"-UNK-\" , pfn-&gt;start_ea);\n        }\n\n        return true;\n    }\n};\n\nstatic plugmod_t* idaapi init(void)\n{\n    return new MyPlugmod();\n}\n\nplugin_t PLUGIN =\n{\n  IDP_INTERFACE_VERSION,\n  PLUGIN_MULTI,         // plugin flags\n  init,                 // initialize\n  nullptr,              // terminate. this pointer can be nullptr\n  nullptr,              // invoke the plugin\n  nullptr,              // long comment about the plugin\n  nullptr,              // multiline help about the plugin\n  \"List functions\",     // the preferred short name of the plugin\n  \"\"                    // the preferred hotkey to run the plugin\n};\n</code></pre> <p>In our example:</p> <ul> <li> <p><code>MyPlugmod</code> class: This class inherits from plugmod_t and overrides the run() method to perform the plugin's main functionality. The constructor and destructor provide initialization and cleanup messages.</p> </li> <li> <p><code>PLUGIN</code> exported plugin_t instance: This object sets the PLUGIN_MULTI flag to allow the plugin to be loaded multiple times if needed.</p> </li> <li> <p><code>init</code> function: This function is called by the by the kernel in order to initialize the plugin. It returns an instance of <code>MyPlugmod</code>.</p> </li> </ul>"},{"location":"developer-guide/c%2B%2B-sdk/how-to-create-a-plugin.html#build-and-install-your-plugin","title":"Build and install your plugin","text":"<ol> <li>Compile your plugin. Once your plugin code is ready, Use your C++ development environment to compile the plugin source code into a shared library (.dll on Windows, .so on Linux, or .dylib on macOS).</li> <li>Install your plugin. Copy the compiled plugin binary to the <code>plugins</code> directory in your IDA installation folder.</li> <li>Run your plugin. Execute the plugin via the specified hotkey or by selecting it from the Edit -&gt; Plugins submenu.</li> </ol>"},{"location":"developer-guide/c%2B%2B-sdk/migration-guides.html","title":"Migration guides","text":"<p>Access our SDK migration guides to smoothly transition from previous IDA versions to the latest one.</p>"},{"location":"developer-guide/c%2B%2B-sdk/migration-guides.html#migration-guides-from-ida-84-to-ida-90","title":"Migration guides from IDA 8.4 to IDA 9.0","text":"<p>SDK Porting Guide</p>"},{"location":"developer-guide/c%2B%2B-sdk/using-the-decompiler-sdk-decompiler-plug-in.html","title":"Using the Decompiler SDK: Decompiler Plug-In","text":"<p>Below is the full source code of a sample plugin. It performs a quite useful transformation of the pseudocode: replaces zeroes in pointer contexts with NULLs. A NULL immediately conveys the idea that the current expression is pointer-related. This is especially useful for unknown function arguments.</p> <p>The plugin is fully automatic. It hooks to the decompiler events and waits for the pseudocode to be ready. At that moment it takes control and modifies the ctree.</p> <p>The conversion is performed by the convert_zeroes() function. It visits all expressions of the ctree and checks for pointer contexts. If a expression has a pointer type, then the make_null_if_zero() function is called for it. This function checks if the expression is a zero constant and converts it if necessary.</p> <p>The plugin can be turned on or off by its menu item in the Plugins submenu.</p> <p>The code is short and straightforward. Use it as a template for your plugins.</p> <p>\\</p> <pre><code>/*\n *      Hex-Rays Decompiler project\n *      Copyright (c) 2007-2019 by Hex-Rays, support@hex-rays.com\n *      ALL RIGHTS RESERVED.\n *\n *      Sample plugin for Hex-Rays Decompiler.\n *      It automatically replaces zeroes in pointer contexts with NULLs.\n *      For example, expression like\n *\n *              funcptr = 0;\n *\n *      will be displayed as\n *\n *              funcptr = NULL;\n *\n *      Due to highly dynamic nature of the decompier output, we must\n *      use the decompiler events to accomplish the task. The plugin will\n *      wait for the ctree structure to be ready in the memory and will\n *      replace zeroes in pointer contexts with NULLs.\n *\n */\n\n#include &lt;hexrays.hpp&gt;\n\n// Hex-Rays API pointer\nhexdsp_t *hexdsp = NULL;\n\nstatic bool inited = false;\n\nstatic const char nodename[] = \u201c$ hexrays NULLs\u201d;\nstatic const char null_type[] = \u201cMACRO_NULL\u201d;\n//\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2013\n// Is the plugin enabled?\n// The user can disable it. The plugin will save the on/off switch in the\n// current database.\nstatic bool is_enabled(void)\n{\n  netnode n(nodename); // use a netnode to save the state\n  return n.altval(0) == 0; // if the long value is positive, then disabled\n}\n\n//\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2013\n// If the expression is zero, convert it to NULL\nstatic void make_null_if_zero(cexpr_t *e)\n{\n  if ( e-&gt;is_zero_const() &amp;&amp; !e-&gt;type.is_ptr() )\n  { // this is plain zero, convert it\n    number_format_t &amp;nf = e-&gt;n-&gt;nf;\n    nf.flags = enum_flag();\n    nf.serial = 0;\n    nf.type_name = null_type;\n    e-&gt;type = tinfo_t::get_stock(STI_PVOID);\n  }\n}\n\n//\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2013\n// Convert zeroes of the ctree to NULLs\nstatic void convert_zeroes(cfunc_t *cfunc)\n{\n  // To represent NULLs, we will use the MACRO_NULL enumeration\n  // Normally it is present in the loaded tils but let\u2019s verify it\n  if ( !get_named_type(NULL, null_type, NTF_TYPE) )\n  {\n    msg(\u201c%s type is missing, cannot convert zeroes to NULLs\\n\u201d, null_type);\n    return;\n  }\n\n  // We derive a helper class from ctree_visitor_t\n  // The ctree_visitor_t is a base class to derive\n  // ctree walker classes.\n  // You have to redefine some virtual functions\n  // to do the real job. Here we redefine visit_expr() since we want\n  // to examine and modify expressions.\n  struct ida_local zero_converter_t : public ctree_visitor_t\n  {\n    zero_converter_t(void) : ctree_visitor_t(CV_FAST) {}\n    int idaapi visit_expr(cexpr_t *e)\n    {\n      // verify if the current expression has pointer expressions\n      // we handle the following patterns:\n      //  A. ptr = 0;\n      //  B. func(0); where argument is a pointer\n      //  C. ptr op 0 where op is a comparison\n      switch ( e-&gt;op )\n      {\n        case cot_asg:   // A\n          if ( e-&gt;x-&gt;type.is_ptr() )\n            make_null_if_zero(e-&gt;y);\n          break;\n\n        case cot_call:  // B\n          {\n            carglist_t &amp;args = *e-&gt;a;\n            for ( int i=0; i &lt; args.size(); i++ ) // check all arguments\n            {\n              carg_t &amp;a = args[i];\n              if ( a.formal_type.is_ptr_or_array() )\n                make_null_if_zero(&amp;a);\n            }\n          }\n          break;\n\n        case cot_eq:    // C\n        case cot_ne:\n        case cot_sge:\n        case cot_uge:\n        case cot_sle:\n        case cot_ule:\n        case cot_sgt:\n        case cot_ugt:\n        case cot_slt:\n        case cot_ult:\n          // check both sides for zeroes\n          if ( e-&gt;y-&gt;type.is_ptr() )\n            make_null_if_zero(e-&gt;x);\n          if ( e-&gt;x-&gt;type.is_ptr() )\n            make_null_if_zero(e-&gt;y);\n          break;\n\n        default:\n          break;\n\n      }\n      return 0; // continue walking the tree\n    }\n  };\n  zero_converter_t zc;\n  // walk the whole function body\n  zc.apply_to(&amp;cfunc-&gt;body, NULL);\n}\n\n//\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2013\n// This callback will detect when the ctree is ready to be displayed\n// and call convert_zeroes() to create NULLs\nstatic ssize_t idaapi callback(void *, hexrays_event_t event, va_list va)\n{\n  if ( event == hxe_maturity )\n  {\n    cfunc_t *cfunc = va_arg(va, cfunc_t*);\n    ctree_maturity_t mat = va_argi(va, ctree_maturity_t);\n    if ( mat == CMAT_FINAL ) // ctree is ready, time to convert zeroes to NULLs\n      convert_zeroes(cfunc);\n  }\n  return 0;\n}\n\n//\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2013\n// Initialize the plugin.\nint idaapi init(void)\n{\n  if ( !init_hexrays_plugin() )\n    return PLUGIN_SKIP; // no decompiler\n  if ( is_enabled() ) // null plugin is enabled?\n  {\n    install_hexrays_callback(callback, NULL);\n    const char *hxver = get_hexrays_version();\n    msg(\u201cHex-rays version %s has been detected, %s ready to use\\n\u201d, hxver, PLUGIN.wanted_name);\n  }\n  inited = true;\n  return PLUGIN_KEEP;\n}\n\n//\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2013\nvoid idaapi term(void)\n{\n  if ( inited )\n  {\n    // clean up\n    remove_hexrays_callback(callback, NULL);\n    term_hexrays_plugin();\n  }\n}\n\n//\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2013\nbool idaapi run(size_t)\n{\n  // since all real work is done in the callbacks, use the main plugin entry\n  // to turn it on and off.\n  // display a message explaining the purpose of the plugin:\n  int code = askbuttons(\n       \u201c~E~nable\u201d,\n       \u201c~D~isable\u201d,\n       \u201c~C~lose\u201d,\n       \u20131,\n       \u201cAUTOHIDE NONE\\n\u201d\n       \u201cSample plugin for Hex-Rays decompiler.\\n\u201d\n       \u201c\\n\u201d\n       \u201cThis plugin is fully automatic.\\n\u201d\n       \u201cIt detects zeroes in pointer contexts and converts them into NULLs.\\n\u201d\n       \u201c\\n\u201d\n       \u201cThe current state of the plugin is: %s\\n\u201d,\n       is_enabled() ? \u201cENABLED\u201d : \u201cDISABLED\u201d);\n  switch ( code )\n  {\n    case \u20131:    // close\n      break;\n    case 0:     // disable\n    case 1:     // enable\n      netnode n;\n      n.create(nodename);\n      n.altset(0, code == 0);\n      if ( code )\n        install_hexrays_callback(callback, NULL);\n      else\n        remove_hexrays_callback(callback, NULL);\n      info(\u201cThe %s plugin has been %s.\u201d, PLUGIN.wanted_name, code ? \u201cENABLED\u201d : \u201cDISABLED\u201d);\n      break;\n  }\n  return true;\n}\n\n//\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2013\nstatic char comment[] = \u201cSample2 plugin for Hex-Rays decompiler\u201d;\n\n//\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2013\n//\n//      PLUGIN DESCRIPTION BLOCK\n//\n//\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2013\nplugin_t PLUGIN =\n{\n  IDP_INTERFACE_VERSION,\n  0,                    // plugin flags\n  init,                 // initialize\n  term,                 // terminate. this pointer may be NULL.\n  run,                  // invoke plugin\n  comment,              // long comment about the plugin\n                        // it could appear in the status line\n                        // or as a hint\n  \u201c\u201d,                   // multiline help about the plugin\n  \u201cHex-Rays NULL converter\u201d, // the preferred short name of the plugin\n  \u201c\u201d                    // the preferred hotkey to run the plugin\n};\n\n\n</code></pre>"},{"location":"developer-guide/idapython/how-to-create-a-plugin.html","title":"How to create a plugin?","text":""},{"location":"developer-guide/idapython/how-to-create-a-plugin.html#intro","title":"Intro","text":"<p>The IDAPython API enables you to extend IDA\u2019s core functionality and create custom plugins. Whether running as standalone scripts in the output window or leveraging advanced UI features, these plugins can significantly enhance your workflow.</p> <p>Compared to C++ SDK plugins, IDAPython plugins are faster and easier to develop\u2014no need for lengthy build or compilation steps\u2014while maintaining almost the same capabilities.</p> <p>This tutorial outlines how to write plugins using the updated plugin framework and best practices to streamline your development process.</p>"},{"location":"developer-guide/idapython/how-to-create-a-plugin.html#before-you-start","title":"Before you start","text":"<ol> <li>Check our IDAPython reference docs for an up-to-date list of all modules, classes, functions, and so on.</li> <li>Get familiar with the <code>ida_idaapi.plugin_t</code> class, a basic and required class that provides the necessary structure for your plugin. It mirrors the C++ SDK <code>plugin_t</code> class.</li> <li>Ensure compatibility with the latest IDA version by reviewing our IDAPython Porting Guide for recent updates.</li> </ol>"},{"location":"developer-guide/idapython/how-to-create-a-plugin.html#get-a-sample-plugin","title":"Get a sample plugin","text":"<p>In this tutorial, we\u2019ll use a simple sample plugin designed to work with the new plugin framework, that simplifies plugin development. The plugin performs a straightforward task: once invoked by the user after loading a database, it lists all functions and their addresses for the current IDA database before exiting.</p> <p>You can download \"My First Plugin\" from here:</p> <p>{% file src=\"assets/my-first-IDAPython-plugin.zip\" %}</p>"},{"location":"developer-guide/idapython/how-to-create-a-plugin.html#writing-a-plugin-in-idapythonbasic-steps","title":"Writing a plugin in IDAPython\u2014basic steps","text":""},{"location":"developer-guide/idapython/how-to-create-a-plugin.html#create-a-single-py-file-to-start","title":"Create a single <code>.py</code> file to start","text":"<p>To begin, your plugin should consist of a single Python file that serves as the entry point. This file should define the main logic and include necessary imports and primary functions that will be executed when the plugin runs.</p>"},{"location":"developer-guide/idapython/how-to-create-a-plugin.html#define-base-classes","title":"Define base classes","text":"<p>It\u2019s recommended to create a class that inherits from <code>plugin_t</code> with specific flags and a class inheriting from <code>plugmod_t</code> that performs the core functionality.</p>"},{"location":"developer-guide/idapython/how-to-create-a-plugin.html#define-a-class-that-inherits-from-ida_idaapiplugin_t","title":"Define a class that inherits from <code>ida_idaapi.plugin_t</code>","text":"<p>Include a class that inherits from <code>plugin_t</code>. This base class will outline the core functionality and lifecycle of your plugin.</p> <p>Example of <code>plugin_t</code> class implementation:</p> <pre><code>class MyPlugin(ida_idaapi.plugin_t):\n    flags = ida_idaapi.PLUGIN_UNL | ida_idaapi.PLUGIN_MULTI\n    comment = \"This is my first simple IDA Pro plugin\"\n    help = \"This plugin lists all functions in the current database\"\n    wanted_name = \"My First Plugin\"\n    wanted_hotkey = \"Shift-P\"\n\n    def init(self):\n        print(\"&gt;&gt;&gt;MyPlugin: Init called.\")\n        return MyPlugmod()\n</code></pre>"},{"location":"developer-guide/idapython/how-to-create-a-plugin.html#define-a-subclass-that-inherits-from-ida_idaapiplugmod_t","title":"Define a subclass that inherits from <code>ida_idaapi.plugmod_t</code>","text":"<p>To implement the main functionality of your plugin within the new framework, it is recommended to define a subclass of <code>plugmod_t</code>, that performs the main task of the plugin.</p> <p>Example of <code>plugmod_t</code> class implementation:</p> <pre><code>class MyPlugmod(ida_idaapi.plugmod_t):\n    def __del__(self):\n        print(\"&gt;&gt;&gt; MyPlugmod: destructor called.\")\n\n    def run(self, arg):\n        print(\"&gt;&gt;&gt; MyPlugmod.run() is invoked with argument value: {arg}.\")\n        for func_ea in idautils.Functions():\n            func_name = ida_funcs.get_func_name(func_ea)\n            print(f\"&gt;&gt;&gt;MyPlugmod: Function{func_name} at address {func_ea:x}\")\n</code></pre>"},{"location":"developer-guide/idapython/how-to-create-a-plugin.html#overview-of-myplugin-class-attributes","title":"Overview of <code>MyPlugin</code> class attributes","text":"<p><code>flags</code> attribute</p> <p>The <code>flags</code> attribute defines the behavior and plugin properties, and what is crucial, describe its lifecycle: how and when it is loaded into IDA.</p> <p>Your plugin may have no flags (<code>flags = 0</code>). It is usually a good strategy for basic plugins that perform a specific task once and then are no longer needed. Assigning <code>0</code> to flags apply a default behavior to your plugin:</p> <ul> <li>it can be loaded and reloaded at any time;</li> <li>it is triggered by the user and does not run constantly in the background;</li> <li>it does not modify the database.</li> </ul> <p>Common <code>flags</code> for plugins:</p> <ul> <li><code>PLUGIN_MULTI</code>: Recommended for all plugins; this flag enables the plugin to run simultaneously across multiple opened IDBs within the same IDA instance.</li> <li><code>PLUGIN_FIX</code>: The plugin loads when IDA launches and stays loaded until IDA exits.</li> <li><code>PLUGIN_DRAW</code>: The plugin needs to be invoked for every screen refresh.</li> <li><code>PLUGIN_MOD</code>: The plugin modifies the IDA database.</li> <li><code>PLUGIN_PROC</code>: The plugin is a processor module extension.</li> <li><code>PLUGIN_DBG</code>: The plugin will be loaded only when a debugger is active (for debugger-related plugins)</li> <li><code>PLUGIN_UNL</code>: The plugin will be unloaded immediately after calling the <code>run</code> method.</li> </ul> <p>In our example, we used <code>PLUGIN_UNL</code> flag, as after performing a specific task\u2014listing functions in the current database\u2014is no longer needed.</p> <p>For a full list of available flags, refer to the ida_idaapi module.</p> <p><code>comment</code> attribute The <code>comment</code> attribute allows you to provide a brief description of your plugin.</p> <p><code>wanted_name</code> attribute The <code>wanted_name</code> attribute specifies the preferred short name of the plugin, as it apperas under Edit -&gt; Plugins submenu.</p> <p><code>wanted_hotkey</code> attribute The <code>wanted_hotkey</code> attribute specifies a preferred shortcut to run the plugin.</p> <p>{% hint style=\"info\" %} The preferred name and hotkey may be overridden by changing the settings in the <code>plugins.cfg</code> file.</p>"},{"location":"developer-guide/idapython/how-to-create-a-plugin.html#specify-your-plugin-lifecycle","title":"Specify your plugin lifecycle","text":"<p>Below we scrutinize the key components for defining your plugin lifecycle.</p> <p>Define a PLUGIN_ENTRY function Declare a function called PLUGIN_ENTRY that returns a <code>plugin_t</code> instance (or an object containing all attributes of a plugin_t object).</p> <p>Initialization</p> <p>The <code>init()</code> method is called when the plugin is loaded into IDA and is responsible for initializing your plugin.</p> <p>The <code>init()</code> method returns an pointer to a <code>plugmod_t</code> object and indicate that this object run method is going to be used.</p> <p>{% hint style=\"info\" %} In the new plugin framework, run/term functions of <code>plugin_t</code> are not used. Virtual functions of <code>plugmod_t</code> are used instead.</p> <p>In our example, when <code>MyPlugin.init()</code> is called it initalizes the plugin and returns a new instance of <code>MyPlugmod</code>.</p> <pre><code>    def init(self):\n        print(\"&gt;&gt;&gt;MyPlugin: Init called.\")\n        return MyPlugmod()\n</code></pre> <p>Activation</p> <p>The <code>run</code> method is executed when the user triggers your plugin activation, whether via hotkey or Edit -&gt; Plugins submenu.</p> <p>{% hint style=\"info\" %} An alternative way of activation your plugin is via IDA events and registering a callback functions.</p> <p>In our example, when the <code>run()</code> method of MyPlugmod is called, it prints function names and addresses in Output window.</p> <pre><code>    def run(self, arg):\n        print(\"&gt;&gt;&gt; MyPlugmod.run() is invoked with argument value: {arg}.\")\n        for func_ea in idautils.Functions():\n            func_name = ida_funcs.get_func_name(func_ea)\n            print(f\"&gt;&gt;&gt;MyPlugmod: Function{func_name} at address {func_ea:x}\")\n</code></pre> <p>Unloading</p> <p>The <code>__del__()</code> is called automatically when the plugin is going to be unloaded (destroyed). The conditions that define the circumstances under which the plugin should be unloaded depend on the <code>flags</code> setting.</p> <p>Example of plugin lifecycle implementation:</p> <pre><code>class MyPlugmod(ida_idaapi.plugmod_t):\n    def __del__(self):\n        print(\"&gt;&gt;&gt; MyPlugmod: destructor called.\")\n\n    def run(self, arg):\n        print(\"&gt;&gt;&gt; MyPlugmod.run() is invoked with argument value: {arg}.\")\n        for func_ea in idautils.Functions():\n            func_name = ida_funcs.get_func_name(func_ea)\n            print(f\"&gt;&gt;&gt;MyPlugmod: Function{func_name} at address {func_ea:x}\")\n\n\nclass MyPlugin(ida_idaapi.plugin_t):\n    flags = ida_idaapi.PLUGIN_UNL | ida_idaapi.PLUGIN_MULTI\n    comment = \"This is my first simple IDA Pro plugin\"\n    help = \"This plugin lists all functions in the current database\"\n    wanted_name = \"My First Plugin\"\n    wanted_hotkey = \"Shift-P\"\n\n    def init(self):\n        print(\"&gt;&gt;&gt;MyPlugin: Init called.\")\n        return MyPlugmod()\n\n\ndef PLUGIN_ENTRY():\n    return MyPlugin()\n</code></pre> <p>In our example:</p> <ul> <li><code>PLUGIN_ENTRY()</code> returns an instance of the <code>MyPlugin</code> class.</li> <li><code>MyPlugin.init()</code> is called to initialize the plugin and returns an instance of <code>MyPlugmod</code>. MyPlugmod.run() is called when the plugin is activated by the user via the hotkey or the Plugins menu. Then, the <code>run()</code> method of <code>MyPlugmod</code> is called, which prints function names and addresses in the current IDA database.</li> <li><code>MyPlugmod.__del__()</code> is called automatically when the plugin is destroyed (unloaded), and it prints a termination message. As we defined in <code>flags</code>, our exemplary plugin unloads directly after performing its task.</li> </ul>"},{"location":"developer-guide/idapython/how-to-create-a-plugin.html#include-an-ida-pluginjson-file","title":"Include an <code>ida-plugin.json</code> file","text":"<p>To ensure your plugin is well-organized, it's recommended to add an <code>ida-plugin.json</code> file to your plugin directory with essential metadata. This file eases the organization of your plugin files (allows it to be self-contained in its own sub-directory) and smooths the process for accepting your plugin into our official plugin repository if you decide to share it with the Hex-Rays community.</p> <p>To work properly, the <code>ida-plugin.json</code> file must contain at the very least the <code>IDAMetadataDescriptorVersion</code> field as well as a <code>plugin</code> object containing the <code>name</code> and <code>entryPoint</code> fields.</p> <p>The <code>name</code> will be used to identify the plugin and also generate a namespace name for it if necessary (e.g. an IDAPython plugin). The namespace name is generated by converting all non alphanumeric characters of the plugin name to underscores (<code>_</code>) and prepending <code>__plugins__</code> to it. For example \"my plugin\" would become <code>__plugins__my_plugin</code>.</p> <p>The <code>entryPoint</code> must be the filename of the \"main\" file for the plugin. It should be stored in the same directory as its <code>ida-plugin.json</code> file.</p> <p>If the <code>entryPoint</code> has no file extension, IDA will assume it is a native plugin and append the appropriate file extension for dynamic shared objects for the host platform (<code>.dll</code>, <code>.so</code>, <code>.dylib</code>).</p> <p>Example of the <code>ida-plugin.json</code> file:</p> <pre><code>{\n  \"IDAMetadataDescriptorVersion\": 1,\n  \"plugin\": {\n    \"name\": \"My First Plugin\",\n    \"entryPoint\": \"my-first-plugin.py\"\n  }\n}\n\n</code></pre>"},{"location":"developer-guide/idapython/how-to-create-a-plugin.html#install-and-execute-your-plugin","title":"Install and execute your plugin","text":"<ol> <li>Copy the plugin directory (in our example, the folder containing <code>my-first-plugin.py</code> and <code>ida.plugin.json</code> files) or single script to plugins directory in your IDA installation folder. Once it's done, you may need to restart your IDA to see your plugin name under Edit -&gt; Plugins submenu.</li> <li>Run the plugin by pressing the specified hotkey or execute it from Edit -&gt; Plugins -&gt; \\."},{"location":"developer-guide/idapython/idapython-examples.html","title":"Examples","text":""},{"location":"developer-guide/idapython/idapython-examples.html#idapython-examples","title":"IDAPython examples","text":"<p>This collection of examples organizes all IDAPython sample code into categories for easy reference. Each example demonstrates practical implementation for the IDAPython API, complementing the reference documentation with a real-world usage scenario.</p>"},{"location":"developer-guide/idapython/idapython-examples.html#how-to-run-the-examples","title":"How to run the examples?","text":""},{"location":"developer-guide/idapython/idapython-examples.html#load-the-script-via-file-loader","title":"Load the script via File Loader","text":"<ol> <li>Navigate to File -&gt; Script file....</li> <li>In the new dialog, select the <code>.py</code> script you want to run and click Open.</li> </ol>"},{"location":"developer-guide/idapython/idapython-examples.html#load-the-script-via-script-command","title":"Load the script via Script command","text":"<ol> <li>Navigate to File -&gt; Script command....</li> <li>Paste the code into Please enter script body field and click Run.</li> </ol>"},{"location":"developer-guide/idapython/idapython-examples.html#load-the-script-via-output-windowconsole","title":"Load the script via output window/console","text":"<ol> <li>In the output window/IDAPython console, type the following command: <code>exec(open(\"path/to/your_script.py\").read())</code> to execute the script.</li> </ol>"},{"location":"developer-guide/idapython/idapython-examples.html#example-categories-overview","title":"Example Categories: Overview","text":"User interfaceCreating &amp; manipulating user-interface widgets, prompting the user with forms, enriching existing widgets, or creating your own UI through Python Qt bindings.DisassemblyVarious ways to query, or modify the disassembly listing, alter the way analysis is performed, or be notified of changes made to the IDB.DecompilationQuerying the decompiler, manipulating the decompilation trees (either at the microcode level, or the C-tree), and examples showing how to intervene in the decompilation output.DebuggersDriving debugging sessions, be notified of debugging events.Working with typesThese samples utilize our Type APIs, which allow you to manage the types and perform various operations on them, like creating the structures or enums and adding their members programmatically.MiscellaneousMiscellaneous examples that don't quite fall into another category, but don't really justify one of their own."},{"location":"developer-guide/idapython/idapython-examples.html#user-interface","title":"User interface","text":"LevelExamplesBeginner<ul><li>Assign a shortcut to a custom function</li><li>Add custom menus to IDA</li><li>Assign a background color to an address, function &amp; segment</li><li>Override the default \"Functions\" chooser colors</li><li>Create a dockable container, and populate it with Qt widgets</li><li>Prevent an action from being triggered</li><li>Use timers for delayed execution</li><li>Show, update &amp; hide the progress dialog</li></ul>Intermediate<ul><li>Custom actions, with icons &amp; tooltips</li><li>Show tabular data</li><li>Show tabular data, with multiple selection</li><li>Create custom listings in IDA</li><li>Implement an alternative \"Functions\" window</li><li>Implement a \"jump to next comment\" action within IDA's listing</li><li>Dynamically colorize [parts of] lines</li><li>React to UI events/notifications</li><li>Paint on top of the navigation band</li><li>Save, and then restore, positions in a listing</li><li>Retrieve the selection from the \"Strings\" window</li><li>Follow the movements of one graph, in another</li><li>Trigger actions programmatically</li></ul>Advanced<ul><li>Advanced usage of the form API</li><li>Restore custom widgets across sessions</li><li>Showing tabular data in a flat, or tree-like fashion</li><li>Colorize lines interactively</li><li>Add a custom command-line interpreter</li><li>Draw custom graphs</li><li>Retrieve &amp; dump current selection</li><li>Inject commands in the \"Output\" window</li><li>A lazy-loaded, tree-like data view</li><li>Paint text on graph view edges</li><li>Programmatically manipulate disassembly and graph widgets</li></ul>"},{"location":"developer-guide/idapython/idapython-examples.html#disassembly","title":"Disassembly","text":"LevelExamplesBeginner<ul><li>Dump function flowchart</li><li>Insert information into listing prefixes</li><li>Enumerate file imports</li><li>Enumerate patched bytes</li><li>Enumerate known problems</li><li>List segment functions (and cross-references to them)</li><li>List all functions (and cross-references) in segment</li><li>Dump the strings that are present in the file</li><li>Produce disassembly listing for the entire file</li></ul>Intermediate<ul><li>Rewrite the representation of some instructions</li><li>Implement assembly of instructions</li><li>Retrieve comments surrounding instructions</li><li>Dump function information</li><li>Using \"ida_bytes.find_string\"</li><li>Print notifications about function prototype changes</li><li>List listing bookmarks</li><li>Showcase (some of) the iterators available on a function</li><li>React to database events/notifications</li><li>React to processor events/notifications</li><li>Record and replay changes in function prototypes</li></ul>Advanced<ul><li>Add a new member to an existing function frame</li><li>Custom data types &amp; printers</li><li>List operands representing a \"path\" to a (possibly nested) structure member</li><li>Notify the user when an instruction operand changes</li></ul>"},{"location":"developer-guide/idapython/idapython-examples.html#decompilation","title":"Decompilation","text":"LevelExamplesBeginner<ul><li>Produce C listing for the entire file</li><li>Decompile &amp; print current function</li><li>Generate microcode for the selected range of instructions</li><li>Dump statement blocks</li><li>Provide custom decompiler hints</li></ul>Intermediate<ul><li>Interactively color decompilation lines</li><li>Decompile entrypoint automatically</li><li>Add custom microcode instruction optimization rule</li><li>Dynamically provide a custom call type</li><li>Dump user-defined information for a function</li><li>Superficially modify the decompilation output</li><li>Improve decompilation by turning specific patterns into custom function calls</li><li>React to decompiler events/notifications</li><li>Modifying function local variables</li></ul>Advanced<ul><li>Print information about the current position in decompilation</li><li>Add a custom microcode block optimization rule</li><li>List instruction registers</li><li>Invoke the structure offset-choosing dialog from decompilation</li><li>Add a custom microcode instruction optimization rule</li><li>Invert if/else blocks in decompilation</li><li>Dump C-tree graph</li><li>Show decompiler cross-references</li></ul>"},{"location":"developer-guide/idapython/idapython-examples.html#debuggers","title":"Debuggers","text":"LevelExamplesBeginner<ul><li>Print all registers, for all threads in the debugged process</li><li>Dump symbols from a process being debugged</li></ul>Intermediate<ul><li>Print call stack</li><li>Add a custom action to the \"registers\" widget</li></ul>Advanced<ul><li>Programmatically drive a debugging session</li><li>React to trace notifications</li><li>Execute code into the application being debugged (on Linux)</li><li>Execute code into the application being debugged (on Windows)</li></ul>"},{"location":"developer-guide/idapython/idapython-examples.html#working-with-types","title":"Working with types","text":"LevelExamplesBeginner<ul><li>Create a structure by parsing its definition</li><li>Delete structure members that fall within an offset range</li><li>Print enumeration members</li><li>Print function stack frame information</li><li>List database functions prototypes</li><li>List structure members</li><li>List cross-references to a structure</li><li>List union members</li><li>Mark a register \"spoiled\" by a function</li></ul>Intermediate<ul><li>Apply function prototype to call sites</li><li>Create an array type</li><li>Create a structure with bitfield members</li><li>Create a bitmask enumeration</li><li>Create a type library file</li><li>Create a structure programmatically</li><li>Create &amp; populate a structure</li><li>Create a union</li><li>Create a segment, and define (complex) data in it</li><li>Utilities to detect structure gaps &amp; alignment</li><li>Get member by offset, taking into account variable sized structures</li><li>Get information about the \"innermost\" member of a structure</li><li>Load a type library from a file, and then a type from it</li><li>Inject a member in the middle of a structure</li><li>List all xrefs to a function stack variable</li><li>List cross-references to function stack frame variables</li><li>Assign DOS/PE headers structures to a PE binary</li><li>Recursively visit a type and its members</li></ul>Advanced<ul><li>Change the name of an existing stack variable</li><li>Change the type &amp; name of a function stack frame variable</li><li>Turn instruction operand into a structure offset</li></ul>"},{"location":"developer-guide/idapython/idapython-examples.html#miscellaneous","title":"Miscellaneous","text":"LevelExamplesBeginner<ul><li>Code to be run right after IDAPython initialization</li></ul>Intermediate<ul><li>Add functions to the IDC runtime, from IDAPython</li></ul>Advanced<ul><li>Add 64-bit (.idb-&gt;.i64) conversion capabilities to custom plugins</li><li>Add merge functionality to a simple plugin</li><li>Implement merging functionality for custom plugins</li></ul>"},{"location":"developer-guide/idapython/idapython-examples.html#examples-list","title":"Examples list","text":""},{"location":"developer-guide/idapython/idapython-examples.html#assign-a-shortcut-to-a-custom-function","title":"Assign a shortcut to a custom function","text":"<p><code>ida_kernwin.add_hotkey</code> is a simpler, but much less flexible alternative to <code>ida_kernwin.register_action</code> (though it does use the same mechanism under the hood.)</p> <p>It's particularly useful during prototyping, but note that the actions that are created cannot be inserted in menus, toolbars or cannot provide a custom <code>ida_kernwin.action_handler_t.update</code> callback.</p> Source code Keywords Level add_hotkey.py actions Beginner <p>APIs Used:</p> <ul> <li><code>ida_kernwin.add_hotkey</code></li> <li><code>ida_kernwin.del_hotkey</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-examples.html#add-custom-menus-to-ida","title":"Add custom menus to IDA","text":"<p>It is possible to add custom menus to IDA, either at the toplevel (i.e., into the menubar), or as submenus of existing menus.</p> <p>Notes:</p> <ul> <li>the same action can be present in more than 1 menu</li> <li>this example does not deal with context menus</li> </ul> Source code Keywords Level add_menus.py actions Beginner <p>APIs Used:</p> <ul> <li><code>ida_kernwin.AST_ENABLE_ALWAYS</code></li> <li><code>ida_kernwin.SETMENU_INS</code></li> <li><code>ida_kernwin.action_desc_t</code></li> <li><code>ida_kernwin.action_handler_t</code></li> <li><code>ida_kernwin.attach_action_to_menu</code></li> <li><code>ida_kernwin.create_menu</code></li> <li><code>ida_kernwin.register_action</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-examples.html#assign-a-background-color-to-an-address-function-segment","title":"Assign a background color to an address, function &amp; segment","text":"<p>This illustrates the setting/retrieval of background colours using the IDC wrappers</p> <p>In order to do so, we'll be assigning colors to specific ranges (item, function, or segment). Those will be persisted in the database.</p> Source code Keywords Level colorize_disassembly.py coloring idc Beginner <p>APIs Used:</p> <ul> <li><code>idc.CIC_FUNC</code></li> <li><code>idc.CIC_ITEM</code></li> <li><code>idc.CIC_SEGM</code></li> <li><code>idc.get_color</code></li> <li><code>idc.here</code></li> <li><code>idc.set_color</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-examples.html#override-the-default-functions-chooser-colors","title":"Override the default \"Functions\" chooser colors","text":"<p>Color the function in the Function window according to its size. The larger the function, the darker the color.</p> <p>The key, is overriding <code>ida_kernwin.UI_Hooks.get_chooser_item_attrs</code></p> Source code Keywords Level func_chooser_coloring.py UI_Hooks Beginner <p>APIs Used:</p> <ul> <li><code>ida_funcs.get_func</code></li> <li><code>ida_kernwin.UI_Hooks</code></li> <li><code>ida_kernwin.enable_chooser_item_attrs</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-examples.html#create-a-dockable-container-and-populate-it-with-qt-widgets","title":"Create a dockable container, and populate it with Qt widgets","text":"<p>Using <code>ida_kernwin.PluginForm.FormToPyQtWidget</code>, this script converts IDA's own dockable widget into a type that is recognized by PyQt5, which then enables populating it with regular Qt widgets.</p> Source code Keywords Level populate_pluginform_with_pyqt_widgets.py Beginner <p>APIs Used:</p> <ul> <li><code>ida_kernwin.PluginForm</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-examples.html#prevent-an-action-from-being-triggered","title":"Prevent an action from being triggered","text":"<p>Using <code>ida_kernwin.UI_Hooks.preprocess_action</code>, it is possible to respond to a command instead of the action that would otherwise do it.</p> Source code Keywords Level prevent_jump.py UI_Hooks Beginner <p>APIs Used:</p> <ul> <li><code>ida_kernwin.UI_Hooks</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-examples.html#use-timers-for-delayed-execution","title":"Use timers for delayed execution","text":"<p>Register (possibly repeating) timers.</p> Source code Keywords Level register_timer.py Beginner <p>APIs Used:</p> <ul> <li><code>ida_kernwin.register_timer</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-examples.html#show-update-hide-the-progress-dialog","title":"Show, update &amp; hide the progress dialog","text":"<p>Using the progress dialog (aka 'wait box') primitives.</p> Source code Keywords Level show_and_hide_waitbox.py actions Beginner <p>APIs Used:</p> <ul> <li><code>ida_hexrays.decompile</code></li> <li><code>ida_kernwin.hide_wait_box</code></li> <li><code>ida_kernwin.replace_wait_box</code></li> <li><code>ida_kernwin.show_wait_box</code></li> <li><code>ida_kernwin.user_cancelled</code></li> <li><code>idautils.Functions</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-examples.html#custom-actions-with-icons-tooltips","title":"Custom actions, with icons &amp; tooltips","text":"<p>How to create user actions, that once created can be inserted in menus, toolbars, context menus, ...</p> <p>Those actions, when triggered, will be passed a 'context' that contains some of the most frequently needed bits of information.</p> <p>In addition, custom actions can determine when they want to be available (through their <code>ida_kernwin.action_handler_t.update</code> callback)</p> Source code Keywords Level actions.py actions ctxmenu UI_Hooks Intermediate <p>APIs Used:</p> <ul> <li><code>ida_kernwin.AST_DISABLE_FOR_WIDGET</code></li> <li><code>ida_kernwin.AST_ENABLE_FOR_WIDGET</code></li> <li><code>ida_kernwin.BWN_DISASM</code></li> <li><code>ida_kernwin.SETMENU_APP</code></li> <li><code>ida_kernwin.UI_Hooks</code></li> <li><code>ida_kernwin.action_desc_t</code></li> <li><code>ida_kernwin.action_handler_t</code></li> <li><code>ida_kernwin.attach_action_to_menu</code></li> <li><code>ida_kernwin.attach_action_to_popup</code></li> <li><code>ida_kernwin.attach_action_to_toolbar</code></li> <li><code>ida_kernwin.get_widget_type</code></li> <li><code>ida_kernwin.load_custom_icon</code></li> <li><code>ida_kernwin.register_action</code></li> <li><code>ida_kernwin.unregister_action</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-examples.html#show-tabular-data","title":"Show tabular data","text":"<p>Shows how to subclass the ida_kernwin.Choose class to show data organized in a simple table. In addition, registers a couple actions that can be applied to it.</p> Source code Keywords Level choose.py actions chooser ctxmenu Intermediate <p>APIs Used:</p> <ul> <li><code>Choose</code></li> <li><code>Choose.ALL_CHANGED</code></li> <li><code>Choose.CH_CAN_DEL</code></li> <li><code>Choose.CH_CAN_EDIT</code></li> <li><code>Choose.CH_CAN_INS</code></li> <li><code>Choose.CH_CAN_REFRESH</code></li> <li><code>Choose.CH_RESTORE</code></li> <li><code>Choose.NOTHING_CHANGED</code></li> <li><code>ida_kernwin.AST_DISABLE_FOR_WIDGET</code></li> <li><code>ida_kernwin.AST_ENABLE_FOR_WIDGET</code></li> <li><code>ida_kernwin.action_desc_t</code></li> <li><code>ida_kernwin.action_handler_t</code></li> <li><code>ida_kernwin.attach_action_to_popup</code></li> <li><code>ida_kernwin.is_chooser_widget</code></li> <li><code>ida_kernwin.register_action</code></li> <li><code>ida_kernwin.unregister_action</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-examples.html#show-tabular-data-with-multiple-selection","title":"Show tabular data, with multiple selection","text":"<p>Similar to choose, but with multiple selection</p> Source code Keywords Level choose_multi.py actions chooser Intermediate <p>APIs Used:</p> <ul> <li><code>Choose</code></li> <li><code>Choose.ALL_CHANGED</code></li> <li><code>Choose.CHCOL_HEX</code></li> <li><code>Choose.CH_MULTI</code></li> <li><code>Choose.NOTHING_CHANGED</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-examples.html#create-custom-listings-in-ida","title":"Create custom listings in IDA","text":"<p>How to create simple listings, that will share many of the features as the built-in IDA widgets (highlighting, copy &amp; paste, notifications, ...)</p> <p>In addition, creates actions that will be bound to the freshly-created widget (using <code>ida_kernwin.attach_action_to_popup</code>.)</p> Source code Keywords Level custom_viewer.py actions ctxmenu listing Intermediate <p>APIs Used:</p> <ul> <li><code>ida_kernwin.AST_ENABLE_ALWAYS</code></li> <li><code>ida_kernwin.IK_DELETE</code></li> <li><code>ida_kernwin.IK_ESCAPE</code></li> <li><code>ida_kernwin.action_desc_t</code></li> <li><code>ida_kernwin.action_handler_t</code></li> <li><code>ida_kernwin.ask_long</code></li> <li><code>ida_kernwin.ask_str</code></li> <li><code>ida_kernwin.attach_action_to_popup</code></li> <li><code>ida_kernwin.register_action</code></li> <li><code>ida_kernwin.simplecustviewer_t</code></li> <li><code>ida_kernwin.simplecustviewer_t.Create</code></li> <li><code>ida_kernwin.simplecustviewer_t.Show</code></li> <li><code>ida_kernwin.unregister_action</code></li> <li><code>ida_lines.COLOR_DEFAULT</code></li> <li><code>ida_lines.COLOR_DNAME</code></li> <li><code>ida_lines.COLSTR</code></li> <li><code>ida_lines.SCOLOR_PREFIX</code></li> <li><code>ida_lines.SCOLOR_VOIDOP</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-examples.html#implement-an-alternative-functions-window","title":"Implement an alternative \"Functions\" window","text":"<p>Partially re-implements the \"Functions\" widget present in IDA, with a custom widget.</p> Source code Keywords Level func_chooser.py chooser functions Intermediate <p>APIs Used:</p> <ul> <li><code>ida_funcs.get_func_name</code></li> <li><code>ida_kernwin.Choose</code></li> <li><code>ida_kernwin.Choose.ALL_CHANGED</code></li> <li><code>ida_kernwin.Choose.CHCOL_FNAME</code></li> <li><code>ida_kernwin.Choose.CHCOL_HEX</code></li> <li><code>ida_kernwin.Choose.CHCOL_PLAIN</code></li> <li><code>ida_kernwin.get_icon_id_by_name</code></li> <li><code>idautils.Functions</code></li> <li><code>idc.del_func</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-examples.html#implement-a-jump-to-next-comment-action-within-idas-listing","title":"Implement a \"jump to next comment\" action within IDA's listing","text":"<p>We want our action not only to find the next line containing a comment, but to also place the cursor at the right horizontal position.</p> <p>To find that position, we will have to inspect the text that IDA generates, looking for the start of a comment. However, we won't be looking for a comment \"prefix\" (e.g., \"; \"), as that would be too fragile.</p> <p>Instead, we will look for special \"tags\" that IDA injects into textual lines, and that bear semantic information.</p> <p>Those tags are primarily used for rendering (i.e., switching colors), but can also be very handy for spotting tokens of interest (registers, addresses, comments, prefixes, instruction mnemonics, ...)</p> Source code Keywords Level jump_next_comment.py actions idaview Intermediate <p>APIs Used:</p> <ul> <li><code>ida_bytes.next_head</code></li> <li><code>ida_idaapi.BADADDR</code></li> <li><code>ida_kernwin.AST_DISABLE_FOR_WIDGET</code></li> <li><code>ida_kernwin.AST_ENABLE_FOR_WIDGET</code></li> <li><code>ida_kernwin.BWN_DISASM</code></li> <li><code>ida_kernwin.CVNF_LAZY</code></li> <li><code>ida_kernwin.action_desc_t</code></li> <li><code>ida_kernwin.action_handler_t</code></li> <li><code>ida_kernwin.custom_viewer_jump</code></li> <li><code>ida_kernwin.get_custom_viewer_location</code></li> <li><code>ida_kernwin.place_t_as_idaplace_t</code></li> <li><code>ida_kernwin.register_action</code></li> <li><code>ida_kernwin.unregister_action</code></li> <li><code>ida_lines.SCOLOR_AUTOCMT</code></li> <li><code>ida_lines.SCOLOR_ON</code></li> <li><code>ida_lines.SCOLOR_REGCMT</code></li> <li><code>ida_lines.SCOLOR_RPTCMT</code></li> <li><code>ida_lines.generate_disassembly</code></li> <li><code>ida_lines.tag_strlen</code></li> <li><code>ida_moves.lochist_entry_t</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-examples.html#dynamically-colorize-parts-of-lines","title":"Dynamically colorize [parts of] lines","text":"<p>Shows how one can dynamically alter the lines background rendering (as opposed to, say, using ida_nalt.set_item_color()), and also shows how that rendering can be limited to just a few glyphs, not the whole line.</p> Source code Keywords Level lines_rendering.py UI_Hooks Intermediate <p>APIs Used:</p> <ul> <li><code>ida_bytes.next_head</code></li> <li><code>ida_idaapi.BADADDR</code></li> <li><code>ida_kernwin.CK_EXTRA1</code></li> <li><code>ida_kernwin.CK_EXTRA10</code></li> <li><code>ida_kernwin.CK_EXTRA11</code></li> <li><code>ida_kernwin.CK_EXTRA12</code></li> <li><code>ida_kernwin.CK_EXTRA13</code></li> <li><code>ida_kernwin.CK_EXTRA14</code></li> <li><code>ida_kernwin.CK_EXTRA15</code></li> <li><code>ida_kernwin.CK_EXTRA16</code></li> <li><code>ida_kernwin.CK_EXTRA2</code></li> <li><code>ida_kernwin.CK_EXTRA3</code></li> <li><code>ida_kernwin.CK_EXTRA4</code></li> <li><code>ida_kernwin.CK_EXTRA5</code></li> <li><code>ida_kernwin.CK_EXTRA6</code></li> <li><code>ida_kernwin.CK_EXTRA7</code></li> <li><code>ida_kernwin.CK_EXTRA8</code></li> <li><code>ida_kernwin.CK_EXTRA9</code></li> <li><code>ida_kernwin.CK_TRACE</code></li> <li><code>ida_kernwin.CK_TRACE_OVL</code></li> <li><code>ida_kernwin.LROEF_CPS_RANGE</code></li> <li><code>ida_kernwin.UI_Hooks</code></li> <li><code>ida_kernwin.get_screen_ea</code></li> <li><code>ida_kernwin.line_rendering_output_entry_t</code></li> <li><code>ida_kernwin.refresh_idaview_anyway</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-examples.html#react-to-ui-eventsnotifications","title":"React to UI events/notifications","text":"<p>Hooks to be notified about certain UI events, and dump their information to the \"Output\" window</p> Source code Keywords Level log_misc_events.py UI_Hooks Intermediate <p>APIs Used:</p> <ul> <li><code>ida_kernwin.UI_Hooks</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-examples.html#paint-on-top-of-the-navigation-band","title":"Paint on top of the navigation band","text":"<p>Using an \"event filter\", we will intercept paint events targeted at the navigation band widget, let it paint itself, and then add our own markers on top.</p> Source code Keywords Level paint_over_navbar.py Intermediate <p>APIs Used:</p> <ul> <li><code>ida_kernwin.PluginForm.FormToPyQtWidget</code></li> <li><code>ida_kernwin.get_navband_pixel</code></li> <li><code>ida_kernwin.open_navband_window</code></li> <li><code>ida_segment.get_segm_qty</code></li> <li><code>ida_segment.getnseg</code></li> <li><code>idc.here</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-examples.html#save-and-then-restore-positions-in-a-listing","title":"Save, and then restore, positions in a listing","text":"<p>Shows how it is possible re-implement IDA's bookmark capability, using 2 custom actions: one action saves the current location, and the other restores it.</p> <p>Note that, contrary to actual bookmarks, this example:</p> <ul> <li>remembers only 1 saved position</li> <li>doesn't save that position in the IDB (and therefore cannot be restored if IDA is closed &amp; reopened.)</li> </ul> Source code Keywords Level save_and_restore_listing_pos.py actions listing Intermediate <p>APIs Used:</p> <ul> <li><code>ida_kernwin.AST_DISABLE_FOR_WIDGET</code></li> <li><code>ida_kernwin.AST_ENABLE_FOR_WIDGET</code></li> <li><code>ida_kernwin.BWN_CUSTVIEW</code></li> <li><code>ida_kernwin.BWN_DISASM</code></li> <li><code>ida_kernwin.BWN_PSEUDOCODE</code></li> <li><code>ida_kernwin.BWN_TILVIEW</code></li> <li><code>ida_kernwin.action_desc_t</code></li> <li><code>ida_kernwin.action_handler_t</code></li> <li><code>ida_kernwin.custom_viewer_jump</code></li> <li><code>ida_kernwin.find_widget</code></li> <li><code>ida_kernwin.get_custom_viewer_location</code></li> <li><code>ida_kernwin.register_action</code></li> <li><code>ida_kernwin.unregister_action</code></li> <li><code>ida_moves.lochist_entry_t</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-examples.html#retrieve-the-selection-from-the-strings-window","title":"Retrieve the selection from the \"Strings\" window","text":"<p>In IDA it's possible to write actions that can be applied even to core (i.e., \"standard\") widgets. The actions in this example use the action \"context\" to know what the current selection is.</p> <p>This example shows how you can either retrieve string literals data directly from the chooser (<code>ida_kernwin.get_chooser_data</code>), or by querying the IDB (<code>ida_bytes.get_strlit_contents</code>)</p> Source code Keywords Level show_selected_strings.py actions ctxmenu Intermediate <p>APIs Used:</p> <ul> <li><code>ida_bytes.get_strlit_contents</code></li> <li><code>ida_idaapi.BADADDR</code></li> <li><code>ida_kernwin.AST_DISABLE_FOR_WIDGET</code></li> <li><code>ida_kernwin.AST_ENABLE_FOR_WIDGET</code></li> <li><code>ida_kernwin.BWN_STRINGS</code></li> <li><code>ida_kernwin.action_desc_t</code></li> <li><code>ida_kernwin.action_handler_t</code></li> <li><code>ida_kernwin.attach_action_to_popup</code></li> <li><code>ida_kernwin.find_widget</code></li> <li><code>ida_kernwin.get_chooser_data</code></li> <li><code>ida_kernwin.open_strings_window</code></li> <li><code>ida_kernwin.register_action</code></li> <li><code>ida_kernwin.unregister_action</code></li> <li><code>ida_strlist.get_strlist_item</code></li> <li><code>ida_strlist.string_info_t</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-examples.html#follow-the-movements-of-one-graph-in-another","title":"Follow the movements of one graph, in another","text":"<p>Since it is possible to be notified of movements that happen take place in a widget, it's possible to \"replay\" those movements in another.</p> <p>In this case, \"IDA View-B\" (will be opened if necessary) will show the same contents as \"IDA View-A\", slightly zoomed out.</p> Source code Keywords Level sync_two_graphs.py graph idaview Intermediate <p>APIs Used:</p> <ul> <li><code>ida_graph.GLICTL_CENTER</code></li> <li><code>ida_graph.viewer_fit_window</code></li> <li><code>ida_graph.viewer_get_gli</code></li> <li><code>ida_graph.viewer_set_gli</code></li> <li><code>ida_kernwin.DP_RIGHT</code></li> <li><code>ida_kernwin.IDAViewWrapper</code></li> <li><code>ida_kernwin.MFF_FAST</code></li> <li><code>ida_kernwin.TCCRT_GRAPH</code></li> <li><code>ida_kernwin.execute_sync</code></li> <li><code>ida_kernwin.find_widget</code></li> <li><code>ida_kernwin.get_custom_viewer_place</code></li> <li><code>ida_kernwin.jumpto</code></li> <li><code>ida_kernwin.open_disasm_window</code></li> <li><code>ida_kernwin.set_dock_pos</code></li> <li><code>ida_kernwin.set_view_renderer_type</code></li> <li><code>ida_moves.graph_location_info_t</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-examples.html#trigger-actions-programmatically","title":"Trigger actions programmatically","text":"<p>It's possible to invoke any action programmatically, by using either of those two:</p> <ul> <li>ida_kernwin.execute_ui_requests()</li> <li>ida_kernwin.process_ui_action()</li> </ul> <p>Ideally, this script should be run through the \"File &gt; Script file...\" menu, so as to keep focus on \"IDA View-A\" and have the 'ProcessUiActions' part work as intended.</p> Source code Keywords Level trigger_actions_programmatically.py actions Intermediate <p>APIs Used:</p> <ul> <li><code>ida_kernwin.ask_yn</code></li> <li><code>ida_kernwin.execute_ui_requests</code></li> <li><code>ida_kernwin.msg</code></li> <li><code>ida_kernwin.process_ui_action</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-examples.html#advanced-usage-of-the-form-api","title":"Advanced usage of the form API","text":"<p>How to query for complex user input, using IDA's built-in forms.</p> <p>Note: while this example produces full-fledged forms for complex input, simpler types of inputs might can be retrieved by using <code>ida_kernwin.ask_str</code> and similar functions.</p> Source code Keywords Level askusingform.py forms Advanced <p>APIs Used:</p> <ul> <li><code>ida_kernwin.Choose</code></li> <li><code>ida_kernwin.Choose.CH_MULTI</code></li> <li><code>ida_kernwin.Form</code></li> <li><code>ida_kernwin.PluginForm.FORM_TAB</code></li> <li><code>ida_kernwin.ask_str</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-examples.html#restore-custom-widgets-across-sessions","title":"Restore custom widgets across sessions","text":"<p>This is an example demonstrating how one can create widgets from a plugin, and have them re-created automatically at IDA startup-time or at desktop load-time.</p> <p>This example should be placed in the 'plugins' directory of the IDA installation, for it to work.</p> <p>There are 2 ways to use this example:</p> <ol> <li>reloading an IDB, where the widget was opened</li> <li>open the widget ('View &gt; Open subview &gt; ...')</li> <li>save this IDB, and close IDA</li> <li>restart IDA with this IDB =&gt; the widget will be visible</li> <li>reloading a desktop, where the widget was opened</li> <li>open the widget ('View &gt; Open subview &gt; ...')</li> <li>save the desktop ('Windows &gt; Save desktop...') under, say, the name 'with_auto'</li> <li>start another IDA instance with some IDB, and load that desktop =&gt; the widget will be visible</li> </ol> Source code Keywords Level auto_instantiate_widget_plugin.py desktop plugin UI_Hooks Advanced <p>APIs Used:</p> <ul> <li><code>ida_idaapi.plugin_t</code></li> <li><code>ida_kernwin.AST_ENABLE_ALWAYS</code></li> <li><code>ida_kernwin.SETMENU_APP</code></li> <li><code>ida_kernwin.UI_Hooks</code></li> <li><code>ida_kernwin.action_desc_t</code></li> <li><code>ida_kernwin.action_handler_t</code></li> <li><code>ida_kernwin.attach_action_to_menu</code></li> <li><code>ida_kernwin.find_widget</code></li> <li><code>ida_kernwin.register_action</code></li> <li><code>ida_kernwin.simplecustviewer_t</code></li> <li><code>ida_kernwin.simplecustviewer_t.Create</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-examples.html#showing-tabular-data-in-a-flat-or-tree-like-fashion","title":"Showing tabular data in a flat, or tree-like fashion","text":"<p>By adding the necessary bits to a ida_kernwin.Choose subclass, IDA can show the otherwise tabular data, in a tree-like fashion.</p> <p>The important bits to enable this are:</p> <ul> <li>ida_dirtree.dirspec_t (and my_dirspec_t)</li> <li>ida_kernwin.CH_HAS_DIRTREE</li> <li>ida_kernwin.Choose.OnGetDirTree</li> <li>ida_kernwin.Choose.OnIndexToInode</li> </ul> Source code Keywords Level chooser_with_folders.py actions chooser folders Advanced <p>APIs Used:</p> <ul> <li><code>ida_dirtree.DTE_OK</code></li> <li><code>ida_dirtree.direntry_t</code></li> <li><code>ida_dirtree.direntry_t.BADIDX</code></li> <li><code>ida_dirtree.dirspec_t</code></li> <li><code>ida_dirtree.dirtree_t</code></li> <li><code>ida_dirtree.dirtree_t.isdir</code></li> <li><code>ida_kernwin.CH_CAN_DEL</code></li> <li><code>ida_kernwin.CH_CAN_EDIT</code></li> <li><code>ida_kernwin.CH_CAN_INS</code></li> <li><code>ida_kernwin.CH_HAS_DIRTREE</code></li> <li><code>ida_kernwin.CH_MULTI</code></li> <li><code>ida_kernwin.Choose</code></li> <li><code>ida_kernwin.Choose.ALL_CHANGED</code></li> <li><code>ida_kernwin.Choose.CHCOL_DRAGHINT</code></li> <li><code>ida_kernwin.Choose.CHCOL_INODENAME</code></li> <li><code>ida_kernwin.Choose.CHCOL_PLAIN</code></li> <li><code>ida_kernwin.ask_str</code></li> <li><code>ida_netnode.BADNODE</code></li> <li><code>ida_netnode.netnode</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-examples.html#colorize-lines-interactively","title":"Colorize lines interactively","text":"<p>This builds upon the <code>ida_kernwin.UI_Hooks.get_lines_rendering_info</code> feature, to provide a quick &amp; easy way to colorize disassembly lines.</p> <p>Contrary to @colorize_disassembly, the coloring is not persisted in the database, and will therefore be lost after the session.</p> <p>By triggering the action multiple times, the user can \"carousel\" across 4 predefined colors (and return to the \"no color\" state.)</p> Source code Keywords Level colorize_disassembly_on_the_fly.py coloring UI_Hooks Advanced <p>APIs Used:</p> <ul> <li><code>ida_kernwin.AST_DISABLE_FOR_WIDGET</code></li> <li><code>ida_kernwin.AST_ENABLE_FOR_WIDGET</code></li> <li><code>ida_kernwin.CK_EXTRA5</code></li> <li><code>ida_kernwin.CK_EXTRA6</code></li> <li><code>ida_kernwin.CK_EXTRA7</code></li> <li><code>ida_kernwin.CK_EXTRA8</code></li> <li><code>ida_kernwin.UI_Hooks</code></li> <li><code>ida_kernwin.action_desc_t</code></li> <li><code>ida_kernwin.action_handler_t</code></li> <li><code>ida_kernwin.get_current_viewer</code></li> <li><code>ida_kernwin.get_custom_viewer_location</code></li> <li><code>ida_kernwin.get_custom_viewer_place_xcoord</code></li> <li><code>ida_kernwin.get_widget_title</code></li> <li><code>ida_kernwin.line_rendering_output_entry_t</code></li> <li><code>ida_kernwin.register_action</code></li> <li><code>ida_moves.lochist_entry_t</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-examples.html#add-a-custom-command-line-interpreter","title":"Add a custom command-line interpreter","text":"<p>Illustrates how one can add command-line interpreters to IDA</p> <p>This custom interpreter doesn't actually run any code; it's there as a 'getting started'. It provides an example tab completion support.</p> Source code Keywords Level custom_cli.py Advanced <p>APIs Used:</p> <ul> <li><code>ida_idaapi.NW_CLOSEIDB</code></li> <li><code>ida_idaapi.NW_OPENIDB</code></li> <li><code>ida_idaapi.NW_REMOVE</code></li> <li><code>ida_idaapi.NW_TERMIDA</code></li> <li><code>ida_idaapi.notify_when</code></li> <li><code>ida_kernwin.cli_t</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-examples.html#draw-custom-graphs","title":"Draw custom graphs","text":"<p>Showing custom graphs, using <code>ida_graph.GraphViewer</code>. In addition, show how to write actions that can be performed on those.</p> Source code Keywords Level custom_graph_with_actions.py actions graph View_Hooks Advanced <p>APIs Used:</p> <ul> <li><code>ida_funcs.get_func</code></li> <li><code>ida_funcs.get_func_name</code></li> <li><code>ida_graph.GraphViewer</code></li> <li><code>ida_graph.get_graph_viewer</code></li> <li><code>ida_graph.screen_graph_selection_t</code></li> <li><code>ida_graph.viewer_get_selection</code></li> <li><code>ida_idp.is_call_insn</code></li> <li><code>ida_kernwin.AST_ENABLE_ALWAYS</code></li> <li><code>ida_kernwin.View_Hooks</code></li> <li><code>ida_kernwin.action_desc_t</code></li> <li><code>ida_kernwin.action_handler_t</code></li> <li><code>ida_kernwin.attach_dynamic_action_to_popup</code></li> <li><code>ida_kernwin.get_screen_ea</code></li> <li><code>ida_ua.decode_insn</code></li> <li><code>ida_ua.insn_t</code></li> <li><code>ida_xref.XREF_FAR</code></li> <li><code>ida_xref.xrefblk_t</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-examples.html#retrieve-dump-current-selection","title":"Retrieve &amp; dump current selection","text":"<p>Shows how to retrieve the selection from a listing widget (\"IDA View-A\", \"Hex View-1\", \"Pseudocode-A\", ...) as two \"cursors\", and from there retrieve (in fact, generate) the corresponding text.</p> <p>After running this script:</p> <ul> <li>select some text in one of the listing widgets (i.e., \"IDA View-...\", \"Local Types\", \"Pseudocode-...\")</li> <li>press Ctrl+Shift+S to dump the selection</li> </ul> Source code Keywords Level dump_selection.py Advanced <p>APIs Used:</p> <ul> <li><code>ida_kernwin.ACF_HAS_SELECTION</code></li> <li><code>ida_kernwin.AST_DISABLE_FOR_WIDGET</code></li> <li><code>ida_kernwin.AST_ENABLE_FOR_WIDGET</code></li> <li><code>ida_kernwin.BWN_DISASM</code></li> <li><code>ida_kernwin.BWN_PSEUDOCODE</code></li> <li><code>ida_kernwin.BWN_TILVIEW</code></li> <li><code>ida_kernwin.IWID_ANY_LISTING</code></li> <li><code>ida_kernwin.action_desc_t</code></li> <li><code>ida_kernwin.action_handler_t</code></li> <li><code>ida_kernwin.get_last_widget</code></li> <li><code>ida_kernwin.get_viewer_user_data</code></li> <li><code>ida_kernwin.l_compare2</code></li> <li><code>ida_kernwin.linearray_t</code></li> <li><code>ida_kernwin.read_selection</code></li> <li><code>ida_kernwin.register_action</code></li> <li><code>ida_kernwin.twinpos_t</code></li> <li><code>ida_kernwin.unregister_action</code></li> <li><code>ida_lines.tag_remove</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-examples.html#inject-commands-in-the-output-window","title":"Inject commands in the \"Output\" window","text":"<p>This example illustrates how one can execute commands in the \"Output\" window, from their own widgets.</p> <p>A few notes:</p> <ul> <li>the original, underlying <code>cli:Execute</code> action, that has to be triggered for the code present in the input field to execute and be placed in the history, requires that the input field has focus (otherwise it simply won't do anything.)</li> <li>this, in turn, forces us to do \"delayed\" execution of that action, hence the need for a <code>QTimer</code></li> <li>the IDA/SWiG 'TWidget' type that we retrieve through <code>ida_kernwin.find_widget</code>, is not the same type as a <code>QtWidgets.QWidget</code>. We therefore need to convert it using <code>ida_kernwin.PluginForm.TWidgetToPyQtWidget</code></li> </ul> Source code Keywords Level inject_command.py Advanced <p>APIs Used:</p> <ul> <li><code>ida_kernwin.PluginForm.TWidgetToPyQtWidget</code></li> <li><code>ida_kernwin.disabled_script_timeout_t</code></li> <li><code>ida_kernwin.find_widget</code></li> <li><code>ida_kernwin.process_ui_action</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-examples.html#a-lazy-loaded-tree-like-data-view","title":"A lazy-loaded, tree-like data view","text":"<p>Brings lazy-loading of folders to the tree-like tabular views.</p> <p>The important bit to enable this are:</p> <ul> <li>ida_kernwin.Choose.OnLazyLoadDir</li> </ul> Source code Keywords Level lazy_loaded_chooser.py actions chooser folders Advanced"},{"location":"developer-guide/idapython/idapython-examples.html#paint-text-on-graph-view-edges","title":"Paint text on graph view edges","text":"<p>This sample registers an action enabling painting of a recognizable string of text over horizontal nodes edge sections beyond a satisfying size threshold.</p> <p>In a disassembly view, open the context menu and select \"Paint on edges\". This should work for both graph disassembly, and proximity browser.</p> <p>Using an \"event filter\", we will intercept paint events targeted at the disassembly view, let it paint itself, and then add our own markers along.</p> Source code Keywords Level paint_over_graph.py ctxmenu UI_Hooks Advanced <p>APIs Used:</p> <ul> <li><code>ida_gdl.edge_t</code></li> <li><code>ida_graph.get_graph_viewer</code></li> <li><code>ida_graph.get_viewer_graph</code></li> <li><code>ida_graph.point_t</code></li> <li><code>ida_graph.viewer_get_gli</code></li> <li><code>ida_kernwin.AST_DISABLE_FOR_WIDGET</code></li> <li><code>ida_kernwin.AST_ENABLE_FOR_WIDGET</code></li> <li><code>ida_kernwin.BWN_DISASM</code></li> <li><code>ida_kernwin.PluginForm.FormToPyQtWidget</code></li> <li><code>ida_kernwin.UI_Hooks</code></li> <li><code>ida_kernwin.action_desc_t</code></li> <li><code>ida_kernwin.action_handler_t</code></li> <li><code>ida_kernwin.attach_action_to_popup</code></li> <li><code>ida_kernwin.get_widget_type</code></li> <li><code>ida_kernwin.register_action</code></li> <li><code>ida_moves.graph_location_info_t</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-examples.html#programmatically-manipulate-disassembly-and-graph-widgets","title":"Programmatically manipulate disassembly and graph widgets","text":"<p>This is an example illustrating how to manipulate an existing IDA-provided view (and thus possibly its graph), in Python.</p> Source code Keywords Level wrap_idaview.py graph idaview Advanced <p>APIs Used:</p> <ul> <li><code>ida_graph.NIF_BG_COLOR</code></li> <li><code>ida_graph.NIF_FRAME_COLOR</code></li> <li><code>ida_graph.node_info_t</code></li> <li><code>ida_kernwin.IDAViewWrapper</code></li> <li><code>ida_kernwin.MFF_FAST</code></li> <li><code>ida_kernwin.TCCRT_FLAT</code></li> <li><code>ida_kernwin.TCCRT_GRAPH</code></li> <li><code>ida_kernwin.execute_sync</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-examples.html#dump-function-flowchart","title":"Dump function flowchart","text":"<p>Dumps the current function's flowchart, using 2 methods:</p> <ul> <li>the low-level <code>ida_gdl.qflow_chart_t</code> type</li> <li>the somewhat higher-level, and slightly more pythonic <code>ida_gdl.FlowChart</code> type.</li> </ul> Source code Keywords Level dump_flowchart.py Beginner <p>APIs Used:</p> <ul> <li><code>ida_funcs.get_func</code></li> <li><code>ida_gdl.FlowChart</code></li> <li><code>ida_gdl.qflow_chart_t</code></li> <li><code>ida_kernwin.get_screen_ea</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-examples.html#insert-information-into-listing-prefixes","title":"Insert information into listing prefixes","text":"<p>By default, disassembly line prefixes contain segment + address information (e.g., '.text:08047718'), but it is possible to \"inject\" other bits of information in there, thanks to the <code>ida_lines.user_defined_prefix_t</code> helper type.</p> Source code Keywords Level install_user_defined_prefix.py plugin Beginner <p>APIs Used:</p> <ul> <li><code>ida_idaapi.PLUGIN_KEEP</code></li> <li><code>ida_idaapi.plugin_t</code></li> <li><code>ida_lines.SCOLOR_INV</code></li> <li><code>ida_lines.user_defined_prefix_t</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-examples.html#enumerate-file-imports","title":"Enumerate file imports","text":"<p>Using the API to enumerate file imports.</p> Source code Keywords Level list_imports.py Beginner <p>APIs Used:</p> <ul> <li><code>ida_nalt.enum_import_names</code></li> <li><code>ida_nalt.get_import_module_name</code></li> <li><code>ida_nalt.get_import_module_qty</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-examples.html#enumerate-patched-bytes","title":"Enumerate patched bytes","text":"<p>Using the API to iterate over all the places in the file, that were patched using IDA.</p> Source code Keywords Level list_patched_bytes.py Beginner <p>APIs Used:</p> <ul> <li><code>ida_bytes.visit_patched_bytes</code></li> <li><code>ida_idaapi.BADADDR</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-examples.html#enumerate-known-problems","title":"Enumerate known problems","text":"<p>Using the API to list all problems that IDA encountered during analysis.</p> Source code Keywords Level list_problems.py Beginner <p>APIs Used:</p> <ul> <li><code>ida_ida.inf_get_min_ea</code></li> <li><code>ida_idaapi.BADADDR</code></li> <li><code>ida_problems.PR_ATTN</code></li> <li><code>ida_problems.PR_BADSTACK</code></li> <li><code>ida_problems.PR_COLLISION</code></li> <li><code>ida_problems.PR_DECIMP</code></li> <li><code>ida_problems.PR_DISASM</code></li> <li><code>ida_problems.PR_FINAL</code></li> <li><code>ida_problems.PR_HEAD</code></li> <li><code>ida_problems.PR_ILLADDR</code></li> <li><code>ida_problems.PR_JUMP</code></li> <li><code>ida_problems.PR_MANYLINES</code></li> <li><code>ida_problems.PR_NOBASE</code></li> <li><code>ida_problems.PR_NOCMT</code></li> <li><code>ida_problems.PR_NOFOP</code></li> <li><code>ida_problems.PR_NONAME</code></li> <li><code>ida_problems.PR_NOXREFS</code></li> <li><code>ida_problems.PR_ROLLED</code></li> <li><code>ida_problems.get_problem</code></li> <li><code>ida_problems.get_problem_name</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-examples.html#list-segment-functions-and-cross-references-to-them","title":"List segment functions (and cross-references to them)","text":"<p>List all the functions in the current segment, as well as all the cross-references to them.</p> Source code Keywords Level list_segment_functions.py xrefs Beginner <p>APIs Used:</p> <ul> <li><code>ida_funcs.get_func</code></li> <li><code>ida_funcs.get_func_name</code></li> <li><code>ida_funcs.get_next_func</code></li> <li><code>ida_kernwin.get_screen_ea</code></li> <li><code>ida_segment.getseg</code></li> <li><code>ida_xref.xrefblk_t</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-examples.html#list-all-functions-and-cross-references-in-segment","title":"List all functions (and cross-references) in segment","text":"<p>List all the functions in the current segment, as well as all the cross-references to them.</p> <p>Contrary to @list_segment_functions, this uses the somewhat higher-level <code>idautils</code> module.</p> Source code Keywords Level list_segment_functions_using_idautils.py xrefs Beginner <p>APIs Used:</p> <ul> <li><code>ida_funcs.get_func_name</code></li> <li><code>ida_idaapi.BADADDR</code></li> <li><code>ida_kernwin.get_screen_ea</code></li> <li><code>ida_segment.getseg</code></li> <li><code>idautils.CodeRefsTo</code></li> <li><code>idautils.Functions</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-examples.html#dump-the-strings-that-are-present-in-the-file","title":"Dump the strings that are present in the file","text":"<p>This uses <code>idautils.Strings</code> to iterate over the string literals that are present in the IDB. Contrary to @show_selected_strings, this will not require that the \"Strings\" window is opened &amp; available.</p> Source code Keywords Level list_strings.py Beginner <p>APIs Used:</p> <ul> <li><code>ida_nalt.STRTYPE_C</code></li> <li><code>ida_nalt.STRTYPE_C_16</code></li> <li><code>idautils.Strings</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-examples.html#produce-disassembly-listing-for-the-entire-file","title":"Produce disassembly listing for the entire file","text":"<p>Automate IDA to perform auto-analysis on a file and, once that is done, produce a .lst file with the disassembly.</p> <p>Run like so:</p> <pre><code>  ida -A \"-S...path/to/produce_lst_file.py\" &lt;binary-file&gt;\n</code></pre> <p>where:</p> <ul> <li>-A instructs IDA to run in non-interactive mode</li> <li>-S holds a path to the script to run (note this is a single token; there is no space between '-S' and its path.)</li> </ul> Source code Keywords Level produce_lst_file.py Beginner <p>APIs Used:</p> <ul> <li><code>ida_auto.auto_wait</code></li> <li><code>ida_fpro.qfile_t</code></li> <li><code>ida_ida.inf_get_max_ea</code></li> <li><code>ida_ida.inf_get_min_ea</code></li> <li><code>ida_loader.OFILE_LST</code></li> <li><code>ida_loader.PATH_TYPE_IDB</code></li> <li><code>ida_loader.gen_file</code></li> <li><code>ida_loader.get_path</code></li> <li><code>ida_pro.qexit</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-examples.html#rewrite-the-representation-of-some-instructions","title":"Rewrite the representation of some instructions","text":"<p>Implements disassembly of BUG_INSTR used in Linux kernel BUG() macro, which is architecturally undefined and is not disassembled by IDA's ARM module</p> <p>See Linux/arch/arm/include/asm/bug.h for more info</p> Source code Keywords Level ana_emu_out.py IDP_Hooks Intermediate <p>APIs Used:</p> <ul> <li><code>ida_bytes.get_wide_dword</code></li> <li><code>ida_bytes.get_wide_word</code></li> <li><code>ida_idp.CUSTOM_INSN_ITYPE</code></li> <li><code>ida_idp.IDP_Hooks</code></li> <li><code>ida_idp.PLFM_ARM</code></li> <li><code>ida_idp.ph.id</code></li> <li><code>ida_idp.str2reg</code></li> <li><code>ida_segregs.get_sreg</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-examples.html#implement-assembly-of-instructions","title":"Implement assembly of instructions","text":"<p>We add support for assembling the following pseudo instructions:</p> <ul> <li>\"zero eax\" -&gt; xor eax, eax</li> <li>\"nothing\" -&gt; nop</li> </ul> Source code Keywords Level assemble.py IDP_Hooks Intermediate <p>APIs Used:</p> <ul> <li><code>ida_idp.IDP_Hooks</code></li> <li><code>idautils.DecodeInstruction</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-examples.html#retrieve-comments-surrounding-instructions","title":"Retrieve comments surrounding instructions","text":"<p>Use the <code>ida_lines.get_extra_cmt</code> API to retrieve anterior and posterior extra comments.</p> <p>This script registers two actions, that can be used to dump the previous and next extra comments.</p> Source code Keywords Level dump_extra_comments.py ctxmenu Intermediate <p>APIs Used:</p> <ul> <li><code>ida_kernwin.AST_DISABLE_FOR_WIDGET</code></li> <li><code>ida_kernwin.AST_ENABLE_FOR_WIDGET</code></li> <li><code>ida_kernwin.BWN_DISASM</code></li> <li><code>ida_kernwin.action_desc_t</code></li> <li><code>ida_kernwin.action_handler_t</code></li> <li><code>ida_kernwin.attach_action_to_popup</code></li> <li><code>ida_kernwin.find_widget</code></li> <li><code>ida_kernwin.get_screen_ea</code></li> <li><code>ida_kernwin.register_action</code></li> <li><code>ida_kernwin.unregister_action</code></li> <li><code>ida_lines.E_NEXT</code></li> <li><code>ida_lines.E_PREV</code></li> <li><code>ida_lines.get_extra_cmt</code></li> <li><code>ida_view</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-examples.html#dump-function-information","title":"Dump function information","text":"<p>Dump some of the most interesting bits of information about the function we are currently looking at.</p> Source code Keywords Level dump_func_info.py Intermediate <p>APIs Used:</p> <ul> <li><code>ida_funcs.FUNC_FRAME</code></li> <li><code>ida_funcs.FUNC_LUMINA</code></li> <li><code>ida_funcs.FUNC_OUTLINE</code></li> <li><code>ida_funcs.FUNC_THUNK</code></li> <li><code>ida_funcs.get_fchunk</code></li> <li><code>ida_funcs.is_func_entry</code></li> <li><code>ida_funcs.is_func_tail</code></li> <li><code>ida_kernwin.get_screen_ea</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-examples.html#using-ida_bytesfind_string","title":"Using \"ida_bytes.find_string\"","text":"<p>IDAPython's ida_bytes.find_string can be used to implement a simple replacement for the 'Search &gt; Sequence of bytes...' dialog, that lets users search for sequences of bytes that compose string literals in the binary file (either in the default 1-byte-per-char encoding, or as UTF-16.)</p> Source code Keywords Level find_string.py Intermediate <p>APIs Used:</p> <ul> <li><code>ida_bytes.BIN_SEARCH_FORWARD</code></li> <li><code>ida_bytes.BIN_SEARCH_NOBREAK</code></li> <li><code>ida_bytes.BIN_SEARCH_NOSHOW</code></li> <li><code>ida_bytes.find_string</code></li> <li><code>ida_ida.inf_get_max_ea</code></li> <li><code>ida_idaapi.BADADDR</code></li> <li><code>ida_kernwin.AST_DISABLE_FOR_WIDGET</code></li> <li><code>ida_kernwin.AST_ENABLE_FOR_WIDGET</code></li> <li><code>ida_kernwin.BWN_DISASM</code></li> <li><code>ida_kernwin.Form</code></li> <li><code>ida_kernwin.Form.ChkGroupControl</code></li> <li><code>ida_kernwin.Form.StringInput</code></li> <li><code>ida_kernwin.action_desc_t</code></li> <li><code>ida_kernwin.action_handler_t</code></li> <li><code>ida_kernwin.get_screen_ea</code></li> <li><code>ida_kernwin.jumpto</code></li> <li><code>ida_kernwin.register_action</code></li> <li><code>ida_nalt.BPU_1B</code></li> <li><code>ida_nalt.BPU_2B</code></li> <li><code>ida_nalt.get_default_encoding_idx</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-examples.html#print-notifications-about-function-prototype-changes","title":"Print notifications about function prototype changes","text":"<p>The goal of this script is to demonstrate some usage of the type API. In this script, we will create an IDB hook that intercepts <code>ti_changed</code> IDB events, and if it is a function prototype that changed, print it.</p> Source code Keywords Level func_ti_changed_listener.py IDB_Hooks Intermediate <p>APIs Used:</p> <ul> <li><code>ida_funcs.get_func_name</code></li> <li><code>ida_idp.IDB_Hooks</code></li> <li><code>ida_typeinf.tinfo_t</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-examples.html#list-listing-bookmarks","title":"List listing bookmarks","text":"<p>This sample shows how to programmatically access the list of bookmarks placed in a listing widget (e.g., \"IDA View-A\", \"Pseudocode-\", \u2026) using the low-level <code>ida_moves.bookmarks_t</code> type.</p> Source code Keywords Level list_bookmarks.py bookmarks Intermediate <p>APIs Used:</p> <ul> <li><code>ida_kernwin.AST_DISABLE_FOR_WIDGET</code></li> <li><code>ida_kernwin.AST_ENABLE_FOR_WIDGET</code></li> <li><code>ida_kernwin.action_desc_t</code></li> <li><code>ida_kernwin.action_handler_t</code></li> <li><code>ida_kernwin.get_current_viewer</code></li> <li><code>ida_kernwin.get_viewer_user_data</code></li> <li><code>ida_kernwin.get_widget_title</code></li> <li><code>ida_kernwin.register_action</code></li> <li><code>ida_moves.bookmarks_t</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-examples.html#showcase-some-of-the-iterators-available-on-a-function","title":"Showcase (some of) the iterators available on a function","text":"<p>This demonstrates how to use some of the iterators available on the func_t type.</p> <p>This example will focus on:</p> <ul> <li><code>func_t[.__iter__]</code>: the default iterator; iterates on instructions</li> <li><code>func_t.data_items</code>: iterate on data items contained within a function</li> <li><code>func_t.head_items</code>: iterate on 'heads' (i.e., addresses containing the start of an instruction, or a data item.</li> <li><code>func_t.addresses</code>: iterate on all addresses within function (code and data, beginning of an item or not)</li> </ul> <p>Type <code>help(ida_funcs.func_t)</code> for a full list of iterators.</p> <p>In addition, one can use:</p> <ul> <li><code>func_tail_iterator_t</code>: iterate on all the chunks (including the main one) of the function</li> <li><code>func_parent_iterator_t</code>: iterate on all the parent functions, that include this chunk</li> </ul> Source code Keywords Level list_function_items.py funcs iterator Intermediate <p>APIs Used:</p> <ul> <li><code>ida_bytes.get_flags</code></li> <li><code>ida_bytes.is_code</code></li> <li><code>ida_bytes.is_data</code></li> <li><code>ida_bytes.is_tail</code></li> <li><code>ida_bytes.is_unknown</code></li> <li><code>ida_funcs.func_tail_iterator_t</code></li> <li><code>ida_funcs.get_fchunk</code></li> <li><code>ida_funcs.get_func</code></li> <li><code>ida_funcs.get_func_name</code></li> <li><code>ida_kernwin.get_screen_ea</code></li> <li><code>ida_ua.print_insn_mnem</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-examples.html#react-to-database-eventsnotifications","title":"React to database events/notifications","text":"<p>These hooks will be notified about IDB events, and dump their information to the \"Output\" window</p> Source code Keywords Level log_idb_events.py IDB_Hooks Intermediate <p>APIs Used:</p> <ul> <li><code>ida_idp.IDB_Hooks</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-examples.html#react-to-processor-eventsnotifications","title":"React to processor events/notifications","text":"<p>These hooks will be notified about IDP events, and dump their information to the \"Output\" window</p> Source code Keywords Level log_idp_events.py IDP_Hooks Intermediate <p>APIs Used:</p> <ul> <li><code>ida_idp.IDP_Hooks</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-examples.html#record-and-replay-changes-in-function-prototypes","title":"Record and replay changes in function prototypes","text":"<p>This is a sample script, that will record (in memory) all changes in functions prototypes, in order to re-apply them later.</p> <p>To use this script:</p> <ul> <li>open an IDB (say, \"test.idb\")</li> <li>modify some functions prototypes (e.g., by triggering the 'Y' shortcut when the cursor is placed on the first address of a function)</li> <li>reload that IDB, without saving it first</li> <li>call rpc.replay(), to re-apply the modifications.</li> </ul> <p>Note: 'ti_changed' is also called for changes to the function frames, but we'll only record function prototypes changes.</p> Source code Keywords Level replay_prototypes_changes.py IDB_Hooks Intermediate <p>APIs Used:</p> <ul> <li><code>ida_funcs.get_func</code></li> <li><code>ida_idp.IDB_Hooks</code></li> <li><code>ida_typeinf.PRTYPE_1LINE</code></li> <li><code>ida_typeinf.TINFO_DEFINITE</code></li> <li><code>ida_typeinf.apply_tinfo</code></li> <li><code>ida_typeinf.get_idati</code></li> <li><code>ida_typeinf.tinfo_t</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-examples.html#add-a-new-member-to-an-existing-function-frame","title":"Add a new member to an existing function frame","text":"<p>The goal of this script is to demonstrate some usage of the type API. In this script, we show a way to add a new frame member (a pointer to an uint64) inside a wide enough gap in the frame:</p> <ul> <li>Get the function object surrounding cursor location.</li> <li>Use this function to retrieve the corresponding frame object.</li> <li>Find a wide enough gap to create our new member.</li> <li>If found, we use cal_frame_offset() to get the actual offset in the frame structure.</li> <li>Use the previous result to add the new member.</li> </ul> Source code Keywords Level add_frame_member.py Advanced <p>APIs Used:</p> <ul> <li><code>ida_frame.add_frame_member</code></li> <li><code>ida_frame.calc_frame_offset</code></li> <li><code>ida_frame.get_func_frame</code></li> <li><code>ida_funcs.get_func</code></li> <li><code>ida_range.rangeset_t</code></li> <li><code>ida_typeinf.BTF_UINT64</code></li> <li><code>ida_typeinf.tinfo_t</code></li> <li><code>idc.here</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-examples.html#custom-data-types-printers","title":"Custom data types &amp; printers","text":"<p>IDA can be extended to support certain data types that it does not know about out-of-the-box.</p> <p>A 'custom data type' provide information about the type &amp; size of a piece of data, while a 'custom data format' is in charge of formatting that data (there can be more than one format for a specific 'custom data type'.)</p> Source code Keywords Level custom_data_types_and_formats.py Advanced <p>APIs Used:</p> <ul> <li><code>ida_bytes.data_format_t</code></li> <li><code>ida_bytes.data_type_t</code></li> <li><code>ida_bytes.find_custom_data_type</code></li> <li><code>ida_bytes.get_byte</code></li> <li><code>ida_bytes.register_data_types_and_formats</code></li> <li><code>ida_bytes.unregister_data_types_and_formats</code></li> <li><code>ida_idaapi.NW_CLOSEIDB</code></li> <li><code>ida_idaapi.NW_OPENIDB</code></li> <li><code>ida_idaapi.NW_REMOVE</code></li> <li><code>ida_idaapi.NW_TERMIDA</code></li> <li><code>ida_idaapi.notify_when</code></li> <li><code>ida_idaapi.struct_unpack</code></li> <li><code>ida_lines.COLSTR</code></li> <li><code>ida_lines.SCOLOR_IMPNAME</code></li> <li><code>ida_lines.SCOLOR_INSN</code></li> <li><code>ida_lines.SCOLOR_NUMBER</code></li> <li><code>ida_lines.SCOLOR_REG</code></li> <li><code>ida_nalt.get_input_file_path</code></li> <li><code>ida_netnode.netnode</code></li> <li><code>ida_typeinf.tinfo_t</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-examples.html#list-operands-representing-a-path-to-a-possibly-nested-structure-member","title":"List operands representing a \"path\" to a (possibly nested) structure member","text":"<p>It is possible to assign, to instruction operands, the notion of \"structure offset\", which really is a pointer to a specific offset in a type, leading to a possible N-deep path within types.</p> <p>E.g., assuming the following types</p> <pre><code>    struct c\n    {\n        int foo;\n        int bar;\n        int baz;\n        int quux;\n        int trail;\n    };\n\n    struct b\n    {\n        int gap;\n        c c_instance;\n    };\n\n    struct a\n    {\n        int count;\n        b b_instance;\n    };\n</code></pre> <p>and assuming an instruction that initially looks like this:</p> <pre><code>    mov eax, 10h\n</code></pre> <p>by pressing <code>t</code>, the user will be able set the \"structure offset\" to either:</p> <ul> <li><code>c.trail</code></li> <li><code>b.c_instance.quux</code></li> <li><code>a.b_inscance.c_instance.baz</code></li> </ul> <p>Here's why IDA offers <code>a.b_inscance.c_instance.baz</code>:</p> <pre><code>    0000   struct a\n           {\n    0000       int count;\n    0004       struct b\n               {\n    0004           int gap;\n    0008           struct c\n                   {\n    0008               int foo;\n    000C               int bar;\n    0010               int baz;\n    0014               int quux;\n    0018               int trail;\n                   };\n               };\n           };\n</code></pre> <p>This sample shows how to programmatically retrieve information about that \"structure member path\" that an operand was made pointing to.</p> Source code Keywords Level list_struct_accesses.py bookmarks Advanced <p>APIs Used:</p> <ul> <li><code>ida_bytes.get_full_flags</code></li> <li><code>ida_bytes.get_stroff_path</code></li> <li><code>ida_bytes.is_stroff</code></li> <li><code>ida_typeinf.get_tid_name</code></li> <li><code>ida_typeinf.tinfo_t</code></li> <li><code>ida_ua.decode_insn</code></li> <li><code>ida_ua.insn_t</code></li> <li><code>ida_ua.o_imm</code></li> <li><code>ida_ua.o_void</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-examples.html#notify-the-user-when-an-instruction-operand-changes","title":"Notify the user when an instruction operand changes","text":"<p>Show notifications whenever the user changes an instruction's operand, or a data item.</p> Source code Keywords Level operand_changed.py IDB_Hooks Advanced <p>APIs Used:</p> <ul> <li><code>ida_bytes.ALOPT_IGNCLT</code></li> <li><code>ida_bytes.ALOPT_IGNHEADS</code></li> <li><code>ida_bytes.get_flags</code></li> <li><code>ida_bytes.get_max_strlit_length</code></li> <li><code>ida_bytes.get_opinfo</code></li> <li><code>ida_bytes.get_strlit_contents</code></li> <li><code>ida_bytes.is_custfmt</code></li> <li><code>ida_bytes.is_custom</code></li> <li><code>ida_bytes.is_enum</code></li> <li><code>ida_bytes.is_off</code></li> <li><code>ida_bytes.is_strlit</code></li> <li><code>ida_bytes.is_stroff</code></li> <li><code>ida_bytes.is_struct</code></li> <li><code>ida_idp.IDB_Hooks</code></li> <li><code>ida_nalt.STRENC_DEFAULT</code></li> <li><code>ida_nalt.get_default_encoding_idx</code></li> <li><code>ida_nalt.get_encoding_name</code></li> <li><code>ida_nalt.get_str_encoding_idx</code></li> <li><code>ida_nalt.get_strtype_bpu</code></li> <li><code>ida_nalt.opinfo_t</code></li> <li><code>ida_typeinf.get_tid_name</code></li> <li><code>ida_typeinf.tinfo_t</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-examples.html#produce-c-listing-for-the-entire-file","title":"Produce C listing for the entire file","text":"<p>Automate IDA to perform auto-analysis on a file and, once that is done, produce a .c file containing the decompilation of all the functions in that file.</p> <p>Run like so:</p> <pre><code>  ida -A \"-S...path/to/produce_c_file.py\" &lt;binary-file&gt;\n</code></pre> <p>where:</p> <ul> <li>-A instructs IDA to run in non-interactive mode</li> <li>-S holds a path to the script to run (note this is a single token; there is no space between '-S' and its path.)</li> </ul> Source code Keywords Level produce_c_file.py Beginner <p>APIs Used:</p> <ul> <li><code>ida_auto.auto_wait</code></li> <li><code>ida_hexrays.VDRUN_MAYSTOP</code></li> <li><code>ida_hexrays.VDRUN_NEWFILE</code></li> <li><code>ida_hexrays.VDRUN_SILENT</code></li> <li><code>ida_hexrays.decompile_many</code></li> <li><code>ida_loader.PATH_TYPE_IDB</code></li> <li><code>ida_loader.get_path</code></li> <li><code>ida_pro.qexit</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-examples.html#decompile-print-current-function","title":"Decompile &amp; print current function","text":"<p>Decompile the function under the cursor</p> Source code Keywords Level vds1.py Beginner <p>APIs Used:</p> <ul> <li><code>ida_funcs.get_func</code></li> <li><code>ida_hexrays.decompile</code></li> <li><code>ida_hexrays.get_hexrays_version</code></li> <li><code>ida_hexrays.init_hexrays_plugin</code></li> <li><code>ida_kernwin.get_screen_ea</code></li> <li><code>ida_lines.tag_remove</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-examples.html#generate-microcode-for-the-selected-range-of-instructions","title":"Generate microcode for the selected range of instructions","text":"<p>Generates microcode for selection and dumps it to the output window.</p> Source code Keywords Level vds13.py Beginner <p>APIs Used:</p> <ul> <li><code>ida_bytes.get_flags</code></li> <li><code>ida_bytes.is_code</code></li> <li><code>ida_hexrays.DECOMP_WARNINGS</code></li> <li><code>ida_hexrays.gen_microcode</code></li> <li><code>ida_hexrays.hexrays_failure_t</code></li> <li><code>ida_hexrays.init_hexrays_plugin</code></li> <li><code>ida_hexrays.mba_ranges_t</code></li> <li><code>ida_hexrays.vd_printer_t</code></li> <li><code>ida_kernwin.read_range_selection</code></li> <li><code>ida_kernwin.warning</code></li> <li><code>ida_range.range_t</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-examples.html#dump-statement-blocks","title":"Dump statement blocks","text":"<p>Using a <code>ida_hexrays.ctree_visitor_t</code>, search for <code>ida_hexrays.cit_block</code> instances and dump them.</p> Source code Keywords Level vds7.py Hexrays_Hooks Beginner <p>APIs Used:</p> <ul> <li><code>ida_hexrays.CMAT_BUILT</code></li> <li><code>ida_hexrays.CV_FAST</code></li> <li><code>ida_hexrays.Hexrays_Hooks</code></li> <li><code>ida_hexrays.cit_block</code></li> <li><code>ida_hexrays.ctree_visitor_t</code></li> <li><code>ida_hexrays.init_hexrays_plugin</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-examples.html#provide-custom-decompiler-hints","title":"Provide custom decompiler hints","text":"<p>Handle <code>ida_hexrays.hxe_create_hint</code> notification using hooks, to return our own.</p> <p>If the object under the cursor is:</p> <ul> <li>a function call, prefix the original decompiler hint with <code>==&gt;</code></li> <li>a local variable declaration, replace the hint with our own in the form of <code>!{varname}</code> (where <code>{varname}</code> is replaced with the variable name)</li> <li>an <code>if</code> statement, replace the hint with our own, saying \"condition\"</li> </ul> Source code Keywords Level vds_create_hint.py Hexrays_Hooks Beginner <p>APIs Used:</p> <ul> <li><code>ida_hexrays.Hexrays_Hooks</code></li> <li><code>ida_hexrays.USE_MOUSE</code></li> <li><code>ida_hexrays.VDI_EXPR</code></li> <li><code>ida_hexrays.VDI_LVAR</code></li> <li><code>ida_hexrays.cit_if</code></li> <li><code>ida_hexrays.cot_call</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-examples.html#interactively-color-decompilation-lines","title":"Interactively color decompilation lines","text":"<p>Provides an action that can be used to dynamically alter the lines background rendering for pseudocode listings (as opposed to using <code>ida_hexrays.cfunc_t.pseudocode[N].bgcolor</code>)</p> <p>After running this script, pressing 'M' on a line in a \"Pseudocode-?\" widget, will cause that line to be rendered with a special background color.</p> Source code Keywords Level colorize_pseudocode_lines.py colors UI_Hooks Intermediate <p>APIs Used:</p> <ul> <li><code>ida_hexrays.get_widget_vdui</code></li> <li><code>ida_kernwin.AST_DISABLE_FOR_WIDGET</code></li> <li><code>ida_kernwin.AST_ENABLE_FOR_WIDGET</code></li> <li><code>ida_kernwin.BWN_PSEUDOCODE</code></li> <li><code>ida_kernwin.CK_EXTRA11</code></li> <li><code>ida_kernwin.UI_Hooks</code></li> <li><code>ida_kernwin.action_desc_t</code></li> <li><code>ida_kernwin.action_handler_t</code></li> <li><code>ida_kernwin.get_custom_viewer_location</code></li> <li><code>ida_kernwin.line_rendering_output_entry_t</code></li> <li><code>ida_kernwin.refresh_custom_viewer</code></li> <li><code>ida_kernwin.register_action</code></li> <li><code>ida_moves.lochist_entry_t</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-examples.html#decompile-entrypoint-automatically","title":"Decompile entrypoint automatically","text":"<p>Attempts to load a decompiler plugin corresponding to the current architecture right after auto-analysis is performed, and then tries to decompile the function at the first entrypoint.</p> <p>It is particularly suited for use with the '-S' flag, for example: idat -Ldecompile.log -Sdecompile_entry_points.py -c file</p> Source code Keywords Level decompile_entry_points.py Intermediate <p>APIs Used:</p> <ul> <li><code>ida_auto.auto_wait</code></li> <li><code>ida_entry.get_entry</code></li> <li><code>ida_entry.get_entry_ordinal</code></li> <li><code>ida_entry.get_entry_qty</code></li> <li><code>ida_hexrays.decompile</code></li> <li><code>ida_hexrays.init_hexrays_plugin</code></li> <li><code>ida_idp.PLFM_386</code></li> <li><code>ida_idp.PLFM_ARM</code></li> <li><code>ida_idp.PLFM_MIPS</code></li> <li><code>ida_idp.PLFM_PPC</code></li> <li><code>ida_idp.PLFM_RISCV</code></li> <li><code>ida_idp.ph.id</code></li> <li><code>ida_kernwin.cvar.batch</code></li> <li><code>ida_kernwin.msg</code></li> <li><code>ida_loader.load_plugin</code></li> <li><code>ida_pro.qexit</code></li> <li><code>idc.get_idb_path</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-examples.html#add-custom-microcode-instruction-optimization-rule","title":"Add custom microcode instruction optimization rule","text":"<p>Installs a custom microcode instruction optimization rule, to transform:</p> <pre><code>call   !DbgRaiseAssertionFailure &lt;fast:&gt;.0\n</code></pre> <p>into</p> <pre><code>call   !DbgRaiseAssertionFailure &lt;fast:\"char *\" \"assertion text\"&gt;.0\n</code></pre> <p>To see this plugin in action please use arm64_brk.i64</p> Source code Keywords Level vds10.py plugin Intermediate <p>APIs Used:</p> <ul> <li><code>ida_bytes.get_cmt</code></li> <li><code>ida_hexrays.init_hexrays_plugin</code></li> <li><code>ida_hexrays.mop_str</code></li> <li><code>ida_hexrays.optinsn_t</code></li> <li><code>ida_idaapi.PLUGIN_HIDE</code></li> <li><code>ida_idaapi.PLUGIN_KEEP</code></li> <li><code>ida_idaapi.plugin_t</code></li> <li><code>ida_typeinf.STI_PCCHAR</code></li> <li><code>ida_typeinf.tinfo_t.get_stock</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-examples.html#dynamically-provide-a-custom-call-type","title":"Dynamically provide a custom call type","text":"<p>This plugin can greatly improve decompilation of indirect calls:</p> <pre><code>call    [eax+4]\n</code></pre> <p>For them, the decompiler has to guess the prototype of the called function. This has to be done at a very early phase of decompilation because the function prototype influences the data flow analysis. On the other hand, we do not have global data flow analysis results yet because we haven't analyzed all calls in the function. It is a chicked-and-egg problem.</p> <p>The decompiler uses various techniques to guess the called function prototype. While it works very well, it may fail in some cases.</p> <p>To fix, the user can specify the call prototype manually, using \"Edit, Operand types, Set operand type\" at the call instruction.</p> <p>This plugin illustrates another approach to the problem: if you happen to be able to calculate the call prototypes dynamically, this is how to inform the decompiler about them.</p> Source code Keywords Level vds21.py Hexrays_Hooks plugin Intermediate <p>APIs Used:</p> <ul> <li><code>ida_hexrays.Hexrays_Hooks</code></li> <li><code>ida_hexrays.init_hexrays_plugin</code></li> <li><code>ida_hexrays.m_call</code></li> <li><code>ida_hexrays.mcallinfo_t</code></li> <li><code>ida_idaapi.PLUGIN_HIDE</code></li> <li><code>ida_idaapi.PLUGIN_KEEP</code></li> <li><code>ida_idaapi.plugin_t</code></li> <li><code>ida_kernwin.msg</code></li> <li><code>ida_kernwin.warning</code></li> <li><code>ida_nalt.get_op_tinfo</code></li> <li><code>ida_typeinf.BT_INT</code></li> <li><code>ida_typeinf.CM_CC_STDCALL</code></li> <li><code>ida_typeinf.CM_N32_F48</code></li> <li><code>ida_typeinf.parse_decl</code></li> <li><code>ida_typeinf.tinfo_t</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-examples.html#dump-user-defined-information-for-a-function","title":"Dump user-defined information for a function","text":"<p>Prints user-defined information to the \"Output\" window. Namely:</p> <ul> <li>user defined label names</li> <li>user defined indented comments</li> <li>user defined number formats</li> <li>user defined local variable names, types, comments</li> </ul> <p>This script loads information from the database without decompiling anything.</p> Source code Keywords Level vds4.py Intermediate <p>APIs Used:</p> <ul> <li><code>ida_bytes.get_radix</code></li> <li><code>ida_funcs.get_func</code></li> <li><code>ida_hexrays.CIT_COLLAPSED</code></li> <li><code>ida_hexrays.NF_NEGATE</code></li> <li><code>ida_hexrays.init_hexrays_plugin</code></li> <li><code>ida_hexrays.lvar_uservec_t</code></li> <li><code>ida_hexrays.restore_user_cmts</code></li> <li><code>ida_hexrays.restore_user_iflags</code></li> <li><code>ida_hexrays.restore_user_labels</code></li> <li><code>ida_hexrays.restore_user_lvar_settings</code></li> <li><code>ida_hexrays.restore_user_numforms</code></li> <li><code>ida_hexrays.user_cmts_free</code></li> <li><code>ida_hexrays.user_iflags_free</code></li> <li><code>ida_hexrays.user_labels_free</code></li> <li><code>ida_hexrays.user_numforms_free</code></li> <li><code>ida_kernwin.get_screen_ea</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-examples.html#superficially-modify-the-decompilation-output","title":"Superficially modify the decompilation output","text":"<p>Modifies the decompilation output in a superficial manner, by removing some white spaces</p> <p>Note: this is rather crude, not quite \"pythonic\" code.</p> Source code Keywords Level vds6.py Hexrays_Hooks plugin Intermediate <p>APIs Used:</p> <ul> <li><code>ida_hexrays.Hexrays_Hooks</code></li> <li><code>ida_hexrays.init_hexrays_plugin</code></li> <li><code>ida_idaapi.PLUGIN_HIDE</code></li> <li><code>ida_idaapi.PLUGIN_KEEP</code></li> <li><code>ida_idaapi.plugin_t</code></li> <li><code>ida_lines.tag_advance</code></li> <li><code>ida_lines.tag_skipcodes</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-examples.html#improve-decompilation-by-turning-specific-patterns-into-custom-function-calls","title":"Improve decompilation by turning specific patterns into custom function calls","text":"<p>Registers an action that uses a <code>ida_hexrays.udc_filter_t</code> to decompile <code>svc 0x900001</code> and <code>svc 0x9000F8</code> as function calls to <code>svc_exit()</code> and <code>svc_exit_group()</code> respectively.</p> <p>You will need to have an ARM + Linux IDB for this script to be usable</p> <p>In addition to having a shortcut, the action will be present in the context menu.</p> Source code Keywords Level vds8.py ctxmenu UI_Hooks Intermediate <p>APIs Used:</p> <ul> <li><code>ida_allins.ARM_svc</code></li> <li><code>ida_hexrays.get_widget_vdui</code></li> <li><code>ida_hexrays.init_hexrays_plugin</code></li> <li><code>ida_hexrays.install_microcode_filter</code></li> <li><code>ida_hexrays.udc_filter_t</code></li> <li><code>ida_kernwin.AST_DISABLE_FOR_WIDGET</code></li> <li><code>ida_kernwin.AST_ENABLE_FOR_WIDGET</code></li> <li><code>ida_kernwin.BWN_PSEUDOCODE</code></li> <li><code>ida_kernwin.UI_Hooks</code></li> <li><code>ida_kernwin.action_desc_t</code></li> <li><code>ida_kernwin.action_handler_t</code></li> <li><code>ida_kernwin.attach_action_to_popup</code></li> <li><code>ida_kernwin.get_widget_type</code></li> <li><code>ida_kernwin.register_action</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-examples.html#react-to-decompiler-eventsnotifications","title":"React to decompiler events/notifications","text":"<p>Shows how to hook to many notifications sent by the decompiler.</p> <p>This plugin doesn't really accomplish anything: it just prints the parameters.</p> <p>The list of notifications handled below should be exhaustive, and is there to hint at what is possible to accomplish by subclassing <code>ida_hexrays.Hexrays_Hooks</code></p> Source code Keywords Level vds_hooks.py Hexrays_Hooks Intermediate <p>APIs Used:</p> <ul> <li><code>ida_hexrays.Hexrays_Hooks</code></li> <li><code>ida_hexrays.cfunc_t</code></li> <li><code>ida_hexrays.lvar_t</code></li> <li><code>ida_hexrays.vdui_t</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-examples.html#modifying-function-local-variables","title":"Modifying function local variables","text":"<p>Use a <code>ida_hexrays.user_lvar_modifier_t</code> to modify names, comments and/or types of local variables.</p> Source code Keywords Level vds_modify_user_lvars.py Intermediate <p>APIs Used:</p> <ul> <li><code>ida_hexrays.modify_user_lvars</code></li> <li><code>ida_hexrays.user_lvar_modifier_t</code></li> <li><code>ida_typeinf.parse_decl</code></li> <li><code>idc.here</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-examples.html#print-information-about-the-current-position-in-decompilation","title":"Print information about the current position in decompilation","text":"<p>Shows how user input information can be retrieved during processing of a notification triggered by that input</p> Source code Keywords Level curpos_details.py Hexrays_Hooks Advanced <p>APIs Used:</p> <ul> <li><code>ida_hexrays.Hexrays_Hooks</code></li> <li><code>ida_kernwin.get_user_input_event</code></li> <li><code>ida_kernwin.iek_key_press</code></li> <li><code>ida_kernwin.iek_key_release</code></li> <li><code>ida_kernwin.iek_mouse_button_press</code></li> <li><code>ida_kernwin.iek_mouse_button_release</code></li> <li><code>ida_kernwin.iek_mouse_wheel</code></li> <li><code>ida_kernwin.iek_shortcut</code></li> <li><code>ida_kernwin.input_event_t</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-examples.html#add-a-custom-microcode-block-optimization-rule","title":"Add a custom microcode block optimization rule","text":"<p>Installs a custom microcode block optimization rule, to transform:</p> <pre><code>  goto L1\n  ...\nL1:\n  goto L2\n</code></pre> <p>into</p> <pre><code>  goto L2\n</code></pre> <p>In other words we fix a goto target if it points to a chain of gotos. This improves the decompiler output in some cases.</p> Source code Keywords Level vds11.py plugin Advanced <p>APIs Used:</p> <ul> <li><code>ida_hexrays.getf_reginsn</code></li> <li><code>ida_hexrays.init_hexrays_plugin</code></li> <li><code>ida_hexrays.m_goto</code></li> <li><code>ida_hexrays.optblock_t</code></li> <li><code>ida_idaapi.PLUGIN_HIDE</code></li> <li><code>ida_idaapi.PLUGIN_KEEP</code></li> <li><code>ida_idaapi.plugin_t</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-examples.html#list-instruction-registers","title":"List instruction registers","text":"<p>Shows a list of direct references to a register from the current instruction.</p> Source code Keywords Level vds12.py Advanced <p>APIs Used:</p> <ul> <li><code>ida_bytes.get_flags</code></li> <li><code>ida_bytes.is_code</code></li> <li><code>ida_funcs.get_func</code></li> <li><code>ida_hexrays.ACFL_GUESS</code></li> <li><code>ida_hexrays.DECOMP_NO_CACHE</code></li> <li><code>ida_hexrays.DECOMP_WARNINGS</code></li> <li><code>ida_hexrays.GCO_DEF</code></li> <li><code>ida_hexrays.GCO_USE</code></li> <li><code>ida_hexrays.GC_REGS_AND_STKVARS</code></li> <li><code>ida_hexrays.MERR_OK</code></li> <li><code>ida_hexrays.MMAT_PREOPTIMIZED</code></li> <li><code>ida_hexrays.MUST_ACCESS</code></li> <li><code>ida_hexrays.gco_info_t</code></li> <li><code>ida_hexrays.gen_microcode</code></li> <li><code>ida_hexrays.get_current_operand</code></li> <li><code>ida_hexrays.get_merror_desc</code></li> <li><code>ida_hexrays.hexrays_failure_t</code></li> <li><code>ida_hexrays.init_hexrays_plugin</code></li> <li><code>ida_hexrays.mba_ranges_t</code></li> <li><code>ida_hexrays.mlist_t</code></li> <li><code>ida_hexrays.op_parent_info_t</code></li> <li><code>ida_hexrays.voff_t</code></li> <li><code>ida_kernwin.Choose</code></li> <li><code>ida_kernwin.get_screen_ea</code></li> <li><code>ida_kernwin.jumpto</code></li> <li><code>ida_kernwin.warning</code></li> <li><code>ida_lines.GENDSM_REMOVE_TAGS</code></li> <li><code>ida_lines.generate_disasm_line</code></li> <li><code>ida_pro.eavec_t</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-examples.html#invoke-the-structure-offset-choosing-dialog-from-decompilation","title":"Invoke the structure offset-choosing dialog from decompilation","text":"<p>Registers an action opens the \"Select offsets\" widget (select_udt_by_offset() call).</p> <p>This effectively repeats the functionality already available through Alt+Y.</p> <p>Place cursor on the union field and press Shift+T</p> Source code Keywords Level vds17.py plugin Advanced <p>APIs Used:</p> <ul> <li><code>ida_hexrays.USE_KEYBOARD</code></li> <li><code>ida_hexrays.cot_add</code></li> <li><code>ida_hexrays.cot_cast</code></li> <li><code>ida_hexrays.cot_memptr</code></li> <li><code>ida_hexrays.cot_memref</code></li> <li><code>ida_hexrays.cot_num</code></li> <li><code>ida_hexrays.cot_ref</code></li> <li><code>ida_hexrays.get_hexrays_version</code></li> <li><code>ida_hexrays.get_widget_vdui</code></li> <li><code>ida_hexrays.init_hexrays_plugin</code></li> <li><code>ida_hexrays.select_udt_by_offset</code></li> <li><code>ida_hexrays.ui_stroff_applicator_t</code></li> <li><code>ida_hexrays.ui_stroff_ops_t</code></li> <li><code>ida_idaapi.BADADDR</code></li> <li><code>ida_idaapi.PLUGIN_HIDE</code></li> <li><code>ida_idaapi.PLUGIN_KEEP</code></li> <li><code>ida_idaapi.plugin_t</code></li> <li><code>ida_kernwin.AST_DISABLE_FOR_WIDGET</code></li> <li><code>ida_kernwin.AST_ENABLE_FOR_WIDGET</code></li> <li><code>ida_kernwin.BWN_PSEUDOCODE</code></li> <li><code>ida_kernwin.action_desc_t</code></li> <li><code>ida_kernwin.action_handler_t</code></li> <li><code>ida_kernwin.get_custom_viewer_curline</code></li> <li><code>ida_kernwin.msg</code></li> <li><code>ida_kernwin.register_action</code></li> <li><code>ida_kernwin.warning</code></li> <li><code>ida_lines.tag_remove</code></li> <li><code>ida_typeinf.PRTYPE_1LINE</code></li> <li><code>ida_typeinf.print_tinfo</code></li> <li><code>ida_typeinf.remove_pointer</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-examples.html#add-a-custom-microcode-instruction-optimization-rule","title":"Add a custom microcode instruction optimization rule","text":"<p>Installs a custom microcode instruction optimization rule, to transform:</p> <pre><code>x | ~x\n</code></pre> <p>into</p> <pre><code>-1\n</code></pre> <p>To see this plugin in action please use be_ornot_be.idb</p> Source code Keywords Level vds19.py plugin Advanced <p>APIs Used:</p> <ul> <li><code>ida_hexrays.init_hexrays_plugin</code></li> <li><code>ida_hexrays.m_bnot</code></li> <li><code>ida_hexrays.m_mov</code></li> <li><code>ida_hexrays.m_or</code></li> <li><code>ida_hexrays.minsn_visitor_t</code></li> <li><code>ida_hexrays.mop_t</code></li> <li><code>ida_hexrays.optinsn_t</code></li> <li><code>ida_idaapi.PLUGIN_HIDE</code></li> <li><code>ida_idaapi.PLUGIN_KEEP</code></li> <li><code>ida_idaapi.plugin_t</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-examples.html#invert-ifelse-blocks-in-decompilation","title":"Invert if/else blocks in decompilation","text":"<p>Registers an action that can be used to invert the <code>if</code> and <code>else</code> blocks of a <code>ida_hexrays.cif_t</code>.</p> <p>For example, a statement like</p> <pre><code>if ( cond )\n{\n  statements1;\n}\nelse\n{\n  statements2;\n}\n</code></pre> <p>will be displayed as</p> <pre><code>if ( !cond )\n{\n  statements2;\n}\nelse\n{\n  statements1;\n}\n</code></pre> <p>The modifications are persistent: the user can quit &amp; restart IDA, and the changes will be present.</p> Source code Keywords Level vds3.py ctxmenu Hexrays_Hooks IDP_Hooks plugin Advanced <p>APIs Used:</p> <ul> <li><code>ida_hexrays.CMAT_FINAL</code></li> <li><code>ida_hexrays.CV_FAST</code></li> <li><code>ida_hexrays.CV_INSNS</code></li> <li><code>ida_hexrays.Hexrays_Hooks</code></li> <li><code>ida_hexrays.ITP_ELSE</code></li> <li><code>ida_hexrays.USE_KEYBOARD</code></li> <li><code>ida_hexrays.VDI_TAIL</code></li> <li><code>ida_hexrays.cexpr_t</code></li> <li><code>ida_hexrays.cit_if</code></li> <li><code>ida_hexrays.ctree_visitor_t</code></li> <li><code>ida_hexrays.get_widget_vdui</code></li> <li><code>ida_hexrays.init_hexrays_plugin</code></li> <li><code>ida_hexrays.lnot</code></li> <li><code>ida_hexrays.qswap</code></li> <li><code>ida_idaapi.PLUGIN_HIDE</code></li> <li><code>ida_idaapi.PLUGIN_KEEP</code></li> <li><code>ida_idaapi.plugin_t</code></li> <li><code>ida_idp.IDP_Hooks</code></li> <li><code>ida_kernwin.AST_DISABLE_FOR_WIDGET</code></li> <li><code>ida_kernwin.AST_ENABLE_FOR_WIDGET</code></li> <li><code>ida_kernwin.BWN_PSEUDOCODE</code></li> <li><code>ida_kernwin.action_desc_t</code></li> <li><code>ida_kernwin.action_handler_t</code></li> <li><code>ida_kernwin.attach_action_to_popup</code></li> <li><code>ida_kernwin.register_action</code></li> <li><code>ida_netnode.netnode</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-examples.html#dump-c-tree-graph","title":"Dump C-tree graph","text":"<p>Registers an action that can be used to show the graph of the ctree. The current item will be highlighted in the graph.</p> <p>The command shortcut is <code>Ctrl+Shift+G</code>, and is also added to the context menu.</p> <p>To display the graph, we produce a .gdl file, and request that ida displays that using <code>ida_gdl.display_gdl</code>.</p> Source code Keywords Level vds5.py ctxmenu Hexrays_Hooks plugin Advanced <p>APIs Used:</p> <ul> <li><code>ida_gdl.display_gdl</code></li> <li><code>ida_hexrays.Hexrays_Hooks</code></li> <li><code>ida_hexrays.USE_KEYBOARD</code></li> <li><code>ida_hexrays.cit_asm</code></li> <li><code>ida_hexrays.cit_goto</code></li> <li><code>ida_hexrays.cot_helper</code></li> <li><code>ida_hexrays.cot_memptr</code></li> <li><code>ida_hexrays.cot_memref</code></li> <li><code>ida_hexrays.cot_num</code></li> <li><code>ida_hexrays.cot_obj</code></li> <li><code>ida_hexrays.cot_ptr</code></li> <li><code>ida_hexrays.cot_str</code></li> <li><code>ida_hexrays.cot_var</code></li> <li><code>ida_hexrays.ctree_parentee_t</code></li> <li><code>ida_hexrays.get_ctype_name</code></li> <li><code>ida_hexrays.get_widget_vdui</code></li> <li><code>ida_hexrays.init_hexrays_plugin</code></li> <li><code>ida_idaapi.PLUGIN_HIDE</code></li> <li><code>ida_idaapi.PLUGIN_KEEP</code></li> <li><code>ida_idaapi.plugin_t</code></li> <li><code>ida_kernwin.AST_DISABLE_FOR_WIDGET</code></li> <li><code>ida_kernwin.AST_ENABLE_FOR_WIDGET</code></li> <li><code>ida_kernwin.BWN_PSEUDOCODE</code></li> <li><code>ida_kernwin.action_desc_t</code></li> <li><code>ida_kernwin.action_handler_t</code></li> <li><code>ida_kernwin.attach_action_to_popup</code></li> <li><code>ida_kernwin.register_action</code></li> <li><code>ida_kernwin.warning</code></li> <li><code>ida_lines.tag_remove</code></li> <li><code>ida_pro.str2user</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-examples.html#show-decompiler-cross-references","title":"Show decompiler cross-references","text":"<p>Show decompiler-style Xref when the <code>Ctrl+X</code> key is pressed in the Decompiler window.</p> <ul> <li>supports any global name: functions, strings, integers, ...</li> <li>supports structure member.</li> </ul> Source code Keywords Level vds_xrefs.py ctxmenu Hexrays_Hooks Advanced <p>APIs Used:</p> <ul> <li><code>ida_funcs.get_func_name</code></li> <li><code>ida_hexrays.DECOMP_GXREFS_FORCE</code></li> <li><code>ida_hexrays.Hexrays_Hooks</code></li> <li><code>ida_hexrays.USE_KEYBOARD</code></li> <li><code>ida_hexrays.VDI_EXPR</code></li> <li><code>ida_hexrays.VDI_FUNC</code></li> <li><code>ida_hexrays.cexpr_t</code></li> <li><code>ida_hexrays.cfunc_t</code></li> <li><code>ida_hexrays.cinsn_t</code></li> <li><code>ida_hexrays.decompile</code></li> <li><code>ida_hexrays.get_widget_vdui</code></li> <li><code>ida_hexrays.init_hexrays_plugin</code></li> <li><code>ida_hexrays.open_pseudocode</code></li> <li><code>ida_hexrays.qstring_printer_t</code></li> <li><code>ida_idaapi.BADADDR</code></li> <li><code>ida_kernwin.AST_DISABLE</code></li> <li><code>ida_kernwin.AST_DISABLE_FOR_WIDGET</code></li> <li><code>ida_kernwin.AST_ENABLE</code></li> <li><code>ida_kernwin.BWN_PSEUDOCODE</code></li> <li><code>ida_kernwin.PluginForm</code></li> <li><code>ida_kernwin.PluginForm.Show</code></li> <li><code>ida_kernwin.action_desc_t</code></li> <li><code>ida_kernwin.action_handler_t</code></li> <li><code>ida_kernwin.attach_action_to_popup</code></li> <li><code>ida_kernwin.register_action</code></li> <li><code>ida_typeinf.PRTYPE_1LINE</code></li> <li><code>ida_typeinf.STRMEM_OFFSET</code></li> <li><code>ida_typeinf.print_tinfo</code></li> <li><code>ida_typeinf.tinfo_t</code></li> <li><code>ida_typeinf.udm_t</code></li> <li><code>idautils.Functions</code></li> <li><code>idautils.XrefsTo</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-examples.html#print-all-registers-for-all-threads-in-the-debugged-process","title":"Print all registers, for all threads in the debugged process","text":"<p>Iterate over the list of threads in the program being debugged, and dump all registers contents</p> <p>To use this example:</p> <ul> <li>run <code>ida64</code> on test program <code>simple_appcall_linux64</code>, or <code>ida</code> on test program <code>simple_appcall_linux32</code>, and wait for auto-analysis to finish</li> <li>put a breakpoint somewhere in the code</li> <li>select the 'linux debugger' (either local, or remote)</li> <li>start debugging</li> <li>Press Alt+Shift+C at the breakpoint</li> </ul> Source code Keywords Level print_registers.py Beginner <p>APIs Used:</p> <ul> <li><code>ida_dbg.get_reg_vals</code></li> <li><code>ida_dbg.get_thread_qty</code></li> <li><code>ida_dbg.getn_thread</code></li> <li><code>ida_idd.get_dbg</code></li> <li><code>ida_kernwin.AST_ENABLE_ALWAYS</code></li> <li><code>ida_kernwin.action_desc_t</code></li> <li><code>ida_kernwin.register_action</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-examples.html#dump-symbols-from-a-process-being-debugged","title":"Dump symbols from a process being debugged","text":"<p>Queries the debugger (possibly remotely) for the list of symbols that the process being debugged, provides.</p> Source code Keywords Level show_debug_names.py Beginner <p>APIs Used:</p> <ul> <li><code>ida_dbg.DSTATE_SUSP</code></li> <li><code>ida_dbg.get_process_state</code></li> <li><code>ida_dbg.is_debugger_on</code></li> <li><code>ida_ida.inf_get_max_ea</code></li> <li><code>ida_ida.inf_get_min_ea</code></li> <li><code>ida_name.get_debug_names</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-examples.html#print-call-stack","title":"Print call stack","text":"<p>Print the return addresses from the call stack at a breakpoint, when debugging a Linux binary. (and also print the module and the debug name from debugger)</p> <p>To use this example:</p> <ul> <li>run <code>ida</code> on test program <code>simple_appcall_linux64</code>, or <code>ida</code> on test program <code>simple_appcall_linux32</code>, and wait for auto-analysis to finish</li> <li>put a breakpoint where you want to see the call stack</li> <li>select the 'linux debugger' (either local, or remote)</li> <li>start debugging</li> <li>Press Shift+C at the breakpoint</li> </ul> Source code Keywords Level print_call_stack.py Intermediate <p>APIs Used:</p> <ul> <li><code>ida_dbg.collect_stack_trace</code></li> <li><code>ida_dbg.get_current_thread</code></li> <li><code>ida_dbg.get_module_info</code></li> <li><code>ida_idd.call_stack_t</code></li> <li><code>ida_idd.modinfo_t</code></li> <li><code>ida_kernwin.AST_ENABLE_ALWAYS</code></li> <li><code>ida_kernwin.action_desc_t</code></li> <li><code>ida_kernwin.register_action</code></li> <li><code>ida_name.GNCN_NOCOLOR</code></li> <li><code>ida_name.GNCN_NOLABEL</code></li> <li><code>ida_name.GNCN_NOSEG</code></li> <li><code>ida_name.GNCN_PREFDBG</code></li> <li><code>ida_name.get_nice_colored_name</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-examples.html#add-a-custom-action-to-the-registers-widget","title":"Add a custom action to the \"registers\" widget","text":"<p>It's possible to add actions to the context menu of pretty much all widgets in IDA.</p> <p>This example shows how to do just that for registers-displaying widgets (e.g., \"General registers\")</p> Source code Keywords Level registers_context_menu.py ctxmenu UI_Hooks Intermediate <p>APIs Used:</p> <ul> <li><code>ida_dbg.get_dbg_reg_info</code></li> <li><code>ida_dbg.get_reg_val</code></li> <li><code>ida_idd.register_info_t</code></li> <li><code>ida_kernwin.AST_DISABLE_FOR_WIDGET</code></li> <li><code>ida_kernwin.AST_ENABLE_FOR_WIDGET</code></li> <li><code>ida_kernwin.BWN_CPUREGS</code></li> <li><code>ida_kernwin.UI_Hooks</code></li> <li><code>ida_kernwin.action_desc_t</code></li> <li><code>ida_kernwin.action_handler_t</code></li> <li><code>ida_kernwin.attach_action_to_popup</code></li> <li><code>ida_kernwin.get_widget_type</code></li> <li><code>ida_kernwin.register_action</code></li> <li><code>ida_ua.dt_byte</code></li> <li><code>ida_ua.dt_dword</code></li> <li><code>ida_ua.dt_qword</code></li> <li><code>ida_ua.dt_word</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-examples.html#programmatically-drive-a-debugging-session","title":"Programmatically drive a debugging session","text":"<p>Start a debugging session, step through the first five instructions. Each instruction is disassembled after execution.</p> Source code Keywords Level automatic_steps.py DBG_Hooks Advanced <p>APIs Used:</p> <ul> <li><code>ida_dbg.DBG_Hooks</code></li> <li><code>ida_dbg.get_reg_val</code></li> <li><code>ida_dbg.request_exit_process</code></li> <li><code>ida_dbg.request_run_to</code></li> <li><code>ida_dbg.request_step_over</code></li> <li><code>ida_dbg.run_requests</code></li> <li><code>ida_ida.inf_get_start_ip</code></li> <li><code>ida_idaapi.BADADDR</code></li> <li><code>ida_lines.generate_disasm_line</code></li> <li><code>ida_lines.tag_remove</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-examples.html#react-to-trace-notifications","title":"React to trace notifications","text":"<p>This script demonstrates using the low-level tracing hook (ida_dbg.DBG_Hooks.dbg_trace). It can be run like so:</p> <pre><code> ida.exe -B -Sdbg_trace.py -Ltrace.log file.exe\n</code></pre> Source code Keywords Level dbg_trace.py DBG_Hooks Advanced <p>APIs Used:</p> <ul> <li><code>GENDSM_FORCE_CODE</code></li> <li><code>GENDSM_REMOVE_TAGS</code></li> <li><code>NN_call</code></li> <li><code>NN_callfi</code></li> <li><code>NN_callni</code></li> <li><code>generate_disasm_line</code></li> <li><code>ida_dbg.DBG_Hooks</code></li> <li><code>ida_dbg.ST_OVER_DEBUG_SEG</code></li> <li><code>ida_dbg.ST_OVER_LIB_FUNC</code></li> <li><code>ida_dbg.enable_step_trace</code></li> <li><code>ida_dbg.get_process_state</code></li> <li><code>ida_dbg.get_reg_val</code></li> <li><code>ida_dbg.get_step_trace_options</code></li> <li><code>ida_dbg.load_debugger</code></li> <li><code>ida_dbg.refresh_debugger_memory</code></li> <li><code>ida_dbg.request_continue_process</code></li> <li><code>ida_dbg.request_enable_step_trace</code></li> <li><code>ida_dbg.request_set_step_trace_options</code></li> <li><code>ida_dbg.run_requests</code></li> <li><code>ida_dbg.run_to</code></li> <li><code>ida_dbg.set_step_trace_options</code></li> <li><code>ida_dbg.wait_for_next_event</code></li> <li><code>ida_ida.f_ELF</code></li> <li><code>ida_ida.f_MACHO</code></li> <li><code>ida_ida.f_PE</code></li> <li><code>ida_ida.inf_get_filetype</code></li> <li><code>ida_ida.inf_get_max_ea</code></li> <li><code>ida_ida.inf_get_min_ea</code></li> <li><code>ida_ida.inf_get_start_ip</code></li> <li><code>ida_pro.qexit</code></li> <li><code>ida_ua.decode_insn</code></li> <li><code>ida_ua.insn_t</code></li> <li><code>idc.ARGV</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-examples.html#execute-code-into-the-application-being-debugged-on-linux","title":"Execute code into the application being debugged (on Linux)","text":"<p>Using the <code>ida_idd.Appcall</code> utility to execute code in the process being debugged.</p> <p>This example will run the test program and stop wherever the cursor currently is, and then perform an appcall to execute the <code>ref4</code> and <code>ref8</code> functions.</p> <p>To use this example:</p> <ul> <li>run <code>ida64</code> on test program <code>simple_appcall_linux64</code>, or <code>ida</code> on test program <code>simple_appcall_linux32</code>, and wait for auto-analysis to finish</li> <li>select the 'linux debugger' (either local, or remote)</li> <li>run this script</li> </ul> <p>Note: the real body of code is in <code>simple_appcall_common.py</code>.</p> Source code Keywords Level simple_appcall_linux.py Advanced <p>APIs Used:</p> <ul> <li><code>ida_dbg.DBG_Hooks</code></li> <li><code>ida_dbg.run_to</code></li> <li><code>ida_idaapi.BADADDR</code></li> <li><code>ida_idd.Appcall</code></li> <li><code>ida_idd.Appcall.byref</code></li> <li><code>ida_idd.Appcall.int64</code></li> <li><code>ida_kernwin.get_screen_ea</code></li> <li><code>ida_name.get_name_ea</code></li> <li><code>ida_name.set_name</code></li> <li><code>ida_typeinf.apply_cdecl</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-examples.html#execute-code-into-the-application-being-debugged-on-windows","title":"Execute code into the application being debugged (on Windows)","text":"<p>Using the <code>ida_idd.Appcall</code> utility to execute code in the process being debugged.</p> <p>This example will run the test program and stop wherever the cursor currently is, and then perform an appcall to execute the <code>ref4</code> and <code>ref8</code> functions.</p> <p>To use this example:</p> <ul> <li>run <code>ida</code> on test program <code>simple_appcall_win64.exe</code>, or <code>ida</code> on test program <code>simple_appcall_win32.exe</code>, and wait for auto-analysis to finish</li> <li>select the 'windows debugger' (either local, or remote)</li> <li>run this script</li> </ul> <p>Note: the real body of code is in <code>simple_appcall_common.py</code>.</p> Source code Keywords Level simple_appcall_win.py Advanced <p>APIs Used:</p> <ul> <li><code>ida_dbg.DBG_Hooks</code></li> <li><code>ida_dbg.run_to</code></li> <li><code>ida_ida.inf_is_64bit</code></li> <li><code>ida_idaapi.BADADDR</code></li> <li><code>ida_idd.Appcall</code></li> <li><code>ida_idd.Appcall.byref</code></li> <li><code>ida_idd.Appcall.int64</code></li> <li><code>ida_kernwin.get_screen_ea</code></li> <li><code>ida_name.get_name_ea</code></li> <li><code>ida_name.set_name</code></li> <li><code>ida_typeinf.apply_cdecl</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-examples.html#create-a-structure-by-parsing-its-definition","title":"Create a structure by parsing its definition","text":"<p>The goal of this script is to demonstrate some usage of the type API. In this script, we create a structure using the \"parsing\" method.</p> Source code Keywords Level create_struct_by_parsing.py Beginner <p>APIs Used:</p> <ul> <li><code>ida_typeinf.tinfo_t</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-examples.html#delete-structure-members-that-fall-within-an-offset-range","title":"Delete structure members that fall within an offset range","text":"<p>The goal of this script is to demonstrate some usage of the type API. In this script, we first create a structure with many members, and then remove all those that fall within a range.</p> Source code Keywords Level del_struct_members.py Beginner <p>APIs Used:</p> <ul> <li><code>ida_typeinf.STRMEM_OFFSET</code></li> <li><code>ida_typeinf.TERR_OK</code></li> <li><code>ida_typeinf.tinfo_t</code></li> <li><code>ida_typeinf.udm_t</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-examples.html#print-enumeration-members","title":"Print enumeration members","text":"<p>In this example, we will first ask the user to provide the name of an enumeration, and then iterate on it</p> Source code Keywords Level list_enum_member.py Beginner <p>APIs Used:</p> <ul> <li><code>ida_kernwin.ask_str</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-examples.html#print-function-stack-frame-information","title":"Print function stack frame information","text":"<p>The goal of this script is to demonstrate some usage of the type API. In this script, we retrieve the function frame structure, and iterate on the frame members.</p> Source code Keywords Level list_frame_info.py Beginner <p>APIs Used:</p> <ul> <li><code>ida_funcs.get_func</code></li> <li><code>ida_kernwin.get_screen_ea</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-examples.html#list-database-functions-prototypes","title":"List database functions prototypes","text":"<p>This script demonstrates how to list a function return type along with its parameters types and name if any. We do this for all the functions found in the database.</p> Source code Keywords Level list_func_details.py Beginner <p>APIs Used:</p> <ul> <li><code>ida_funcs.get_func</code></li> <li><code>idautils.Functions</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-examples.html#list-structure-members","title":"List structure members","text":"<p>The goal of this script is to demonstrate some usage of the type API. In this script, we:</p> <ul> <li>Ask the user for a structure name. It must already be present in the local types.</li> <li>Retrieve the structure type info from the local type</li> <li>Extract its type details (udt)</li> <li>Iterates it members and prints their names.</li> </ul> Source code Keywords Level list_struct_member.py Beginner <p>APIs Used:</p> <ul> <li><code>ida_kernwin.ask_str</code></li> <li><code>ida_typeinf.BTF_STRUCT</code></li> <li><code>ida_typeinf.get_idati</code></li> <li><code>ida_typeinf.tinfo_t</code></li> <li><code>ida_typeinf.udt_type_data_t</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-examples.html#list-cross-references-to-a-structure","title":"List cross-references to a structure","text":"<p>The goal of this script is to demonstrate some usage of the type API. In this script, we:</p> <ul> <li>Ask the user for a structure name. It must already be present in the local types.</li> <li>Get its tid</li> <li>Create the list of all the reference.</li> <li>Print it</li> </ul> Source code Keywords Level list_struct_xrefs.py Beginner <p>APIs Used:</p> <ul> <li><code>ida_kernwin.choose_struct</code></li> <li><code>ida_typeinf.tinfo_t</code></li> <li><code>ida_xref.xrefblk_t</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-examples.html#list-union-members","title":"List union members","text":"<p>The goal of this script is to demonstrate some usage of the type API. In this script, we:</p> <ul> <li>Ask the user for a union name. It must already be present in the local types.</li> <li>Retrieve the union type info from the local type</li> <li>Extract its type details (udt)</li> <li>Iterates it members and prints their names.</li> </ul> Source code Keywords Level list_union_member.py Beginner <p>APIs Used:</p> <ul> <li><code>ida_kernwin.ask_str</code></li> <li><code>ida_typeinf.BTF_UNION</code></li> <li><code>ida_typeinf.get_idati</code></li> <li><code>ida_typeinf.tinfo_t</code></li> <li><code>ida_typeinf.udt_type_data_t</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-examples.html#mark-a-register-spoiled-by-a-function","title":"Mark a register \"spoiled\" by a function","text":"<p>At least two possibilies are offered in order to indicate that a function spoils registers (excluding the \"normal\" ones):</p> <p>You can either parse &amp; apply a declaration:</p> <pre><code>  func_tfinfo = ida_typeinf.tinfo_t(\"int _spoils&lt;rsi&gt; main();\")\n  ida_typeinf.apply_tinfo(func.start_ea, func_tinfo, ida_typeinf.TINFO_DEFINITE)\n</code></pre> <p>or retrieve &amp; modify the <code>tinfo_t</code> object directly.</p> <p>This script showcases the latter.</p> Source code Keywords Level mark_func_spoiled.py Beginner <p>APIs Used:</p> <ul> <li><code>ida_funcs.get_func</code></li> <li><code>ida_idp.parse_reg_name</code></li> <li><code>ida_idp.reg_info_t</code></li> <li><code>ida_kernwin.get_screen_ea</code></li> <li><code>ida_nalt.get_tinfo</code></li> <li><code>ida_typeinf.FTI_SPOILED</code></li> <li><code>ida_typeinf.TINFO_DEFINITE</code></li> <li><code>ida_typeinf.apply_tinfo</code></li> <li><code>ida_typeinf.func_type_data_t</code></li> <li><code>ida_typeinf.tinfo_t</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-examples.html#apply-function-prototype-to-call-sites","title":"Apply function prototype to call sites","text":"<p>The goal of this script is to demonstrate some usage of the type API. In this script, we:</p> <ul> <li>Open the private type libary.</li> <li>Load its declaration in the type library by parsing its declaration and keep the return tuple for future use.</li> <li>Deserialize the type info stored in the returned tuple.</li> <li>Get the address of the function.</li> <li>Get the address of the code reference to the function and apply the type info there.</li> </ul> Source code Keywords Level apply_callee_tinfo.py Intermediate <p>APIs Used:</p> <ul> <li><code>ida_idaapi.BADADDR</code></li> <li><code>ida_name.get_name_ea</code></li> <li><code>ida_typeinf.PT_REPLACE</code></li> <li><code>ida_typeinf.apply_callee_tinfo</code></li> <li><code>ida_typeinf.get_idati</code></li> <li><code>ida_typeinf.idc_parse_decl</code></li> <li><code>ida_typeinf.tinfo_t</code></li> <li><code>idautils.CodeRefsTo</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-examples.html#create-an-array-type","title":"Create an array type","text":"<p>The goal of this script is to demonstrate some usage of the type API. In this script, we create an array using both versions of create_array tinfo_t method.</p> Source code Keywords Level create_array.py Intermediate <p>APIs Used:</p> <ul> <li><code>ida_typeinf.BTF_INT</code></li> <li><code>ida_typeinf.array_type_data_t</code></li> <li><code>ida_typeinf.tinfo_t</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-examples.html#create-a-structure-with-bitfield-members","title":"Create a structure with bitfield members","text":"<p>The goal of this script is to demonstrate some usage of the type API. In this script, we:</p> <ul> <li>Create a bitfield structure. In the present case the bitfield is an int32 made of three 'members' spanning it entirely: bit0-&gt;bit19: bf1 bit20-&gt;bit25: bf2 bit26-&gt;bit31: bf3</li> <li>For each member create a repeatable comment.</li> </ul> Source code Keywords Level create_bfstruct.py Intermediate <p>APIs Used:</p> <ul> <li><code>ida_typeinf.tinfo_t</code></li> <li><code>ida_typeinf.udm_t</code></li> <li><code>ida_typeinf.udt_type_data_t</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-examples.html#create-a-bitmask-enumeration","title":"Create a bitmask enumeration","text":"<p>The goal of this script is to demonstrate some usage of the type API. In this script, we create a bitmask enumeration member by member.</p> Source code Keywords Level create_bmenum.py Intermediate <p>APIs Used:</p> <ul> <li><code>ida_typeinf.BTE_BITMASK</code></li> <li><code>ida_typeinf.BTE_HEX</code></li> <li><code>ida_typeinf.tinfo_t</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-examples.html#create-a-type-library-file","title":"Create a type library file","text":"<p>The goal of this script is to demonstrate some usage of the type API. In this script:</p> <ul> <li>We create a new libssh2-64.til file holding some libssh2 64-bit structures.</li> <li>Once the file has been created, it can copied in the IDA install til directory or in the user IDA til directory.</li> </ul> Source code Keywords Level create_libssh2_til.py Intermediate <p>APIs Used:</p> <ul> <li><code>ida_typeinf.HTI_DCL</code></li> <li><code>ida_typeinf.HTI_PAKDEF</code></li> <li><code>ida_typeinf.compact_til</code></li> <li><code>ida_typeinf.free_til</code></li> <li><code>ida_typeinf.new_til</code></li> <li><code>ida_typeinf.parse_decls</code></li> <li><code>ida_typeinf.store_til</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-examples.html#create-a-structure-programmatically","title":"Create a structure programmatically","text":"<p>The goal of this script is to demonstrate some usage of the type API. In this script, we create a structure by building it member by member.</p> Source code Keywords Level create_struct_by_member.py Intermediate <p>APIs Used:</p> <ul> <li><code>ida_typeinf.BTF_UINT32</code></li> <li><code>ida_typeinf.NTF_TYPE</code></li> <li><code>ida_typeinf.del_named_type</code></li> <li><code>ida_typeinf.tinfo_errstr</code></li> <li><code>ida_typeinf.tinfo_t</code></li> <li><code>ida_typeinf.udt_type_data_t</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-examples.html#create-populate-a-structure","title":"Create &amp; populate a structure","text":"<p>Usage of the API to create &amp; populate a structure with members of different types.</p> Source code Keywords Level create_structure_programmatically.py Intermediate <p>APIs Used:</p> <ul> <li><code>ida_typeinf.BTF_BYTE</code></li> <li><code>ida_typeinf.BTF_DOUBLE</code></li> <li><code>ida_typeinf.BTF_FLOAT</code></li> <li><code>ida_typeinf.BTF_INT</code></li> <li><code>ida_typeinf.BTF_INT128</code></li> <li><code>ida_typeinf.BTF_INT16</code></li> <li><code>ida_typeinf.BTF_INT64</code></li> <li><code>ida_typeinf.BTF_TBYTE</code></li> <li><code>ida_typeinf.BTF_UINT32</code></li> <li><code>ida_typeinf.FRB_NUMO</code></li> <li><code>ida_typeinf.NTF_TYPE</code></li> <li><code>ida_typeinf.PRTYPE_DEF</code></li> <li><code>ida_typeinf.PRTYPE_MULTI</code></li> <li><code>ida_typeinf.PRTYPE_TYPE</code></li> <li><code>ida_typeinf.del_named_type</code></li> <li><code>ida_typeinf.idc_parse_types</code></li> <li><code>ida_typeinf.tinfo_errstr</code></li> <li><code>ida_typeinf.tinfo_t</code></li> <li><code>ida_typeinf.udm_t</code></li> <li><code>ida_typeinf.udt_type_data_t</code></li> <li><code>ida_typeinf.value_repr_t</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-examples.html#create-a-union","title":"Create a union","text":"<p>The goal of this script is to demonstrate some usage of the type API. In this script, we create a union by building it member after member.</p> Source code Keywords Level create_union_by_member.py Intermediate <p>APIs Used:</p> <ul> <li><code>ida_typeinf.BTF_CHAR</code></li> <li><code>ida_typeinf.BTF_FLOAT</code></li> <li><code>ida_typeinf.BTF_INT32</code></li> <li><code>ida_typeinf.BTF_UNION</code></li> <li><code>ida_typeinf.NTF_TYPE</code></li> <li><code>ida_typeinf.PRTYPE_DEF</code></li> <li><code>ida_typeinf.PRTYPE_MULTI</code></li> <li><code>ida_typeinf.PRTYPE_TYPE</code></li> <li><code>ida_typeinf.del_named_type</code></li> <li><code>ida_typeinf.tinfo_t</code></li> <li><code>ida_typeinf.udm_t</code></li> <li><code>ida_typeinf.udt_type_data_t</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-examples.html#create-a-segment-and-define-complex-data-in-it","title":"Create a segment, and define (complex) data in it","text":"<p>The goal of this script is to demonstrate some usage of the type API. In this script, we show how to create, set type and name of a user shared data region in an ntdll IDB:</p> <ul> <li>Load the <code>_KUSER_SHARED_DATA</code> data type from a type info library shipped with IDA, and import it into the IDB's \"local types\"</li> <li>Create a data segment with UserSharedData as its name.</li> <li>Apply the type to the start of the newly created segment base address.</li> <li>Set the address name.</li> </ul> Source code Keywords Level create_user_shared_data.py Intermediate <p>APIs Used:</p> <ul> <li><code>ida_name.set_name</code></li> <li><code>ida_segment.add_segm_ex</code></li> <li><code>ida_segment.saRelPara</code></li> <li><code>ida_segment.scPub</code></li> <li><code>ida_segment.segment_t</code></li> <li><code>ida_segment.setup_selector</code></li> <li><code>ida_typeinf.TINFO_DEFINITE</code></li> <li><code>ida_typeinf.apply_tinfo</code></li> <li><code>ida_typeinf.free_til</code></li> <li><code>ida_typeinf.load_til</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-examples.html#utilities-to-detect-structure-gaps-alignment","title":"Utilities to detect structure gaps &amp; alignment","text":"<p>The goal of this script is to illustrate ways to detect gaps &amp; alignments in structures, from a structure name &amp; (byte) offset.</p> Source code Keywords Level gap_size_align_snippet.py Intermediate <p>APIs Used:</p> <ul> <li><code>ida_range.rangeset_t</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-examples.html#get-member-by-offset-taking-into-account-variable-sized-structures","title":"Get member by offset, taking into account variable sized structures","text":"<p>The goal of this script is to provide a way to figure out what structure member, is most likely referenced by an offset.</p> <p>This also works for variable sized types.</p> Source code Keywords Level get_best_fit_member.py Intermediate <p>APIs Used:</p> <ul> <li><code>ida_typeinf.tinfo_t</code></li> <li><code>ida_typeinf.udt_type_data_t</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-examples.html#get-information-about-the-innermost-member-of-a-structure","title":"Get information about the \"innermost\" member of a structure","text":"<p>Assuming the 2 following types:</p> <pre><code>    struct b\n    {\n        int low;\n        int high;\n    };\n\n    struct a\n    {\n        int foo;\n        b b_instance;\n        int bar;\n    };\n</code></pre> <p>looking at an offset of 5 bytes inside an <code>a</code> instance, might be interpreted as pointing somewhere inside member <code>b_instance</code>, of type <code>b</code>. Alternatively, that same offset might be intprereted as pointing somewhere inside <code>low</code>, of type <code>int</code>.</p> <p>We refer to that latter interpretation as \"innermost\", and this sample shows how the API lets us \"drill down\" to retrieve that innermost member.</p> Source code Keywords Level get_innermost_member.py Intermediate <p>APIs Used:</p> <ul> <li><code>ida_typeinf.get_idati</code></li> <li><code>ida_typeinf.parse_decls</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-examples.html#load-a-type-library-from-a-file-and-then-a-type-from-it","title":"Load a type library from a file, and then a type from it","text":"<p>The goal of this script is to demonstrate some usage of the type API. In this script, we:</p> <ul> <li>ask the user for a specific til to be lodaed</li> <li>if successfully loaded ask the user for a type name to be imported.</li> <li>append the type to the local types.</li> </ul> Source code Keywords Level import_type_from_til.py Intermediate <p>APIs Used:</p> <ul> <li><code>ida_kernwin.ask_str</code></li> <li><code>ida_typeinf.load_til</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-examples.html#inject-a-member-in-the-middle-of-a-structure","title":"Inject a member in the middle of a structure","text":"<p>This sample will retrieve the type info object by its name, find the member at the specified offset, and insert a new member right before it</p> Source code Keywords Level insert_struct_member.py Intermediate <p>APIs Used:</p> <ul> <li><code>ida_typeinf.TERR_OK</code></li> <li><code>ida_typeinf.tinfo_t</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-examples.html#list-all-xrefs-to-a-function-stack-variable","title":"List all xrefs to a function stack variable","text":"<p>Contrary to (in-memory) data &amp; code xrefs, retrieving stack variables xrefs requires a bit more work than just using ida_xref's first_to(), next_to() (or higher level utilities such as idautils.XrefsTo)</p> Source code Keywords Level list_stkvar_xrefs.py xrefs Intermediate <p>APIs Used:</p> <ul> <li><code>ida_bytes.get_flags</code></li> <li><code>ida_bytes.is_stkvar</code></li> <li><code>ida_frame.calc_stkvar_struc_offset</code></li> <li><code>ida_funcs.get_func</code></li> <li><code>ida_ida.UA_MAXOP</code></li> <li><code>ida_kernwin.AST_DISABLE_FOR_WIDGET</code></li> <li><code>ida_kernwin.AST_ENABLE_FOR_WIDGET</code></li> <li><code>ida_kernwin.BWN_DISASM</code></li> <li><code>ida_kernwin.action_desc_t</code></li> <li><code>ida_kernwin.action_handler_t</code></li> <li><code>ida_kernwin.get_current_viewer</code></li> <li><code>ida_kernwin.get_highlight</code></li> <li><code>ida_kernwin.get_screen_ea</code></li> <li><code>ida_kernwin.register_action</code></li> <li><code>ida_typeinf.tinfo_t</code></li> <li><code>ida_ua.decode_insn</code></li> <li><code>ida_ua.insn_t</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-examples.html#list-cross-references-to-function-stack-frame-variables","title":"List cross-references to function stack frame variables","text":"<p>The goal of this script is to demonstrate some usage of the type API. In this script, we demonstrate how to list each stack variables xref:</p> <ul> <li>Get the function object surrounding cursor location.</li> <li>Use this function to retrieve the corresponding frame object.</li> <li>For each frame element:</li> <li>Build the stack variable xref list</li> <li>Print it.</li> </ul> Source code Keywords Level print_stkvar_xrefs.py Intermediate <p>APIs Used:</p> <ul> <li><code>ida_frame.build_stkvar_xrefs</code></li> <li><code>ida_frame.get_func_frame</code></li> <li><code>ida_frame.xreflist_t</code></li> <li><code>ida_funcs.get_func</code></li> <li><code>ida_kernwin.get_screen_ea</code></li> <li><code>ida_typeinf.tinfo_t</code></li> <li><code>ida_typeinf.udt_type_data_t</code></li> <li><code>ida_xref.dr_R</code></li> <li><code>ida_xref.dr_W</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-examples.html#assign-dospe-headers-structures-to-a-pe-binary","title":"Assign DOS/PE headers structures to a PE binary","text":"<p>The goal of this script is to demonstrate some usage of the type API.</p> <p>In this script, we:</p> <ul> <li>load a PE64 file in binary mode</li> <li>import some types from the mssdk64 til</li> <li>apply these types at the correct ofsset in the DB</li> <li>finally, rebase the program based on the information stored in the ImageBase field of the IMAGE_OPTIONAL_HEADER64.</li> </ul> Source code Keywords Level setpehdr.py Intermediate <p>APIs Used:</p> <ul> <li><code>ida_bytes.create_struct</code></li> <li><code>ida_bytes.get_dword</code></li> <li><code>ida_bytes.get_qword</code></li> <li><code>ida_bytes.get_word</code></li> <li><code>ida_hexrays.get_type</code></li> <li><code>ida_name.set_name</code></li> <li><code>ida_netnode.BADNODE</code></li> <li><code>ida_segment.MSF_FIXONCE</code></li> <li><code>ida_segment.rebase_program</code></li> <li><code>ida_typeinf.ADDTIL_DEFAULT</code></li> <li><code>ida_typeinf.BTF_STRUCT</code></li> <li><code>ida_typeinf.add_til</code></li> <li><code>ida_typeinf.tinfo_t</code></li> <li><code>ida_typeinf.udt_type_data_t</code></li> <li><code>idc.import_type</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-examples.html#recursively-visit-a-type-and-its-members","title":"Recursively visit a type and its members","text":"<p>In this script, we show an example of tinfo_visitor_t to list a user define type members, recursively.</p> <p>This scripts skips array &amp; pointer members (by calling <code>tinfo_visitor_t.prune_now()</code>)</p> Source code Keywords Level visit_tinfo.py Intermediate <p>APIs Used:</p> <ul> <li><code>ida_netnode.BADNODE</code></li> <li><code>ida_typeinf.ADDTIL_DEFAULT</code></li> <li><code>ida_typeinf.TVST_DEF</code></li> <li><code>ida_typeinf.add_til</code></li> <li><code>ida_typeinf.array_type_data_t</code></li> <li><code>ida_typeinf.get_idati</code></li> <li><code>ida_typeinf.tinfo_t</code></li> <li><code>ida_typeinf.tinfo_visitor_t</code></li> <li><code>idc.import_type</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-examples.html#change-the-name-of-an-existing-stack-variable","title":"Change the name of an existing stack variable","text":"<p>The goal of this script is to demonstrate some usage of the type API. In this script, we demonstrate a way to change the name of a stack variable:</p> <ul> <li>Get the function object surrounding cursor location.</li> <li>Use this function to retrieve the corresponding frame object.</li> <li>Find the frame member matching the given name.</li> <li>Using its offset in the frame structure object, calculate the actual stack delta.</li> <li>Use the previous result to redefine the stack variable name if it is not a special or argument member.</li> </ul> Source code Keywords Level change_stkvar_name.py Advanced <p>APIs Used:</p> <ul> <li><code>ida_frame.define_stkvar</code></li> <li><code>ida_frame.get_func_frame</code></li> <li><code>ida_frame.is_funcarg_off</code></li> <li><code>ida_frame.is_special_frame_member</code></li> <li><code>ida_frame.soff_to_fpoff</code></li> <li><code>ida_funcs.get_func</code></li> <li><code>ida_typeinf.tinfo_t</code></li> <li><code>ida_typeinf.udm_t</code></li> <li><code>idc.here</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-examples.html#change-the-type-name-of-a-function-stack-frame-variable","title":"Change the type &amp; name of a function stack frame variable","text":"<p>The goal of this script is to demonstrate some usage of the type API.</p> <p>In this script, we show a way to change the type and the name of a stack variable. In this case we will take advantage of the fact that RtlImageNtHeader calls RtlImageNtHeaderEx which takes a pointer to PIMAGE_NT_HEADERS as its fourth parameter and, for this, uses a stack variable of its caller.</p> <ul> <li>Get the function object for RtlImageNtHeader.</li> <li>Iterate through the function item to localize the load of the stack variable address before the call to RtlImageNtHeaderEx. We keep this information.</li> <li>Localize the call and take advantage of the previoulsy stored instruction to get the stack variable index in the frame.</li> <li>Set the type and rename the stack variable.</li> </ul> Source code Keywords Level change_stkvar_type.py Advanced <p>APIs Used:</p> <ul> <li><code>ida_allins.NN_call</code></li> <li><code>ida_allins.NN_lea</code></li> <li><code>ida_frame.get_func_frame</code></li> <li><code>ida_funcs.func_item_iterator_t</code></li> <li><code>ida_funcs.get_func</code></li> <li><code>ida_funcs.get_func_name</code></li> <li><code>ida_ida.inf_get_procname</code></li> <li><code>ida_ida.inf_is_64bit</code></li> <li><code>ida_idaapi.BADADDR</code></li> <li><code>ida_name.get_name_ea</code></li> <li><code>ida_typeinf.BTF_STRUCT</code></li> <li><code>ida_typeinf.TERR_OK</code></li> <li><code>ida_typeinf.tinfo_t</code></li> <li><code>ida_ua.decode_insn</code></li> <li><code>ida_ua.insn_t</code></li> <li><code>ida_ua.o_reg</code></li> <li><code>idautils.procregs.r9.reg</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-examples.html#turn-instruction-operand-into-a-structure-offset","title":"Turn instruction operand into a structure offset","text":"<p>The goal of this script is to demonstrate some usage of the type API. In this script, we:</p> <ul> <li>ask the user to choose the structure that will be used for the conversion.</li> <li>build the structure path and call ida_bytes.op_stroff. In case an enum is found a modal chooser is displayed in order to select a member.</li> </ul> Source code Keywords Level operand_to_struct_member.py Advanced <p>APIs Used:</p> <ul> <li><code>ida_bytes.op_stroff</code></li> <li><code>ida_kernwin.Choose</code></li> <li><code>ida_kernwin.Choose.CHCOL_HEX</code></li> <li><code>ida_kernwin.Choose.CHCOL_PLAIN</code></li> <li><code>ida_kernwin.choose_struct</code></li> <li><code>ida_kernwin.get_opnum</code></li> <li><code>ida_kernwin.get_screen_ea</code></li> <li><code>ida_pro.tid_array</code></li> <li><code>ida_typeinf.STRMEM_OFFSET</code></li> <li><code>ida_typeinf.tinfo_t</code></li> <li><code>ida_typeinf.udm_t</code></li> <li><code>ida_typeinf.udt_type_data_t</code></li> <li><code>ida_ua.decode_insn</code></li> <li><code>ida_ua.insn_t</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-examples.html#code-to-be-run-right-after-idapython-initialization","title":"Code to be run right after IDAPython initialization","text":"<p>The <code>idapythonrc.py</code> file:</p> <ul> <li>%APPDATA%\\Hex-Rays\\IDA Pro\\idapythonrc.py (on Windows)</li> <li>\\~/.idapro/idapythonrc.py (on Linux &amp; Mac)</li> </ul> <p>can contain any IDAPython code that will be run as soon as IDAPython is done successfully initializing.</p> Source code Keywords Level idapythonrc.py Beginner"},{"location":"developer-guide/idapython/idapython-examples.html#add-functions-to-the-idc-runtime-from-idapython","title":"Add functions to the IDC runtime, from IDAPython","text":"<p>You can add IDC functions to IDA, whose \"body\" consists of IDAPython statements!</p> <p>We'll register a 'pow' function, available to all IDC code, that when invoked will call back into IDAPython, and execute the provided function body.</p> <p>After running this script, try switching to the IDC interpreter (using the button on the lower-left corner of IDA) and executing <code>pow(3, 7)</code></p> Source code Keywords Level extend_idc.py Intermediate <p>APIs Used:</p> <ul> <li><code>ida_expr.VT_LONG</code></li> <li><code>ida_expr.add_idc_func</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-examples.html#add-64-bit-idb-i64-conversion-capabilities-to-custom-plugins","title":"Add 64-bit (.idb-&gt;.i64) conversion capabilities to custom plugins","text":"<p>For more infortmation see SDK/plugins/cvt64_sample example</p> Source code Keywords Level py_cvt64_sample.py Advanced <p>APIs Used:</p> <ul> <li><code>ida_idaapi.BADADDR</code></li> <li><code>ida_idaapi.BADADDR32</code></li> <li><code>ida_netnode.atag</code></li> <li><code>ida_netnode.htag</code></li> <li><code>ida_netnode.stag</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-examples.html#add-merge-functionality-to-a-simple-plugin","title":"Add merge functionality to a simple plugin","text":"<p>This is a primitive plugin which asks user for some info and saves it for some addresses.</p> <p>We will add a merge functionality to plugin.</p> <p>An IDA plugin may have two kinds of data with permanent storage:</p> <ol> <li>Data common for entire database (e.g. the options). To describe them we will use the idbattr_info_t type.</li> <li>Data specific to a particular address. To describe them we will use the merge_node_info_t type.</li> </ol> <p>Also, see SDK/plugins/mex1 example</p> Source code Keywords Level py_mex1.py IDP_Hooks plugin Advanced <p>APIs Used:</p> <ul> <li><code>ida_funcs.get_func</code></li> <li><code>ida_ida.IDI_ALTVAL</code></li> <li><code>ida_ida.IDI_CSTR</code></li> <li><code>ida_ida.IDI_SCALAR</code></li> <li><code>ida_ida.IDI_SUPVAL</code></li> <li><code>ida_ida.idbattr_info_t</code></li> <li><code>ida_idaapi.BADADDR</code></li> <li><code>ida_idaapi.PLUGIN_MOD</code></li> <li><code>ida_idaapi.PLUGIN_MULTI</code></li> <li><code>ida_idaapi.plugin_t</code></li> <li><code>ida_idaapi.plugmod_t</code></li> <li><code>ida_idp.IDP_Hooks</code></li> <li><code>ida_kernwin.Form</code></li> <li><code>ida_kernwin.Form.ChkGroupControl</code></li> <li><code>ida_kernwin.Form.StringInput</code></li> <li><code>ida_kernwin.get_screen_ea</code></li> <li><code>ida_merge.MERGE_KIND_END</code></li> <li><code>ida_merge.MERGE_KIND_NONE</code></li> <li><code>ida_merge.NDS_IS_STR</code></li> <li><code>ida_merge.NDS_MAP_IDX</code></li> <li><code>ida_merge.merge_handler_params_t</code></li> <li><code>ida_merge.merge_node_info_t</code></li> <li><code>ida_merge.moddata_diff_helper_t</code></li> <li><code>ida_mergemod.create_std_modmerge_handlers</code></li> <li><code>ida_netnode.BADNODE</code></li> <li><code>ida_netnode.SIZEOF_nodeidx_t</code></li> <li><code>ida_netnode.atag</code></li> <li><code>ida_netnode.netnode</code></li> <li><code>ida_netnode.stag</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-examples.html#implement-merging-functionality-for-custom-plugins","title":"Implement merging functionality for custom plugins","text":"<p>IDA Teams uses a chooser to display the merge conflicts. To fill the chooser columns IDA Teams uses the following methods from diff_source_t type:</p> <ul> <li>print_diffpos_name()</li> <li>print_diffpos_details()</li> </ul> <p>and UI hints from merge_handler_params_t type:</p> <ul> <li>ui_has_details()</li> <li>ui_complex_details()</li> <li>ui_complex_name()</li> </ul> <p>In general, chooser columns are filled as following:</p> <pre><code>      columns.clear()\n      NAME = print_diffpos_name()\n      if ui_complex_name()\n      then\n        columns.add(split NAME by ui_split_char())\n      else\n        columns[0] = NAME\n      if not ui_complex_details()\n      then\n        columns.add(print_diffpos_details())\n</code></pre> <p>Also, see SDK/plugins/mex3 example</p> Source code Keywords Level py_mex3.py IDP_Hooks plugin Advanced <p>APIs Used:</p> <ul> <li><code>ida_funcs.get_func</code></li> <li><code>ida_ida.IDI_ALTVAL</code></li> <li><code>ida_ida.IDI_CSTR</code></li> <li><code>ida_ida.IDI_SCALAR</code></li> <li><code>ida_ida.IDI_SUPVAL</code></li> <li><code>ida_ida.idbattr_info_t</code></li> <li><code>ida_idaapi.BADADDR</code></li> <li><code>ida_idaapi.PLUGIN_MOD</code></li> <li><code>ida_idaapi.PLUGIN_MULTI</code></li> <li><code>ida_idaapi.plugin_t</code></li> <li><code>ida_idaapi.plugmod_t</code></li> <li><code>ida_idp.IDP_Hooks</code></li> <li><code>ida_kernwin.Form</code></li> <li><code>ida_kernwin.Form.ChkGroupControl</code></li> <li><code>ida_kernwin.Form.StringInput</code></li> <li><code>ida_kernwin.get_screen_ea</code></li> <li><code>ida_merge.MERGE_KIND_END</code></li> <li><code>ida_merge.MERGE_KIND_NONE</code></li> <li><code>ida_merge.MH_UI_COLONNAME</code></li> <li><code>ida_merge.MH_UI_COMMANAME</code></li> <li><code>ida_merge.MH_UI_NODETAILS</code></li> <li><code>ida_merge.NDS_IS_STR</code></li> <li><code>ida_merge.NDS_MAP_IDX</code></li> <li><code>ida_merge.create_nodeval_merge_handlers</code></li> <li><code>ida_merge.get_ea_diffpos_name</code></li> <li><code>ida_merge.merge_handler_params_t</code></li> <li><code>ida_merge.merge_node_helper_t</code></li> <li><code>ida_merge.merge_node_info_t</code></li> <li><code>ida_merge.moddata_diff_helper_t</code></li> <li><code>ida_mergemod.create_std_modmerge_handlers</code></li> <li><code>ida_nalt.node2ea</code></li> <li><code>ida_netnode.BADNODE</code></li> <li><code>ida_netnode.SIZEOF_nodeidx_t</code></li> <li><code>ida_netnode.atag</code></li> <li><code>ida_netnode.netnode</code></li> <li><code>ida_netnode.stag</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-getting-started.html","title":"Getting Started","text":""},{"location":"developer-guide/idapython/idapython-getting-started.html#getting-started-with-idapython","title":"Getting started with IDAPython","text":""},{"location":"developer-guide/idapython/idapython-getting-started.html#intro","title":"Intro","text":"<p>The IDAPython API provides you a range of functions to interact with the disassembler, navigate through the output, and manipulate various elements such as functions, instructions, data, and comments.</p> <p>This guide is is designed to speed up the learning curve in IDAPython API and kickstart your journey with scripting in IDA, assuming that you are already found your way around IDA and got familiar with IDA basics.</p>"},{"location":"developer-guide/idapython/idapython-getting-started.html#how-this-guide-is-structured","title":"How this guide is structured?","text":"<p>First, check basics for the core concepts like common variables, then dive into our simple, short and reusable code snippets showing basic examples of commonly used functions.</p>"},{"location":"developer-guide/idapython/idapython-getting-started.html#where-can-i-find-the-complete-examples-library","title":"Where can I find the complete examples library?","text":"<p>When you feel comfortable with most popular IDAPython API usage, you can delve into our set of more complex examples. The full library of our examples is shipped with your IDA instance in the python/examples folder. You can find them also in the GitHub repository.</p>"},{"location":"developer-guide/idapython/idapython-getting-started.html#basics","title":"Basics","text":""},{"location":"developer-guide/idapython/idapython-getting-started.html#common-modules","title":"Common modules","text":"<p>IDAPython API is organized in modules, however their number may be a bit overwhelming for the first sigh. Here's the list of modules that should catch your attention first:</p> <ul> <li><code>idautils</code>: This module extracts the most useful and handy functions allowing you to jump right away and interact with the disassembly without the need to scrutinize the whole IDAPython API from the start. You can find here functions to iterate through whole segments, functions (founded by IDA and also user-defined), named locations, etc.</li> <li><code>ida_idaapi</code>: The <code>ida_idaapi</code> module comes handy when you want to create custom plugins or handle events, as it gives you access to more advanced functions and allows interaction with overall system</li> <li><code>idc</code>: This module provides functions that were originally part of native IDA IDC scripting language, wrapped for use in IDAPython API. This is a great starting point if you're already familiar with IDC scripting.</li> <li><code>ida_funcs</code>: This module gives you tools to create and manipulate functions within IDA.</li> <li><code>ida_kernwin</code>: This module provides functionality to interact with IDA UI, so you can create custom dialogs and more.</li> </ul>"},{"location":"developer-guide/idapython/idapython-getting-started.html#common-variables-and-constants","title":"Common variables and constants","text":"<p>When you start working with IDAPython, you'll realize that one of the most commonly passed variables is <code>ea</code>, which refers to the valid memory address (effective address). On the other hand, the <code>BADADDR</code> is a constant that indicates an invalid address. It is used to indicate that an operation (such as querying a function) has failed or returned an invalid result, or signify that a specific memory location is unusable. Whenever you're working with functions that return memory addresses, it's a best practice to check whether the result equals BADADDR to ensure the operation was successful.</p>"},{"location":"developer-guide/idapython/idapython-getting-started.html#code-snippets","title":"Code snippets","text":"<p>Here you can check the most common functions grouped by topics and short code samples that can serve as building blocks for longer scripts. They are usually focused on performing one specific action and can be easily reusable in more complex scripts, which you can find later under examples.</p>"},{"location":"developer-guide/idapython/idapython-getting-started.html#part-1-navigating-the-disassemblyaddresses-and-names","title":"Part 1: Navigating the disassembly\u2014addresses and names","text":""},{"location":"developer-guide/idapython/idapython-getting-started.html#get-the-current-address","title":"Get the current address:**","text":"<pre><code>ea = idc.here()  # Get the current address\nprint(f\"Current address: {hex(ea)}\")\n</code></pre> <pre><code>idc.get_screen_ea()\n</code></pre>"},{"location":"developer-guide/idapython/idapython-getting-started.html#set-the-current-address","title":"Set the current address","text":"<pre><code>idc.jumpto(0x401000)  # Jump to address 0x401000\n</code></pre>"},{"location":"developer-guide/idapython/idapython-getting-started.html#get-the-minimum-address-in-idb","title":"Get the minimum address in IDB","text":"<pre><code>idc.get_inf_attr(INF_MIN_EA)\n</code></pre>"},{"location":"developer-guide/idapython/idapython-getting-started.html#get-the-maximum-address-in-idb","title":"Get the maximum address in IDB","text":"<pre><code>idc.get_inf_attr(INF_MAX_EA)\n</code></pre>"},{"location":"developer-guide/idapython/idapython-getting-started.html#list-all-instruction-addresses","title":"List all instruction addresses","text":"<pre><code>for ea in idautils.Heads():\n  print(hex(ea))\n</code></pre>"},{"location":"developer-guide/idapython/idapython-getting-started.html#get-the-name-associated-with-a-given-address","title":"Get the name associated with a given address","text":"<pre><code>ida_name.get_name(0x100000da0)\n</code></pre>"},{"location":"developer-guide/idapython/idapython-getting-started.html#get-the-address-associated-with-a-given-name","title":"Get the address associated with a given name","text":"<pre><code>ida_name.get_name_ea(0, \"_main\")\n</code></pre>"},{"location":"developer-guide/idapython/idapython-getting-started.html#part-2-reading-and-writing-data","title":"Part 2: Reading and Writing Data","text":""},{"location":"developer-guide/idapython/idapython-getting-started.html#reading-bytes-and-words","title":"Reading Bytes and Words","text":"<pre><code>byte_value = idc.get_wide_byte(0x401000)  # Read a byte at address 0x401000\nword_value = idc.get_wide_word(0x401002)  # Read a word (2 bytes) at address 0x401002\ndword_value = idc.get_wide_dword(0x401004)  # Read a double word (4 bytes) at address 0x401004\n\nprint(f\"Byte: {byte_value}, Word: {word_value}, Dword: {dword_value}\")\n</code></pre>"},{"location":"developer-guide/idapython/idapython-getting-started.html#writing-bytes-and-words","title":"Writing Bytes and Words","text":"<pre><code>idc.patch_byte(0x401000, 0x90)  # Write a byte (0x90) at address 0x401000\nidc.patch_word(0x401002, 0x9090)  # Write a word (0x9090) at address 0x401002\nidc.patch_dword(0x401004, 0x90909090)  # Write a double word (0x90909090) at address 0x401004\n</code></pre>"},{"location":"developer-guide/idapython/idapython-getting-started.html#part-3-comments","title":"Part 3: Comments","text":""},{"location":"developer-guide/idapython/idapython-getting-started.html#add-a-regular-non-repetable-or-repeatable-comment","title":"Add a regular (non-repetable) or repeatable comment","text":"<pre><code>idc.set_cmt(0x401000, \"This is a comment\", 0)  # Add a regular comment at address 0x401000\nidc.set_cmt(0x401000, \"This is a repeatable comment\", 1)  # Add a repeatable comment at address 0x401000\n</code></pre>"},{"location":"developer-guide/idapython/idapython-getting-started.html#get-a-regular-comment","title":"Get a regular comment","text":"<pre><code>comment = idc.get_cmt(0x401000, 0)  # Get a regular comment at address 0x401000\nprint(f\"Comment: {comment}\")\n</code></pre>"},{"location":"developer-guide/idapython/idapython-getting-started.html#segments","title":"Segments","text":""},{"location":"developer-guide/idapython/idapython-getting-started.html#get-a-segment-name","title":"Get a segment name","text":"<pre><code>idc.get_segm_name(ea)\n\n</code></pre>"},{"location":"developer-guide/idapython/idapython-getting-started.html#get-the-first-segment-address","title":"Get the first segment address:","text":"<p><code>get_first_seg()</code></p>"},{"location":"developer-guide/idapython/idapython-getting-started.html#iterate-through-all-segments-and-return-segment-names","title":"Iterate through all segments and return segment names","text":"<pre><code>for seg in idautils.Segments(): print (idc.get_segm_name(seg))\n</code></pre>"},{"location":"developer-guide/idapython/idapython-getting-started.html#add-segment","title":"Add segment","text":""},{"location":"developer-guide/idapython/idapython-getting-started.html#part-x-functions","title":"Part X: Functions","text":""},{"location":"developer-guide/idapython/idapython-getting-started.html#create-and-delete-function","title":"Create and delete function","text":"<pre><code>idc.add_func(0x401000, 0x401050)  # Create a function starting at 0x401000 and ending at 0x401050\nidc.del_func(0x401000)  # Delete the function at 0x401000\n</code></pre>"},{"location":"developer-guide/idapython/idapython-getting-started.html#get-the-name-of-the-function","title":"Get the name of the function","text":"<pre><code>get_func_name(ea)\n</code></pre>"},{"location":"developer-guide/idapython/idapython-getting-started.html#iterate-through-all-functions-and-print-their-effective-addresses-and-names","title":"Iterate through all functions and print their effective addresses and names","text":"<pre><code>for func_ea in idautils.Functions(): func_name = idc.get_func_name(func_ea); print(hex(func_ea), func_name)\n</code></pre>"},{"location":"developer-guide/idapython/idapython-getting-started.html#part-navigating-cross-references-xrefs","title":"Part: Navigating cross-references (Xrefs)","text":""},{"location":"developer-guide/idapython/idapython-getting-started.html#list-cross-references-to-an-address","title":"List cross-references to an address","text":"<pre><code>for xref in idautils.XrefsTo(0x401000):\n    print(f\"Xref to 0x401000 from {hex(xref.frm)}\")\n</code></pre>"},{"location":"developer-guide/idapython/idapython-getting-started.html#list-cross-references-from-an-address","title":"List cross-references from an address:**","text":"<pre><code>for xref in idautils.XrefsFrom(0x401000):\n    print(f\"Xref from 0x401000 to {hex(xref.to)}\")\n</code></pre>"},{"location":"developer-guide/idapython/idapython-getting-started.html#iterate-through-all-cross-references-to-the-specific-address-and-print-the-address-from-where-the-reference-originates","title":"Iterate through all cross-references to the specific address and print the address from where the reference originates.","text":"<pre><code>for ref in idautils.XrefsTo(ea):\n  print(hex(ref.frm))\n</code></pre>"},{"location":"developer-guide/idapython/idapython-getting-started.html#part-x-ui","title":"Part X: UI","text":""},{"location":"developer-guide/idapython/idapython-getting-started.html#set-background-color-of-a-function","title":"Set background color of a function","text":"<pre><code>set_color(0x401000, idc.CIC_ITEM, 0x007fff)  # Set background color for the function starting at address 0x401000\n</code></pre>"},{"location":"developer-guide/idapython/idapython-getting-started.html#display-a-custom-dialog","title":"Display a custom dialog","text":"<pre><code>ida_kernwin.info(\"This is a custom message dialog. Good luck with learning IDAPython API!\")\n</code></pre>"},{"location":"developer-guide/idapython/idapython-getting-started.html#complex-script-examples","title":"Complex script examples","text":"<p>If you feel more comfortable with IDAPython now, you can delve into more complex and advanced examples shipped with your IDA instance. You can find them in the <code>python/examples</code> folder where your IDA is installed or check them from our docs These collection gathered more advanced code samples, which usually make use of more modules and APIs.</p>"},{"location":"developer-guide/idapython/idapython-getting-started.html#whats-next","title":"What's next?","text":"<p>Delve into our tutorial on how to create your first custom plugin in IDAPython.</p>"},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html","title":"Porting Guide from IDA 8.x to 9.0","text":"<p>IDA 9.0 IDAPython changes and porting guide</p> <p>{% hint style=\"info\" %} How to use this Porting Guide? This guide provides a comprehensive list of all changes in IDAPython API between IDA 8.4 and 9.0. Here\u2019s how you can make the most of it:</p> <ul> <li>Explore by module: navigate directly to a specific module and review the changes affecting it</li> <li>Jump to alternative examples demonstrating how to port removed functions</li> <li> <p>Check how-to examples that demonstrate the usage of new/udpated APIs</p> </li> <li> <p>Introduction</p> </li> <li>ida_struct</li> <li>Removed functions:</li> <li>Removed methods and members<ul> <li>member_t</li> <li>struct_t</li> <li>struct_field_visitor_t</li> <li>udm_visitor_t</li> </ul> </li> <li>ida_enum</li> <li>Removed functions</li> <li>enum_member_visitor_t</li> <li>ida_typeinf</li> <li>Removed functions</li> <li>Added functions</li> <li>Added class<ul> <li>udm_visitor_t</li> </ul> </li> <li>Removed methods<ul> <li>enum_type_data_t</li> </ul> </li> <li>Added methods<ul> <li>callregs_t</li> <li>enum_type_data_t</li> <li>func_type_data_t.</li> <li>til_t</li> <li>tinfo_t</li> <li>udm_t</li> <li>udtmembervec_t</li> </ul> </li> <li>Modified methods:<ul> <li>tinfo_t</li> </ul> </li> <li>ida_frame</li> <li>Removed functions</li> <li>Added functions</li> <li>Modified functions</li> <li>ida_bytes</li> <li>Removed functions</li> <li>Added functions</li> <li>Modified functions</li> <li>idc</li> <li>Removed functions</li> <li>ida_dirtree</li> <li>Removed functions</li> <li>ida_diskio</li> <li>Removed functions</li> <li>ida_fpro</li> <li>Added functions</li> <li>ida_funcs</li> <li>Added methods<ul> <li>func_item_iterator_t</li> </ul> </li> <li>ida_gdl</li> <li>Added classes<ul> <li>edge_t</li> <li>edgevec_t</li> <li>node_ordering_t</li> </ul> </li> <li>ida_graph</li> <li>Removed classes<ul> <li>node_ordering_t</li> <li>edge_t</li> </ul> </li> <li>Renamed clases</li> <li>Renamed functions</li> <li>ida_hexrays</li> <li>Removed functions</li> <li>Modified functions</li> <li>Added functions</li> <li>Added classes</li> <li>Removed methods<ul> <li>vdui_t</li> </ul> </li> <li>Added methods<ul> <li>cinsn_list_t</li> <li>Hexrays_Hooks</li> <li>lvar_t</li> <li>lvars_t</li> <li>simple_graph_t</li> <li>fnumber_t</li> <li>minsn_t</li> <li>mba_t</li> <li>codegen_t</li> </ul> </li> <li>Modified methods<ul> <li>Hexrays_Hooks</li> <li>valrng_t</li> <li>stkvar_ref_t</li> <li>mop_t</li> </ul> </li> <li>ida_ida</li> <li>Added classes<ul> <li>idbattr_valmap_t</li> <li>idbattr_info_t</li> </ul> </li> <li>inf_structure accessors<ul> <li>Replacement examples:</li> <li>inf_structure getters</li> <li>inf_structure setters</li> </ul> </li> <li>ida_idaapi</li> <li>Removed functions</li> <li>ida_idd</li> <li>Added functions</li> <li>ida_idp</li> <li>Removed methods<ul> <li>_processor_t</li> </ul> </li> <li>processor_t</li> <li>Modified methods<ul> <li>_processor_t</li> <li>IDP_Hooks</li> </ul> </li> <li>Added methods<ul> <li>IDB_Hooks</li> </ul> </li> <li>Removed functions</li> <li>ida_ieee</li> <li>Removed methods<ul> <li>fpvalue_t</li> </ul> </li> <li>ida_kernwin</li> <li>Removed functions</li> <li>Modified function</li> <li>Removed classes</li> <li>Removed methods<ul> <li>place_t</li> <li>twinpos_t</li> <li>tagged_line_sections_t</li> </ul> </li> <li>Added methods<ul> <li>tagged_line_sections_t</li> <li>chooser_base_t</li> </ul> </li> <li>Added functions</li> <li>ida_lines</li> <li>Removed functions</li> <li>ida_moved</li> <li>Modified functions</li> <li>ida_nalt</li> <li>Removed functions</li> <li>ida_netnode</li> <li>Modified functions</li> <li>ida_pro</li> <li>Removed functions</li> <li>Added classes<ul> <li>plugin_options_t</li> <li>uchar_pointer</li> <li>ushort_pointer</li> <li>uint_pointer</li> <li>sint8_pointer</li> <li>int8_pointer</li> <li>uint8_pointer</li> <li>int16_pointer</li> <li>uint16_pointer</li> <li>int32_pointer</li> <li>uint32_pointer</li> <li>int64_pointer</li> <li>uint64_pointer</li> <li>ssize_pointer</li> <li>bool_pointer</li> <li>short_pointer</li> <li>char_pointer</li> <li>sel_pointer</li> <li>asize_pointer</li> <li>adiff_pointer</li> <li>uval_pointer</li> <li>ea32_pointer</li> <li>ea64_pointer</li> <li>flags_pointer</li> <li>flags64_pointer</li> <li>tid_pointer</li> </ul> </li> <li>Added functions</li> <li>ida_regfinder</li> <li>Removed functions</li> <li>Modified functions</li> <li>Added methods<ul> <li>reg_value_info_t</li> </ul> </li> <li>ida_registry</li> <li>Removed functions</li> <li>ida_search</li> <li>Removed functions</li> <li>ida_ua</li> <li>Removed Function</li> <li>Modified functions</li> <li>Added methods<ul> <li>macro_constructor_t</li> </ul> </li> <li>idautils</li> <li>Modified functions</li> <li>IDB events</li> <li>Type information error codes</li> <li>Alternative examples</li> <li>del_struct_members</li> <li>get_struc_qty</li> <li>is_special_member</li> <li>get_sptr</li> <li>How to examples</li> <li>List structure members<ul> <li>Example 1</li> <li>Example 2</li> </ul> </li> <li>List enum members</li> <li>List frame information</li> <li>List stack variables xrefs</li> <li>Create a structure with parsing</li> <li>Create a structure member by member</li> <li>Create a union member by member</li> <li>Create a bitmask enum</li> <li>Create an array<ul> <li>Example 1</li> <li>Example 2</li> </ul> </li> <li>Log local type events</li> <li>Log frame events</li> </ul>"},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#introduction","title":"Introduction","text":"<p>This guide provides information about what has been changed in the IDAPython API between IDA 8.4 and 9.0.</p> <p>The largest change is due to the removal of two modules:</p> <ul> <li><code>ida_struct</code></li> <li><code>ida_enum</code></li> </ul> <p>For years now, those 2 modules have been superseded by the <code>ida_typeinf</code> module, which offers similar functionality.</p> <p>In case you are not familiar with <code>ida_typeinf</code>'s main concepts, we recommend having a look at them first.</p>"},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#ida_struct","title":"ida_struct","text":"<ol> <li><code>ida_struct</code> structures were accessed mostly through their index (or ID), while <code>ida_typeinf</code> adopts another approach using type names (or ordinals). Consequently, the notion of \"structure index\" bears less importance, and doesn't have a direct alternative.</li> <li>many <code>ida_struct.get_struc_*</code> operations were accepting a <code>tid_t</code>. While the notion of <code>tid_t</code> is still present in IDA 9.0, it is not part of identifying a type anymore (a type is now identified either by its name, or its ordinal). The notion of <code>tid_t</code> is mostly used to \"bind\" types to data &amp; functions in the IDB. For example, calling <code>ida_nalt.get_strid(address)</code> will return you such a <code>tid_t</code>. From a <code>tid_t</code>, you can load the corresponding <code>tinfo_t</code> object by using <code>tinfo_t(tid=id)</code>.</li> </ol>"},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#removed-functions","title":"Removed functions:","text":"<p>The table below provides alternatives to the functions that have been removed in IDA 9.0.</p> 8.4 9.0 <code>add_struc</code> <code>tinfo_t.create_udt</code> <code>add_struc_member</code> <code>tinfo_t.add_udm</code> <code>del_struc</code> <code>del_numbered_type</code>, <code>del_named_type</code> <code>del_struc_member</code> <code>tinfo_t.del_udm</code> <code>del_struc_members</code> see example <code>expand_struc</code> <code>tinfo_t.expand_udt</code> <code>get_best_fit_member</code> <code>udt_type_data_t.get_best_fit_member</code> <code>get_first_struc_idx</code> <code>til_t.numbered_types</code> (see notes) <code>get_innermost_member</code> <code>tinfo_t.get_innermost_udm</code> <code>get_last_struc_idx</code> see notes <code>get_max_offset</code> <code>tinfo_t.get_size</code> (structures), or <code>tinfo_t.get_udt_nmembers</code> (unions) <code>get_member</code> <code>tinfo_t.get_udm</code> / <code>tinfo_t.get_udm_by_offset</code> <code>get_member_by_fullname</code> <code>get_udm_by_fullname</code> <code>get_member_by_id</code> <code>tinfo_t.get_udm_by_tid</code> <code>get_member_by_name</code> <code>tinfo_t.get_udm</code> <code>get_member_cmt</code> <code>tinfo_t.get_udm</code> + <code>udm_t.cmt</code> <code>get_member_fullname</code> <code>get_tif_name</code> <code>get_member_id</code> <code>tinfo_t(tid=...)</code> + <code>tinfo_t.get_udm_tid</code> <code>get_member_name</code> <code>tinfo_t(tid=...)</code> + <code>tinfo_t.get_udm</code> + <code>udm_t.name</code> <code>get_member_size</code> <code>tinfo_t(tid=...)</code> + <code>tinfo_t.get_udm</code> + <code>udm_t.size</code> <code>get_member_struc</code> <code>get_udm_by_fullname</code> <code>get_member_tinfo</code> <code>udm_t.type</code> <code>get_next_member_idx</code> see notes <code>get_next_struc_idx</code> see notes <code>get_or_guess_member_tinfo</code> <code>get_prev_member_idx</code> see notes <code>get_prev_struc_idx</code> see notes <code>get_sptr</code> see example <code>get_struc</code> <code>tinfo_t(tid=...)</code> <code>get_struc_by_idx</code> see notes <code>get_struc_cmt</code> <code>tinfo_t.get_type_cmt</code> <code>get_struc_first_offset</code> <code>get_struc_id</code> <code>get_named_type_tid</code> <code>get_struc_idx</code> see notes <code>get_struc_last_offset</code> <code>tinfo_t.get_udt_details</code> + <code>udm_t.offset</code> <code>get_struc_name</code> <code>get_tid_name</code> <code>get_struc_next_offset</code> <code>get_struc_prev_offset</code> <code>get_struc_qty</code> see example <code>get_struc_size</code> <code>tinfo_t(tid=...)</code> + <code>tinfo_t.get_size</code> <code>is_anonymous_member_name</code> <code>ida_frame.is_anonymous_member_name</code> <code>is_dummy_member_name</code> <code>ida_frame.is_dummy_member_name</code> <code>is_member_id</code> <code>idc.is_member_id</code> <code>is_special_member</code> see example <code>is_union</code> <code>tinfo_t(tid=...)</code> + <code>tinfo_t.is_union</code> <code>is_varmember</code> <code>udm_t.is_varmember</code> <code>is_varstr</code> <code>tinfo_t(tid=...)</code> + <code>tinfo_t.is_varstruct</code> <code>retrieve_member_info</code> <code>save_struc</code> <code>tinfo_t.save_type</code> / <code>tinfo_t.set_named_type</code> / <code>tinfo_t.set_numbered_type</code> <code>set_member_cmt</code> <code>tinfo_t(tid=...)</code> + <code>tinfo_t.set_udm_cmt</code> <code>set_member_name</code> <code>tinfo_t(tid=...)</code> + <code>tinfo_t.rename_udm</code> <code>set_member_tinfo</code> <code>set_member_type</code> <code>tinfo_t(tid=...)</code> + <code>tinfo_t.set_udm_type</code> <code>set_struc_align</code> <code>set_struc_cmt</code> <code>tinfo_t(tid=...)</code> + <code>tinfo_t.set_type_cmt</code> <code>set_struc_hidden</code> <code>set_struc_idx</code> <code>set_struc_listed</code> <code>set_type_choosable</code> <code>set_struc_name</code> <code>tinfo_t(tid=...)</code> + <code>tinfo_t.rename_type</code> <code>stroff_as_size</code> <code>ida_typeinf.stroff_as_size</code> <code>struct_field_visitor_t</code> <code>ida_typeinf.tinfo_visitor_t</code> <code>unsync_and_delete_struc</code> <code>visit_stroff_fields</code> <code>visit_stroff_udms</code> <code>ida_typeinf.visit_stroff_udms</code>"},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#removed-methods-and-members","title":"Removed methods and members","text":""},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#member_t","title":"member_t","text":"<ul> <li><code>by_til</code> see <code>ida_typeinf.udm_t.is_by_til</code></li> <li><code>eoff</code></li> <li><code>flag</code></li> <li><code>get_size</code> use <code>ida_typeinf.udm_t.size // 8</code> instead.</li> <li><code>get_soff</code> see <code>soff</code> below.</li> <li><code>has_ti</code></li> <li><code>has_union</code></li> <li><code>id</code></li> <li><code>is_baseclass</code> see <code>ida_typeinf.udm_t.is_baseclass</code></li> <li><code>is_destructor</code> see <code>ida_typeinf.udm_t.can_be_dtor</code></li> <li><code>is_dupname</code></li> <li><code>props</code></li> <li><code>soff</code> use <code>ida_typeinf.udm_t.offset // 8</code> instead.</li> <li><code>this</code></li> <li><code>thisown</code></li> <li><code>unimem</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#struct_t","title":"struct_t","text":"<ul> <li><code>age</code></li> <li><code>from_til</code></li> <li><code>get_alignment</code></li> <li><code>get_last_member</code></li> <li><code>get_member</code></li> <li><code>has_union</code> see <code>ida_typeinf.tinfo_t.has_union</code></li> <li><code>id</code> see <code>ida_typeinf.tinfo_t.get_tid</code></li> <li><code>is_choosable</code></li> <li><code>is_copyof</code></li> <li><code>is_frame</code> see <code>ida_typeinf.tinfo_t.is_frame</code></li> <li><code>is_ghost</code></li> <li><code>is_hidden</code></li> <li><code>is_mappedto</code></li> <li><code>is_synced</code></li> <li><code>is_union</code> see <code>ida_typeinf.tinfo_t.is_union</code></li> <li><code>is_varstr</code> see <code>ida_typeinf.tinfo_t.is_varstruct</code></li> <li><code>like_union</code></li> <li><code>members</code></li> <li><code>memqty</code> see <code>ida_typeinf.tinfo_t.get_udt_nmembers</code></li> <li><code>ordinal</code> see <code>ida_typeinf.tinfo_t.get_ordinal</code></li> <li><code>props</code></li> <li><code>set_alignment</code></li> <li><code>thisown</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#struct_field_visitor_t","title":"struct_field_visitor_t","text":"<ul> <li><code>visit_field</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#udm_visitor_t","title":"udm_visitor_t","text":"<ul> <li><code>visit_udm</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#ida_enum","title":"ida_enum","text":""},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#removed-functions_1","title":"Removed functions","text":"<p>The functions below 8.4 are removed those under 9.0 are alternatives.</p> <p>The idc alternatives are based on:</p> <ul> <li><code>ida_typeinf</code> module</li> <li><code>ida_typeinf.tinfo_t</code>, the type info class</li> <li><code>ida_typeinf.enum_type_data_t</code>, the enumeration type class</li> <li><code>ida_typeinf.edm_t</code>, the enumeration member class</li> </ul> 8.4 9.0 <code>add_enum</code> <code>idc.add_enum</code> <code>add_enum_member</code> <code>idc.add_enum_member</code> <code>del_enum</code> <code>idc.del_enum</code> <code>del_enum_member</code> <code>idc.del_enum_member</code> <code>for_all_enum_members</code> <code>get_bmask_cmt</code> <code>idc.get_bmask_cmt</code> <code>get_bmask_name</code> <code>idc.get_bmask_name</code> <code>get_enum</code> <code>idc.get_enum</code> <code>get_enum_cmt</code> <code>idc.get_enum_cmt</code> <code>get_enum_flag</code> <code>idc.get_enum_flag</code> <code>get_enum_idx</code> <code>get_enum_member</code> <code>idc.get_enum_member</code> <code>get_enum_member_bmask</code> <code>idc.get_enum_member_bmask</code> <code>get_enum_member_by_name</code> <code>idc.get_enum_member_by_name</code> <code>get_enum_member_cmt</code> <code>idc.get_enum_member_cmt</code> <code>get_enum_member_enum</code> <code>idc.get_enum_member_enum</code> <code>get_enum_member_name</code> <code>idc.get_enum_member_name</code> <code>get_enum_member_serial</code> <code>get_enum_member_value</code> <code>idc.get_enum_member_value</code> <code>get_enum_name</code> <code>idc.get_enum_name</code> <code>get_enum_name2</code> <code>get_enum_qty</code> <code>get_enum_size</code> <code>idc.get_enum_size</code> <code>get_enum_type_ordinal</code> <code>get_enum_width</code> <code>idc.get_enum_width</code> <code>get_first_bmask</code> <code>idc.get_first_bmask</code> <code>get_first_enum_member</code> <code>idc.get_first_enum_member</code> <code>get_first_serial_enum_member</code> <code>get_last_bmask</code> <code>idc.get_last_bmask</code> <code>get_last_enum_member</code> <code>idc.get_last_enum_member</code> <code>get_last_serial_enum_member</code> <code>get_next_bmask</code> <code>idc.get_next_bmask</code> <code>get_next_enum_member</code> <code>idc.get_next_enum_member</code> <code>get_next_serial_enum_member</code> <code>get_prev_bmask</code> <code>idc.get_prev_bmask</code> <code>get_prev_enum_member</code> <code>idc.get_prev_enum_member</code> <code>get_prev_serial_enum_member</code> <code>getn_enum</code> <code>is_bf</code> <code>idc.is_bf</code> <code>is_enum_fromtil</code> <code>is_enum_hidden</code> <code>is_ghost_enum</code> <code>is_one_bit_mask</code> <code>set_bmask_cmt</code> <code>idc.set_bmask_cmt</code> <code>set_bmask_name</code> <code>idc.set_bmask_name</code> <code>set_enum_bf</code> <code>idc.set_enum_bf</code> <code>set_enum_cmt</code> <code>idc.set_enum_cmt</code> <code>set_enum_flag</code> <code>idc.set_enum_flag</code> <code>set_enum_fromtil</code> <code>set_enum_ghost</code> <code>set_enum_hidden</code> <code>set_enum_idx</code> <code>set_enum_member_cmt</code> <code>idc.set_enum_member_cmt</code> <code>set_enum_member_name</code> <code>idc.set_enum_member_name</code> <code>set_enum_name</code> <code>idc.set_enum_name</code> <code>set_enum_type_ordinal</code> <code>set_enum_width</code> <code>idc.set_enum_width</code>"},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#enum_member_visitor_t","title":"enum_member_visitor_t","text":"<ul> <li><code>visit_enum_member</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#ida_typeinf","title":"ida_typeinf","text":""},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#removed-functions_2","title":"Removed functions","text":"<ul> <li><code>callregs_t_regcount</code></li> <li><code>get_ordinal_from_idb_type</code></li> <li><code>is_autosync</code></li> <li><code>get_udm_tid</code>: use <code>tinfo_t.get_udm_tid</code> as an alternative.</li> <li><code>get_tinfo_tid</code>: use <code>tinfo_t.get_tid</code> as an alternative.</li> <li><code>tinfo_t_get_stock</code></li> <li><code>get_ordinal_qty</code>: use <code>ida_typeinf.get_ordinal_count</code> or <code>ida_typeinf.get_ordinal_limit</code> as alternatives.</li> <li><code>import_type</code>: use <code>idc.import_type</code> as an alternative.</li> </ul>"},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#added-functions","title":"Added functions","text":"<ul> <li><code>detach_tinfo_t(_this: \"tinfo_t\") -&gt; \"bool\"</code></li> <li><code>get_tinfo_by_edm_name(tif: \"tinfo_t\", til: \"til_t\", mname: \"char const *\") -&gt; \"ssize_t\"</code></li> <li><code>stroff_as_size(plen: \"int\", tif: \"tinfo_t\", value: \"asize_t\") -&gt; \"bool\"</code></li> <li><code>visit_stroff_udms(sfv: \"udm_visitor_t\", path: \"tid_t const *\", disp: \"adiff_t *\", appzero: \"bool\") -&gt; \"adiff_t *\"</code></li> <li><code>is_one_bit_mask(mask: \"uval_t\") -&gt; \"bool\"</code></li> <li><code>get_idainfo_by_udm(flags: \"flags64_t *\", ti: \"opinfo_t\", set_lzero: \"bool *\", ap: \"array_parameters_t\", udm: \"udm_t\") -&gt; \"bool\"</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#added-class","title":"Added class","text":""},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#udm_visitor_t_1","title":"udm_visitor_t","text":"<ul> <li><code>visit_udm</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#removed-methods","title":"Removed methods","text":""},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#enum_type_data_t","title":"enum_type_data_t","text":"<ul> <li><code>get_constant_group</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#added-methods","title":"Added methods","text":""},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#callregs_t","title":"callregs_t","text":"<ul> <li><code>set_registers(self, kind: \"callregs_t::reg_kind_t\", first_reg: \"int\", last_reg: \"int\") -&gt; \"void\"</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#enum_type_data_t_1","title":"enum_type_data_t","text":"<ul> <li><code>all_constants(self)</code></li> <li><code>all_groups(self, skip_trivial=False)</code></li> <li><code>get_constant_group(self, *args) -&gt; \"PyObject *\"</code></li> <li><code>get_max_serial(self, value: \"uint64\") -&gt; \"uchar\"</code></li> <li><code>get_serial(self, index: \"size_t\") -&gt; \"uchar\"</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#func_type_data_t","title":"func_type_data_t.","text":"<ul> <li><code>find_argument(self, *args) -&gt; \"ssize_t\"</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#til_t","title":"til_t","text":"<ul> <li><code>find_base(self, n: \"char const *\") -&gt; \"til_t *\"</code></li> <li><code>get_type_names(self) -&gt; \"const char *\"</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#tinfo_t","title":"tinfo_t","text":"<ul> <li><code>detach(self) -&gt; \"bool\"</code></li> <li><code>is_punknown(self) -&gt; \"bool\"</code></li> <li><code>get_enum_nmembers(self) -&gt; \"size_t\"</code></li> <li><code>is_empty_enum(self) -&gt; \"bool\"</code></li> <li><code>get_enum_width(self) -&gt; \"int\"</code></li> <li><code>calc_enum_mask(self) -&gt; \"uint64\"</code></li> <li><code>get_edm_tid(self, idx: \"size_t\") -&gt; \"tid_t\"</code></li> <li><code>is_udm_by_til(self, idx: \"size_t\") -&gt; \"bool\"</code></li> <li><code>set_udm_by_til(self, idx: \"size_t\", on: \"bool\"=True, etf_flags: \"uint\"=0) -&gt; \"tinfo_code_t\"</code></li> <li><code>set_fixed_struct(self, on: \"bool\"=True) -&gt; \"tinfo_code_t\"</code></li> <li><code>set_struct_size(self, new_size: \"size_t\") -&gt; \"tinfo_code_t\"</code></li> <li><code>is_fixed_struct(self) -&gt; \"bool\"</code></li> <li><code>get_func_frame(self, pfn: \"func_t const *\") -&gt; \"bool\"</code></li> <li><code>is_frame(self) -&gt; \"bool\"</code></li> <li><code>get_frame_func(self) -&gt; \"ea_t\"</code></li> <li><code>set_enum_radix(self, radix: \"int\", sign: \"bool\", etf_flags: \"uint\"=0) -&gt; \"tinfo_code_t\"</code></li> <li><code>rename_funcarg(self, index: \"size_t\", name: \"char const *\", etf_flags: \"uint\"=0) -&gt; \"tinfo_code_t\"</code></li> <li><code>set_funcarg_type(self, index: \"size_t\", tif: \"tinfo_t\", etf_flags: \"uint\"=0) -&gt; \"tinfo_code_t\"</code></li> <li><code>set_func_rettype(self, tif: \"tinfo_t\", etf_flags: \"uint\"=0) -&gt; \"tinfo_code_t\"</code></li> <li><code>del_funcargs(self, idx1: \"size_t\", idx2: \"size_t\", etf_flags: \"uint\"=0) -&gt; \"tinfo_code_t\"</code></li> <li><code>del_funcarg(self, idx: \"size_t\", etf_flags: \"uint\"=0) -&gt; \"tinfo_code_t\"</code></li> <li><code>add_funcarg(self, farg: \"funcarg_t\", etf_flags: \"uint\"=0, idx: \"ssize_t\"=-1) -&gt; \"tinfo_code_t\"</code></li> <li><code>set_func_cc(self, cc: \"cm_t\", etf_flags: \"uint\"=0) -&gt; \"tinfo_code_t\"</code></li> <li><code>set_funcarg_loc(self, index: \"size_t\", argloc: \"argloc_t\", etf_flags: \"uint\"=0) -&gt; \"tinfo_code_t\"</code></li> <li><code>set_func_retloc(self, argloc: \"argloc_t\", etf_flags: \"uint\"=0) -&gt; \"tinfo_code_t\"</code></li> <li><code>get_stkvar(self, insn: \"insn_t const &amp;\", x: \"op_t const\", v: \"sval_t\") -&gt; \"ssize_t\"</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#udm_t","title":"udm_t","text":"<ul> <li><code>is_retaddr(self) -&gt; \"bool\"</code></li> <li><code>is_savregs(self) -&gt; \"bool\"</code></li> <li><code>is_special_member(self) -&gt; \"bool\"</code></li> <li><code>is_by_til(self) -&gt; \"bool\"</code></li> <li><code>set_retaddr(self, on: \"bool\"=True) -&gt; \"void\"</code></li> <li><code>set_savregs(self, on: \"bool\"=True) -&gt; \"void</code></li> <li><code>set_by_til(self, on: \"bool\"=True) -&gt; \"void\"</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#udtmembervec_t","title":"udtmembervec_t","text":"<ul> <li><code>set_fixed(self, on: \"bool\"=True) -&gt; \"void\"</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#modified-methods","title":"Modified methods:","text":""},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#tinfo_t_1","title":"tinfo_t","text":"8.4 9.0 <code>find_udm(self, udm: \"udmt_t *\", strmem_flags: \"int\") -&gt; \"int\"</code> <code>find_udm(self, udm: \"udmt_t *\", strmem_flags: \"int\") -&gt; \"int\"</code> <code>find_udm(self, name: \"char const *\", strmem_flags: \"int\") -&gt; \"int\"</code> <code>get_type_by_edm_name(self, mname: \"const char *\", til: \"til_t\"=None) -&gt; \"bool\"</code> <code>get_edm_by_name(self, mname: \"char const *\", til: \"til_t\"=None) -&gt; \"ssize_t\"</code>"},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#ida_frame","title":"ida_frame","text":"<p>8.4 To access the structure of a function frame, use:</p> <ul> <li><code>get_struc() (use func_t::frame as structure ID)</code></li> <li><code>get_frame(const func_t *pfn)</code></li> <li><code>get_frame(ea_t ea)</code></li> </ul> <p>9.0 To access the structure of a function frame, use:</p> <ul> <li><code>tinfo_t::get_func_frame(const func_t *pfn)</code> as the preferred way.</li> <li><code>get_func_frame(tinfo_t *out, const func_t *pfn)</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#removed-functions_3","title":"Removed functions","text":"<ul> <li><code>get_stkvar</code>: see tinfo_t</li> <li><code>get_frame</code>: see tinfo_t.get-func_frame</li> <li><code>get_frame_member_by_id</code></li> <li><code>get_min_spd_ea</code></li> <li><code>delete_unreferenced_stkvars</code></li> <li><code>delete_wrong_stkvar_ops</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#added-functions_1","title":"Added functions","text":"<ul> <li><code>get_func_frame(out: \"tinfo_t\",pfn: \"func_t const *\") -&gt; \"bool\"</code></li> <li><code>add_frame_member(pfn: \"func_t const *\", name: \"char const *\", offset: \"uval_t\", tif: \"tinfo_t\", repr: \"value_repr_t\"=None, etf_flags: \"uint\"=0) -&gt; \"bool\"</code></li> <li><code>is_anonymous_member_name(name: \"char const *\") -&gt; \"bool\"</code></li> <li><code>is_dummy_member_name(name: \"char const *\") -&gt; \"bool\"</code></li> <li><code>is_special_frame_member(tid: \"tid_t\") -&gt; \"bool\"</code></li> <li><code>set_frame_member_type(pfn: \"func_t const *\",offset: \"uval_t\", tif: \"tinfo_t\", repr: \"value_repr_t\"=None, etf_flags: \"uint\"=0) -&gt; \"bool\"</code></li> <li><code>delete_frame_members(pfn: \"func_t const *\",start_offset: \"uval_t\", end_offset: \"uval_t\") -&gt; \"bool\"</code></li> <li><code>calc_frame_offset(pfn: \"func_t *\", off: \"sval_t\", insn: \"insn_t const *\"=None, op: \"op_t const *\"=None) -&gt; \"sval_t\"</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#modified-functions","title":"Modified functions","text":"8.4 9.0 <code>define_stkvar(pfn: \"func_t *\", name: \"const char *\", off: \"sval_t\", flags: \"flags64_t\", ti: \"const opinfo_t *\", nbytes: \"asize_t\") -&gt; bool</code> <code>define_stkvar(pfn: \"func_t *\", name: \"char const *\", off: \"sval_t\", tif: \"tinfo_t\", repr: \"value_repr_t\"=None) -&gt; \"bool\"</code>"},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#ida_bytes","title":"ida_bytes","text":""},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#removed-functions_4","title":"Removed functions","text":"<ul> <li><code>free_chunck</code></li> <li><code>get_8bit</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#added-functions_2","title":"Added functions","text":"<ul> <li><code>find_bytes(bs: typing.Union[bytes, bytearray, str], range_start: int, range_size: typing.Optional[int] = None, range_end: typing.Optional[int] = ida_idaapi.BADADDR, mask: typing.Optional[typing.Union[bytes, bytearray]] = None, flags: typing.Optional[int] = BIN_SEARCH_FORWARD | BIN_SEARCH_NOSHOW, radix: typing.Optional[int] = 16, strlit_encoding: typing.Optional[typing.Union[int, str]] = PBSENC_DEF1BPU) -&gt; int</code></li> <li><code>find_string(_str: str, range_start: int, range_end: typing.Optional[int] = ida_idaapi.BADADDR, range_size: typing.Optional[int] = None, strlit_encoding: typing.Optional[typing.Union[int, str]] = PBSENC_DEF1BPU, flags: typing.Optional[int] = BIN_SEARCH_FORWARD | BIN_SEARCH_NOSHOW) -&gt; int</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#modified-functions_1","title":"Modified functions","text":"8.4 9.0 <code>op_enum(ea: \"ea_t\", n: \"int\", id: \"enum_t\", serial: \"uchar\"=0) -&gt; \"bool\"</code> <code>op_enum(ea: \"ea_t\", n: \"int\", id: \"tid_t\", serial: \"uchar\"=0) -&gt; \"bool\"</code> <code>get_enum_id(ea: \"ea_t\", n: \"int\") -&gt; \"tid_t\"</code> <code>get_enum_id(ea: \"ea_t\", n: \"int\") -&gt; \"enum_t\"</code> <code>parse_binpat_str(out: \"compiled_binpat_vec_t\", ea: \"ea_t\", _in: \"char const *\", radix: \"int\", strlits_encoding: \"int\"=0) -&gt; \"str\"</code> <code>parse_binpat_str(out: \"compiled_binpat_vec_t\", ea: \"ea_t\", _in: \"char const *\", radix: \"int\", strlits_encoding: \"int\"=0) -&gt; \"bool\"</code> <code>bin_search3(start_ea: \"ea_t\", end_ea: \"ea_t\", data: \"compiled_binpat_vec_t\", flags: \"int) -&gt; ea_t</code> <code>bin_search(start_ea: \"ea_t\", end_ea: \"ea_t\", data: \"compiled_binpat_vec_t const &amp;\", flags: \"int\") -&gt; (ea_t, size_t)</code> <code>bin_search(start_ea: \"ea_t\", end_ea: \"ea_t\", image: \"uchar const *\", mask: \"uchar const *\", len: \"size_t\", flags: \"int\") -&gt; ea_t</code> <code>get_octet2(ogen: \"octet_generator_t\") -&gt; \"uchar_t*\"</code> <code>get_octet(ogen: \"octet_generator_t\") -&gt; \"uchar_t*\"</code>"},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#idc","title":"idc","text":""},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#removed-functions_5","title":"Removed functions","text":"<ul> <li><code>find_text</code> see ida_bytes</li> <li><code>find_binary</code> see ida_bytes</li> </ul>"},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#ida_dirtree","title":"ida_dirtree","text":""},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#removed-functions_6","title":"Removed functions","text":"<ul> <li><code>dirtree_cursor_root_cursor</code></li> <li><code>dirtree_t_errstr</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#ida_diskio","title":"ida_diskio","text":""},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#removed-functions_7","title":"Removed functions","text":"<ul> <li><code>enumerate_files2</code></li> <li><code>eclose</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#ida_fpro","title":"ida_fpro","text":""},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#added-functions_3","title":"Added functions","text":"<ul> <li><code>qflcose(fp: \"FILE *\") -&gt; \"int\"</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#ida_funcs","title":"ida_funcs","text":""},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#added-methods_1","title":"Added methods","text":""},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#func_item_iterator_t","title":"func_item_iterator_t","text":"<ul> <li><code>set_ea(self, _ea: \"ea_t\") -&gt; \"bool\"</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#ida_gdl","title":"ida_gdl","text":""},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#added-classes","title":"Added classes","text":""},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#edge_t","title":"edge_t","text":""},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#edgevec_t","title":"edgevec_t","text":""},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#node_ordering_t","title":"node_ordering_t","text":"<ul> <li><code>clear(self)</code></li> <li><code>resize(self, n: \"int\") -&gt; \"void\"</code></li> <li><code>size(self) -&gt; \"size_t\"</code></li> <li><code>set(self, _node: \"int\", num: \"int\") -&gt; \"void\"</code></li> <li><code>clr(self, _node: \"int\") -&gt; \"bool\"</code></li> <li><code>node(self, _order: \"size_t\") -&gt; \"int\"</code></li> <li><code>order(self, _node: \"int\") -&gt; \"int\"</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#ida_graph","title":"ida_graph","text":""},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#removed-classes","title":"Removed classes","text":""},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#node_ordering_t_1","title":"node_ordering_t","text":"<p>See ida-gdl <code>node_ordering_t</code> has been made an alias of <code>ida_gdl.node_ordering_t</code></p>"},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#edge_t_1","title":"edge_t","text":"<p>See ida-gdl <code>edge_t</code> has been made an alias of <code>ida_gdl.edge_t</code></p>"},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#renamed-clases","title":"Renamed clases","text":"8.4 9.0 <code>abstract_graph_t</code> <code>drawable_graph_t</code> <code>mutable_graph_t</code> <code>interactive_graph_t</code> <p><code>abstract_graph_t</code> has been made an alias of <code>drawable_graph_t</code> <code>mutbale_graph_t</code> has been made an alias of <code>interactive_graph_t</code></p>"},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#renamed-functions","title":"Renamed functions","text":"8.4 9.0 <code>create_mutable_graph</code> <code>create_interactive_graph</code> <code>delete_mutable_graph</code> <code>delete_interactive_graph</code> <code>grcode_create_mutable_graph</code> <code>grcode_create_interactive_graph</code> <p><code>create_mutable_graph</code> has been made an alias of <code>create_interactive_graph</code> <code>delete_mutable_graph</code> has been made an alias of <code>delete_interactive_graph</code> <code>grcode_create_mutable_graph</code> has been made an alias of <code>grcode_create_interactive_graph</code></p>"},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#ida_hexrays","title":"ida_hexrays","text":""},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#removed-functions_8","title":"Removed functions","text":"<ul> <li><code>get_member_type</code></li> <li><code>checkout_hexrays_license</code></li> <li><code>cinsn_t_insn_is_epilog</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#modified-functions_2","title":"Modified functions","text":"8.4 9.0 <code>save_user_labels2(func_ea: \"ea_t\", user_labels: \"user_labels_t\", func: \"cfunc_t\"=None) -&gt; \"void\"</code> <code>save_user_labels(func_ea: \"ea_t\", user_labels: \"user_labels_t\", func: \"cfunc_t\"=None) -&gt; \"void\"</code> <code>restore_user_labels2(func_ea: \"ea_t\", func: \"cfunc_t\"=None) -&gt; \"user_labels_t *\"</code> <code>restore_user_labels(func_ea: \"ea_t\", func: \"cfunc_t\"=None) -&gt; \"user_labels_t *\"</code>"},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#added-functions_4","title":"Added functions","text":"<ul> <li><code>max_vlr_value(size: \"int\") -&gt; \"uvlr_t\"</code></li> <li><code>min_vlr_svalue(size: \"int\") -&gt; \"uvlr_t\"</code></li> <li><code>max_vlr_svalue(size: \"int\") -&gt; \"uvlr_t\"</code></li> <li><code>is_unsigned_cmpop(cmpop: \"cmpop_t\") -&gt; \"bool\"</code></li> <li><code>is_signed_cmpop(cmpop: \"cmpop_t\") -&gt; \"bool\"</code></li> <li><code>is_cmpop_with_eq(cmpop: \"cmpop_t\") -&gt; \"bool\"</code></li> <li><code>is_cmpop_without_eq(cmpop: \"cmpop_t\") -&gt; \"bool\"</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#added-classes_1","title":"Added classes","text":"<ul> <li><code>catchexpr_t</code></li> <li><code>ccatch_t</code></li> <li><code>ctry_t</code></li> <li><code>cthrow_t</code></li> <li><code>cblock_pos_t</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#removed-methods_1","title":"Removed methods","text":""},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#vdui_t","title":"vdui_t","text":"<ul> <li><code>set_strmem_type</code></li> <li><code>rename_strmem</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#added-methods_2","title":"Added methods","text":""},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#cinsn_list_t","title":"cinsn_list_t","text":"<ul> <li><code>splice(self, pos: \"qlist&lt; cinsn_t &gt;::iterator\", other: \"cinsn_list_t\", first: \"qlist&lt; cinsn_t &gt;::iterator\", last: \"qlist&lt; cinsn_t &gt;::iterator\") -&gt; \"void\"</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#hexrays_hooks","title":"Hexrays_Hooks","text":"<ul> <li><code>pre_structural(self, ct: \"control_graph_t *\", cfunc: \"cfunc_t\", g: \"simple_graph_t\") -&gt; \"int\"</code></li> <li><code>begin_inlining(self, cdg: \"codegen_t\", decomp_flags: \"int\") -&gt; \"int\"</code></li> <li><code>inlining_func(self, cdg: \"codegen_t\", blk: \"int\", mbr: \"mba_ranges_t\") -&gt; \"int\"</code></li> <li><code>inlined_func(self, cdg: \"codegen_t\", blk: \"int\", mbr: \"mba_ranges_t\", i1: \"int\", i2: \"int\") -&gt; \"int\"</code></li> <li><code>collect_warnings(self, warnings: \"qstrvec_t *\", cfunc: \"cfunc_t\") -&gt; \"int\"</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#lvar_t","title":"lvar_t","text":"<ul> <li><code>was_scattered_arg(self) -&gt; \"bool\"</code></li> <li><code>set_scattered_arg(self) -&gt; \"void\"</code></li> <li><code>clr_scattered_arg(self) -&gt; \"void\"</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#lvars_t","title":"lvars_t","text":"<ul> <li><code>find_input_reg(self, reg: \"int\", _size: \"int\"=1) -&gt; \"int\"</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#simple_graph_t","title":"simple_graph_t","text":"<ul> <li><code>compute_dominators(self, domin: \"array_of_node_bitset_t &amp;\", post: \"bool\"=False) -&gt; \"void\"</code></li> <li><code>compute_immediate_dominators(self, domin: \"array_of_node_bitset_t const &amp;\", idomin: \"intvec_t\", post: \"bool\"=False) -&gt; \"void\"</code></li> <li><code>depth_first_preorder(self, pre: \"node_ordering_t\") -&gt; \"int\"</code></li> <li><code>depth_first_postorder(self, post: \"node_ordering_t\") -&gt; \"int\"</code></li> <li><code>begin(self) -&gt; \"simple_graph_t::iterator\"</code></li> <li><code>end(self) -&gt; \"simple_graph_t::iterator\"</code></li> <li><code>front(self) -&gt; \"int\"</code></li> <li><code>inc(self, p: \"simple_graph_t::iterator &amp;\", n: \"int\"=1) -&gt; \"void\"</code></li> <li><code>goup(self, node: \"int\") -&gt; \"int\"</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#fnumber_t","title":"fnumber_t","text":"<ul> <li><code>calc_max_exp(self) -&gt; \"int\"</code></li> <li><code>is_nan(self) -&gt; \"bool\"</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#minsn_t","title":"minsn_t","text":"<ul> <li><code>was_unpaired(self) -&gt; \"bool\"</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#mba_t","title":"mba_t","text":"<ul> <li><code>split_block(self, blk: \"mblock_t\", start_insn: \"minsn_t\") -&gt; \"mblock_t *\"</code></li> <li><code>inline_func(self, cdg: \"codegen_t\", blknum: \"int\", ranges: \"mba_ranges_t\", decomp_flags: \"int\"=0, inline_flags: \"int\"=0) -&gt; \"merror_t\"</code></li> <li><code>locate_stkpnt(self, ea: \"ea_t\") -&gt; \"stkpnt_t const *\"</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#codegen_t","title":"codegen_t","text":"<ul> <li><code>clear(self) -&gt; \"void\"</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#modified-methods_1","title":"Modified methods","text":""},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#hexrays_hooks_1","title":"Hexrays_Hooks","text":"8.4 9.0 <code>flowchart(self, fc: \"qflow_chart_t\") -&gt; \"int\"</code> <code>flowchart(self, fc: \"qflow_chart_t\", mba: \"mba_t\") -&gt; \"int\"</code>"},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#valrng_t","title":"valrng_t","text":"8.4 9.0 <code>cvt_to_cmp(self, strict: \"bool\") -&gt; \"bool\"</code> <code>cvt_to_cmp(self) -&gt; \"bool\"</code> <code>max_value(self, size_ : \"int\") -&gt; \"uvlr_t\"</code> <code>max_value(self) -&gt; \"uvlr_t\"</code> <code>min_svalue(self, size_: \"int\") -&gt; \"uvlr_t\"</code> <code>min_svalue(self) -&gt; \"uvlr_t\"</code> <code>max_svalue(self, size_: \"int\") -&gt; \"uvlr_t\"</code> <code>max_svalue(self) -&gt; \"uvlr_t\"</code>"},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#stkvar_ref_t","title":"stkvar_ref_t","text":"8.4 9.0 <code>get_stkvar(self, p_off=None: \"uval_t *\") -&gt; \"member_t *\"</code> <code>get_stkvar(self, udm: \"udm_t\"=None, p_off: \"uval_t *\"=None) -&gt; \"ssize_t\"</code>"},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#mop_t","title":"mop_t","text":"8.4 9.0 <code>get_stkvar(self, p_off: \"uval_t *\") -&gt; \"member_t *\"</code> <code>get_stkvar(self, udm: \"udm_t\"=None, p_off: \"uval_t *\"=None) -&gt; \"ssize_t\"</code>"},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#ida_ida","title":"ida_ida","text":""},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#added-classes_2","title":"Added classes","text":""},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#idbattr_valmap_t","title":"idbattr_valmap_t","text":""},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#idbattr_info_t","title":"idbattr_info_t","text":"<ul> <li><code>is_node_altval(self) -&gt; \"bool\"</code></li> <li><code>is_node_supval(self) -&gt; \"bool\"</code></li> <li><code>is_node_valobj(self) -&gt; \"bool\"</code></li> <li><code>is_node_blob(self) -&gt; \"bool\"</code></li> <li><code>is_node_var(self) -&gt; \"bool\"</code></li> <li><code>is_struc_field(self) -&gt; \"bool\"</code></li> <li><code>is_cstr(self) -&gt; \"bool\"</code></li> <li><code>is_qstring(self) -&gt; \"bool\"</code></li> <li><code>is_bytearray(self) -&gt; \"bool\"</code></li> <li><code>is_buf_var(self) -&gt; \"bool\"</code></li> <li><code>is_decimal(self) -&gt; \"bool\"</code></li> <li><code>is_hexadecimal(self) -&gt; \"bool\"</code></li> <li><code>is_readonly_var(self) -&gt; \"bool\"</code></li> <li><code>is_incremented(self) -&gt; \"bool\"</code></li> <li><code>is_val_mapped(self) -&gt; \"bool\"</code></li> <li><code>is_hash(self) -&gt; \"bool\"</code></li> <li><code>use_hlpstruc(self) -&gt; \"bool\"</code></li> <li><code>is_bitmap(self) -&gt; \"bool\"</code></li> <li><code>is_onoff(self) -&gt; \"bool\"</code></li> <li><code>is_scalar_var(self) -&gt; \"bool\"</code></li> <li><code>is_bitfield(self) -&gt; \"bool\"</code></li> <li><code>is_boolean(self) -&gt; \"bool\"</code></li> <li><code>has_individual_node(self) -&gt; \"bool\"</code></li> <li><code>str_true(self) -&gt; \"char const *\"</code></li> <li><code>str_false(self) -&gt; \"char const *\"</code></li> <li><code>ridx(self) -&gt; \"size_t\"</code></li> <li><code>hashname(self) -&gt; \"char const *\"</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#inf_structure-accessors","title":"inf_structure accessors","text":"<p>As will be shown in ida_idaapi Removed functions <code>get_inf_structure</code> has been removed. It has been replaced by the following accessors.</p>"},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#replacement-examples","title":"Replacement examples:","text":"In 8.4 In 9.0 <code>ida_idaapi.get_inf_structure().procname</code> <code>ida_ida.inf_get_procname()</code> <code>ida_idaapi.get_inf_structure().max_ea</code> <code>ida_ida.inf_get_max_ea()</code> <code>ida_idaapi.get_inf_structure().is_32bit()</code> <code>ida_ida.inf_is_32bit_exactly()</code> <p>The list of getters and setters is given below.</p>"},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#inf_structure-getters","title":"inf_structure getters","text":"<ul> <li><code>inf_get_version() -&gt; \"ushort\"</code></li> <li><code>inf_get_genflags() -&gt; \"ushort\"</code></li> <li><code>inf_get_lflags() -&gt; \"uint32\"</code></li> <li><code>inf_get_app_bitness() -&gt; \"uint\"</code></li> <li><code>inf_get_database_change_count() -&gt; \"uint32\"</code></li> <li><code>inf_get_filetype() -&gt; \"filetype_t\"</code></li> <li><code>inf_get_ostype() -&gt; \"ushort\"</code></li> <li><code>inf_get_apptype() -&gt; \"ushort\"</code></li> <li><code>inf_get_asmtype() -&gt; \"uchar\"</code></li> <li><code>inf_get_specsegs() -&gt; \"uchar\"</code></li> <li><code>inf_get_af() -&gt; \"uint32\"</code></li> <li><code>inf_get_af2() -&gt; \"uint32\"</code></li> <li><code>inf_get_baseaddr() -&gt; \"uval_t\"</code></li> <li><code>inf_get_start_ss() -&gt; \"sel_t\"</code></li> <li><code>inf_get_start_cs() -&gt; \"sel_t\"</code></li> <li><code>inf_get_start_ip() -&gt; \"ea_t\"</code></li> <li><code>inf_get_start_ea() -&gt; \"ea_t\"</code></li> <li><code>inf_get_start_sp() -&gt; \"ea_t\"</code></li> <li><code>inf_get_main() -&gt; \"ea_t\"</code></li> <li><code>inf_get_min_ea() -&gt; \"ea_t\"</code></li> <li><code>inf_get_max_ea() -&gt; \"ea_t\"</code></li> <li><code>inf_get_omin_ea() -&gt; \"ea_t\"</code></li> <li><code>inf_get_omax_ea() -&gt; \"ea_t\"</code></li> <li><code>inf_get_lowoff() -&gt; \"ea_t\"</code></li> <li><code>inf_get_highoff() -&gt; \"ea_t\"</code></li> <li><code>inf_get_maxref() -&gt; \"uval_t\"</code></li> <li><code>inf_get_netdelta() -&gt; \"sval_t\"</code></li> <li><code>inf_get_xrefnum() -&gt; \"uchar\"</code></li> <li><code>inf_get_type_xrefnum() -&gt; \"uchar\"</code></li> <li><code>inf_get_refcmtnum() -&gt; \"uchar\"</code></li> <li><code>inf_get_xrefflag() -&gt; \"uchar\"</code></li> <li><code>inf_get_max_autoname_len() -&gt; \"ushort\"</code></li> <li><code>inf_get_nametype() -&gt; \"char\"</code></li> <li><code>inf_get_short_demnames() -&gt; \"uint32\"</code></li> <li><code>inf_get_long_demnames() -&gt; \"uint32\"</code></li> <li><code>inf_get_demnames() -&gt; \"uchar\"</code></li> <li><code>inf_get_listnames() -&gt; \"uchar\"</code></li> <li><code>inf_get_indent() -&gt; \"uchar\"</code></li> <li><code>inf_get_cmt_indent() -&gt; \"uchar\"</code></li> <li><code>inf_get_margin() -&gt; \"ushort\"</code></li> <li><code>inf_get_lenxref() -&gt; \"ushort\"</code></li> <li><code>inf_get_outflags() -&gt; \"uint32\"</code></li> <li><code>inf_get_cmtflg() -&gt; \"uchar\"</code></li> <li><code>inf_get_limiter() -&gt; \"uchar\"</code></li> <li><code>inf_get_bin_prefix_size() -&gt; \"short\"</code></li> <li><code>inf_get_prefflag() -&gt; \"uchar\"</code></li> <li><code>inf_get_strlit_flags() -&gt; \"uchar\"</code></li> <li><code>inf_get_strlit_break() -&gt; \"uchar\"</code></li> <li><code>inf_get_strlit_zeroes() -&gt; \"char\"</code></li> <li><code>inf_get_strtype() -&gt; \"int32\"</code></li> <li><code>inf_get_strlit_sernum() -&gt; \"uval_t\"</code></li> <li><code>inf_get_datatypes() -&gt; \"uval_t\"</code></li> <li><code>inf_get_abibits() -&gt; \"uint32\"</code></li> <li><code>inf_get_appcall_options() -&gt; \"uint32\"</code></li> <li><code>inf_get_privrange_start_ea() -&gt; \"ea_t\"</code></li> <li><code>inf_get_privrange_end_ea() -&gt; \"ea_t\"</code></li> <li><code>inf_get_cc_id() -&gt; \"comp_t\"</code></li> <li><code>inf_get_cc_cm() -&gt; \"cm_t\"</code></li> <li><code>inf_get_cc_size_i() -&gt; \"uchar\"</code></li> <li><code>inf_get_cc_size_b() -&gt; \"uchar\"</code></li> <li><code>inf_get_cc_size_e() -&gt; \"uchar\"</code></li> <li><code>inf_get_cc_defalign() -&gt; \"uchar\"</code></li> <li><code>inf_get_cc_size_s() -&gt; \"uchar\"</code></li> <li><code>inf_get_cc_size_l() -&gt; \"uchar\"</code></li> <li><code>inf_get_cc_size_ll() -&gt; \"uchar\"</code></li> <li><code>inf_get_cc_size_ldbl() -&gt; \"uchar\"</code></li> <li><code>inf_get_procname() -&gt; \"size_t\"</code></li> <li><code>inf_get_strlit_pref() -&gt; \"size_t\"</code></li> <li><code>inf_get_cc(out: \"compiler_info_t\") -&gt; \"bool\"</code></li> <li><code>inf_get_privrange(*args) -&gt; \"range_t\"</code></li> <li><code>inf_get_af_low() -&gt; \"ushort\"</code></li> <li><code>inf_get_af_high() -&gt; \"ushort\"</code></li> <li><code>inf_get_af2_low() -&gt; \"ushort\"</code></li> <li><code>inf_get_pack_mode() -&gt; \"int\"</code></li> <li><code>inf_get_demname_form() -&gt; \"uchar\"</code></li> <li><code>inf_is_auto_enabled() -&gt; \"bool\"</code></li> <li><code>inf_is_graph_view() -&gt; \"bool\"</code></li> <li><code>inf_is_32bit_or_higher() -&gt; \"bool\"</code></li> <li><code>inf_is_32bit_exactly() -&gt; \"bool\"</code></li> <li><code>inf_is_16bit() -&gt; \"bool\"</code></li> <li><code>inf_is_64bit() -&gt; \"bool\"</code></li> <li><code>inf_is_dll() -&gt; \"bool\"</code></li> <li><code>inf_is_flat_off32() -&gt; \"bool\"</code></li> <li><code>inf_is_be() -&gt; \"bool\"</code></li> <li><code>inf_is_wide_high_byte_first() -&gt; \"bool\"</code></li> <li><code>inf_is_snapshot() -&gt; \"bool\"</code></li> <li><code>inf_is_kernel_mode() -&gt; \"bool\"</code></li> <li><code>inf_is_limiter_thin() -&gt; \"bool\"</code></li> <li><code>inf_is_limiter_thick() -&gt; \"bool\"</code></li> <li><code>inf_is_limiter_empty() -&gt; \"bool\"</code></li> <li><code>inf_is_mem_aligned4() -&gt; \"bool\"</code></li> <li><code>inf_is_hard_float() -&gt; \"bool\"</code></li> <li><code>inf_abi_set_by_user() -&gt; \"bool\"</code></li> <li><code>inf_allow_non_matched_ops() -&gt; \"bool\"</code></li> <li><code>inf_allow_sigmulti() -&gt; \"bool\"</code></li> <li><code>inf_append_sigcmt() -&gt; \"bool\"</code></li> <li><code>inf_big_arg_align(*args) -&gt; \"bool\"</code></li> <li><code>inf_check_manual_ops() -&gt; \"bool\"</code></li> <li><code>inf_check_unicode_strlits() -&gt; \"bool\"</code></li> <li><code>inf_coagulate_code() -&gt; \"bool\"</code></li> <li><code>inf_coagulate_data() -&gt; \"bool\"</code></li> <li><code>inf_compress_idb() -&gt; \"bool\"</code></li> <li><code>inf_create_all_xrefs() -&gt; \"bool\"</code></li> <li><code>inf_create_func_from_call() -&gt; \"bool\"</code></li> <li><code>inf_create_func_from_ptr() -&gt; \"bool\"</code></li> <li><code>inf_create_func_tails() -&gt; \"bool\"</code></li> <li><code>inf_create_jump_tables() -&gt; \"bool\"</code></li> <li><code>inf_create_off_on_dref() -&gt; \"bool\"</code></li> <li><code>inf_create_off_using_fixup() -&gt; \"bool\"</code></li> <li><code>inf_create_strlit_on_xref() -&gt; \"bool\"</code></li> <li><code>inf_data_offset() -&gt; \"bool\"</code></li> <li><code>inf_dbg_no_store_path() -&gt; \"bool\"</code></li> <li><code>inf_decode_fpp() -&gt; \"bool\"</code></li> <li><code>inf_del_no_xref_insns() -&gt; \"bool\"</code></li> <li><code>inf_final_pass() -&gt; \"bool\"</code></li> <li><code>inf_full_sp_ana() -&gt; \"bool\"</code></li> <li><code>inf_gen_assume() -&gt; \"bool\"</code></li> <li><code>inf_gen_lzero() -&gt; \"bool\"</code></li> <li><code>inf_gen_null() -&gt; \"bool\"</code></li> <li><code>inf_gen_org() -&gt; \"bool\"</code></li> <li><code>inf_huge_arg_align(cc: cm_t) -&gt; \"bool\"</code></li> <li><code>inf_like_binary() -&gt; \"bool\":</code></li> <li><code>inf_line_pref_with_seg() -&gt; \"bool\"</code></li> <li><code>inf_loading_idc() -&gt; \"bool\"</code></li> <li><code>inf_macros_enabled() -&gt; \"bool\"</code></li> <li><code>inf_map_stkargs() -&gt; \"bool\"</code></li> <li><code>inf_mark_code() -&gt; \"bool\"</code></li> <li><code>inf_merge_strlits() -&gt; \"bool\"</code></li> <li><code>inf_no_store_user_info() -&gt; \"bool\"</code></li> <li><code>inf_noflow_to_data() -&gt; \"bool\"</code></li> <li><code>inf_noret_ana() -&gt; \"bool\"</code></li> <li><code>inf_op_offset() -&gt; \"bool\"</code></li> <li><code>inf_pack_idb() -&gt; \"bool\"</code></li> <li><code>inf_pack_stkargs(*args) -&gt; \"bool\"</code></li> <li><code>inf_prefix_show_funcoff() -&gt; \"bool\"</code></li> <li><code>inf_prefix_show_segaddr() -&gt; \"bool\"</code></li> <li><code>inf_prefix_show_stack() -&gt; \"bool\"</code></li> <li><code>inf_prefix_truncate_opcode_bytes() -&gt; \"bool\"</code></li> <li><code>inf_propagate_regargs() -&gt; \"bool\"</code></li> <li><code>inf_propagate_stkargs() -&gt; \"bool\"</code></li> <li><code>inf_readonly_idb() -&gt; \"bool\"</code></li> <li><code>inf_rename_jumpfunc() -&gt; \"bool\"</code></li> <li><code>inf_rename_nullsub() -&gt; \"bool\"</code></li> <li><code>inf_should_create_stkvars() -&gt; \"bool\"</code></li> <li><code>inf_should_trace_sp() -&gt; \"bool\"</code></li> <li><code>inf_show_all_comments() -&gt; \"bool\"</code></li> <li><code>inf_show_auto() -&gt; \"bool\"</code></li> <li><code>inf_show_hidden_funcs() -&gt; \"bool\"</code></li> <li><code>inf_show_hidden_insns() -&gt; \"bool\"</code></li> <li><code>inf_show_hidden_segms() -&gt; \"bool\"</code></li> <li><code>inf_show_line_pref() -&gt; \"bool\"</code></li> <li><code>inf_show_repeatables() -&gt; \"bool\"</code></li> <li><code>inf_show_src_linnum() -&gt; \"bool\"</code></li> <li><code>inf_show_void() -&gt; \"bool\"</code></li> <li><code>inf_show_xref_fncoff() -&gt; \"bool\"</code></li> <li><code>inf_show_xref_seg() -&gt; \"bool\"</code></li> <li><code>inf_show_xref_tmarks() -&gt; \"bool\"</code></li> <li><code>inf_show_xref_val() -&gt; \"bool\"</code></li> <li><code>inf_stack_ldbl() -&gt; \"bool\"</code></li> <li><code>inf_stack_varargs() -&gt; \"bool\"</code></li> <li><code>inf_strlit_autocmt() -&gt; \"bool\"</code></li> <li><code>inf_strlit_name_bit() -&gt; \"bool\"</code></li> <li><code>inf_strlit_names() -&gt; \"bool\"</code></li> <li><code>inf_strlit_savecase() -&gt; \"bool\"</code></li> <li><code>inf_strlit_serial_names() -&gt; \"bool\"</code></li> <li><code>inf_test_mode() -&gt; \"bool\"</code></li> <li><code>inf_trace_flow() -&gt; \"bool\"</code></li> <li><code>inf_truncate_on_del() -&gt; \"bool\"</code></li> <li><code>inf_unicode_strlits() -&gt; \"bool\"</code></li> <li><code>inf_use_allasm() -&gt; \"bool\"</code></li> <li><code>inf_use_flirt() -&gt; \"bool\"</code></li> <li><code>inf_use_gcc_layout() -&gt; \"bool\"</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#inf_structure-setters","title":"inf_structure setters","text":"<ul> <li><code>inf_set_allow_non_matched_ops(_v: \"bool\"=True) -&gt; \"bool\"</code></li> <li><code>inf_set_graph_view(_v: \"bool\"=True) -&gt; \"bool\"</code></li> <li><code>inf_set_lflags(_v: \"uint32\") -&gt; \"bool\"</code></li> <li><code>inf_set_decode_fpp(_v: \"bool\"=True) -&gt; \"bool\"</code></li> <li><code>inf_set_32bit(_v: \"bool\"=True) -&gt; \"bool\"</code></li> <li><code>inf_set_64bit(_v: \"bool\"=True) -&gt; \"bool\"</code></li> <li><code>inf_set_dll(_v: \"bool\"=True) -&gt; \"bool\"</code></li> <li><code>inf_set_flat_off32(_v: \"bool\"=True) -&gt; \"bool\"</code></li> <li><code>inf_set_be(_v: \"bool\"=True) -&gt; \"bool\"</code></li> <li><code>inf_set_wide_high_byte_first(_v: \"bool\"=True) -&gt; \"bool\"</code></li> <li><code>inf_set_dbg_no_store_path(_v: \"bool\"=True) -&gt; \"bool\"</code></li> <li><code>inf_set_snapshot(_v: \"bool\"=True) -&gt; \"bool\"</code></li> <li><code>inf_set_pack_idb(_v: \"bool\"=True) -&gt; \"bool\"</code></li> <li><code>inf_set_compress_idb(_v: \"bool\"=True) -&gt; \"bool\"</code></li> <li><code>inf_set_kernel_mode(_v: \"bool\"=True) -&gt; \"bool\"</code></li> <li><code>inf_set_app_bitness(bitness: \"uint\") -&gt; \"void\"</code></li> <li><code>inf_set_database_change_count(_v: \"uint32\") -&gt; \"bool\"</code></li> <li><code>inf_set_filetype(_v: \"filetype_t\") -&gt; \"bool\"</code></li> <li><code>inf_set_ostype(_v: \"ushort\") -&gt; \"bool\"</code></li> <li><code>inf_set_apptype(_v: \"ushort\") -&gt; \"bool\"</code></li> <li><code>inf_set_asmtype(_v: \"uchar\") -&gt; \"bool\"</code></li> <li><code>inf_set_specsegs(_v: \"uchar\") -&gt; \"bool\"</code></li> <li><code>inf_set_af(_v: \"uint32\") -&gt; \"bool\"</code></li> <li><code>inf_set_trace_flow(_v: \"bool\"=True) -&gt; \"bool\"</code></li> <li><code>inf_set_mark_code(_v: \"bool\"=True) -&gt; \"bool\"</code></li> <li><code>inf_set_create_jump_tables(_v: \"bool\"=True) -&gt; \"bool\"</code></li> <li><code>inf_set_noflow_to_data(_v: \"bool\"=True) -&gt; \"bool\"</code></li> <li><code>inf_set_create_all_xrefs(_v: \"bool\"=True) -&gt; \"bool\"</code></li> <li><code>inf_set_del_no_xref_insns(_v: \"bool\"=True) -&gt; \"bool\"</code></li> <li><code>inf_set_create_func_from_ptr(_v: \"bool\"=True) -&gt; \"bool\"</code></li> <li><code>inf_set_create_func_from_call(_v: \"bool\"=True) -&gt; \"bool\"</code></li> <li><code>inf_set_create_func_tails(_v: \"bool\"=True) -&gt; \"bool\"</code></li> <li><code>inf_set_should_create_stkvars(_v: \"bool\"=True) -&gt; \"bool\"</code></li> <li><code>inf_set_propagate_stkargs(_v: \"bool\"=True) -&gt; \"bool\"</code></li> <li><code>inf_set_propagate_regargs(_v: \"bool\"=True) -&gt; \"bool\"</code></li> <li><code>inf_set_should_trace_sp(_v: \"bool\"=True) -&gt; \"bool\"</code></li> <li><code>inf_set_full_sp_ana(_v: \"bool\"=True) -&gt; \"bool\"</code></li> <li><code>inf_set_noret_ana(_v: \"bool\"=True) -&gt; \"bool\"</code></li> <li><code>inf_set_guess_func_type(_v: \"bool\"=True) -&gt; \"bool\"</code></li> <li><code>inf_set_truncate_on_del(_v: \"bool\"=True) -&gt; \"bool\"</code></li> <li><code>inf_set_create_strlit_on_xref(_v: \"bool\"=True) -&gt; \"bool\"</code></li> <li><code>inf_set_check_unicode_strlits(_v: \"bool\"=True) -&gt; \"bool\"</code></li> <li><code>inf_set_create_off_using_fixup(_v: \"bool\"=True) -&gt; \"bool\"</code></li> <li><code>inf_set_create_off_on_dref(_v: \"bool\"=True) -&gt; \"bool\"</code></li> <li><code>inf_set_op_offset(_v: \"bool\"=True) -&gt; \"bool\"</code></li> <li><code>inf_set_data_offset(_v: \"bool\"=True) -&gt; \"bool\"</code></li> <li><code>inf_set_use_flirt(_v: \"bool\"=True) -&gt; \"bool\"</code></li> <li><code>inf_set_append_sigcmt(_v: \"bool\"=True) -&gt; \"bool\"</code></li> <li><code>inf_set_allow_sigmulti(_v: \"bool\"=True) -&gt; \"bool\"</code></li> <li><code>inf_set_hide_libfuncs(_v: \"bool\"=True) -&gt; \"bool\"</code></li> <li><code>inf_set_rename_jumpfunc(_v: \"bool\"=True) -&gt; \"bool\"</code></li> <li><code>inf_set_rename_nullsub(_v: \"bool\"=True) -&gt; \"bool\"</code></li> <li><code>inf_set_coagulate_data(_v: \"bool\"=True) -&gt; \"bool\"</code></li> <li><code>inf_set_coagulate_code(_v: \"bool\"=True) -&gt; \"bool\"</code></li> <li><code>inf_set_final_pass(_v: \"bool\"=True) -&gt; \"bool\"</code></li> <li><code>inf_set_af2(_v: \"uint32\") -&gt; \"bool\"</code></li> <li><code>inf_set_handle_eh(_v: \"bool\"=True) -&gt; \"bool\"</code></li> <li><code>inf_set_handle_rtti(_v: \"bool\"=True) -&gt; \"bool\"</code></li> <li><code>inf_set_macros_enabled(_v: \"bool\"=True) -&gt; \"bool\"</code></li> <li><code>inf_set_merge_strlits(_v: \"bool\"=True) -&gt; \"bool\"</code></li> <li><code>inf_set_baseaddr(_v: \"uval_t\") -&gt; \"bool\"</code></li> <li><code>inf_set_start_ss(_v: \"sel_t\") -&gt; \"bool\"</code></li> <li><code>inf_set_start_cs(_v: \"sel_t\") -&gt; \"bool\"</code></li> <li><code>inf_set_start_ip(_v: \"ea_t\") -&gt; \"bool\"</code></li> <li><code>inf_set_start_ea(_v: \"ea_t\") -&gt; \"bool\"</code></li> <li><code>inf_set_start_sp(_v: \"ea_t\") -&gt; \"bool\"</code></li> <li><code>inf_set_main(_v: \"ea_t\") -&gt; \"bool\"</code></li> <li><code>inf_set_min_ea(_v: \"ea_t\") -&gt; \"bool\"</code></li> <li><code>inf_set_max_ea(_v: \"ea_t\") -&gt; \"bool\"</code></li> <li><code>inf_set_omin_ea(_v: \"ea_t\") -&gt; \"bool\"</code></li> <li><code>inf_set_omax_ea(_v: \"ea_t\") -&gt; \"bool\"</code></li> <li><code>inf_set_lowoff(_v: \"ea_t\") -&gt; \"bool\"</code></li> <li><code>inf_set_highoff(_v: \"ea_t\") -&gt; \"bool\"</code></li> <li><code>inf_set_maxref(_v: \"uval_t\") -&gt; \"bool\"</code></li> <li><code>inf_set_netdelta(_v: \"sval_t\") -&gt; \"bool\"</code></li> <li><code>inf_set_xrefnum(_v: \"uchar\") -&gt; \"bool\"</code></li> <li><code>inf_set_type_xrefnum(_v: \"uchar\") -&gt; \"bool\"</code></li> <li><code>inf_set_refcmtnum(_v: \"uchar\") -&gt; \"bool\"</code></li> <li><code>inf_set_xrefflag(_v: \"uchar\") -&gt; \"bool\"</code></li> <li><code>inf_set_show_xref_seg(_v: \"bool\"=True) -&gt; \"bool\"</code></li> <li><code>inf_set_show_xref_tmarks(_v: \"bool\"=True) -&gt; \"bool\"</code></li> <li><code>inf_set_show_xref_fncoff(_v: \"bool\"=True) -&gt; \"bool\"</code></li> <li><code>inf_set_show_xref_val(_v: \"bool\"=True) -&gt; \"bool\"</code></li> <li><code>inf_set_max_autoname_len(_v: \"ushort\") -&gt; \"bool\"</code></li> <li><code>inf_set_nametype(_v: \"char\") -&gt; \"bool\"</code></li> <li><code>inf_set_short_demnames(_v: \"uint32\") -&gt; \"bool\"</code></li> <li><code>inf_set_long_demnames(_v: \"uint32\") -&gt; \"bool\"</code></li> <li><code>inf_set_demnames(_v: \"uchar\") -&gt; \"bool\"</code></li> <li><code>inf_set_listnames(_v: \"uchar\") -&gt; \"bool\"</code></li> <li><code>inf_set_indent(_v: \"uchar\") -&gt; \"bool\"</code></li> <li><code>inf_set_cmt_indent(_v: \"uchar\") -&gt; \"bool\"</code></li> <li><code>inf_set_margin(_v: \"ushort\") -&gt; \"bool\"</code></li> <li><code>inf_set_lenxref(_v: \"ushort\") -&gt; \"bool\"</code></li> <li><code>inf_set_outflags(_v: \"uint32\") -&gt; \"bool\"</code></li> <li><code>inf_set_show_void(_v: \"bool\"=True) -&gt; \"bool\"</code></li> <li><code>inf_set_show_auto(_v: \"bool\"=True) -&gt; \"bool\"</code></li> <li><code>inf_set_gen_null(_v: \"bool\"=True) -&gt; \"bool\"</code></li> <li><code>inf_set_show_line_pref(_v: \"bool\"=True) -&gt; \"bool\"</code></li> <li><code>inf_set_line_pref_with_seg(_v: \"bool\"=True) -&gt; \"bool\"</code></li> <li><code>inf_set_gen_lzero(_v: \"bool\"=True) -&gt; \"bool\"</code></li> <li><code>inf_set_gen_org(_v: \"bool\"=True) -&gt; \"bool\"</code></li> <li><code>inf_set_gen_assume(_v: \"bool\"=True) -&gt; \"bool\"</code></li> <li><code>inf_set_gen_tryblks(_v: \"bool\"=True) -&gt; \"bool\"</code></li> <li><code>inf_set_cmtflg(_v: \"uchar\") -&gt; \"bool\"</code></li> <li><code>inf_set_show_repeatables(_v: \"bool\"=True) -&gt; \"bool\"</code></li> <li><code>inf_set_show_all_comments(_v: \"bool\"=True) -&gt; \"bool\"</code></li> <li><code>inf_set_hide_comments(_v: \"bool\"=True) -&gt; \"bool\"</code></li> <li><code>inf_set_show_src_linnum(_v: \"bool\"=True) -&gt; \"bool\"</code></li> <li><code>inf_set_show_hidden_insns(_v: \"bool\"=True) -&gt; \"bool\"</code></li> <li><code>inf_set_show_hidden_funcs(_v: \"bool\"=True) -&gt; \"bool\"</code></li> <li><code>inf_set_show_hidden_segms(_v: \"bool\"=True) -&gt; \"bool\"</code></li> <li><code>inf_set_limiter(_v: \"uchar\") -&gt; \"bool\"</code></li> <li><code>inf_set_limiter_thin(_v: \"bool\"=True) -&gt; \"bool\"</code></li> <li><code>inf_set_limiter_thick(_v: \"bool\"=True) -&gt; \"bool\"</code></li> <li><code>inf_set_limiter_empty(_v: \"bool\"=True) -&gt; \"bool\"</code></li> <li><code>inf_set_bin_prefix_size(_v: \"short\") -&gt; \"bool\"</code></li> <li><code>inf_set_prefflag(_v: \"uchar\") -&gt; \"bool\"</code></li> <li><code>inf_set_prefix_show_segaddr(_v: \"bool\"=True) -&gt; \"bool\"</code></li> <li><code>inf_set_prefix_show_funcoff(_v: \"bool\"=True) -&gt; \"bool\"</code></li> <li><code>inf_set_prefix_show_stack(_v: \"bool\"=True) -&gt; \"bool\"</code></li> <li><code>inf_set_prefix_truncate_opcode_bytes(_v: \"bool\"=True) -&gt; \"bool\"</code></li> <li><code>inf_set_strlit_flags(_v: \"uchar\") -&gt; \"bool\"</code></li> <li><code>inf_set_strlit_names(_v: \"bool\"=True) -&gt; \"bool\"</code></li> <li><code>inf_set_strlit_name_bit(_v: \"bool\"=True) -&gt; \"bool\"</code></li> <li><code>inf_set_strlit_serial_names(_v: \"bool\"=True) -&gt; \"bool\"</code></li> <li><code>inf_set_unicode_strlits(_v: \"bool\"=True) -&gt; \"bool\"</code></li> <li><code>inf_set_strlit_autocmt(_v: \"bool\"=True) -&gt; \"bool\"</code></li> <li><code>inf_set_strlit_savecase(_v: \"bool\"=True) -&gt; \"bool\"</code></li> <li><code>inf_set_strlit_break(_v: \"uchar\") -&gt; \"bool\"</code></li> <li><code>inf_set_strlit_zeroes(_v: \"char\") -&gt; \"bool\"</code></li> <li><code>inf_set_strtype(_v: \"int32\") -&gt; \"bool\"</code></li> <li><code>inf_set_strlit_sernum(_v: \"uval_t\") -&gt; \"bool\"</code></li> <li><code>inf_set_datatypes(_v: \"uval_t\") -&gt; \"bool\"</code></li> <li><code>inf_set_abibits(_v: \"uint32\") -&gt; \"bool\"</code></li> <li><code>inf_set_mem_aligned4(_v: \"bool\"=True) -&gt; \"bool\"</code></li> <li><code>inf_set_pack_stkargs(_v: \"bool\"=True) -&gt; \"bool\"</code></li> <li><code>inf_set_big_arg_align(_v: \"bool\"=True) -&gt; \"bool\"</code></li> <li><code>inf_set_stack_ldbl(_v: \"bool\"=True) -&gt; \"bool\"</code></li> <li><code>inf_set_stack_varargs(_v: \"bool\"=True) -&gt; \"bool\"</code></li> <li><code>inf_set_hard_float(_v: \"bool\"=True) -&gt; \"bool\"</code></li> <li><code>inf_set_abi_set_by_user(_v: \"bool\"=True) -&gt; \"bool\"</code></li> <li><code>inf_set_use_gcc_layout(_v: \"bool\"=True) -&gt; \"bool\"</code></li> <li><code>inf_set_map_stkargs(_v: \"bool\"=True) -&gt; \"bool\"</code></li> <li><code>inf_set_huge_arg_align(_v: \"bool\"=True) -&gt; \"bool\"</code></li> <li><code>inf_set_appcall_options(_v: \"uint32\") -&gt; \"bool\"</code></li> <li><code>inf_set_privrange_start_ea(_v: \"ea_t\") -&gt; \"bool\"</code></li> <li><code>inf_set_privrange_end_ea(_v: \"ea_t\") -&gt; \"bool\"</code></li> <li><code>inf_set_cc_id(_v: \"comp_t\") -&gt; \"bool\"</code></li> <li><code>inf_set_cc_cm(_v: \"cm_t\") -&gt; \"bool\"</code></li> <li><code>inf_set_cc_size_i(_v: \"uchar\") -&gt; \"bool\"</code></li> <li><code>inf_set_cc_size_b(_v: \"uchar\") -&gt; \"bool\"</code></li> <li><code>inf_set_cc_size_e(_v: \"uchar\") -&gt; \"bool\"</code></li> <li><code>inf_set_cc_defalign(_v: \"uchar\") -&gt; \"bool\"</code></li> <li><code>inf_set_cc_size_s(_v: \"uchar\") -&gt; \"bool\"</code></li> <li><code>inf_set_cc_size_l(_v: \"uchar\") -&gt; \"bool\"</code></li> <li><code>inf_set_cc_size_ll(_v: \"uchar\") -&gt; \"bool\"</code></li> <li><code>inf_set_cc_size_ldbl(_v: \"uchar\") -&gt; \"bool\"</code></li> <li><code>inf_set_procname(*args) -&gt; \"bool\"</code></li> <li><code>inf_set_strlit_pref(*args) -&gt; \"bool\"</code></li> <li><code>inf_set_cc(_v: \"compiler_info_t\") -&gt; \"bool\"</code></li> <li><code>inf_set_privrange(_v: \"range_t\") -&gt; \"bool\"</code></li> <li><code>inf_set_af_low(saf: \"ushort\") -&gt; \"void\"</code></li> <li><code>inf_set_af_high(saf2: \"ushort\") -&gt; \"void\"</code></li> <li><code>inf_set_af2_low(saf: \"ushort\") -&gt; \"void\"</code></li> <li><code>inf_set_pack_mode(pack_mode: \"int\") -&gt; \"int\"</code></li> <li><code>inf_inc_database_change_count(cnt: \"int\"=1) -&gt; \"void\"</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#ida_idaapi","title":"ida_idaapi","text":""},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#removed-functions_9","title":"Removed functions","text":"<ul> <li><code>get_inf_structure</code> see inf_structure getters and inf_structure setters</li> <li><code>loader_input_t_from_linput</code></li> <li><code>loader_input_t_from_capsule</code></li> <li><code>loader_input_t_from_fp</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#ida_idd","title":"ida_idd","text":""},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#added-functions_5","title":"Added functions","text":"<ul> <li><code>cpu2ieee(ieee_out: \"fpvalue_t *\", cpu_fpval: \"void const *\", size: \"int\") -&gt; \"int\"</code></li> <li><code>ieee2cpu(cpu_fpval: \"void *\", ieee_out: \"fpvalue_t const &amp;\", size: \"int\") -&gt; \"int\"</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#ida_idp","title":"ida_idp","text":"<p>See also IDB events below.</p>"},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#removed-methods_2","title":"Removed methods","text":""},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#_processor_t","title":"_processor_t","text":"<ul> <li><code>has_realcvt</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#processor_t","title":"processor_t","text":"<ul> <li><code>get_uFlag</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#modified-methods_2","title":"Modified methods","text":""},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#_processor_t_1","title":"_processor_t","text":"8.4 9.0 <code>gen_stkvar_def(ctx: \"outctx_t &amp;\", mptr: \"member_t const *\", v: : \"sval_t\") -&gt; ssize_t</code> <code>gen_stkvar_def(ctx: \"outctx_t &amp;\", mptr: \"udm_t\", v: \"sval_t\", tid: \"tid_t\") -&gt; \"ssize_t\"</code>"},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#idp_hooks","title":"IDP_Hooks","text":"8.4 9.0 <code>ev_gen_stkvar_def(self, *args) -&gt; \"int\"</code> <code>ev_gen_stkvar_def(self, outctx: \"outctx_t *\", stkvar: \"udm_t\", v: \"sval_t\", tid: \"tid_t\") -&gt; \"int\"</code>"},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#added-methods_3","title":"Added methods","text":""},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#idb_hooks","title":"IDB_Hooks","text":"<ul> <li><code>lt_udm_created(self, udtname: \"char const *\", udm: \"udm_t\") -&gt; \"void\"</code></li> <li><code>lt_udm_deleted(self, udtname: \"char const *\", udm_tid: \"tid_t\", udm: \"udm_t\") -&gt; \"void\"</code></li> <li><code>lt_udm_renamed(self, udtname: \"char const *\", udm: \"udm_t\", oldname: \"char const *\") -&gt; \"void\"</code></li> <li><code>lt_udm_changed(self, udtname: \"char const *\", udm_tid: \"tid_t\", udmold: \"udm_t\", udmnew: \"udm_t\") -&gt; \"void\"</code></li> <li><code>lt_udt_expanded(self, udtname: \"char const *\", udm_tid: \"tid_t\", delta: \"adiff_t\") -&gt; \"void\"</code></li> <li><code>frame_created(self, func_ea: \"ea_t\") -&gt; \"void\"</code></li> <li><code>frame_udm_created(self, func_ea: \"ea_t\", udm: \"udm_t\") -&gt; \"void\"</code></li> <li><code>frame_udm_deleted(self, func_ea: \"ea_t\", udm_tid: \"tid_t\", udm: \"udm_t\") -&gt; \"void\"</code></li> <li><code>frame_udm_renamed(self, func_ea: \"ea_t\", udm: \"udm_t\", oldname: \"char const *\") -&gt; \"void\"</code></li> <li><code>frame_udm_changed(self, func_ea: \"ea_t\", udm_tid: \"tid_t\", udmold: \"udm_t\", udmnew: \"udm_t\") -&gt; \"void\"</code></li> <li><code>frame_expanded(self, func_ea: \"ea_t\", udm_tid: \"tid_t\", delta: \"adiff_t\") -&gt; \"void\"</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#removed-functions_10","title":"Removed functions","text":"<p>All the _processor_t functions have been removed from ida_idp.</p>"},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#ida_ieee","title":"ida_ieee","text":""},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#removed-methods_3","title":"Removed methods","text":""},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#fpvalue_t","title":"fpvalue_t","text":"<ul> <li><code>_get_10bytes</code></li> <li><code>_set_10bytes</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#ida_kernwin","title":"ida_kernwin","text":""},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#removed-functions_11","title":"Removed functions","text":"<ul> <li><code>place_t_as_enumplace_t</code></li> <li><code>place_t_as_structplace_t</code></li> <li><code>open_enums_window</code></li> <li><code>open_structs_window</code></li> <li><code>choose_struc</code></li> <li><code>choose_enum(title, default_id) -&gt; \"enum_t\"</code></li> <li><code>choose_enum_by_value(title, default_id, value, nbytes) -&gt; \"enum_t\"</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#modified-function","title":"Modified function","text":"<ul> <li><code>place_t_as_idaplace_t</code> has been made an alias of <code>place_t.as_idaplace_t</code></li> <li><code>place_t_as_simpleline_place_t</code> has been made an alias of <code>place_t.as_simpleline_place_t</code></li> <li><code>place_t_as_tiplace_t</code> has been made an alias of <code>place_t.as_tiplace_t</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#removed-classes_1","title":"Removed classes","text":"<ul> <li><code>enumplace_t</code></li> <li><code>structplace_t</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#removed-methods_4","title":"Removed methods","text":""},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#place_t","title":"place_t","text":"<ul> <li><code>as_enumplace_t</code></li> <li><code>as_structplace_t</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#twinpos_t","title":"twinpos_t","text":"<ul> <li><code>place_as_enumplace_t</code></li> <li><code>place_as_structplace_t</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#tagged_line_sections_t","title":"tagged_line_sections_t","text":"<ul> <li><code>find_in</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#added-methods_4","title":"Added methods","text":""},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#tagged_line_sections_t_1","title":"tagged_line_sections_t","text":"<ul> <li><code>nearest_before(self, range: \"tagged_line_section_t\", start: \"cpidx_t\", tag: \"color_t\"=0) -&gt; \"tagged_line_section_t const *\"</code></li> <li><code>nearest_after(self, range: \"tagged_line_section_t\", start: \"cpidx_t\", tag: \"color_t\"=0) -&gt; \"tagged_line_section_t const *\"</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#chooser_base_t","title":"chooser_base_t","text":"<ul> <li><code>has_widget_lifecycle(self) -&gt; \"bool\"</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#added-functions_6","title":"Added functions","text":"<ul> <li><code>is_ida_library(path: \"char *\", pathsize: \"size_t\", handle: \"void **\") -&gt; \"bool\"</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#ida_lines","title":"ida_lines","text":""},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#removed-functions_12","title":"Removed functions","text":"<ul> <li><code>set_user_defined_prefix</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#ida_moved","title":"ida_moved","text":""},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#modified-functions_3","title":"Modified functions","text":"<ul> <li><code>bookmarks_t_mark</code> has been made an alias of <code>bookmarks_t.mark</code></li> <li><code>bookmarks_t_get_desc</code> has been made an alias of <code>bookmarks_t.get_desc</code></li> <li><code>bookmarks_t_find_index</code> has been made an alias of <code>bookmarks_t.find_index</code></li> <li><code>bookmarks_t_size</code> has been made an alias of <code>bookmarks_t.size</code></li> <li><code>bookmarks_t_erase</code> has been made an alias of <code>bookmarks_t.erase</code></li> <li><code>bookmarks_t_get_dirtree_id</code> has been made an alias of <code>bookmarks_t.get_dirtree_id</code></li> <li><code>bookmarks_t_get</code> has been made an alias of <code>bookmarks_t.get</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#ida_nalt","title":"ida_nalt","text":""},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#removed-functions_13","title":"Removed functions","text":"<ul> <li><code>validate_idb_names</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#ida_netnode","title":"ida_netnode","text":""},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#modified-functions_4","title":"Modified functions","text":"<ul> <li><code>netnode.exist has been made an alias of netnode.exist</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#ida_pro","title":"ida_pro","text":""},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#removed-functions_14","title":"Removed functions","text":"<ul> <li><code>uchar_array_frompointer</code></li> <li><code>tid_array_frompointer</code></li> <li><code>ea_array_frompointer</code></li> <li><code>sel_array_frompointer</code></li> <li><code>int_pointer_frompointer</code></li> <li><code>sel_pointer_frompointer</code></li> <li><code>ea_pointer_frompointer</code></li> </ul> <p>See Added classes below</p>"},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#added-classes_3","title":"Added classes","text":""},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#plugin_options_t","title":"plugin_options_t","text":"<ul> <li><code>erase(self, name: \"char const *\") -&gt; \"bool\"</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#uchar_pointer","title":"uchar_pointer","text":"<ul> <li><code>assign(self, value: \"uchar\") -&gt; \"void\"</code></li> <li><code>value(self) -&gt; \"uchar\"</code></li> <li><code>cast(self) -&gt; \"uchar *\"</code></li> <li><code>frompointer(t: \"uchar *\") -&gt; \"uchar_pointer *\"</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#ushort_pointer","title":"ushort_pointer","text":"<ul> <li><code>assign(self, value: \"ushort\") -&gt; \"void\"</code></li> <li><code>value(self) -&gt; \"ushort\"</code></li> <li><code>cast(self) -&gt; \"ushort *\"</code></li> <li><code>frompointer(t: \"ushort *\") -&gt; \"ushort_pointer *\"</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#uint_pointer","title":"uint_pointer","text":"<ul> <li><code>assign(self, value: \"uint\") -&gt; \"void\"</code></li> <li><code>value(self) -&gt; \"uint\"</code></li> <li><code>cast(self) -&gt; \"uint *\"</code></li> <li><code>frompointer(t: \"uint *\") -&gt; \"uint_pointer *\"</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#sint8_pointer","title":"sint8_pointer","text":"<ul> <li><code>assign(self, value: \"sint8\") -&gt; \"void\"</code></li> <li><code>value(self) -&gt; \"sint8\"</code></li> <li><code>cast(self) -&gt; \"sint8 *\"</code></li> <li><code>frompointer(t: \"sint8 *\") -&gt; \"sint8_pointer *\"</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#int8_pointer","title":"int8_pointer","text":"<ul> <li><code>assign(self, value: \"int8\") -&gt; \"void\"</code></li> <li><code>value(self) -&gt; \"int8\"</code></li> <li><code>cast(self) -&gt; \"int8 *\"</code></li> <li><code>frompointer(t: \"int8 *\") -&gt; \"int8_pointer *\"</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#uint8_pointer","title":"uint8_pointer","text":"<ul> <li><code>assign(self, value: \"uint8\") -&gt; \"void\"</code></li> <li><code>value(self) -&gt; \"uint8\"</code></li> <li><code>cast(self) -&gt; \"uint8 *\"</code></li> <li><code>frompointer(t: \"uint8 *\") -&gt; \"uint8_pointer *\"</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#int16_pointer","title":"int16_pointer","text":"<ul> <li><code>assign(self, value: \"int16\") -&gt; \"void\"</code></li> <li><code>value(self) -&gt; \"int16\"</code></li> <li><code>cast(self) -&gt; \"int16 *\"</code></li> <li><code>frompointer(t: \"int16 *\") -&gt; \"int16_pointer *\"</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#uint16_pointer","title":"uint16_pointer","text":"<ul> <li><code>assign(self, value: \"uint16\") -&gt; \"void\"</code></li> <li><code>value(self) -&gt; \"uint16\"</code></li> <li><code>cast(self) -&gt; \"uint16 *\"</code></li> <li><code>frompointer(t: \"uint16 *\") -&gt; \"uint16_pointer *\"</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#int32_pointer","title":"int32_pointer","text":"<ul> <li><code>assign(self, value: \"int32\") -&gt; \"void\"</code></li> <li><code>value(self) -&gt; \"int32\"</code></li> <li><code>cast(self) -&gt; \"int32 *\"</code></li> <li><code>frompointer(t: \"int32 *\") -&gt; \"int32_pointer *\"</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#uint32_pointer","title":"uint32_pointer","text":"<ul> <li><code>assign(self, value: \"uint32\") -&gt; \"void\"</code></li> <li><code>value(self) -&gt; \"uint32\"</code></li> <li><code>cast(self) -&gt; \"uint32 *\"</code></li> <li><code>frompointer(t: \"uint32 *\") -&gt; \"uint32_pointer *\"</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#int64_pointer","title":"int64_pointer","text":"<ul> <li><code>assign(self, value: \"int64\") -&gt; \"void\"</code></li> <li><code>value(self) -&gt; \"int64\"</code></li> <li><code>cast(self) -&gt; \"int64 *\"</code></li> <li><code>frompointer(t: \"int64 *\") -&gt; \"int64_pointer *\"</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#uint64_pointer","title":"uint64_pointer","text":"<ul> <li><code>assign(self, value: \"uint64\") -&gt; \"void\"</code></li> <li><code>value(self) -&gt; \"uint64\"</code></li> <li><code>cast(self) -&gt; \"uint64 *\"</code></li> <li><code>frompointer(t: \"uint64 *\") -&gt; \"uint64_pointer *\"</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#ssize_pointer","title":"ssize_pointer","text":"<ul> <li><code>assign(self, value: \"ssize_t\") -&gt; \"void\"</code></li> <li><code>value(self) -&gt; \"ssize_t\"</code></li> <li><code>cast(self) -&gt; \"ssize_t *\"</code></li> <li><code>frompointer(t: \"ssize_t *\") -&gt; \"ssize_pointer *\"</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#bool_pointer","title":"bool_pointer","text":"<ul> <li><code>assign(self, value: \"bool\") -&gt; \"void\"</code></li> <li><code>value(self) -&gt; \"bool\"</code></li> <li><code>cast(self) -&gt; \"bool *\"</code></li> <li><code>frompointer(t: \"bool *\") -&gt; \"bool_pointer *\"</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#short_pointer","title":"short_pointer","text":"<ul> <li><code>assign(self, value: \"short\") -&gt; \"void\"</code></li> <li><code>value(self) -&gt; \"short\"</code></li> <li><code>cast(self) -&gt; \"short *\"</code></li> <li><code>frompointer(t: \"short *\") -&gt; \"short_pointer *\"</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#char_pointer","title":"char_pointer","text":"<ul> <li><code>assign(self, value: \"char\") -&gt; \"void\"</code></li> <li><code>value(self) -&gt; \"char\"</code></li> <li><code>cast(self) -&gt; \"char *\"</code></li> <li><code>frompointer(t: \"char *\") -&gt; \"char_pointer *\"</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#sel_pointer","title":"sel_pointer","text":"<ul> <li><code>assign(self, value: \"sel_t\") -&gt; \"void\"</code></li> <li><code>value(self) -&gt; \"sel_t\"</code></li> <li><code>cast(self) -&gt; \"sel_t *\"</code></li> <li><code>frompointer(t: \"sel_t *\") -&gt; \"sel_pointer *\"</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#asize_pointer","title":"asize_pointer","text":"<ul> <li><code>assign(self, value: \"asize_t\") -&gt; \"void\"</code></li> <li><code>value(self) -&gt; \"asize_t\"</code></li> <li><code>cast(self) -&gt; \"asize_t *\"</code></li> <li><code>frompointer(t: \"asize_t *\") -&gt; \"asize_pointer *\"</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#adiff_pointer","title":"adiff_pointer","text":"<ul> <li><code>assign(self, value: \"adiff_t\") -&gt; \"void\"</code></li> <li><code>value(self) -&gt; \"adiff_t\"</code></li> <li><code>cast(self) -&gt; \"adiff_t *\"</code></li> <li><code>from_pointer(t: \"adiff_t*\") -&gt; \"adiff_pointer *\"</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#uval_pointer","title":"uval_pointer","text":"<ul> <li><code>assign(self, value: \"uval_t\") -&gt; \"void\"</code></li> <li><code>value(self) -&gt; \"uval_t\"</code></li> <li><code>cast(self) -&gt; \"uval_t *\"</code></li> <li><code>frompointer(t: \"uval_t *\") -&gt; \"uval_pointer *\"</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#ea32_pointer","title":"ea32_pointer","text":"<ul> <li><code>assign(self, value: \"ea32_t\") -&gt; \"void\"</code></li> <li><code>value(self) -&gt; \"ea32_t\"</code></li> <li><code>cast(self) -&gt; \"ea32_t *\"</code></li> <li><code>frompointer(t: \"ea32_t *\") -&gt; \"ea32_pointer *\"</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#ea64_pointer","title":"ea64_pointer","text":"<ul> <li><code>assign(self, value: \"ea64_t\") -&gt; \"void\"</code></li> <li><code>value(self) -&gt; \"ea64_t\"</code></li> <li><code>cast(self) -&gt; \"ea64_t *\"</code></li> <li><code>frompointer(t: \"ea64_t *\") -&gt; \"ea64_pointer *\"</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#flags_pointer","title":"flags_pointer","text":"<ul> <li><code>assign(self, value: \"flags_t\") -&gt; \"void\"</code></li> <li><code>value(self) -&gt; \"flags_t\"</code></li> <li><code>cast(self) -&gt; \"flags_t *\"</code></li> <li><code>frompointer(t: \"flags_t *\") -&gt; \"flags_pointer *\"</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#flags64_pointer","title":"flags64_pointer","text":"<ul> <li><code>assign(self, value: \"flags64_t\") -&gt; \"void\"</code></li> <li><code>value(self) -&gt; \"flags64_t\"</code></li> <li><code>cast(self) -&gt; \"flags64_t *\"</code></li> <li><code>frompointer(t: \"flags64_t *\") -&gt; \"flags64_pointer *\"</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#tid_pointer","title":"tid_pointer","text":"<ul> <li><code>assign(self, value: \"tid_t\") -&gt; \"void\"</code></li> <li><code>value(self) -&gt; \"tid_t\"</code></li> <li><code>cast(self) -&gt; \"tid_t *\"</code></li> <li><code>frompointer(t: \"tid_t *\") -&gt; \"tid_pointer *\"</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#added-functions_7","title":"Added functions","text":"<ul> <li><code>get_login_name() -&gt; \"qstring *\"</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#ida_regfinder","title":"ida_regfinder","text":""},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#removed-functions_15","title":"Removed functions","text":"<ul> <li><code>reg_value_info_t_make_dead_end</code></li> <li><code>reg_value_info_t_make_aborted</code></li> <li><code>reg_value_info_t_make_badinsn</code></li> <li><code>reg_value_info_t_make_unkinsn</code></li> <li><code>reg_value_info_t_make_unkfunc</code></li> <li><code>reg_value_info_t_make_unkloop</code></li> <li><code>reg_value_info_t_make_unkmult</code></li> <li><code>reg_value_info_t_make_num</code></li> <li><code>reg_value_info_t_make_initial_sp</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#modified-functions_5","title":"Modified functions","text":"8.4 9.0 <code>invalidate_regfinder_cache(ea: \"ea_t\") -&gt; \"void\"</code> <code>invalidate_regfinder_cache(from=BADADDR: \"ea_t\", to=BADADDR: \"ea_t\") -&gt; \"void\"</code>"},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#added-methods_5","title":"Added methods","text":""},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#reg_value_info_t","title":"reg_value_info_t","text":"<ul> <li><code>movt(self, r: \"reg_value_info_t\", insn: \"insn_t const &amp;\") -&gt; \"void\"</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#ida_registry","title":"ida_registry","text":""},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#removed-functions_16","title":"Removed functions","text":"<ul> <li><code>reg_load</code></li> <li><code>reg_flush</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#ida_search","title":"ida_search","text":""},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#removed-functions_17","title":"Removed functions","text":"<ul> <li><code>find_binary</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#ida_ua","title":"ida_ua","text":""},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#removed-function","title":"Removed Function","text":"<ul> <li><code>construct_macro(insn: \"insn_t *\", enable: \"bool\", build_macro: \"PyObject *\") -&gt; bool (See [Modified functions](#modified-functions-4))</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#modified-functions_6","title":"Modified functions","text":"8.4 9.0 <code>construct_macro2(_this: \"macro_constructor_t *\", insn: \"insn_t *\", enable: \"bool\") -&gt; \"bool\"</code> <code>construct_macro(_this: \"macro_constructor_t *\", insn: \"insn_t *\", enable: \"bool\") -&gt; \"bool\"</code>"},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#added-methods_6","title":"Added methods","text":""},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#macro_constructor_t","title":"macro_constructor_t","text":"<ul> <li><code>construct_macro(self, insn: \"insn_t\", enable: \"bool\") -&gt; \"bool\"</code></li> </ul>"},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#idautils","title":"idautils","text":""},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#modified-functions_7","title":"Modified functions","text":"8.4 9.0 <code>Structs() -&gt; [(idx, sid, name)]</code> <code>Structs() -&gt; [(ordinal, sid, name)]</code> <code>StructMembers(sid) -&gt; [(offset, name, size)]</code> <code>StructMembers(sid) -&gt; [(offset_in_bytes, name, size_in_bytes)]</code>"},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#idb-events","title":"IDB events","text":"<p>The following table provide a list of IDB events that have been replaced or, in some cases, removed.</p> Since 7 In 9.0 <code>truc_created</code> <code>local_types_changed</code> <code>deleting_struc</code> none <code>struc_deleted</code> <code>local_types_changed</code> <code>changing_struc_align</code> none <code>struc_align_changed</code> <code>local_types_changed</code> <code>renaming_struc</code> none <code>struc_renamed</code> <code>local_types_changed</code> <code>expanding_struc</code> none <code>struc_expanded</code> <code>lt_udt_expanded, frame_expanded, local_types_changed</code> <code>struc_member_created</code> <code>lt_udm_created, frame_udm_created, local_types_changed</code> <code>deleting_struc_member</code> none <code>struc_member_deleted</code> <code>lt_udm_deleted, frame_udm_deleted, local_types_changed</code> <code>renaming_struc_member</code> none <code>struc_member_renamed</code> <code>lt_udm_renamed, frame_udm_renamed, local_types_changed</code> <code>changing_struc_member</code> none <code>struc_member_changed</code> <code>lt_udm_changed, frame_udm_changed, local_types_changed</code> <code>changing_struc_cmt</code> none <code>struc_cmt_changed</code> <code>local_types_changed</code> <code>enum_created</code> <code>local_types_changed</code> <code>deleting_enum</code> none <code>enum_deleted</code> <code>local_types_changed</code> <code>renaming_enum</code> none <code>enum_renamed</code> <code>local_types_changed</code> <code>changing_enum_bf</code> <code>local_types_changed</code> <code>enum_bf_changed</code> <code>local_types_changed</code> <code>changing_enum_cmt</code> none <code>enum_cmt_changed</code> <code>local_types_changed</code> <code>enum_member_created</code> <code>local_types_changed</code> <code>deleting_enum_member</code> none <code>enum_member_deleted</code> <code>local_types_changed</code> <code>enum_width_changed</code> <code>local_types_changed</code> <code>enum_flag_changed</code> <code>local_types_changed</code> <code>enum_ordinal_changed</code> `none"},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#type-information-error-codes","title":"Type information error codes","text":"<p>Following is the list of error values returned by the type info module. It can also be found in <code>typeinf.hpp</code> in the IDASDK:</p> Error name Val. Meaning TERR_OK 0 ok TERR_STABLE 1 it means no errors occurred but nothing has changed (this code is internal: should never be returned to caller) -* TERR_SAVE_ERROR -1 failed to save TERR_SERIALIZE -2 failed to serialize TERR_BAD_NAME -3 name is not acceptable TERR_BAD_ARG -4 bad argument TERR_BAD_TYPE -5 bad type TERR_BAD_SIZE -6 bad size TERR_BAD_INDEX -7 bad index TERR_BAD_ARRAY -8 arrays are forbidden as function arguments TERR_BAD_BF -9 bitfields are forbidden as function arguments TERR_BAD_OFFSET -10 bad member offset TERR_BAD_UNIVAR -11 unions cannot have variable sized members TERR_BAD_VARLAST -12 variable sized member must be the last member in the structure TERR_OVERLAP -13 the member overlaps with other members that cannot be deleted TERR_BAD_SUBTYPE -14 recursive structure nesting is forbidden TERR_BAD_VALUE -15 value is not acceptable TERR_NO_BMASK -16 bitmask is not found TERR_BAD_BMASK -17 Bad enum member mask. The specified mask should not intersect with any existing mask in the enum. Zero masks are prohibited too TERR_BAD_MSKVAL -18 bad bmask and value combination TERR_BAD_REPR -19 bad or incompatible field representation TERR_GRP_NOEMPTY -20 could not delete group mask for not empty group TERR_DUPNAME -21 duplicate name TERR_UNION_BF -22 unions cannot have bitfields TERR_BAD_TAH -23 bad bits in the type attributes (TAH bits) TERR_BAD_BASE -24 bad base class TERR_BAD_GAP -25 bad gap TERR_NESTED -26 recursive structure nesting is forbidden TERR_NOT_COMPAT -27 the new type is not compatible with the old type TERR_BAD_LAYOUT -28 failed to calculate the structure/union layout TERR_BAD_GROUPS -29 bad group sizes for bitmask enum TERR_BAD_SERIAL -30 enum value has too many serials TERR_ALIEN_NAME -31 enum member name is used in another enum TERR_STOCK -32 stock type info cannot be modified TERR_ENUM_SIZE -33 bad enum size TERR_NOT_IMPL -34 not implemented TERR_TYPE_WORSE -35 the new type is worse than the old type TERR_BAD_FX_SIZE -36 cannot extend struct beyond fixed size"},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#alternative-examples","title":"Alternative examples","text":"<p>This section gives examples of how to port some ida_struct and ida_enum functions using ida_typeinf.</p>"},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#del_struct_members","title":"del_struct_members","text":"<p>The following code can be used as an example of how to replace ida_struct.del_struct_members.</p> <pre><code>def del_struct_members(sid, offset1, offset2):\n    tif = ida_typeinf.tinfo_t()\n    if tif.get_type_by_tid(sid) and tif.is_udt():\n        udm = ida_typeinf.udm_t()\n        udm.offset = offset1 * 8\n        idx1 = tif.find_udm(udm, ida_typeinf.STRMEM_OFFSET)\n        udm = ida_typeinf.udm_t()\n        udm.offset = offset2 * 8\n        idx2 = tif.find_udm(udm, ida_typeinf.STRMEM_OFFSET)\n        return tif.del_udms(idx1, idx2)\n</code></pre>"},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#get_member_by_fullname","title":"get_member_by_fullname","text":"<p>The following code can be used as an example of how to replace ida_struct.get_member_by_fullname.</p> <pre><code>def get_member_by_fullname(fullname):\n    udm = ida_typeinf.udm_t()\n    idx = ida_typeinf.get_udm_by_fullname(udm, fullname)\n    if  idx == -1:\n        return None\n    else:\n        return udm\n</code></pre>"},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#get_struc_qty","title":"get_struc_qty","text":"<p>The following code can be used as an example of how to replace ida_struct.get_struc_qty.</p> <pre><code>def get_struc_qty():\n    count = 0\n    limit = ida_typeinf.get_ordinal_limit()\n    for i in range(1, limit):\n        tif = ida_typeinf.tinfo_t()\n        if not tif.get_numbered_type(i, ida_typeinf.BTF_STRUCT):\n            continue\n        else:\n            count += 1\n    return count\n</code></pre>"},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#is_special_member","title":"is_special_member","text":"<p>The following code can be used as an example of how to replace ida_struct.is_special_member.</p> <pre><code>def is_special_member(member_id):\n    tif = ida_typeing.tinfo_t()\n    udm = ida_typeinf.udm_t()\n    if tif.get_udm_by_tid(udm, member_id) != -1:\n        return udm.is_special_member()\n    return False\n</code></pre>"},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#get_sptr","title":"get_sptr","text":"<p>The following code can be used as an example of how to replace ida_struct.get_sptr.</p> <pre><code>def get_sptr(udm):\n    tif = udm.type\n    if tif.is_udt() and tif.is_struct():\n        return tif\n    else:\n        return None\n</code></pre>"},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#how-to-examples","title":"How to examples","text":""},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#list-structure-members","title":"List structure members","text":""},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#example-1","title":"Example 1","text":"<pre><code>def list_enum_members(name)\n    tid = idc.get_struc_id(name)\n    if not tid == ida_idaapi.BADADDR:\n        for (offset, name, size) in idautils.StructMembers(tid):\n            print(f'Member {name} at offset {offset} of size {size}')\n</code></pre>"},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#example-2","title":"Example 2","text":"<pre><code>def list_struct_members2(name):\n    til = ida_typeinf.get_idati()\n    tif = ida_typeinf.tinfo_t()\n    if not tif.get_named_type(til, name, ida_typeinf.BTF_STRUCT, True, False):\n        print(f\"'{name}' is not a structure\")\n    elif  tif.is_typedef():\n        print(f\"'{name}' is not a (non typedefed) structure.\")\n    else:\n        udt = ida_typeinf.udt_type_data_t()\n        if tif.get_udt_details(udt):\n            idx = 0\n            print(f'Listing the {name} structure {udt.size()} field names:')\n            for udm in udt:\n                print(f'Field {idx}: {udm.name}')\n                idx += 1\n        else:\n            print(f\"Unable to get udt details for structure '{name}'\")\n</code></pre>"},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#list-enum-members","title":"List enum members","text":"<pre><code>def list_enum_members(name):\n    til = ida_typeinf.get_idati()\n    tif = ida_typeinf.tinfo_t()\n    if not tif.get_named_type(til, name, ida_typeinf.BTF_ENUM, True, False):\n        print(f\"'{name}' is not an enum\")\n    elif tif.is_typedef():\n        print(f\"'{name}' is not a (non typedefed) enum.\")\n    else:\n        edt = ida_typeinf.enum_type_data_t()\n        if tif.get_enum_details(edt):\n            idx = 0\n            bitfield = ''\n            if edt.is_bf():\n                bitfield = '(bitfield)'\n            print(f\"Listing the '{name}' {bitfield} enum {edt.size()} field names:\")\n            for edm in edt:\n                print(f'Field {idx}: {edm.name} = {edm.value}')\n                idx += 1\n        else:\n            print(f\"Unable to get udt details for enum '{name}'\")\n</code></pre>"},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#list-frame-information","title":"List frame information","text":"<pre><code>func = ida_funcs.get_func(here())\nif func:\n    func_name = ida_funcs.get_func_name(func.start_ea)\n    frame_tif = ida_typeinf.tinfo_t()\n    if ida_frame.get_func_frame(frame_tif, func):\n        frame_udt = ida_typeinf.udt_type_data_t()\n        if frame_tif.get_udt_details(frame_udt):\n            print('List frame information:')\n            print('-----------------------')\n            print(f'{func_name} @ {func.start_ea:x} framesize {frame_tif.get_size():x}')\n            print(f'Local variable size: {func.frsize:x}')\n            print(f'Saved registers: {func.frregs:x}')\n            print(f'Argument size: {func.argsize:x}')\n            print('{')\n            idx = 0\n            for udm in frame_udt:\n                print(f'\\t[{idx}] {udm.name}: soff={udm.offset//8:x} eof={udm.end()//8:x} {udm.type.dstr()}')\n                idx += 1\n            print('}')\nelse:\n    print(f'{here():x} is not inside a function.')\n</code></pre>"},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#list-stack-variables-xrefs","title":"List stack variables xrefs","text":"<pre><code>func = ida_funcs.get_func(here())\nif func:\n    print(f'Function @ {func.start_ea:x}')\n\n    frame_tif = ida_typeinf.tinfo_t()\n    if ida_frame.get_func_frame(frame_tif, func):\n        print('Frame found')\n        nmembers = frame_tif.get_udt_nmembers()\n        print(f'Frame has {nmembers} members')\n\n        if nmembers &gt; 0:\n            frame_udt = ida_typeinf.udt_type_data_t()\n            if frame_tif.get_udt_details(frame_udt):\n\n                for frame_udm in frame_udt:\n                    start_off = frame_udm.begin() // 8\n                    end_off = frame_udm.end() // 8\n                    xreflist = ida_frame.xreflist_t()\n                    ida_frame.build_stkvar_xrefs(xreflist, func, start_off, end_off)\n                    size = xreflist.size()\n                    print(f'{frame_udm.name} stack variable starts @ {start_off:x}, ends @ {end_off:x}, xref size: {size}')\n\n                    for idx in range(size):\n                        match xreflist[idx].type:\n                            case ida_xref.dr_R:\n                                type = 'READ'\n                            case ida_xref.dr_W:\n                                type = 'WRITE'\n                            case _:\n                                type = 'UNK'\n                        print(f'\\t[{idx}]: xref @ {xreflist[idx].ea:x} of type {type}')\n            else:\n                print('Unable to get the frame details.')\n        else:\n            print('No members found.')\nelse:\n    print('No function under the cursor')\n</code></pre>"},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#create-a-structure-with-parsing","title":"Create a structure with parsing","text":"<pre><code>struct_str = \"\"\"struct pcap_hdr_s {\n        uint32_t magic_number;   /* magic number */\n        uint16_t version_major;  /* major version number */\n        uint16_t version_minor;  /* minor version number */\n        int32_t  thiszone;       /* GMT to local correction */\n        uint32_t sigfigs;        /* accuracy of timestamps */\n        uint32_t snaplen;        /* max length of captured packets, in octets */\n        uint32_t network;        /* data link type */\n};\"\"\"\ntif = ida_typeinf.tinfo_t()\nif tif.get_named_type(None, 'pcap_hdr_s'):\n    ida_typeinf.del_named_type(None, 'pcap_hdr_s', ida_typeinf.NTF_TYPE)\nida_typeinf.idc_parse_types(struct_str, 0)\nif not tif.get_named_type(None, 'pcap_hdr_s'):\n    print('Unable to retrieve pcap_hdr_s structure')\n</code></pre>"},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#create-a-structure-member-by-member","title":"Create a structure member by member","text":"<pre><code>tif = ida_typeinf.tinfo_t()\nif tif.get_named_type(None, 'pcaprec_hdr_s'):\n    ida_typeinf.del_named_type(None, 'pcaprec_hdr_s', ida_typeinf.NTF_TYPE)\nfield_list = [('ts_sec', ida_typeinf.BTF_UINT32),\n             ('ts_usec', ida_typeinf.BTF_UINT32),\n             ('incl_len', ida_typeinf.BTF_UINT32),\n             ('orig_len', ida_typeinf.BTF_UINT32)]\nudt = ida_typeinf.udt_type_data_t()\nudm = ida_typeinf.udm_t()\nfor (name, type) in field_list:\n    udm.name = name\n    udm.type = ida_typeinf.tinfo_t(type)\n    udt.push_back(udm)\nif tif.create_udt(udt):\n    tif.set_named_type(None, 'pcaprec_hdr_s')\n\n</code></pre>"},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#create-a-union-member-by-member","title":"Create a union member by member","text":"<pre><code>tif = ida_typeinf.tinfo_t()\nif tif.get_named_type(None, 'my_union'):\n    ida_typeinf.del_named_type(None, 'my_union', ida_typeinf.NTF_TYPE)\ntif = ida_typeinf.tinfo_t()\nudt = ida_typeinf.udt_type_data_t()\nfield_list = [('member1', ida_typeinf.BTF_INT32),\n              ('member2', ida_typeinf.BTF_CHAR),\n              ('member3', ida_typeinf.BTF_FLOAT)]\nudt.is_union = True\nudm = ida_typeinf.udm_t()\nfor (name, type) in field_list:\n    udm.name = name\n    udm.type = ida_typeinf.tinfo_t(type)\n    udt.push_back(udm)\ntif.get_named_type(None, 'pcap_hdr_s')\nif tif.create_ptr(tif):\n    udm.name = 'header_ptr'\n    udm.type = tif\n    udt.push_back(udm)\n    tif.clear()\n    tif.create_udt(udt, ida_typeinf.BTF_UNION)\n    tif.set_named_type(None, 'my_union')\n</code></pre>"},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#create-a-bitmask-enum","title":"Create a bitmask enum","text":"<pre><code>edt = ida_typeinf.enum_type_data_t()\nedm = ida_typeinf.edm_t()\nfor name, value in [('field1', 1), ('field2', 2), ('field3', 4)]:\n    edm.name = name\n    edm.value = value\n    edt.push_back(edm)\n\ntif = ida_typeinf.tinfo_t()\nif tif.create_enum(edt):\n    tif.set_enum_is_bitmask(ida_typeinf.tinfo_t.ENUMBM_ON)\n    tif.set_named_type(None, 'bmenum')\n</code></pre>"},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#create-an-array","title":"Create an array","text":""},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#example-1_1","title":"Example 1","text":"<pre><code>tif = ida_typeinf.tinfo_t(ida_typeinf.BTF_INT)\nif tif.create_array(tif, 5, 0):\n    type = tif._print()\n    tif.set_named_type(None, 'my_int_array1')\n</code></pre>"},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#example-2_1","title":"Example 2","text":"<pre><code>atd = ida_typeinf.array_type_data_t()\natd.base = 0\natd.nelems = 5\natd.elem_type = ida_typeinf.tinfo_t(ida_typeinf.BTF_INT)\ntif = ida_typeinf.tinfo_t()\nif tif.create_array(atd):\n    type = tif._print()\n    tif.set_named_type(None, 'my_int_array2')\n</code></pre>"},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#log-local-type-events","title":"Log local type events","text":"<pre><code>class lt_logger_hooks_t(ida_idp.IDB_Hooks):\n    def __init__(self):\n        ida_idp.IDB_Hooks.__init__(self)\n        self.inhibit_log = 0\n\n    def _format_value(self, v):\n        return str(v)\n\n    def _log(self, msg=None):\n        if self.inhibit_log &lt;= 0:\n            if msg:\n                print(f'&gt;&gt;&gt; lt_logger_hooks_f: {msg}')\n            else:\n                stack = inspect.stack()\n                frame, _, _, _, _, _ = stack[1]\n                args, _, _, values = inspect.getargvalues(frame)\n                method_name = inspect.getframeinfo(frame)[2]\n                argstrs = []\n                for arg in args[1:]:\n                    argstrs.append(\"%s=%s\" % (arg, self._format_value(values[arg])))\n                print(f'&gt;&gt;&gt; lt_logger_hooks_t.{method_name}: {\", \".join(args)}')\n        return 0\n\n    def lt_udm_created(self, udtname, udm):\n        msg = f'UDM {udm.name} has been created in UDT {udtname}'\n        return self._log(msg)\n\n    def lt_udm_deleted(self, udtname, udm_tid):\n        msg = f'UDM tid {udm_tid:x} has been deleted from {udtname}'\n        return self._log(msg)\n\n    def lt_udm_renamed(self, udtname, udm, oldname):\n        msg = f'UDM {oldname} from UDT {udtname} has been renamed to {udm.name}'\n        return self._log(msg)\n\n    def lt_udm_changed(self, udtname, udm_tid, udmold, udmnew):\n        return self._log()\n\n\n\n# Remove an existing hook on second run\ntry:\n    idp_hook_stat = \"un\"\n    print(\"Local type IDB hook: checking for hook...\")\n    lthook\n    print(\"Local type IDB hook: unhooking....\")\n    idp_hook_stat2 = \"\"\n    lthook.unhook()\n    del lthook\nexcept:\n    print(\"local type IDB hook: not installed, installing now....\")\n    idp_hook_stat = \"\"\n    idp_hook_stat2 = \"un\"\n    lthook = lt_logger_hooks_t()\n    lthook.hook()\n\nprint(f'Local type IDB hook {idp_hook_stat}installed. Run the script again to {idp_hook_stat2}install')\n</code></pre>"},{"location":"developer-guide/idapython/idapython-porting-guide-ida-9.html#log-frame-events","title":"Log frame events","text":"<pre><code>class frame_logger_hooks_t(ida_idp.IDB_Hooks):\n    def __init__(self):\n        ida_idp.IDB_Hooks.__init__(self)\n        self.inhibit_log = 0\n\n    def _format_value(self, v):\n        return str(v)\n\n    def _log(self, msg=None):\n        if self.inhibit_log &lt;= 0:\n            if msg:\n                print(f'&gt;&gt;&gt; frame_logger_hooks_f: {msg}')\n            else:\n                stack = inspect.stack()\n                frame, _, _, _, _, _ = stack[1]\n                args, _, _, values = inspect.getargvalues(frame)\n                method_name = inspect.getframeinfo(frame)[2]\n                argstrs = []\n                for arg in args[1:]:\n                    argstrs.append(\"%s=%s\" % (arg, self._format_value(values[arg])))\n                print(f'&gt;&gt;&gt; frame_logger_hooks_t.{method_name}: {\", \".join(args)}')\n        return 0\n\n    def frame_udm_created(self, func_ea, udm):\n        return self._log()\n\n    def frame_udm_deleted(self, func_ea, udm_tid, udm):\n        return self._log()\n\n    def frame_udm_renamed(self, func_ea, udm, oldname):\n        return self._log()\n\n    def frame_udm_changed(self, func_ea, udm_tid, udmold, udmnew):\n        return self._log()\n\n\n\n# Remove an existing hook on second run\ntry:\n    frame_idp_hook_stat = \"un\"\n    print(\"Frame IDP hook: checking for hook...\")\n    framehook\n    print(\"Frame IDP hook: unhooking....\")\n    frame_idp_hook_stat2 = \"\"\n    framehook.unhook()\n    del framehook\nexcept:\n    print(\"Frame IDP hook: not installed, installing now....\")\n    frame_idp_hook_stat = \"\"\n    frame_idp_hook_stat2 = \"un\"\n    framehook = frame_logger_hooks_t()\n    framehook.hook()\n\nprint(f'Frame IDB hook {frame_idp_hook_stat}installed. Run the script again to {frame_idp_hook_stat2}install')\n</code></pre>"},{"location":"developer-guide/idapython/migration-guides.html","title":"Migration guides","text":"<p>Find our IDAPython migration guides to smoothly transition from previous IDA versions to the latest one.</p>"},{"location":"developer-guide/idapython/migration-guides.html#migration-guides-from-ida-84-to-ida-90","title":"Migration guides from IDA 8.4 to IDA 9.0","text":"<p>IDAPython Porting Guide</p>"},{"location":"developer-guide/idc/core-concepts.html","title":"Core concepts","text":"<p>IDC language is a C-like language. It has the same lexical tokens as C does: character set, constants, identifiers, keywords, etc. However, since it is a scripting language, there are no pointers, and all variable types can be handled by the interpreter. Any variable may hold any value; variables are declared without specifying their type;</p> <p>auto myvar;</p> <p>An IDC program consists of function declarations. By default, execution starts from a function named 'main'.</p> <p>Select a topic to read:</p> <ul> <li>Variables</li> <li>Functions</li> <li>Statements</li> <li>Expressions</li> <li>Predefined symbols</li> <li>Slices</li> <li>Exceptions</li> <li>Index of IDC functions</li> <li>Index of debugger related IDC functions</li> </ul>"},{"location":"developer-guide/idc/idc-examples.html","title":"IDC examples","text":"<p>The following examples demonstrate the usage of native IDA scripting language in more complex scripts. Our selection illustrates how IDC can help you automate everyday tasks and speed up your learning efforts while learning IDC scripting. </p>"},{"location":"developer-guide/idc/idc-examples.html#where-can-i-find-all-the-examples","title":"Where can I find all the examples?","text":"<p>The full library of our examples is shipped with your IDA instance in the <code>idc</code> folder.</p>"},{"location":"developer-guide/idc/idc-examples.html#before-you-start","title":"Before you start","text":"<p>Some of the examples shows below used an imports another scripts, like <code>idc.idc</code>: the file that contains IDA built-in function declarations and internal bit definitions. It is recommend to check the <code>idc</code> folder for all sample scripts.</p>"},{"location":"developer-guide/idc/idc-examples.html#how-to-run-the-examples","title":"How to run the examples?","text":""},{"location":"developer-guide/idc/idc-examples.html#load-the-script-via-file-loader","title":"Load the script via File Loader","text":"<ol> <li>Navigate to File -&gt; Script file...</li> <li>In the new dialog, select the <code>.idc</code> script you want to run and click Open.</li> </ol>"},{"location":"developer-guide/idc/idc-examples.html#load-the-script-via-script-command","title":"Load the script via Script command","text":"<ol> <li>Navigate to File -&gt; Script command....</li> <li>Change the scripting language to IDC.</li> <li>Paste the code into Please enter script body field and click Run.</li> </ol>"},{"location":"developer-guide/idc/idc-examples.html#sample-scripts","title":"Sample scripts","text":"<p>You can also find the scripts below in the <code>idc</code> folder inside your IDA directory.</p>"},{"location":"developer-guide/idc/idc-examples.html#analysis","title":"analysis","text":"<p>Sample IDC program to automate IDA.</p> <pre><code>//\n// Sample IDC program to automate IDA.\n//\n// IDA can be run from the command line in the batch (non-interactive) mode.\n//\n// If IDA is started with\n//\n//         ida -A -Sanalysis.idc file\n//\n// then this IDC file will be executed. It performs the following:\n//\n//   - analyzes the input file\n//   - creates the output file\n//   - exits to the operating system\n//\n// Feel free to modify this file as you wish\n// (or write your own script/plugin to automate IDA)\n//\n// Since the script calls the qexit() function at the end,\n// it can be used in the batch files (use text mode idat)\n//\n// NB: \"ida -B file\" is a shortcut for the command line above\n//\n\n#include &lt;idc.idc&gt;\n\nstatic main()\n{\n  // turn on coagulation of data in the final pass of analysis\n  set_inf_attr(INF_AF, get_inf_attr(INF_AF) | AF_DODATA | AF_FINAL);\n  // .. and plan the entire address space for the final pass\n  auto_mark_range(0, BADADDR, AU_FINAL);\n\n  msg(\"Waiting for the end of the auto analysis...\\n\");\n  auto_wait();\n\n  msg(\"\\n\\n------ Creating the output file.... --------\\n\");\n  auto file = get_idb_path()[0:-4] + \".asm\";\n\n  auto fhandle = fopen(file, \"w\");\n  gen_file(OFILE_ASM, fhandle, 0, BADADDR, 0); // create the assembler file\n  msg(\"All done, exiting...\\n\");\n\n  // the following line instructs IDA to quit without saving the database\n  // process_config_directive(\"ABANDON_DATABASE=YES\");\n\n  qexit(0); // exit to OS, error code 0 - success\n}\n</code></pre>"},{"location":"developer-guide/idc/idc-examples.html#arraytst","title":"arraytst","text":"<p>Sample demonstration on how to use array manipulation functions.</p> <pre><code>//\n//      This example shows how to use array manipulation functions.\n//\n\n#include &lt;idc.idc&gt;\n\n#define MAXIDX  100\n\nstatic main() {\n  auto id,idx,code;\n\n  id = create_array(\"my array\");\n  if ( id == -1 ) {\n    warning(\"Can't create array!\");\n  } else {\n\n    msg(\"Filling array of longs...\\n\");\n    for ( idx=0; idx &lt; MAXIDX; idx=idx+10 )\n      set_array_long(id,idx,2*idx);\n\n    msg(\"Displaying array of longs...\\n\");\n    for ( idx=get_first_index(AR_LONG,id);\n          idx != -1;\n          idx=get_next_index(AR_LONG,id,idx) )\n      msg(\"%d: %d\\n\",idx,get_array_element(AR_LONG,id,idx));\n\n    msg(\"Filling array of strings...\\n\");\n    for ( idx=0; idx &lt; MAXIDX; idx=idx+10 )\n      set_array_string(id, idx, sprintf(\"This is %d-th element of array\", idx));\n\n    msg(\"Displaying array of strings...\\n\");\n    for ( idx=0; idx &lt; MAXIDX; idx=idx+10 )\n      msg(\"%d: %s\\n\",idx,get_array_element(AR_STR,id,idx));\n\n  }\n\n}\n</code></pre>"},{"location":"developer-guide/idc/idc-examples.html#bds","title":"bds","text":"<p>Sample executed when IDA detects Delphi 6-7 or BDS.</p> <pre><code>//\n// This file is executed when IDA detects Delphi6-7 or BDS2005-BDS2006\n// invoked from pe_bds.pat\n//\n// Feel free to modify this file as you wish.\n//\n\n#include &lt;idc.idc&gt;\n\nstatic main()\n{\n  // Set Delphi-Style string\n  //set_inf_attr(INF_STRTYPE,STRTYPE_LEN4);\n\n  // Set demangled names to display\n  //set_inf_attr(INF_DEMNAMES,DEMNAM_NAME);\n\n  // Set compiler to Borland\n  set_inf_attr(INF_COMPILER, COMP_BC);\n}\n\n\n// Add old borland signatures\nstatic bor32(ea)\n{\n  AddPlannedSig(\"bh32rw32\");\n  AddPlannedSig(\"b32vcl\");\n  SetOptionalSigs(\"bdsext/bh32cls/bh32owl/bh32ocf/b5132mfc/bh32dbe/b532cgw\");\n  return ea;\n}\n\n// Add latest version of Borland Cbuilder (Embarcadero)\nstatic emb(ea)\n{\n  AddPlannedSig(\"bds8rw32\");\n  AddPlannedSig(\"bds8vcl\");\n  SetOptionalSigs(\"bdsboost/bds8ext\");\n  return ea;\n}\n\nstatic has_Emb(ea)\n{\n  ea = ea &amp; 0xFFFFFFFF;\n  return ea+2 &lt; 0xFFFFFFFF\n      &amp;&amp; get_wide_byte(ea    ) == 'E'\n      &amp;&amp; get_wide_byte(ea + 1) == 'm'\n      &amp;&amp; get_wide_byte(ea + 2) == 'b';\n}\n\n// Detect the latest version of Borland Cbuilder (Embarcadero)\nstatic detect(ea)\n{\n  // Use version string to detect which signatures to use. Both bds08\n  // and bds10 (up to xe10) have two null bytes after the string we are\n  // testing for, which comes immediately before the argument ea.\n  //\n  // bds06: Borland C++ - Copyright 2005 Borland Corporation\n  // bds08: CodeGear C++ - Copyright 2008 Embarcadero Technologies\n  // bds10: Embarcadero RAD Studio - Copyright 2009 Embarcadero Technologies, Inc.\n\n  if ( has_Emb(ea-0x1A) || has_Emb(ea-0x20) )\n  {\n    ResetPlannedSigs();\n    emb(ea);\n  }\n  return ea;\n}\n\n</code></pre>"},{"location":"developer-guide/idc/idc-examples.html#biosdata","title":"biosdata","text":"<p>Sample that makes comments to BIOS data area.</p> <pre><code>//\n//      This script creates a segment at paragraph 0x40 and\n//      makes comments to BIOS data area. To see mnemonical names of\n//      BIOS data area variables, please use this file:\n//\n//        - press F2 when running IDA\n//        - select this file\n//\n\n#include &lt;idc.idc&gt;\n\n//-------------------------------------------------------------------------\nstatic CW(off,name,cmt) {\n  auto x;\n  x = 0x400 + off;\n  create_word(x);\n  set_name(x,name);\n  set_cmt(x,cmt, 1);\n}\n\n//-------------------------------------------------------------------------\nstatic CD(off,name,cmt) {\n  auto x;\n  x = 0x400 + off;\n  create_dword(x);\n  set_name(x,name);\n  set_cmt(x,cmt, 1);\n}\n\n//-------------------------------------------------------------------------\nstatic CB(off,name,cmt) {\n  auto x;\n  x = 0x400 + off;\n  create_byte(x);\n  set_name(x,name);\n  set_cmt(x,cmt, 1);\n}\n\n//-------------------------------------------------------------------------\nstatic CmtBdata() {\n CW(0x000,\"com_port_1\",\"Base I/O address of 1st serial I/O port\");\n CW(0x002,\"com_port_2\",\"Base I/O address of 2nd serial I/O port\");\n CW(0x004,\"com_port_3\",\"Base I/O address of 3rd serial I/O port\");\n CW(0x006,\"com_port_4\",\"Base I/O address of 4th serial I/O port\");\n\n CW(0x008,\"prn_port_1\",\"Base I/O address of 1st parallel I/O port\");\n CW(0x00A,\"prn_port_2\",\"Base I/O address of 2nd parallel I/O port\");\n CW(0x00C,\"prn_port_3\",\"Base I/O address of 3rd parallel I/O port\");\n CW(0x00E,\"prn_port_4\",\"Base I/O address of 4th parallel I/O port\");\n\n CW(0x010,\"equip_bits\",         \"Equipment installed info bits\\n\"\n                                \"15  14  13   12   11  10   9   8\\n\"\n                                \"\\\\    /      game  \\\\       /\\n\"\n                                \"# of print  port  # of RS-232\\n\"\n                                \"ports 0-3   used   ports 0-4\\n\"\n                                \"\\n\"\n                                \"7   6    5    4    3   2   1   0\\n\"\n                                \"\\\\   /    \\\\    /    \\\\   / Math  |\\n\"\n                                \"# of   video mode  RAM    uP  no\\n\"\n                                \"disk-  at boot up  00=16K    dsk\\n\"\n                                \"ettes  00=EGA/VGA  01=32K   driv\\n\"\n                                \" 1-4   01=CGA-40   10=48K   if 0\\n\"\n                                \"if bit 10=CGA-80   11=64K\\n\"\n                                \"0 = 1  11=MDA-80   (old PCs)\\n\"\n                                \"\\n\"\n                                \"Note: bit 13=modem on PC lap-tops\\n\"\n                                \"      bit 2=mouse on MCA &amp; others\");\n\n CB(0x012,\"manufactr_test\",     \"Manufacturing Test get_wide_byte\\n\"\n                                \"bit 0 = 1 while in test mode\\n\"\n                                \"MCA systems use other bits\\n\"\n                                \"  during POST operations\");\n CW(0x013,\"base_ram_size\",      \"Base memory size in KBytes (0-640)\");\n\n CB(0x015,\"mtest_scratchpad\",   \"[AT] {Manufacturing test scratch pad}\\n\"\n                                \"[Compaq Deskpro 386] previous scan code\");\n CB(0x016,\"error_codes\",        \"[AT] {Manufacturing test scratch pad}\\n\"\n                                \"[PS/2 Mod 30] {BIOS control flags}\\n\"\n                                \"[Compaq Deskpro 386] keyclick loudness (00h-7Fh)\");\n CB(0x017,\"keybd_flags_1\",      \"Keyboard flag bits\\n\"\n                                \"  7   6   5   4    3   2   1   0\\n\"\n                                \"ins- cap num scrl alt ctl lef rig\\n\"\n                                \"sert --toggles--- --shifts down--\");\n CB(0x018,\"keybd_flags_2\",      \"Keyboard flag bits\\n\"\n                                \"   7     6     5     4   \\n\"\n                                \"insert  caps  num  scroll\\n\"\n                                \"------now depressed------\\n\"\n                                \"\\n\"\n                                \"   3     2     1     0\\n\"\n                                \" pause  sys   left right\\n\"\n                                \" lock request -alt-down-\");\n CB(0x019,\"keybd_alt_num\",      \"Alt-nnn keypad workspace\");\n CW(0x01A,\"keybd_q_head\",       \"pointer to next character in keyboard buffer\");\n CW(0x01C,\"keybd_q_tail\",       \"pointer to first free slot in keyboard buffer\");\n CW(0x01E,\"keybd_queue\",        \"Keyboard circular buffer\");\n make_array(0x41E, 16 );\n CB(0x03E,\"dsk_recal_stat\",     \"Recalibrate floppy drive bits\\n\"\n                                \"   3       2       1       0\\n\"\n                                \"drive-3 drive-2 drive-1 drive-0\\n\"\n                                \"\\n\"\n                                \"bit 7 = interrupt flag\");\n CB(0x03F,\"dsk_motor_stat\",     \"Motor running status &amp; disk write\\n\"\n                                \" bit 7=1 disk write in progress\\n\"\n                                \" bits 6&amp;5 = drive selected 0 to 3\\n\"\n                                \"    3       2       1       0\\n\"\n                                \" drive-3 drive-2 drive-1 drive-0\\n\"\n                                \" --------- 1=motor on-----------\");\n CB(0x040,\"dsk_motor_timer\",    \"Motor timer, at 0, turn off motor\");\n CB(0x041,\"dsk_ret_code\",       \"Controller return code\\n\"\n                                \" 00h = ok\\n\"\n                                \" 01h = bad command or parameter\\n\"\n                                \" 02h = can't find address mark\\n\"\n                                \" 03h = can't write, protected dsk\\n\"\n                                \" 04h = sector not found\\n\"\n                                \" 08h = DMA overrun\\n\"\n                                \" 09h = DMA attempt over 64K bound\\n\"\n                                \" 10h = bad CRC on disk read\\n\"\n                                \" 20h = controller failure\\n\"\n                                \" 40h = seek failure\\n\"\n                                \" 80h = timeout, no response\");\n\n CB(0x042,\"dsk_status_1\",       \"Status bytes-disk controller chip\\n\"\n                                \" Note: 7 info bytes returned from\\n\"\n                                \" controller are saved here. Refer\\n\"\n                                \" to the NEC uPD 765 chip manual\\n\"\n                                \" for the specific info, depending\\n\"\n                                \" on the previous command issued.\");\n CB(0x043,\"dsk_status_2\",       \"\");\n CB(0x044,\"dsk_status_3\",       \"\");\n CB(0x045,\"dsk_status_4\",       \"\");\n CB(0x046,\"dsk_status_5\",       \"\");\n CB(0x047,\"dsk_status_6\",       \"\");\n CB(0x048,\"dsk_status_7\",       \"\");\n\n CB(0x049,\"video_mode\",         \"Present display mode\");\n CW(0x04A,\"video_columns\",      \"Number of columns\");\n CW(0x04C,\"video_buf_size\",     \"Video buffer size in bytes\\n\"\n                                \"  Note: size may be rounded up to\\n\"\n                                \"  the nearest 2K boundary.  For\\n\"\n                                \"  example, 80x25 mode=4000 bytes,\\n\"\n                                \"  but value may be 4096.\");\n CW(0x04E,\"video_pageoff\",      \"Video page offset of the active\\n\"\n                                \"  page, from start of current \\n\"\n                                \"  video segment.\");\n CW(0x050,\"vid_curs_pos0\",      \"Cursor position page 0\\n\"\n                                \"  bits 15-8=row, bits 7-0=column\");\n CW(0x052,\"vid_curs_pos1\",      \"Cursor position page 1\\n\"\n                                \"  bits 15-8=row, bits 7-0=column\");\n CW(0x054,\"vid_curs_pos2\",      \"Cursor position page 2\\n\"\n                                \"  bits 15-8=row, bits 7-0=column\");\n CW(0x056,\"vid_curs_pos3\",      \"Cursor position page 3\\n\"\n                                \"  bits 15-8=row, bits 7-0=column\");\n CW(0x058,\"vid_curs_pos4\",      \"Cursor position page 4\\n\"\n                                \"  bits 15-8=row, bits 7-0=column\");\n CW(0x05A,\"vid_curs_pos5\",      \"Cursor position page 5\\n\"\n                                \"  bits 15-8=row, bits 7-0=column\");\n CW(0x05C,\"vid_curs_pos6\",      \"Cursor position page 6\\n\"\n                                \"  bits 15-8=row, bits 7-0=column\");\n CW(0x05E,\"vid_curs_pos7\",      \"Cursor position page 7\\n\"\n                                \"  bits 15-8=row, bits 7-0=column\");\n CW(0x060,\"vid_curs_mode\",      \"Active cursor, start &amp; end lines \\n\"\n                                \"  bits 12 to 8 for starting line\\n\"\n                                \"  bits 4  to 0 for ending line\");\n CB(0x062,\"video_page\",         \"Present page\");\n CW(0x063,\"video_port\",         \"Video controller base I/O address\");\n CB(0x065,\"video_mode_reg\",     \"Hardware mode register bits\");\n CB(0x066,\"video_color\",        \"Color set in CGA modes\");\n CW(0x067,\"gen_use_ptr\",        \"General use offset pointer\");\n CW(0x069,\"gen_use_seg\",        \"General use segment pointer\");\n CB(0x06B,\"gen_int_occurd\",     \"Unused interrupt occurred\\n\"\n                                \"  value holds the IRQ bit 7-0 of\\n\"\n                                \"  the interrupt that occurred\");\n CW(0x06C,\"timer_low\",          \"Timer, low word, cnts every 55 ms\");\n CW(0x06E,\"timer_high\",         \"Timer, high word\");\n CB(0x070,\"timer_rolled\",       \"Timer overflowed, set to 1 when\\n\"\n                                \" more than 24 hours have elapsed\");\n CB(0x071,\"keybd_break\",        \"Bit 7 set if break key depressed\");\n CW(0x072,\"warm_boot_flag\",     \"Boot (reset) type\\n\"\n                                \"  1234h=warm boot, no memory test       \\n\"\n                                \"  4321h=boot &amp; save memory\");\n CB(0x074,\"hdsk_status_1\",      \"Hard disk status\\n\"\n                                \" 00h = ok\\n\"\n                                \" 01h = bad command or parameter\\n\"\n                                \" 02h = can't find address mark\\n\"\n                                \" 03h = can't write, protected dsk\\n\"\n                                \" 04h = sector not found\\n\"\n                                \" 05h = reset failure\\n\"\n                                \" 07h = activity failure\\n\"\n                                \" 08h = DMA overrun\\n\"\n                                \" 09h = DMA attempt over 64K bound\\n\"\n                                \" 0Ah = bad sector flag\\n\"\n                                \" 0Bh = removed bad track\\n\"\n                                \" 0Dh = wrong # of sectors, format\\n\"\n                                \" 0Eh = removed control data addr\\n\"\n                                \"        mark\\n\"\n                                \" 0Fh = out of limit DMA\\n\"\n                                \"        arbitration level\\n\"\n                                \" 10h = bad CRC or ECC, disk read\\n\"\n                                \" 11h = bad ECC corrected data\\n\"\n                                \" 20h = controller failure\\n\"\n                                \" 40h = seek failure\\n\"\n                                \" 80h = timeout, no response\\n\"\n                                \" AAh = not ready\\n\"\n                                \" BBh = error occurred, undefined\\n\"\n                                \" CCh = write error, selected dsk\\n\"\n                                \" E0h = error register = 0\\n\"\n                                \" FFh = disk sense failure\");\n CB(0x075,\"hdsk_count\",         \"Number of hard disk drives\");\n CB(0x076,\"hdsk_head_ctrl\",     \"Head control (XT only)\");\n CB(0x077,\"hdsk_ctrl_port\",     \"Hard disk control port (XT only)\");\n CB(0x078,\"prn_timeout_1\",      \"Countdown timer waits for printer\\n\"\n                                \"  to respond (printer 1)\");\n CB(0x079,\"prn_timeout_2\",      \"Countdown timer waits for printer\\n\"\n                                \"  to respond (printer 2)\");\n CB(0x07A,\"prn_timeout_3\",      \"Countdown timer waits for printer\\n\"\n                                \"  to respond (printer 3)\");\n CB(0x07B,\"prn_timeout_4\",      \"Countdown timer waits for printer\\n\"\n                                \"  to respond (printer 4)\");\n CB(0x07C,\"rs232_timeout_1\",    \"Countdown timer waits for RS-232 (1)\");\n CB(0x07D,\"rs232_timeout_2\",    \"Countdown timer waits for RS-232 (2)\");\n CB(0x07E,\"rs232_timeout_3\",    \"Countdown timer waits for RS-232 (3)\");\n CB(0x07F,\"rs232_timeout_4\",    \"Countdown timer waits for RS-232 (4)\");\n CW(0x080,\"keybd_begin\",        \"Ptr to beginning of keybd queue\");\n CW(0x082,\"keybd_end\",          \"Ptr to end of keyboard queue\");\n CB(0x084,\"video_rows\",         \"Rows of characters on display - 1\");\n CW(0x085,\"video_pixels\",       \"Number of pixels per charactr * 8\");\n CB(0x087,\"video_options\",      \"Display adapter options\\n\"\n                                \"  bit 7 = clear RAM\\n\"\n                                \"  bits 6,5 = memory on adapter\\n\"\n                                \"              00 - 64K\\n\"\n                                \"              01 - 128K\\n\"\n                                \"              10 - 192K\\n\"\n                                \"              11 - 256K\\n\"\n                                \"  bit 4 = unused\\n\"\n                                \"  bit 3 = 0 if EGA/VGA active\\n\"\n                                \"  bit 2 = wait for display enable\\n\"\n                                \"  bit 1 = 1 - mono monitor\\n\"\n                                \"        = 0 - color monitor\\n\"\n                                \"  bit 0 = 0 - handle cursor, CGA\");\n CB(0x088,\"video_switches\",     \"Switch setting bits from adapter\\n\"\n                                \"  bits 7-4 = feature connector\\n\"\n                                \"  bits 3-0 = option switches\");\n CB(0x089,\"video_1_save\",       \"Video save area 1-EGA/VGA control\\n\"\n                                \"  bit 7 = 200 line mode\\n\"\n                                \"  bits 6,5 = unused\\n\"\n                                \"  bit 4 = 400 line mode\\n\"\n                                \"  bit 3 = no palette load\\n\"\n                                \"  bit 2 = mono monitor\\n\"\n                                \"  bit 1 = gray scale\\n\"\n                                \"  bit 0 = unused\");\n CB(0x08A,\"video_2_save\",       \"Video save area 2\");\n\n CB(0x08B,\"dsk_data_rate\",      \"Last data rate for diskette\\n\"\n                                \" bits 7 &amp; 6 = 00 for 500K bit/sec\\n\"\n                                \"            = 01 for 300K bit/sec\\n\"\n                                \"            = 10 for 250K bit/sec\\n\"\n                                \"            = 11 for 1M bit/sec\\n\"\n                                \" bits 5 &amp; 4 = step rate\"\n                                \"Rate at start of operation\\n\"\n                                \" bits 3 &amp; 2 = 00 for 500K bit/sec\\n\"\n                                \"            = 01 for 300K bit/sec\\n\"\n                                \"            = 10 for 250K bit/sec\\n\"\n                                \"            = 11 for 1M bit/sec\");\n CB(0x08C,\"hdsk_status_2\",      \"Hard disk status\");\n CB(0x08D,\"hdsk_error\",         \"Hard disk error\");\n CB(0x08E,\"hdsk_complete\",      \"When the hard disk controller's\\n\"\n                                \" task is complete, this byte is\\n\"\n                                \" set to FFh (from interrupt 76h)\");\n CB(0x08F,\"dsk_options\",        \"Diskette controller information\\n\"\n                                \" bit 6 = 1 Drv 1 type determined\\n\"\n                                \"     5 = 1 Drv 1 is multi-rate\\n\"\n                                \"     4 = 1 Drv 1 change detect\\n\"\n                                \"     2 = 1 Drv 0 type determined\\n\"\n                                \"     1 = 1 Drv 0 is multi-rate\\n\"\n                                \"     0 = 1 Drv 0 change detect\");\n CB(0x090,\"dsk0_media_st\",      \"Media state for diskette drive 0\\n\"\n                                \"    7      6      5      4\\n\"\n                                \" data xfer rate  two   media\\n\"\n                                \"  00=500K bit/s  step  known\\n\"\n                                \"  01=300K bit/s\\n\"\n                                \"  10=250K bit/s\\n\"\n                                \"  11=1M bit/sec\\n\"\n                                \"    3      2      1      0\\n\"\n                                \" unused  -----state of drive-----\\n\"\n                                \"         bits floppy  drive state\\n\"\n                                \"         000=  360K in 360K, ?\\n\"\n                                \"         001=  360K in 1.2M, ?\\n\"\n                                \"         010=  1.2M in 1.2M, ?\\n\"\n                                \"         011=  360K in 360K, ok\\n\"\n                                \"         100=  360K in 1.2M, ok\\n\"\n                                \"         101=  1.2M in 1.2M, ok\\n\"\n                                \"         111=  720K in 720K, ok\\n\"\n                                \"           or 1.44M in 1.44M\\n\"\n                                \"        (state not used for 2.88)\");\n CB(0x091,\"dsk1_media_st\",      \"Media state for diskette drive 1\\n\"\n                                \" (see dsk0_media_st)\");\n CB(0x092,\"dsk0_start_st\",      \"Starting state for drive 0\");\n CB(0x093,\"dsk1_start_st\",      \"Starting state for drive 1\");\n CB(0x094,\"dsk0_cylinder\",      \"Current track number for drive 0\");\n CB(0x095,\"dsk1_cylinder\",      \"Current track number for drive 1\");\n CB(0x096,\"keybd_flags_3\",      \"Special keyboard type and mode\\n\"\n                                \" bit 7 Reading ID of keyboard\\n\"\n                                \"     6 last char is 1st ID char\\n\"\n                                \"     5 force num lock\\n\"\n                                \"     4 101/102 key keyboard\\n\"\n                                \"     3 right alt key down\\n\"\n                                \"     2 right ctrl key down\\n\"\n                                \"     1 E0h hidden code last\\n\"\n                                \"     0 E1h hidden code last\");\n CB(0x097,\"keybd_flags_4\",      \"Keyboard Flags (advanced keybd)\\n\"\n                                \"  7      6       5     4  3 2 1 0\\n\"\n                                \"xmit   char   Resend  Ack   \\   /\\n\"\n                                \"error was ID  Rec'd  Rec'd   LEDs\");\n\n CW(0x098,\"timer_waitoff\",      \"Ptr offset to wait done flag\");\n CW(0x09A,\"timer_waitseg\",      \"Ptr segment to wait done flag\");\n CW(0x09C,\"timer_clk_low\",      \"Timer low word, 1 microsecond clk\");\n CW(0x09E,\"timer_clk_high\",     \"Timer high word\");\n CB(0x0A0,\"timer_clk_flag\",     \"Timer flag 00h = post acknowledgd\\n\"\n                                \"           01h = busy\\n\"\n                                \"           80h = posted\");\n CB(0x0A1,\"lan_bytes\",          \"Local area network bytes (7)\");\n make_array(0x4A1, 7);\n\n CD(0x0A8,\"video_sav_tbl\",      \"Pointer to a save table of more\\n\"\n                                \"pointers for the video system \\n\"\n                                \"           SAVE TABLE\\n\"\n                                \" offset type    pointer to\\n\"\n                                \" ------ ---- --------------------\\n\"\n                                \"   0     dd  Video parameters\\n\"\n                                \"   4     dd  Parms save area\\n\"\n                                \"   8     dd  Alpha char set\\n\"\n                                \"  0Ch    dd  Graphics char set\\n\"\n                                \"  10h    dd  2nd save ptr table\\n\"\n                                \"  14h    dd  reserved (0:0)\\n\"\n                                \"  18h    dd  reserved (0:0)\\n\"\n                                \" \\n\"\n                                \" 2ND SAVE TABLE (from ptr above)\\n\"\n                                \" offset type functions &amp; pointers\\n\"\n                                \" ------ ---- --------------------\\n\"\n                                \"   0     dw  Bytes in this table\\n\"\n                                \"   2     dd  Combination code tbl\\n\"\n                                \"   6     dd  2nd alpha char set\\n\"\n                                \"  0Ah    dd  user palette tbl\\n\"\n                                \"  0Eh    dd  reserved (0:0)\\n\"\n                                \"  12h    dd  reserved (0:0)\\n\"\n                                \"  16h    dd  reserved (0:0)\");\n CW(0x0CE,\"days_since1_80\",     \"Days since 1-Jan-1980 counter\");\n make_array(0x4AC,0xCE-0xAC);\n}\n\n//-------------------------------------------------------------------------\nstatic main() {\n  if ( !add_segm_ex(0x400, 0x4D0, 0x40, 0, 0, 2, ADDSEG_NOSREG) ) {\n    warning(\"Can't create BIOS data segment.\");\n    return;\n  }\n  set_segm_name(0x400, \"bdata\");\n  set_segm_class(0x400, \"BIOSDATA\");\n  CmtBdata();\n}\n</code></pre>"},{"location":"developer-guide/idc/idc-examples.html#entrytst","title":"entrytst","text":"<p>Sample that shows how to get list of entry points.</p> <pre><code>//\n//      This example shows how to get list of entry points.\n//\n\n#include &lt;idc.idc&gt;\n\nstatic main() {\n  auto i;\n  auto ord,ea;\n\n  msg(\"Number of entry points: %ld\\n\",get_entry_qty());\n  for ( i=0; ; i++ ) {\n    ord = get_entry_ordinal(i);\n    if ( ord == 0 ) break;\n    ea = get_entry(ord);\n    msg(\"Entry point %08lX at %08lX (%s)\\n\",ord,ea,Name(ea));\n  }\n}\n</code></pre>"},{"location":"developer-guide/idc/idc-examples.html#find_insn","title":"find_insn","text":"<p>Script to be used with the 'grep' plugins.</p> <pre><code>#include &lt;idc.idc&gt;\n\n// This script is to be used with the 'grep' ida plugin\n// It looks for the specified instruction mnemonics and saves all matches\n\nstatic find_insn(mnem)\n{\n  auto ea;\n  for ( ea=get_inf_attr(INF_MIN_EA); ea != BADADDR; ea=next_head(ea, BADADDR) )\n  {\n    if ( print_insn_mnem(ea) == mnem )\n      save_match(ea, \"\");\n  }\n}\n</code></pre>"},{"location":"developer-guide/idc/idc-examples.html#fixuptst","title":"fixuptst","text":"<p>Sample that gets fixup information about the file.</p> <pre><code>//\n//      This example shows how to get fixup information about the file.\n//\n\n#include &lt;idc.idc&gt;\n\nstatic main() {\n  auto ea;\n  for ( ea = get_next_fixup_ea(get_inf_attr(INF_MIN_EA));\n        ea != BADADDR;\n        ea = get_next_fixup_ea(ea) ) {\n    auto type,sel,off,dis,x;\n    type = get_fixup_target_type(ea);\n    sel  = get_fixup_target_sel(ea);\n    off  = get_fixup_target_off(ea);\n    dis  = get_fixup_target_dis(ea);\n    msg(\"%08lX: \",ea);\n    x = type &amp; FIXUP_MASK;\n         if ( x == FIXUP_BYTE  ) msg(\"BYTE \");\n    else if ( x == FIXUP_OFF16 ) msg(\"OFF16\");\n    else if ( x == FIXUP_SEG16 ) msg(\"SEG16\");\n    else if ( x == FIXUP_PTR32 ) msg(\"PTR32\");\n    else if ( x == FIXUP_OFF32 ) msg(\"OFF32\");\n    else if ( x == FIXUP_PTR48 ) msg(\"PTR48\");\n    else if ( x == FIXUP_HI8   ) msg(\"HI8  \");\n    else                         msg(\"?????\");\n    msg((type &amp; FIXUP_EXTDEF) ? \" EXTDEF\" : \" SEGDEF\");\n    msg(\" [%s,%X]\",get_segm_name(get_segm_by_sel(sel)),off);\n    if ( type &amp; FIXUP_EXTDEF  ) msg(\" (%s)\",Name([sel2para(sel),off]));\n    if ( type &amp; FIXUP_SELFREL ) msg(\" SELF-REL\");\n    if ( type &amp; FIXUP_UNUSED  ) msg(\" UNUSED\");\n    msg(\"\\n\");\n  }\n}\n</code></pre>"},{"location":"developer-guide/idc/idc-examples.html#functest","title":"functest","text":"<p>Sample that gets list of funcions.</p> <pre><code>//\n//      This example shows how to get list of functions.\n//\n\n#include &lt;idc.idc&gt;\n\nstatic main() {\n  auto ea,x;\n\n  for ( ea=get_next_func(0); ea != BADADDR; ea=get_next_func(ea) ) {\n    msg(\"Function at %08lX: %s\",ea,get_func_name(ea));\n    x = get_func_flags(ea);\n    if ( x &amp; FUNC_NORET ) msg(\" Noret\");\n    if ( x &amp; FUNC_FAR   ) msg(\" Far\");\n    msg(\"\\n\");\n  }\n  ea = choose_func(\"Please choose a function\");\n  msg(\"The user chose function at %08lX\\n\",ea);\n}\n\n</code></pre>"},{"location":"developer-guide/idc/idc-examples.html#kernel","title":"kernel","text":"<p>Sample that insert custom comments for the imported DLLs.</p> <pre><code>//\n//      This file show how to insert you own comments for the imported DLLs.\n//      This file inserts a comment for the kernel function #23 'LOCKSEGMENT'.\n//      You may add your own comments for other functions and DLLs.\n//      To execute this file your should choose 'Execute IDC file' command\n//      from the IDA menu. Usually the  hotkey is F2.\n//\n\n#include &lt;idc.idc&gt;\n\nstatic main(void)\n{\n  auto faddr;\n  auto fname;\n\n  msg(\"Loading comments...\\n\");\n  fname = sprintf(\"KERNEL_%ld\", 23);        // build the function name\n  faddr = get_name_ea_simple(fname);             // get function address\n  if ( faddr != -1 ) {                  // if the function exists\n    update_extra_cmt(faddr,E_PREV + 0,\";\u0192\u0192\u0192\u0192\u0192\u0192\u0192\u0192\u0192\u0192\u0192\u0192\u0192\u0192\u0192\u0192\u0192\u0192\u0192\u0192\u0192\u0192\u0192\u0192\u0192\u0192\u0192\u0192\u0192\u0192\u0192\u0192\u0192\u0192\u0192\u0192\u0192\u0192\u0192\u0192\u0192\u0192\u0192\u0192\u0192\u0192\u0192\u0192\u0192\u0192\u0192\u0192\u0192\u0192\u0192\u0192\u0192\u0192\u0192\u0192\u0192\u0192\u0192\u0192\u0192\u0192\u0192\u0192\u0192\u0192\u0192\u0192\u0192\u0192\u0192\u0192\");\n    update_extra_cmt(faddr,E_PREV + 1,\"; LockSegment (2.x)\");\n    update_extra_cmt(faddr,E_PREV + 2,\"; \");\n    update_extra_cmt(faddr,E_PREV + 3,\"; In: AX - segment to lock\");\n    update_extra_cmt(faddr,E_PREV + 4,\";     LockSegment function locks the specified discardable\");\n    update_extra_cmt(faddr,E_PREV + 5,\"; segment. The segment is locked into memory at the given\");\n    update_extra_cmt(faddr,E_PREV + 6,\"; address and its lock count is incremented (increased by one).\");\n    update_extra_cmt(faddr,E_PREV + 7,\"; Returns\");\n    update_extra_cmt(faddr,E_PREV + 8,\"; The return value specifies the data segment if the function is\");\n    update_extra_cmt(faddr,E_PREV + 9,\"; successful. It is NULL if the segment has been discarded or an\");\n    update_extra_cmt(faddr,E_PREV + 10,\"; error occurs.\");\n  }\n  msg(\"Comment(s) are loaded.\\n\");\n}\n</code></pre>"},{"location":"developer-guide/idc/idc-examples.html#loaddef","title":"loaddef","text":"<p>Sample that loads DEF file with dialog.</p> <pre><code>// Load a DEF file with Dialog\n// Saved the last browsed path in the Database\n\n// This file is donated by Dietrich Teickner.\n\n#include &lt;idc.idc&gt;\n\n#define VERBOSE 1\n#define WITHSELFEDITED 1\n\nstatic main(void)\n{\n    auto    defFileName, defFile, w, p, modulImport;\n\n    defFileName = AskFileEx(0,\"*.def\",\"Choose a definition-file\");\n    modulImport = defFileName;\n    while (1) {\n        p = strstr(modulImport,\"\\\\\");\n        if (-1 == p) break;\n        modulImport = substr(modulImport,p+1,-1);\n    };\n    p = strstr(modulImport,\".\");\n    if (-1 &lt; p)\n        modulImport = substr(modulImport,0,p);\n    modulImport = translate(modulImport);\n\n    if(VERBOSE) msg(\"Opening definition file %s\\n\", defFileName);\n\n    defFile = fopen(defFileName, \"rb\");\n\n    if (0 != defFile)\n    {\n        auto defline, ea, bea, sea, eea, newName, oldName, badName, x, z, id;\n\n        //\n        // Process all of the DEF's in this file.\n        //\n        if(VERBOSE) msg(\"Processing %s\\n\", defFileName);\n\n        defline = \"\";\n\n        do\n        {\n            defline = ReadDefLine(defFile);\n            if (strlen(defline) == 0) break;\n            w = wordn(defline,1);\n            w = translate(w);\n            if (\"LIBRARY\" == w) {\n                w = wordn(substr(defline,strlen(w)+1,-1),1);\n                if (strlen(w) &gt; 0) modulImport = w;\n                continue;\n            }\n            if (\"EXPORTS\" != w) continue;\n            if (strlen(modulImport) == 0) break;\n            sea = get_first_seg();\n            while ((-1 != sea) &amp; (get_segm_name(sea) != modulImport)) {\n                sea = get_next_seg(sea);\n            }\n            if (-1 == sea) break;\n            w = get_segm_name(sea);\n            eea = get_segm_end(sea);\n            do\n            {\n                defline = ReadDefLine(defFile);\n                if (strlen(defline) == 0) break;\n                p = strstr(defline,\" @\");\n                if (0 &gt; p) continue;\n                w = substr(defline,p+2,-1);\n                defline = substr(defline,0,p);\n                w = wordn(w,1); /* import-number */\n                w = translate(modulImport)+\"_\"+w;\n                newName = w+\"_\"+wordn(defline,1);\n                if (WITHSELFEDITED) {\n                    z = wordn(defline,1);\n                    badName = z+\"_\"+w;\n                    p = strstr(z,\"@\");\n                    if (p != -1) {\n                        x = substr(z,0,p);\n                        badName = badName+\" \"+x+\" \"+w+\"_\"+x+\" \"+x+\"_\"+w;\n                    }\n                    while (substr(z,0,1) == \"_\") {\n                        z = substr(z,1,-1);\n                        badName = badName+\" \"+z+\" \"+w+\"_\"+z+\" \"+z+\"_\"+w;\n                        if (p != -1) {\n                            x = substr(x,1,-1);\n                            badName = badName+\" \"+x+\" \"+w+\"_\"+x+\" \"+x+\"_\"+w;\n                        }\n                    }\n                    z = \" \"+newName+\" \"+w+\" \"+defline+\" \"+badName+\" \";\n                } else {\n                    z = \" \"+newName+\" \"+w+\" \"+defline+\" \";\n                }\n                x = \"__imp_\";\n                p = strlen(x);\n                for (ea = sea;ea &lt; eea;ea++) {\n                    oldName = Name(ea);\n                    if (strstr(z,\" \"+oldName+\" \") != -1) break;\n                    if (strstr(oldName,x) != 0) continue;\n                    if (strstr(z,\" \"+substr(oldName,p,-1)+\" \") != -1) break;\n                }\n                if (ea == eea) continue;\n                p = strstr(defline,\"@\");\n                if (-1 != p) {\n                    z = substr(defline,p+1,-1);\n                    z = wordn(z,1);\n                    z = atol(z);\n                    p = get_frame_args_size(ea);\n                    if (p != z) {\n                        set_frame_size(ea,get_frame_lvar_size(ea),get_frame_regs_size(ea),z);\n                        auto_wait();\n                    }\n                }\n                if (oldName != newName) {\n                    set_name(ea ,newName);\n                    if(VERBOSE) msg(\"--&gt; %x,%s-&gt;%s\\n\", ea, oldName, newName);\n                }\n            }\n            while (strlen(defline) &gt; 0);\n        }\n        while (strlen(defline) &gt; 0);\n        fclose(defFile);\n    }\n}\n\nstatic wordn(c,i) {\n    auto t, l, p, s;\n    p = 0;\n    l = strlen(c);\n    t = \"\";\n    while (0 &lt; i) {\n        i = i-1;\n        while ((p &lt; l) &amp; (\" \" == substr(c,p,p+1))) p++;\n        while (p &lt; l) {\n            s = substr(c,p,++p);\n            if (s == \" \") break;\n            if (i == 0) t = t + s;\n        }\n    }\n    return (t);\n}\n\nstatic translate(c) {\n    auto s,t;\n    s = \"abcdefghijklmnopqrst\";\n    t = \"ABCDEFGHIJKLMNOPQRST\";\n    return translate2(c,s,t);\n}\n\nstatic translate2(c,s,t) {\n    auto i,j,k,l;\n    l = strlen(s) - strlen(t);\n    for (i = 0;i &lt; l;i++) {\n        t = t + \" \";\n    }\n    l = strlen(c);\n    for (i = 0;i &lt; l;i++) {\n        k = substr(c,i,i+1);\n        j = strstr(s,k);\n        if (0 &lt;= j) {\n            c = substr(c,0,i) + substr(t,j,j+1) + substr(c,i+1,-1);\n        }\n    }\n    return c;\n}\n\nstatic ReadDefLine(defFile)\n{\n    auto line, wordstr, c, delim, i, first;\n\n    delim = \"\"+0x0d+\" \"+0x09+0x0a;\n\n    do {\n\n        line = \"\";\n        i = 0;\n        first = 1;\n\n        do {\n            wordstr = \"\";\n            c = \"\";\n            do {\n                wordstr = wordstr + c;\n                c = fgetc(defFile);\n                if (-1 != c) {\n                    i = strstr(delim,c);\n                } else i = - 2;\n            } while (-1 == i);\n            if (strlen(wordstr) &gt; 0) {\n                if (!first) line = line + \" \";\n                first = 0;\n                line = line + wordstr;\n            };\n        } while (0 &lt; i);\n        if ((strlen(line) &gt; 0) &amp; (substr(line,0,1) == \";\")) line = \"\";\n    } while ((strlen(line) == 0) &amp; (0 == i));\n    return(line);\n}\n\nstatic getPath(fileName) {\n    auto    pos, path;\n    path = \"\";\n    while (1) {\n        pos = strstr(fileName,\"\\\\\");\n        if (-1 == pos) break;\n        path = path + substr(fileName,0,pos+1);\n        fileName = substr(fileName,pos+1,-1);\n    }\n    return path;\n}\n\nstatic AskFileEx(forSave, ext, dialogText) {\n    auto    fileName, w, p, extArrayId, lastPath, newPath, extKey;\n    w = ext;\n    if (substr(w,0,1) == \"*\") w = substr(w,1,-1);\n    if (substr(w,0,1) == \".\") w = substr(w,1,-1);\n/* is case-sensitive */\n    extKey = \"DT#\"+w;\n    extArrayId = get_array_id(\"DT#EXT#Array\");\n    if (-1 == extArrayId)\n        extArrayId = create_array(\"DT#EXT#Array\");\n    lastPath = get_hash_string(extArrayId,extKey);\n/* without this, we have at first only '*' as Mask, but not \"*.ext\". IDA 4.20 */\n    if (\"\" == lastPath)\n        lastPath = getPath(get_root_filename());\n    w = lastPath+\"*.\"+w;\n    if(VERBOSE) msg(\"--&gt; lastPath %s\\n\", w);\n    fileName = askfile(forSave,w,dialogText);\n    if ((\"\" == fileName) | (-1 == extArrayId))\n        return fileName;\n    newPath = getPath(fileName);\n    if ((\"\" != newPath) &amp; (lastPath != newPath))\n// Save the new path, associated with the extension in the Database\n        set_hash_string(extArrayId, extKey, newPath);\n    return fileName;\n}\n\n</code></pre>"},{"location":"developer-guide/idc/idc-examples.html#loadsym","title":"loadsym","text":"<p>Sample that loads a SYM file with dialog.</p> <pre><code>//\n// Load a SYM file with Dialog\n// Saved the last browsed path associated with the extension in the Database\n// (use with dbg2map and mapsym)\n//\n// History:\n//\n// v1.00 - This file is originally donated by David Cattley.\n// v1.07 - Bugfix, improved interface, handles larger SegDefs\n// v1.08 - extended for save tha last used path associaded with *.sym in the current database\n//         set VAC to 0 for aktivating v1.07\n//         set VAC to 1 for sym-files from IBM/Microsoft MAPSYM for OS/2 (Loadsym V1.00)\n//\n\n#include &lt;idc.idc&gt;\n\n#define VERBOSE 1\n\n// set to version before IDA 4.30, for mapsym.exe VAC, not found any informations about the last changes\n#define VAC 1\n\nstatic main(void)\n{\n        auto    symFileName, symFile;\n\n        symFileName = AskFileEx(0,\"*.sym\",\"Choose the symbol-file\");\n\n        if(symFileName==\"\")\n          { if(VERBOSE) msg(\"Operation cancelled by user.\\n\");\n            return -1; }\n\n        if(VERBOSE)     msg(\"Opening symbol file %s\\n\", symFileName);\n        symFile = fopen(symFileName, \"rb\");\n\n        if (0 != symFile)\n        {\n                auto nextMapDef;\n\n                //\n                // Process all of the MAPDEF's in this file.\n                //\n                // if(VERBOSE)     msg(\"%0.4x: \", ftell(symFile));\n                if(VERBOSE)     msg(\"Processing %s\\n\", symFileName);\n\n                nextMapDef = 0;\n\n                do\n                {\n                        nextMapDef = DoMapDef(symFile, nextMapDef);\n                }\n                while (0 != nextMapDef);\n        }\n        else\n        { if(VERBOSE) msg(\"Can't open symbol file:\\n%s\\n\", symFileName);\n          return -1;\n        }\n        if(VERBOSE) msg(\"Symbol file has been loaded successfully.\\n\");\n}\n\n\nstatic DoMapDef(File, Position)\n{\n        auto    ppNextMap;\n\n        //\n        // Process the specified MAPDEF structure.\n        //\n        fseek(File, Position, 0);\n\n        if(VERBOSE)     msg(\"%0.4x: \", ftell(File));\n\n        ppNextMap = readshort(File, 0);\n\n        if (0 == ppNextMap)\n        {\n                //\n                // This is the last one!  It is special.\n                //\n                auto release, version;\n\n                release = fgetc(File);\n                version = fgetc(File);\n\n                if(VERBOSE)     msg(\"VERSION Next:%x Release:%x Version:%x\\n\",\n                                ppNextMap,\n                                release,\n                                version\n                                );\n        }\n        else\n        {\n                auto    bFlags, bReserved1, pSegEntry,\n                                cConsts, pConstDef, cSegs, ppSegDef,\n                                cbMaxSym, achModName;\n\n                auto i, nextSegDef;\n\n                bFlags = fgetc(File);\n                bReserved1 = fgetc(File);\n                pSegEntry = readshort(File, 0);\n                cConsts = readshort(File, 0);\n                pConstDef = readshort(File, 0);\n                cSegs = readshort(File, 0);\n                ppSegDef = readshort(File, 0);\n                cbMaxSym = fgetc(File);\n                achModName = ReadSymName(File);\n\n                if(VERBOSE)     msg(\"MAPDEF Next:%x Flags:%x Entry:%x Con:%d@%x Seg:%d@%x Max:%d Mod:%s\\n\",\n                                ppNextMap,\n                                bFlags,\n                                pSegEntry,\n                                cConsts, pConstDef,\n                                cSegs, ppSegDef,\n                                cbMaxSym,\n                                achModName\n                                );\n\n                //\n                // Process the SEGDEFs in this MAPDEF\n                //\n                nextSegDef = ppSegDef &lt;&lt; 4;\n\n                for (i=0; i&lt;cSegs; i=i+1)\n                {\n                        nextSegDef = DoSegDef(File, nextSegDef);\n                }\n        }\n\n        //\n        // Return the file position of the next MAPDEF\n        //\n        return (ppNextMap &lt;&lt; 4);\n}\n\n\nstatic DoSegDef(File, Position)\n{\n        auto    ppNextSeg, cSymbols, pSymDef,\n                        wSegNum, wReserved2, wReserved3, wReserved4,\n                        bFlags, bReserved1, ppLineDef, bReserved2,\n                        bReserved3, achSegName;\n\n        auto i, n, symPtr, segBase;\n\n        //\n        // Process the specified SEGDEF structure.\n        //\n        fseek(File, Position, 0);\n\n        if(VERBOSE)     msg(\"%0.4x: \", ftell(File));\n\n        ppNextSeg = readshort(File, 0);\n        cSymbols = readshort(File, 0);\n        pSymDef = readshort(File, 0);\n        wSegNum = readshort(File, 0);\n        wReserved2 = readshort(File, 0);\n        wReserved3 = readshort(File, 0);\n        wReserved4 = readshort(File, 0);\n        bFlags = fgetc(File);\n        bReserved1 = fgetc(File);\n        ppLineDef = readshort(File, 0);\n        bReserved2 = fgetc(File);\n        bReserved3 = fgetc(File);\n        achSegName = ReadSymName(File);\n\n        if (VAC) {\n          segBase = get_segm_by_sel(wSegNum);\n       // the others will access the externals, sym-files from MAPSYM contains only internals\n        } else {\n       // segBase = get_segm_by_sel(wSegNum); //fixed\n          segBase = get_first_seg();\n          for (i=wSegNum; i &gt; 1; i=i-1) { segBase = get_next_seg(segBase); }\n        }\n        if(VERBOSE)     msg(\"SEGDEF Next:%x Sym:(%d)@%x Flags:%x Lines:%x Seg:%s [%04x %08x]\\n\",\n                        ppNextSeg,\n                        cSymbols, pSymDef,\n                        bFlags,\n                        ppLineDef,\n                        achSegName, wSegNum, segBase\n                        );\n\n        //\n        // Process the symbols in this SEGDEF\n        //\n        n = 2;\n        if (!VAC) {\n       // sym-files from MAPSYM (VAC) works with unshifted pSymDef\n           pSymDef = pSymDef &lt;&lt; (bFlags &amp; 0xFE);\n           if ((bFlags &amp; 0xFE) != 0) n++;\n        }\n        for (i=0; i&lt;cSymbols; i=i+1)\n        {\n             // fseek(File, Position+pSymDef+(i*2), 0); //fixed\n                fseek(File, Position+pSymDef+(i*n), 0);\n                if (n&gt;2) symPtr = Position+(readlong(File, 0)&amp;0xFFFFFF);\n                else symPtr = Position+readshort(File, 0);\n                DoSymDef(File, symPtr, (bFlags &amp; 1), wSegNum);\n        }\n\n        //\n        //  Return the position of the next SEGDEF\n        //\n        return (ppNextSeg &lt;&lt; 4);\n}\n\n\nstatic DoSymDef(File, Position, Size, Segment)\n{\n        auto dwSymVal, achSymName, ea, i;\n\n        fseek(File, Position, 0);\n\n        if(VERBOSE)     msg(\"%0.4x: \", ftell(File));\n\n        if (0 == Size)\n                dwSymVal = readshort(File, 0);\n        else\n                dwSymVal = readlong(File, 0);\n\n        achSymName = ReadSymName(File);\n\n        //\n        // Calculate the EA of this symbols.\n        //\n        if (VAC) {\n          ea = get_segm_by_sel(Segment) + dwSymVal;\n     // sym-files from MAPSYM contains only internals\n        } else {\n       // ea = get_segm_by_sel(Segment) + dwSymVal; // fixed\n          ea = get_first_seg(); // This points to the externals ???\n          for (i=Segment; i &gt; 1; i=i-1) { ea = get_next_seg(ea); }\n          ea = ea + dwSymVal;\n        }\n\n        if(VERBOSE)     msg(\"SYM%d: %04x:%08x [%08x] %s\\n\",\n                        (16+Size*16),\n                        Segment, dwSymVal, ea,\n                        achSymName);\n\n        //\n        // Now go and name the location!\n        //\n        set_name(ea, \"\");\n        set_name(ea, achSymName);\n}\n\n\nstatic ReadSymName(symFile)\n{\n        auto i, nameLen, name;\n\n        name = \"\";\n        nameLen = fgetc(symFile);\n\n        for (i=0; i&lt;nameLen; i=i+1)\n        {\n                name = name + fgetc(symFile);\n        }\n\n        return(name);\n}\n\nstatic getPath(fileName) {\n    auto    pos, path;\n    path = \"\";\n    while (1) {\n        pos = strstr(fileName,\"\\\\\");\n        if (-1 == pos) break;\n        path = path + substr(fileName,0,pos+1);\n        fileName = substr(fileName,pos+1,-1);\n    }\n    return path;\n}\n\nstatic AskFileEx(forSave, ext, dialogText) {\n    auto    fileName, w, p, extArrayId, lastPath, newPath, extKey;\n    w = ext;\n    if (substr(w,0,1) == \"*\") w = substr(w,1,-1);\n    if (substr(w,0,1) == \".\") w = substr(w,1,-1);\n/* is case-sensitive */\n    extKey = \"DT#\"+w;\n    extArrayId = get_array_id(\"DT#EXT#Array\");\n    if (-1 == extArrayId)\n        extArrayId = create_array(\"DT#EXT#Array\");\n    lastPath = get_hash_string(extArrayId,extKey);\n/* without this, we have at first only '*' as Mask, but not \"*.ext\". IDA 4.20 */\n    if (\"\" == lastPath)\n        lastPath = getPath(get_input_file_path());\n    w = lastPath+\"*.\"+w;\n    if(VERBOSE) msg(\"--&gt; lastPath %s\\n\", w);\n    fileName = askfile(forSave,w,dialogText);\n    if ((\"\" == fileName) | (-1 == extArrayId))\n        return fileName;\n    newPath = getPath(fileName);\n    if ((\"\" != newPath) &amp; (lastPath != newPath))\n// Save the new path, associated with the extension in the Database\n        set_hash_string(extArrayId, extKey, newPath);\n    return fileName;\n}\n\n</code></pre>"},{"location":"developer-guide/idc/idc-examples.html#marktest","title":"marktest","text":"<p>Sample that shows how to get list of marked positions.</p> <pre><code>//\n//      This example shows how to get list of marked positions.\n//\n\n#include &lt;idc.idc&gt;\n\nstatic main() {\n  auto x;\n\n  put_bookmark(get_screen_ea(),10,5,5,6,\"Test of Mark Functions\");\n  for ( x=0; x&lt;10; x++ )\n    msg(\"%d: %a %s\\n\",x,get_bookmark(x),get_bookmark_desc(x));\n}\n</code></pre>"},{"location":"developer-guide/idc/idc-examples.html#memcpy","title":"memcpy","text":"<p>Sample that shows how to get list of marked positions.</p> <pre><code>//\n//      This example shows how to get list of marked positions.\n//\n\n#include &lt;idc.idc&gt;\n\nstatic main() {\n  auto x;\n\n  put_bookmark(get_screen_ea(),10,5,5,6,\"Test of Mark Functions\");\n  for ( x=0; x&lt;10; x++ )\n    msg(\"%d: %a %s\\n\",x,get_bookmark(x),get_bookmark_desc(x));\n}\n</code></pre>"},{"location":"developer-guide/idc/idc-examples.html#ndk","title":"ndk","text":"<p>Android bionic lib.</p> <pre><code>#include &lt;idc.idc&gt;\n\nstatic main()\n{\n}\n\n// Android Bionic libc\n//\n// These functions are called while loading startup signatures from\n// elf.sig to obtain the address of main.\n\nstatic get_main_ea(ea, got_ldr, got_off, main_off)\n{\n  auto got_ea = 0;\n\n  if ( got_off != 0 )\n  {\n    auto _ea = TRUNC(ea + got_ldr);\n    create_insn(_ea);\n    got_ea = get_first_dref_from(_ea);\n    if ( got_ea == BADADDR )\n      return BADADDR;\n    got_ea = get_wide_dword(got_ea);\n    if ( got_ea == BADADDR )\n      return BADADDR;\n    got_ea = TRUNC(got_ea + ea + got_off + 8);\n\n    ea = TRUNC(ea + main_off);\n    create_insn(ea);\n    ea = get_first_dref_from(ea);\n    if ( ea == BADADDR )\n      return BADADDR;\n\n    ea = get_wide_dword(ea);\n    if ( ea == BADADDR )\n      return BADADDR;\n  }\n\n  ea = TRUNC(got_ea + ea);\n\n  ea = get_wide_dword(ea);\n  if ( ea == BADADDR )\n    return BADADDR;\n\n  // Check that segment is executable\n  if ( (get_segm_attr(ea, SEGATTR_PERM) &amp; SEGPERM_EXEC) == 0 )\n    return BADADDR;\n\n  return ea;\n}\n\nstatic get_main_ea_pic(ea, got_ldr, got_off, main_off)\n{\n  return get_main_ea(ea, long(got_ldr), long(got_off), long(main_off));\n}\n\nstatic get_main_ea_abs(ea)\n{\n  return get_main_ea(ea, 0, 0, 0);\n}\n</code></pre>"},{"location":"developer-guide/idc/idc-examples.html#onload","title":"onload","text":"<p>File called after a new file is loaded into IDA.</p> <pre><code>//\n//      This IDC file is called after a new file is loaded into IDA\n//      database.\n//      IDA calls \"OnLoad\" function from this file.\n//\n//      You may use this function to read extra information (such as\n//      debug information) from the input file, or for anything else.\n//\n\n#include &lt;idc.idc&gt;\n\n//      If you want to add your own processing of newly created databases,\n//      you may create a file named \"userload.idc\":\n//\n//      #define USERLOAD_IDC\n//      static userload(input_file,real_file,filetype) {\n//              ... your processing here ...\n//      }\n//\n\n#softinclude &lt;userload.idc&gt;\n\n// Input parameteres:\n//      input_file - name of loaded file\n//      real_file  - name of actual file that contains the input file.\n//                   usually this parameter is equal to input_file,\n//                   but is different if the input file is extracted from\n//                   an archive.\n//      filetype   - type of loaded file. See FT_.. definitions in idc.idc\n\nstatic OnLoad(input_file, real_file, filetype)\n{\n#ifdef USERLOAD_IDC             // if user-defined IDC file userload.idc\n                                // exists...\n  if ( userload(input_file, real_file, filetype) )\n    return;\n#endif\n  if ( filetype == FT_DRV )\n    DriverLoaded();\n//  msg(\"File %s is loaded into the database.\\n\",input_file);\n}\n\n\n//--------------------------------------------------------------------------\n//      This function is executed when a new device driver is loaded.\n//              Device drivers have extensions DRV or SYS.\n//\n// History:\n//\n// 08/12/95 20:16 by Alexey Kulentsov:\n// + Check for Device Request Block\n// + Kludge with Drv/Com supported\n// 04/01/96 04:21 by ig:\n// + 0000:0000 means end of devices chain too.\n// 16/05/96 16:01 by ig:\n// + modified to work with the new version of IDA (separate operand types)\n\nstatic DriverLoaded(void)\n{\n  auto x,i,base;\n  auto intr,strt;\n  auto attr,cmt;\n  auto nextbase;\n  auto DevReq;\n\n  i = 0;\n  x = get_inf_attr(INF_MIN_EA);\n  base = (x &gt;&gt; 4);   // The segment base\n\n  while ( 1 )\n  {\n    msg(\"Device driver block at %04X\\n\",x);\n\n    set_name(x, sprintf(\"NextDevice_%ld\",i));\n    create_word(x);\n    op_num(x,0);\n    if ( get_wide_word(x) == 0xFFFF ) {\n      set_cmt(x, \"The last device\", 0);\n    } else {\n      nextbase = base + get_wide_word(x+2);\n      op_plain_offset(x,0,nextbase&lt;&lt;4);\n      set_cmt(x, \"Offset to the next device\", 0);\n    }\n\n    create_word(x+2);\n    op_num(x+2,0);\n\n    set_name(x+4, sprintf(\"DevAttr_%ld\",i));\n    create_word(x+4);\n    op_num(x+4,0);\n    attr = get_wide_word(x+4);\n    cmt = \"\";\n    if ( attr &amp; (1&lt;&lt; 0) ) cmt = cmt + \"stdin device\\n\";\n    if ( attr &amp; (1&lt;&lt; 1) ) cmt = cmt + ((attr &amp; (1&lt;&lt;15)) ? \"stdout device\\n\" : \"&gt;32M\\n\");\n    if ( attr &amp; (1&lt;&lt; 2) ) cmt = cmt + \"stdnull device\\n\";\n    if ( attr &amp; (1&lt;&lt; 3) ) cmt = cmt + \"clock device\\n\";\n    if ( attr &amp; (1&lt;&lt; 6) ) cmt = cmt + \"supports logical devices\\n\";\n    if ( attr &amp; (1&lt;&lt;11) ) cmt = cmt + \"supports open/close/RM\\n\";\n    if ( attr &amp; (1&lt;&lt;13) ) cmt = cmt + \"non-IBM block device\\n\";\n    if ( attr &amp; (1&lt;&lt;14) ) cmt = cmt + \"supports IOCTL\\n\";\n    cmt = cmt + ((attr &amp; (1&lt;&lt;15)) ? \"character device\" : \"block device\");\n    set_cmt(x+4, cmt, 0);\n\n    set_name(x+6, sprintf(\"Strategy_%ld\",i));\n    create_word(x+6);\n    op_plain_offset(x+6,0,get_inf_attr(INF_MIN_EA));\n\n    set_name(x+8, sprintf(\"Interrupt_%ld\",i));\n    create_word(x+8);\n    op_plain_offset(x+8, -1, get_inf_attr(INF_MIN_EA));\n\n    set_name(x+0xA, sprintf(\"DeviceName_%ld\",i));\n    create_strlit (x+0xA,8);\n    set_cmt(x+0xA, \"May be device number\", 0);\n\n    strt = (base &lt;&lt; 4) + get_wide_word(x+6);\n    intr = (base &lt;&lt; 4) + get_wide_word(x+8);\n    create_insn( strt );\n    create_insn( intr );\n    auto_mark_range(strt, strt+1, AU_PROC);\n    auto_mark_range(intr, intr+1, AU_PROC );\n    set_name( strt, sprintf(\"Strategy_Routine_%ld\",i));\n    set_name( intr, sprintf(\"Interrupt_Routine_%ld\",i));\n    set_cmt( strt, \"ES:BX -&gt; Device Request Block\", 0);\n    set_cmt( intr, \"Device Request Block:\\n\"\n             \"0 db length\\n\"\n             \"1 db unit number\\n\"\n             \"2 db command code\\n\"\n             \"5 d? reserved\\n\"\n             \"0D d? command specific data\", 0);\n\n    if( get_wide_byte( strt )==0x2E &amp;&amp; get_wide_word(strt+1)==0x1E89\n     &amp;&amp; get_wide_byte(strt+5)==0x2E &amp;&amp; get_wide_word(strt+6)==0x068C\n     &amp;&amp; get_wide_word(strt+3)==get_wide_word(strt+8)-2)\n    {\n     DevReq=get_wide_word(strt+3);\n     msg(\"DevReq at %x\\n\",DevReq);\n     del_items(x+DevReq);\n     del_items(x+DevReq+2);\n     create_dword(x+DevReq);\n     set_name(x+DevReq, sprintf(\"DevRequest_%ld\",i));\n    }\n\n    if ( get_wide_word(x) == 0xFFFF ||\n       ((get_wide_byte(x)==0xE9 || get_wide_byte(x)==0xEB) &amp;&amp; i==0) ) break;\n    if ( get_wide_dword(x) == 0 ) break; // 04.01.96\n    x = (nextbase &lt;&lt; 4) + get_wide_word(x);\n    i = i + 1;\n  }\n}\n</code></pre>"},{"location":"developer-guide/idc/idc-examples.html#opertest","title":"opertest","text":"<p>Sample demonstrates how to use get_operand_value() function.</p> <pre><code>//\n//      This example shows how to use get_operand_value() function.\n//\n\n#include &lt;idc.idc&gt;\n\nstatic main() {\n  auto ea;\n\n  for ( ea = get_inf_attr(INF_MIN_EA); ea != BADADDR; ea=find_code(ea,1) ) {\n    auto x;\n    x = get_operand_value(ea,0);\n    if ( x != -1 ) msg(\"%08lX: operand 1 = %08lX\\n\",ea,x);\n    x = get_operand_value(ea,1);\n    if ( x != -1 ) msg(\"%08lX: operand 2 = %08lX\\n\",ea,x);\n    x = get_operand_value(ea,2);\n    if ( x != -1 ) msg(\"%08lX: operand 3 = %08lX\\n\",ea,x);\n  }\n}\n</code></pre>"},{"location":"developer-guide/idc/idc-examples.html#pilot","title":"pilot","text":"<p>File executed when a PalmPilot program is loaded.</p> <pre><code>//\n//  This file is executed when a PalmPilot program is loaded.\n//  You may customize it as you wish.\n//\n//  TODO:\n//      - decompilation of various resource types\n//        (we don't have any information on the formats)\n//\n\n#include &lt;idc.idc&gt;\n\n//-----------------------------------------------------------------------\n//\n// Process each resource and make some routine tasks\n//\nstatic process_segments()\n{\n  auto ea,segname,prefix;\n\n  for ( ea=get_first_seg(); ea != BADADDR; ea=get_next_seg(ea) )\n  {\n    segname = get_segm_name(ea);\n    prefix = substr(segname,0,4);\n    if ( segname == \"data0000\" )\n    {\n      if ( get_wide_dword(ea) == 0xFFFFFFFF )\n      {\n        create_dword(ea);\n        set_cmt(ea,\"Loader stores SysAppInfoPtr here\", 0);\n      }\n      continue;\n    }\n    if ( prefix == \"TRAP\" )\n    {\n      create_word(ea);\n      op_hex(ea,0);\n      set_cmt(ea,\"System trap function code\", 0);\n      continue;\n    }\n    if ( prefix == \"tSTR\" )\n    {\n      create_strlit(ea,get_segm_end(ea));\n      set_cmt(ea,\"String resource\", 0);\n      continue;\n    }\n    if ( prefix == \"tver\" )\n    {\n      create_strlit(ea,get_segm_end(ea));\n      set_cmt(ea,\"Version number string\", 0);\n      continue;\n    }\n    if ( prefix == \"tAIN\" )\n    {\n      create_strlit(ea,get_segm_end(ea));\n      set_cmt(ea,\"Application icon name\", 0);\n      continue;\n    }\n    if ( prefix == \"pref\" )\n    {\n      auto flags,cmt;\n      flags = get_wide_word(ea);\n      create_word(ea); op_hex(ea,0); set_name(ea,\"flags\");\n#define sysAppLaunchFlagNewThread  0x0001\n#define sysAppLaunchFlagNewStack   0x0002\n#define sysAppLaunchFlagNewGlobals 0x0004\n#define sysAppLaunchFlagUIApp      0x0008\n#define sysAppLaunchFlagSubCall    0x0010\n      cmt = \"\";\n      if ( flags &amp; sysAppLaunchFlagNewThread ) cmt = cmt + \"sysAppLaunchFlagNewThread\\n\";\n      if ( flags &amp; sysAppLaunchFlagNewStack  ) cmt = cmt + \"sysAppLaunchFlagNewStack\\n\";\n      if ( flags &amp; sysAppLaunchFlagNewGlobals) cmt = cmt + \"sysAppLaunchFlagNewGlobals\\n\";\n      if ( flags &amp; sysAppLaunchFlagUIApp     ) cmt = cmt + \"sysAppLaunchFlagUIApp\\n\";\n      if ( flags &amp; sysAppLaunchFlagSubCall   ) cmt = cmt + \"sysAppLaunchFlagSubCall\";\n      set_cmt(ea,cmt, 0);\n      ea = ea + 2;\n      create_dword(ea); op_hex(ea,0); set_name(ea,\"stack_size\");\n      ea = ea + 4;\n      create_dword(ea); op_hex(ea,0); set_name(ea,\"heap_size\");\n    }\n  }\n}\n\n//-----------------------------------------------------------------------\n//\n//  Create a enumeration with system action codes\n//\nstatic make_actions()\n{\n  auto ename = \"SysAppLaunchCmd\";\n  auto id = get_named_type_tid(ename);\n  if ( id == BADADDR )\n  {\n    auto ei = enum_type_data_t();\n    ei.bte = ei.bte | BTE_UDEC;\n    ei.add_constant(\"sysAppLaunchCmdNormalLaunch\",         0, \"Normal Launch\");\n    ei.add_constant(\"sysAppLaunchCmdFind\",                 1, \"Find string\");\n    ei.add_constant(\"sysAppLaunchCmdGoTo\",                 2, \"Launch and go to a particular record\");\n    ei.add_constant(\"sysAppLaunchCmdSyncNotify\",           3, \"Sent to apps whose databases changed\\n\"\n                                                              \"during HotSync after the sync has\\n\"\n                                                              \"been completed\");\n    ei.add_constant(\"sysAppLaunchCmdTimeChange\",           4, \"The system time has changed\");\n    ei.add_constant(\"sysAppLaunchCmdSystemReset\",          5, \"Sent after System hard resets\");\n    ei.add_constant(\"sysAppLaunchCmdAlarmTriggered\",       6, \"Schedule next alarm\");\n    ei.add_constant(\"sysAppLaunchCmdDisplayAlarm\",         7, \"Display given alarm dialog\");\n    ei.add_constant(\"sysAppLaunchCmdCountryChange\",        8, \"The country has changed\");\n    ei.add_constant(\"sysAppLaunchCmdSyncRequest\",          9, \"The \\\"HotSync\\\" button was pressed\");\n    ei.add_constant(\"sysAppLaunchCmdSaveData\",            10, \"Sent to running app before\\n\"\n                                                              \"sysAppLaunchCmdFind or other\\n\"\n                                                              \"action codes that will cause data\\n\"\n                                                              \"searches or manipulation\");\n    ei.add_constant(\"sysAppLaunchCmdInitDatabase\",        11, \"Initialize a database; sent by\\n\"\n                                                              \"DesktopLink server to the app whose\\n\"\n                                                              \"creator ID matches that of the database\\n\"\n                                                              \"created in response to the \\\"create db\\\" request\");\n    ei.add_constant(\"sysAppLaunchCmdSyncCallApplication\", 12, \"Used by DesktopLink Server command\\n\"\n                                                              \"\\\"call application\\\"\");\n\n    id = create_enum_type(ename, ei, 0, TYPE_SIGN_NO_SIGN, 0, \"Action codes\");\n  }\n}\n\n//-----------------------------------------------------------------------\n//\n//  Create a enumeration with event codes\n//\nstatic make_events()\n{\n  auto ename = \"events\";\n  auto id = get_named_type_tid(ename);\n  if ( id == BADADDR )\n  {\n    auto ei = enum_type_data_t();\n    ei.bte = ei.bte | BTE_UDEC;\n    ei.add_constant( \"nilEvent\",              0);\n    ei.add_constant(\"penDownEvent\",           1);\n    ei.add_constant(\"penUpEvent\",             2);\n    ei.add_constant(\"penMoveEvent\",           3);\n    ei.add_constant(\"keyDownEvent\",           4);\n    ei.add_constant(\"winEnterEvent\",          5);\n    ei.add_constant(\"winExitEvent\",           6);\n    ei.add_constant(\"ctlEnterEvent\",          7);\n    ei.add_constant(\"ctlExitEvent\",           8);\n    ei.add_constant(\"ctlSelectEvent\",         9);\n    ei.add_constant(\"ctlRepeatEvent\",        10);\n    ei.add_constant(\"lstEnterEvent\",         11);\n    ei.add_constant(\"lstSelectEvent\",        12);\n    ei.add_constant(\"lstExitEvent\",          13);\n    ei.add_constant(\"popSelectEvent\",        14);\n    ei.add_constant(\"fldEnterEvent\",         15);\n    ei.add_constant(\"fldHeightChangedEvent\", 16);\n    ei.add_constant(\"fldChangedEvent\",       17);\n    ei.add_constant(\"tblEnterEvent\",         18);\n    ei.add_constant(\"tblSelectEvent\",        19);\n    ei.add_constant(\"daySelectEvent\",        20);\n    ei.add_constant(\"menuEvent\",             21);\n    ei.add_constant(\"appStopEvent\",          22);\n    ei.add_constant(\"frmLoadEvent\",          23);\n    ei.add_constant(\"frmOpenEvent\",          24);\n    ei.add_constant(\"frmGotoEvent\",          25);\n    ei.add_constant(\"frmUpdateEvent\",        26);\n    ei.add_constant(\"frmSaveEvent\",          27);\n    ei.add_constant(\"frmCloseEvent\",         28);\n    ei.add_constant(\"tblExitEvent\",          29);\n    id = create_enum_type(ename, ei, 0, TYPE_SIGN_NO_SIGN, 0, \"Event codes\");\n  }\n}\n\n//-----------------------------------------------------------------------\nstatic main()\n{\n  process_segments();\n  make_actions();\n  make_events();\n}\n\n//-----------------------------------------------------------------------\n#ifdef __undefined_symbol__\n    // WE DO NOT USE IDC HOTKEYS, JUST SIMPLE KEYBOARD MACROS\n    // (see IDA.CFG, macro Alt-5 for mc68k)\n//-----------------------------------------------------------------------\n//\n//  Register Ctrl-R as a hotkey for \"make offset from A5\" command\n//  (not used, simple keyboard macro is used instead, see IDA.CFG)\n//\n//  There is another (manual) way to convert an operand to an offset:\n//    - press Ctrl-R\n//    - enter \"A5BASE\"\n//    - press Enter\n//\nstatic setup_pilot()\n{\n  auto h0,h1;\n  h0 = \"Alt-1\";\n  h1 = \"Alt-2\";\n  add_idc_hotkey(h0,\"a5offset0\");\n  add_idc_hotkey(h1,\"a5offset1\");\n  msg(\"Use %s to convert the first operand to an offset from A5\\n\",h0);\n  msg(\"Use %s to convert the second operand to an offset from A5\\n\",h1);\n}\n\nstatic a5offset0(void) { op_plain_offset(get_screen_ea(),0,get_name_ea_simple(\"A5BASE\")); }\nstatic a5offset1(void) { op_plain_offset(get_screen_ea(),1,get_name_ea_simple(\"A5BASE\")); }\n\n#endif // 0\n</code></pre>"},{"location":"developer-guide/idc/idc-examples.html#renimp","title":"renimp","text":"<p>Script that renames imports.</p> <pre><code>/*\n   Rename imports.\n\n   This script renames entries of a dynamically built import table.\n   For example, from a table like this:\n\n      dd offset ntdll_NtPowerInformation\n      dd offset ntdll_NtInitiatePowerAction\n      dd offset ntdll_NtSetThreadExecutionState\n      dd offset ntdll_NtRequestWakeupLatency\n      dd offset ntdll_NtGetDevicePowerState\n      dd offset ntdll_NtIsSystemResumeAutomatic\n      dd offset ntdll_NtRequestDeviceWakeup\n      dd offset ntdll_NtCancelDeviceWakeupRequest\n      dd offset ntdll_RtlQueryRegistryValues\n\n\n   it will create a table like this:\n\n      NtPowerInformation dd offset ntdll_NtPowerInformation\n      NtInitiatePowerAction dd offset ntdll_NtInitiatePowerAction\n      NtSetThreadExecutionState dd offset ntdll_NtSetThreadExecutionState\n      NtRequestWakeupLatency dd offset ntdll_NtRequestWakeupLatency\n      NtGetDevicePowerState dd offset ntdll_NtGetDevicePowerState\n      NtIsSystemResumeAutomatic dd offset ntdll_NtIsSystemResumeAutomatic\n      NtRequestDeviceWakeup dd offset ntdll_NtRequestDeviceWakeup\n      NtCancelDeviceWakeupRequest dd offset ntdll_NtCancelDeviceWakeupRequest\n      RtlQueryRegistryValues dd offset ntdll_RtlQueryRegistryValues\n\n   Usage: select the import table and run the script.\n\n   Known problems: if the dll name contains an underscore, the function\n   names might be incorrect. Special care is taken for the ws2_32.dll but\n   other dlls will have wrong function names.\n\n*/\n\n#include &lt;idc.idc&gt;\n\nstatic main()\n{\n  auto ea1, ea2, idx, dllname, name;\n\n  ea1 = read_selection_start();\n  ea2 = read_selection_end();\n  if ( ea1 == BADADDR )\n  {\n    warning(\"Please select the import table before running the renimp script\");\n    return;\n  }\n\n  auto ptrsz, DeRef;\n  auto bitness = get_segm_attr(ea1, SEGATTR_BITNESS);\n  if ( bitness == 1 )\n  {\n    ptrsz = 4;\n    DeRef = get_wide_dword;\n  }\n  else if ( bitness == 2 )\n  {\n    ptrsz = 8;\n    DeRef = get_qword;\n  }\n  else\n  {\n    warning(\"Unsupported segment bitness!\");\n    return;\n  }\n\n  while ( ea1 &lt; ea2 )\n  {\n    name = Name(DeRef(ea1));\n    idx = strstr(name, \"_\");\n    dllname = substr(name, 0, idx);\n\n    // Most likely the dll name is ws2_32\n    if ( dllname == \"ws2\" )\n      idx = idx + 3;\n\n    // Extract the function name\n    name = substr(name, idx+1, -1);\n    if ( !set_name(ea1, name, SN_CHECK|SN_NOWARN) )\n    {\n      // failed to give a name - it could be that the name has already been\n      // used in the program. add a suffix\n      for ( idx=0; idx &lt; 99; idx++ )\n      {\n        if ( set_name(ea1, name + \"_\" + ltoa(idx, 10), SN_CHECK|SN_NOWARN) )\n          break;\n      }\n    }\n    ea1 = ea1 + ptrsz;\n  }\n}\n</code></pre>"},{"location":"developer-guide/idc/idc-examples.html#resource","title":"resource","text":"<p>Sample that demonstrates how new executable format can be analyzed.</p> <pre><code>//\n//      This is an example how New Executable Format resources can be\n//      analyzed. In this example we analyze Version Information resource\n//      type only.\n//      It is possible to write functions to analyze other types too.\n//\n//\n\n#include &lt;idc.idc&gt;\n//-------------------------------------------------------------------\nstatic nextResource(ea) {       // find next resource\n  auto next;\n  auto name;\n\n  next = ea;\n  while ( (next=get_next_seg(next)) != -1 ) {\n    name = get_segm_name(next);\n    if ( substr(name,0,3) == \"res\" ) break;     // Yes, this is a resource\n  }\n  return next;\n}\n\n//-------------------------------------------------------------------\nstatic getResourceType(cmt) {\n  auto i;\n  i = strstr(cmt,\"(\");\n  if ( i != -1 ) {\n    i = i + 1;\n    return xtol(substr(cmt,i,i+4));     // get type of the resource\n  }\n  return 0;                             // couldn't determine rsc type\n}\n\n//-------------------------------------------------------------------\nstatic getResourceID(cmt) {\n  auto i;\n  i = strstr(cmt,\":\");\n  if ( i != -1 ) {\n    i = i + 1;\n    return long(substr(cmt,i,-1));      // get ID of the resource\n  }\n  return 0;                             // couldn't determine rsc ID\n}\n\n//-------------------------------------------------------------------\nstatic ResourceCursor(ea,id) {\n  msg(\"Cursor, id: %ld\\n\",id);\n}\n\n//-------------------------------------------------------------------\nstatic ResourceBitmap(ea,id) {\n  msg(\"Bitmap, id: %ld\\n\",id);\n}\n\n//-------------------------------------------------------------------\nstatic ResourceIcon(ea,id) {\n  msg(\"Icon, id: %ld\\n\",id);\n}\n\n//-------------------------------------------------------------------\nstatic ResourceMenu(ea,id) {\n  msg(\"Menu, id: %ld\\n\",id);\n}\n\n//-------------------------------------------------------------------\nstatic ResourceDbox(ea,id) {\n  msg(\"Dbox, id: %ld\\n\",id);\n}\n\n//-------------------------------------------------------------------\nstatic ResourceStrT(ea,id) {\n  msg(\"String Table, id: %ld\\n\",id);\n}\n\n//-------------------------------------------------------------------\nstatic ResourceFontDir(ea,id) {\n  msg(\"FontDir, id: %ld\\n\",id);\n}\n\n//-------------------------------------------------------------------\nstatic ResourceFont(ea,id) {\n  msg(\"Font, id: %ld\\n\",id);\n}\n\n//-------------------------------------------------------------------\nstatic ResourceAccl(ea,id) {\n  msg(\"Accelerator, id: %ld\\n\",id);\n}\n\n//-------------------------------------------------------------------\nstatic ResourceData(ea,id) {\n  msg(\"Resource Data, id: %ld\\n\",id);\n}\n\n//-------------------------------------------------------------------\nstatic ResourceCurDir(ea,id) {\n  msg(\"Cursor Dir, id: %ld\\n\",id);\n}\n\n//-------------------------------------------------------------------\nstatic ResourceIconDir(ea,id) {\n  msg(\"Icon Dir, id: %ld\\n\",id);\n}\n\n//-------------------------------------------------------------------\nstatic ResourceName(ea,id) {\n  msg(\"Cursor, id: %ld\\n\",id);\n}\n\n//-------------------------------------------------------------------\nstatic ResourceVersion(ea,id) {\n\n  msg(\"Version info, id: %ld\\n\",id);\n\n  ea = AnalyzeVBlock(ea,0);\n}\n\n//-------------------------------------------------------------------\nstatic ConvertToStr(vea,len) {\n  auto ea;\n  auto slen;\n  ea = vea;\n  for ( ea=vea; len &gt; 0; vea = ea ) {\n    while ( get_wide_byte(ea) != 0 ) ea = ea + 1;\n    ea = ea + 1;\n    slen = ea - vea;\n    create_strlit(vea,slen);\n    len = len - slen;\n  }\n}\n\n//-------------------------------------------------------------------\nstatic Pad32(ea) {\n  auto vea;\n  vea = (ea + 3) &amp; ~3;                  // align to 32-bit boundary\n  if ( vea != ea ) {                    // extra bytes found\n    make_array(ea,vea-ea);\n    set_cmt(ea, \"Padding bytes\", 0);\n  }\n  return vea;\n}\n\n//-------------------------------------------------------------------\nstatic AnalyzeVBlock(ea,blnum) {\n  auto key,block,vsize,x,vea,keyea;\n  auto blstart,blend;\n\n  blstart = ea;                         // save block start\n\n  block = get_wide_word(ea);\n  set_name(ea, sprintf(\"rscVinfoBlSize_%ld\", blnum));\n  create_word(ea);\n  op_num(ea,0);\n\n  ea = ea + 2;\n  vsize = get_wide_word(ea);\n  set_name(ea, sprintf(\"rscVinfoValSize_%ld\", blnum));\n  create_word(ea);\n  op_num(ea,0);\n\n  ea = ea + 2;\n  keyea = ea;\n  set_name(key, sprintf(\"rscVinfoKey_%ld\", blnum));\n  key = \"\";\n  while ( get_wide_byte(ea) != 0 ) {\n    key = key + char(get_wide_byte(ea));\n    ea = ea + 1;\n  }\n  ea = ea + 1;\n  create_strlit(keyea,ea-keyea);\n\n  vea = Pad32(ea);\n\n  set_name(vea, sprintf(\"rscVinfoValue_%ld\", blnum));\n\n  blend = vea + vsize;                  // find block end\n\n//  msg(\"At %lX key is: %s\\n\",keyea,key);\n\n  if      ( key == \"VS_VERSION_INFO\" ) {\n\n        ;       // nothing to do\n\n  } else if ( key == \"VarFileInfo\"     ) {\n\n        ;       // nothing to do\n\n  } else if ( key == \"Translation\"     ) {\n\n    for ( ea=vea; ea &lt; blend; ea=ea+4 ) {\n      auto lang,charset;\n\n      lang = get_wide_word(ea);\n      charset = get_wide_word(ea+2);\n\n        if      ( lang == 0x0401 ) lang = \"Arabic\";\n        else if ( lang == 0x0402 ) lang = \"Bulgarian\";\n        else if ( lang == 0x0403 ) lang = \"Catalan\";\n        else if ( lang == 0x0404 ) lang = \"Traditional Chinese\";\n        else if ( lang == 0x0405 ) lang = \"Czech\";\n        else if ( lang == 0x0406 ) lang = \"Danish\";\n        else if ( lang == 0x0407 ) lang = \"German\";\n        else if ( lang == 0x0408 ) lang = \"Greek\";\n        else if ( lang == 0x0409 ) lang = \"U.S. English\";\n        else if ( lang == 0x040A ) lang = \"Castilian Spanish\";\n        else if ( lang == 0x040B ) lang = \"Finnish\";\n        else if ( lang == 0x040C ) lang = \"French\";\n        else if ( lang == 0x040D ) lang = \"Hebrew\";\n        else if ( lang == 0x040E ) lang = \"Hungarian\";\n        else if ( lang == 0x040F ) lang = \"Icelandic\";\n        else if ( lang == 0x0410 ) lang = \"Italian\";\n        else if ( lang == 0x0411 ) lang = \"Japanese\";\n        else if ( lang == 0x0412 ) lang = \"Korean\";\n        else if ( lang == 0x0413 ) lang = \"Dutch\";\n        else if ( lang == 0x0414 ) lang = \"Norwegian - Bokmal\";\n        else if ( lang == 0x0415 ) lang = \"Polish\";\n        else if ( lang == 0x0416 ) lang = \"Brazilian Portuguese\";\n        else if ( lang == 0x0417 ) lang = \"Rhaeto-Romanic\";\n        else if ( lang == 0x0418 ) lang = \"Romanian\";\n        else if ( lang == 0x0419 ) lang = \"Russian\";\n        else if ( lang == 0x041A ) lang = \"Croato-Serbian (Latin)\";\n        else if ( lang == 0x041B ) lang = \"Slovak\";\n        else if ( lang == 0x041C ) lang = \"Albanian\";\n        else if ( lang == 0x041D ) lang = \"Swedish\";\n        else if ( lang == 0x041E ) lang = \"Thai\";\n        else if ( lang == 0x041F ) lang = \"Turkish\";\n        else if ( lang == 0x0420 ) lang = \"Urdu\";\n        else if ( lang == 0x0421 ) lang = \"Bahasa\";\n        else if ( lang == 0x0804 ) lang = \"Simplified Chinese\";\n        else if ( lang == 0x0807 ) lang = \"Swiss German\";\n        else if ( lang == 0x0809 ) lang = \"U.K. English\";\n        else if ( lang == 0x080A ) lang = \"Mexican Spanish\";\n        else if ( lang == 0x080C ) lang = \"Belgian French\";\n        else if ( lang == 0x0810 ) lang = \"Swiss Italian\";\n        else if ( lang == 0x0813 ) lang = \"Belgian Dutch\";\n        else if ( lang == 0x0814 ) lang = \"Norwegian - Nynorsk\";\n        else if ( lang == 0x0816 ) lang = \"Portuguese\";\n        else if ( lang == 0x081A ) lang = \"Serbo-Croatian (Cyrillic)\";\n        else if ( lang == 0x0C0C ) lang = \"Canadian French\";\n        else if ( lang == 0x100C ) lang = \"Swiss French\";\n\n        if      ( charset == 0    ) charset = \"7-bit ASCII\";\n        else if ( charset == 932  ) charset = \"Windows, Japan (Shift - JIS X-0208)\";\n        else if ( charset == 949  ) charset = \"Windows, Korea (Shift - KSC 5601)\";\n        else if ( charset == 950  ) charset = \"Windows, Taiwan (GB5)\";\n        else if ( charset == 1200 ) charset = \"Unicode\";\n        else if ( charset == 1250 ) charset = \"Windows, Latin-2 (Eastern European)\";\n        else if ( charset == 1251 ) charset = \"Windows, Cyrillic\";\n        else if ( charset == 1252 ) charset = \"Windows, Multilingual\";\n        else if ( charset == 1253 ) charset = \"Windows, Greek\";\n        else if ( charset == 1254 ) charset = \"Windows, Turkish\";\n        else if ( charset == 1255 ) charset = \"Windows, Hebrew\";\n        else if ( charset == 1256 ) charset = \"Windows, Arabic\";\n\n        set_cmt(ea, \"Language: \" + lang, 0);\n        create_word(ea);\n        op_num(ea,0);\n        set_cmt(ea+2, \"Character set: \" + charset, 0);\n        create_word(ea+2);\n        op_num(ea+2,0);\n\n    }\n  } else if ( key == \"StringFileInfo\"  ) {\n\n        ConvertToStr(vea,vsize);\n\n  } else {\n        ConvertToStr(vea,vsize);\n  }\n\n  blend = Pad32(blend);\n  update_extra_cmt(blend,E_NEXT + 0,\";------------------------------------------------------\");\n  blnum = (blnum+1) * 10;               // nested block number\n  while ( (blend-blstart) &lt; block ) {   // nested block exist\n    msg(\"Nested block at %lX\\n\",blend);\n    set_cmt(blend, sprintf(\"Nested block...%ld\",blnum), 0);\n    blend = AnalyzeVBlock(blend,blnum);\n    blnum = blnum + 1;\n  }\n  return blend;\n}\n\n//-------------------------------------------------------------------\nstatic main(void) {\n  auto ea;\n  auto type,id;\n\n  msg(\"Searching for resources...\\n\");\n  ea = get_first_seg();\n  while ( (ea=nextResource(ea)) != -1 ) {\n    msg(\"Found a resource at %08lX, name: %s\\n\",ea,get_segm_name(ea));\n    type = getResourceType(get_extra_cmt(ea,E_PREV + 0));        // get rsc type\n    id   = getResourceID(get_extra_cmt(ea,E_PREV + 3));          // get rsc id\n    if      ( type == 0x8001 )  ResourceCursor(ea,id);\n    else if ( type == 0x8002 )  ResourceBitmap(ea,id);\n    else if ( type == 0x8003 )  ResourceIcon(ea,id);\n    else if ( type == 0x8004 )  ResourceMenu(ea,id);\n    else if ( type == 0x8005 )  ResourceDbox(ea,id);\n    else if ( type == 0x8006 )  ResourceStrT(ea,id);\n    else if ( type == 0x8007 )  ResourceFontDir(ea,id);\n    else if ( type == 0x8008 )  ResourceFont(ea,id);\n    else if ( type == 0x8009 )  ResourceAccl(ea,id);\n    else if ( type == 0x800A )  ResourceData(ea,id);\n\n    else if ( type == 0x800C )  ResourceCurDir(ea,id);\n\n    else if ( type == 0x800E )  ResourceIconDir(ea,id);\n    else if ( type == 0x800F )  ResourceName(ea,id);\n    else if ( type == 0x8010 )  ResourceVersion(ea,id);\n    else msg(\"Unknown resource type %04lX\\n\",type);\n  }\n  msg(\"Done.\\n\");\n}\n</code></pre>"},{"location":"developer-guide/idc/idc-examples.html#struct2","title":"struct2","text":"<p>Sample that demonstrates structure manipulation functions.</p> <pre><code>//\n//      This example shows how to use structure manipulation functions.\n//\n\n#include &lt;idc.idc&gt;\n\n#define MAXSTRUCT       200\n\n// Create MAXSTRUT structures.\n// Each structure will have 3 fields:\n//      - a byte array field\n//      - a word field\n//      - a structure field\n\nstatic main()\n{\n  auto i, idx, name, id2;\n\n  for ( i=0; i &lt; MAXSTRUCT; i++ )\n  {\n    name = sprintf(\"str_%03d\", i);\n    idx = add_struc(-1, name, 0);               // create a structure\n    if ( idx == -1 )                            // if not ok\n    {\n      warning(\"Can't create structure %s, giving up\",name);\n      break;\n    }\n    else\n    {\n      add_struc_member(idx,\n                     \"bytemem\",\n                     get_struc_size(idx),\n                     FF_DATA|FF_BYTE,\n                     -1,\n                     5*1);                      // char[5]\n      add_struc_member(idx,\n                     \"wordmem\",\n                     get_struc_size(idx),\n                     FF_DATA|FF_WORD,\n                     -1,\n                     1*2);                      // short\n      id2 = get_struc_id(sprintf(\"str_%03d\",i-1));\n      if ( i != 0 ) add_struc_member(idx,\n                     \"inner\",\n                     get_struc_size(idx),\n                     FF_DATA|FF_STRUCT,\n                     id2,\n                     get_struc_size(id2));        // sizeof(str_...)\n      msg(\"Structure %s is successfully created, idx=%08lX, prev=%08lX\\n\",\n                                                        name, idx, id2);\n    }\n  }\n  msg(\"Done, total number of structures: %d\\n\",get_struc_qty());\n}\n</code></pre>"},{"location":"developer-guide/idc/idc-examples.html#structst","title":"structst","text":"<p>Sample that demonstrates structure access functions.</p> <pre><code>//\n//      This example shows how to use structure access functions.\n//\n\n#include &lt;idc.idc&gt;\n\n// Create a simple structure\n// dump layout of all structures (including the created one)\n// dump current function's frame (if it exists)\n\n\nstatic dump_struct(id)\n{\n  auto m;\n  msg(\"Structure %s (id 0x%X):\\n\",get_struc_name(id), id);\n  msg(\"  Regular    comment: %s\\n\",get_struc_cmt(id,0));\n  msg(\"  Repeatable comment: %s\\n\",get_struc_cmt(id,1));\n  msg(\"  Size              : %d\\n\",get_struc_size(id));\n  msg(\"  Number of members : %d\\n\",get_member_qty(id));\n  for ( m = 0;\n        m != get_struc_size(id);\n        m = get_next_offset(id,m) ) \n  {\n    auto mname;\n    mname = get_member_name(id,m);\n    if ( mname == \"\" ) \n    {\n      msg(\"  Hole (%d bytes)\\n\",get_next_offset(id,m)-m);\n    } \n    else \n    {\n      auto type;\n      msg(\"  Member name   : %s\\n\",get_member_name(id,m));\n      msg(\"    Regular cmt : %s\\n\",get_member_cmt(id,m,0));\n      msg(\"    Rept.   cmt : %s\\n\",get_member_cmt(id,m,1));\n      msg(\"    Member size : %d\\n\",get_member_size(id,m));\n      type = get_member_flag(id,m) &amp; DT_TYPE;\n           if ( type == FF_BYTE     ) type = \"Byte\";\n      else if ( type == FF_WORD     ) type = \"Word\";\n      else if ( type == FF_DWORD    ) type = \"Double word\";\n      else if ( type == FF_QWORD    ) type = \"Quadro word\";\n      else if ( type == FF_TBYTE    ) type = \"Ten bytes\";\n      else if ( type == FF_STRLIT   ) type = \"ASCII string\";\n      else if ( type == FF_STRUCT   ) type = sprintf(\"Structure '%s'\",get_struc_name(get_member_strid(id,m)));\n      else if ( type == FF_FLOAT    ) type = \"Float\";\n      else if ( type == FF_DOUBLE   ) type = \"Double\";\n      else if ( type == FF_PACKREAL ) type = \"Packed Real\";\n      else                            type = sprintf(\"Unknown type %08X\",type);\n      msg(\"    Member type : %s\",type);\n      type = get_member_flag(id,m);\n           if ( is_off0(type)  ) msg(\" Offset\");\n      else if ( is_char0(type) ) msg(\" Character\");\n      else if ( is_seg0(type)  ) msg(\" Segment\");\n      else if ( is_dec0(type)  ) msg(\" Decimal\");\n      else if ( is_hex0(type)  ) msg(\" Hex\");\n      else if ( is_oct0(type)  ) msg(\" Octal\");\n      else if ( is_bin0(type)  ) msg(\" Binary\");\n      msg(\"\\n\");\n    }\n  }\n}\n\nstatic main() {\n  auto idx,code;\n\n  idx = add_struc(-1, \"str1_t\", 0);     // create a structure\n  if ( idx != -1 ) {                    // if ok\n    auto id2;\n        // add member: offset from struct start 0, type - byte, 5 elements\n    add_struc_member(idx,\"bytemem\",0,FF_DATA|FF_BYTE,-1,5*1);\n    add_struc_member(idx,\"wordmem\",5,FF_DATA|FF_WORD,-1,1*2);\n    set_member_cmt(idx,0,\"This is 5 element byte array\",0);\n    set_member_cmt(idx,5,\"This is 1 word\",0);\n    id2 = add_struc(-1, \"str2_t\", 0); // create another structure\n    add_struc_member(id2,\"first\", 0,FF_DATA|FF_BYTE,-1,1*1);\n    add_struc_member(id2,\"strmem\",1,FF_DATA|FF_STRUCT,idx,get_struc_size(idx));\n    set_member_cmt(id2,1,\"This is structure member\",0);\n  }\n\n  msg(\"Total number of structures: %d\\n\",get_struc_qty());\n  auto id;\n  for ( idx=get_first_struc_idx(); idx != -1; idx=get_next_struc_idx(idx) ) {\n    id = get_struc_by_idx(idx);\n    if ( id == -1 ) error(\"Internal IDA error, get_struc_by_idx returned -1!\");\n    dump_struct(id);\n  }\n  // dump current function's stack frame\n  id = get_func_attr(here, FUNCATTR_FRAME);\n  if ( id != -1 )\n  {\n    msg(\"current function frame layout:\\n\");\n    dump_struct(id);\n  }\n}\n</code></pre>"},{"location":"developer-guide/idc/idc-examples.html#tpdll","title":"tpdll","text":"<p>Example executed when IDA detects Turbo Pascal DLL.</p> <pre><code>//\n// This file is executed when IDA detects Turbo Pascal DLL\n//\n\n#include &lt;idc.idc&gt;\n\nstatic main()\n{\n  // Set pascal type strings. Just in case\n  set_inf_attr(INF_STRTYPE, STRTYPE_PASCAL);\n\n  // System unit used protected commands so\n  // set protected mode processor\n  set_processor_type(\"80386p\", SETPROC_USER);\n\n  auto start = get_inf_attr(INF_START_EA);\n\n  // Give pascal style name to the entry point\n  // and delete the bogus one-instruction function\n  // which was created by the startup signature\n  set_name(start, \"LIBRARY\");\n  del_func(start);\n\n  // Plan to create a good PROGRAM function instead of\n  // the deleted one\n  auto_mark_range(start, start+1, AU_PROC);\n\n  // Get address of the initialization subrountine\n  auto init = get_first_fcref_from(start+5);\n  set_name(init, \"@__SystemInit$qv\");\n\n  // Delete the bogus function which was created by the secondary\n  // startup signature.\n  del_func(init);\n\n  // Create a good initialization function\n  add_func(init);\n  set_func_flags(init, FUNC_LIB|get_func_flags(init));\n\n  // Check for presence of LibExit() function\n  auto exit = get_name_ea_simple(\"@__LibExit$qv\");\n\n  // If we have found function then define it\n  // with FUNC_NORET attribute\n  if ( exit != BADADDR )\n  {\n    add_func(exit);\n    set_func_flags(exit, FUNC_NORET|FUNC_LIB|get_func_flags(exit));\n  }\n}\n</code></pre>"},{"location":"developer-guide/idc/idc-examples.html#tpdos","title":"tpdos","text":"<p>Example executed when IDA detects Turbo Pascal DOS app.</p> <pre><code>//\n// This file is executed when IDA detects Turbo Pascal DOS application.\n//\n\n#include &lt;idc.idc&gt;\n\nstatic main()\n{\n  // Set pascal type strings. Just in case\n  set_inf_attr(INF_STRTYPE, STRTYPE_PASCAL);\n\n  auto start = get_inf_attr(INF_START_EA);\n\n  // Give pascal style name to the entry point\n  // and delete the bogus one-instruction function\n  // which was created by the startup signature\n  set_name(start,\"PROGRAM\");\n  del_func(start);\n\n  // Plan to create a good PROGRAM function instead of\n  // the deleted one\n  auto_mark_range(start, start+1, AU_PROC);\n\n  // Get address of the initialization subrountine\n  auto init = get_first_fcref_from(start);\n  set_name(init, \"@__SystemInit$qv\");\n\n  // Delete the bogus function which was created by the secondary\n  // startup signature.\n  del_func(init);\n\n  // Create a good initialization function\n  add_func(init);\n  set_func_flags(init, FUNC_LIB|get_func_flags(init));\n\n  // find sequence of\n  //      xor     cx, cx\n  //      xor     bx, bx\n  // usually Halt() starts with these instructions\n\n  auto halt = find_binary(init,1,\"33 c9 33 db\");\n\n  // If we have found the sequence then define Halt() function\n  // with FUNC_NORET attribute\n  if ( halt != BADADDR )\n  {\n    set_name(halt, \"@Halt$q4Word\");\n    add_func(halt);\n    set_func_flags(halt, FUNC_NORET|FUNC_LIB|get_func_flags(halt));\n  }\n}\n</code></pre>"},{"location":"developer-guide/idc/idc-examples.html#tpne","title":"tpne","text":"<p>Example executed when IDA detects Windows or DPMI app.</p> <pre><code>//\n// This file is executed when IDA detects Turbo Pascal Windows\n// or DPMI application.\n//\n\n#include &lt;idc.idc&gt;\n\nstatic main()\n{\n  // Set pascal type strings. Just in case\n  set_inf_attr(INF_STRTYPE, STRTYPE_PASCAL);\n\n  // System unit used protected commands so\n  // set protected mode processor\n  set_processor_type(\"80386p\", SETPROC_USER);\n\n  auto start = get_inf_attr(INF_START_EA);\n\n  // Give pascal style name to the entry point\n  // and delete the bogus one-instruction function\n  // which was created by the startup signature\n  set_name(start, \"PROGRAM\");\n  del_func(start);\n\n  // Plan to create a good PROGRAM function instead of\n  // the deleted one\n  auto_mark_range(start, start+1, AU_PROC);\n\n  // Get address of the initialization subrountine\n  auto init = get_first_fcref_from(start+5);\n  set_name(init, \"@__SystemInit$qv\");\n\n  // Delete the bogus function which was created by the secondary\n  // startup signature.\n  del_func(init);\n\n  // find sequence of\n  //      xor     cx, cx\n  //      xor     bx, bx\n  // usually Halt() starts with these instructions\n\n  auto halt = find_binary(init, 1, \"33 c9 33 db\");\n\n  // If we have found the sequence then define Halt() function\n  // with FUNC_NORET attribute\n  if ( halt != BADADDR )\n  {\n    set_name(halt, \"@Halt$q4Word\");\n    add_func(halt);\n    set_func_flags(halt, FUNC_NORET|FUNC_LIB|get_func_flags(halt));\n  }\n\n  // Create a good initialization function\n  add_func(init);\n  set_func_flags(init, FUNC_LIB|get_func_flags(init));\n}\n</code></pre>"},{"location":"developer-guide/idc/idc-examples.html#xrefs","title":"xrefs","text":"<p>Example shows how to use cross-reference related functions.</p> <pre><code>//\n//\n//      This example shows how to use cross-reference related functions.\n//      It displays xrefs to the current location.\n//\n\n#include &lt;idc.idc&gt;\n\nstatic main() {\n  auto ea,flag,x,y;\n  flag = 1;\n  ea = get_screen_ea();\n\n//  add_dref(ea,ea1,dr_R);         // set data reference (read)\n//  add_cref(ea,ea1,fl_CN);          // set 'call near' reference\n//  del_cref(ea,ea1,1);\n\n//\n//      Now show all reference relations between ea &amp; ea1.\n//\n  msg(\"\\n*** Code references from \" + atoa(ea) + \"\\n\");\n  for ( x=get_first_cref_from(ea); x != BADADDR; x=get_next_cref_from(ea,x) )\n    msg(atoa(ea) + \" refers to \" + atoa(x) + xrefchar() + \"\\n\");\n\n  msg(\"\\n*** Code references to \" + atoa(ea) + \"\\n\");\n  x = ea;\n  for ( y=get_first_cref_to(x); y != BADADDR; y=get_next_cref_to(x,y) )\n    msg(atoa(x) + \" is referred from \" + atoa(y) + xrefchar() + \"\\n\");\n\n  msg(\"\\n*** Code references from \" + atoa(ea) + \" (only non-trivial refs)\\n\");\n  for ( x=get_first_fcref_from(ea); x != BADADDR; x=get_next_fcref_from(ea,x) )\n    msg(atoa(ea) + \" refers to \" + atoa(x) + xrefchar() + \"\\n\");\n\n  msg(\"\\n*** Code references to \" + atoa(ea) + \" (only non-trivial refs)\\n\");\n  x = ea;\n  for ( y=get_first_fcref_to(x); y != BADADDR; y=get_next_fcref_to(x,y) )\n    msg(atoa(x) + \" is referred from \" + atoa(y) + xrefchar() + \"\\n\");\n\n  msg(\"\\n*** Data references from \" + atoa(ea) + \"\\n\");\n  for ( x=get_first_dref_from(ea); x != BADADDR; x=get_next_dref_from(ea,x) )\n    msg(atoa(ea) + \" accesses \" + atoa(x) + xrefchar() + \"\\n\");\n\n  msg(\"\\n*** Data references to \" + atoa(ea) + \"\\n\");\n  x = ea;\n  for ( y=get_first_dref_to(x); y != BADADDR; y=get_next_dref_to(x,y) )\n    msg(atoa(x) + \" is accessed from \" + atoa(y) + xrefchar() + \"\\n\");\n\n}\n\nstatic xrefchar()\n{\n  auto x, is_user;\n  x = get_xref_type();\n\n  is_user = (x &amp; XREF_USER) ? \", user defined)\" : \")\";\n\n  if ( x == fl_F )  return \" (ordinary flow\" + is_user;\n  if ( x == fl_CF ) return \" (call far\"      + is_user;\n  if ( x == fl_CN ) return \" (call near\"     + is_user;\n  if ( x == fl_JF ) return \" (jump far\"      + is_user;\n  if ( x == fl_JN ) return \" (jump near\"     + is_user;\n  if ( x == dr_O  ) return \" (offset\"        + is_user;\n  if ( x == dr_W  ) return \" (write)\"        + is_user;\n  if ( x == dr_R  ) return \" (read\"          + is_user;\n  if ( x == dr_T  ) return \" (textual\"       + is_user;\n  return \"(?)\";\n}\n</code></pre>"},{"location":"developer-guide/idc/idc-examples.html#other-sample-scripts","title":"Other sample scripts","text":""},{"location":"developer-guide/idc/idc-examples.html#batch-analysis","title":"Batch analysis","text":"<p>This program forces the IDA Disassembler in \u201cbatch\u201d analysis mode if it is started in the following way : ida -Sanalysis.idc file.</p> <pre><code>static main() {\n  auto x,y;\n\n  Message(\"Waiting for the end of auto analys...\\n\");\n  Wait();\n\n  x = SegStart(BeginEA());\n  y = SegEnd(BeginEA());\n  Message(\"Analysing area %08X - %08X...\\n\",x,y);\n  AnalyseArea(x,y);\n  Wait();       // wait for code segment analysis to finish\n\n  Message(\"\\n\\n------ Creating output file.... --------\\n\");\n  WriteTxt(\"ida.out\",0,0xFFFFFFFF);\n  Message(\"All done, exiting...\\n\");\n  Exit(0);              // exit to OS, error code 0 - success\n}\n</code></pre>"},{"location":"developer-guide/idc/idc-examples.html#device-driver-analysis","title":"Device driver analysis","text":"<p>This program is automatically executed when a new device driver is loaded.</p> <pre><code>//\n//      This file is executed when a new device driver is loaded.\n//              Device drivers have extensions DRV or SYS.\n//\n\n#include &lt;idc.idc&gt;\n\nstatic main(void) {\n  auto x,i,base;\n  auto intr,strt;\n  auto attr,cmt;\n  auto nextbase;\n  auto DevReq;\n\n  i = 0;\n  x = MinEA();\n  base = (x &gt;&gt; 4);   // The segment base\n\n  while ( 1 ) {\n    Message(\"Device driver block at %04X\\n\",x);\n\n    MakeName(x,form(\"NextDevice_%ld\",i));\n    MakeWord(x);\n    OpNumber(x,0);\n    if ( Word(x) == 0xFFFF ) {\n      MakeComm(x,\"The last device\");\n    } else {\n      nextbase = base + Word(x+2);\n      OpOff(x,0,[nextbase,0]);\n      MakeComm(x,\"Offset to the next device\");\n    }\n\n    MakeWord(x+2);\n    OpNumber(x+2,0);\n\n    MakeName(x+4,form(\"DevAttr_%ld\",i));\n    MakeWord(x+4);\n    OpNumber(x+4,0);\n    attr = Word(x+4);\n    cmt = \"\";\n    if ( attr &amp; (132M\\n\");\n    if ( attr &amp; (1 Device Request Block\");\n    MakeComm( intr, \"Device Request Block:\\n\"\n          \"0 db length\\n\"\n      \"1 db unit number\\n\"\n      \"2 db command code\\n\"\n      \"5 d? reserved\\n\"\n      \"0D d? command specific data\");\n\n    if( Byte( strt )==0x2E &amp;&amp; Word(strt+1)==0x1E89\n     &amp;&amp; Byte(strt+5)==0x2E &amp;&amp; Word(strt+6)==0x068C\n     &amp;&amp; Word(strt+3)==Word(strt+8)-2)\n    {\n     DevReq=Word(strt+3);\n     Message(\"DevReq at %x\\n\",DevReq);\n     MakeUnkn(x+DevReq,0);MakeUnkn(x+DevReq+2,0);\n     MakeDword(x+DevReq);MakeName(x+DevReq,form(\"DevRequest_%ld\",i));\n    }\n\n    if ( Word(x) == 0xFFFF ||\n       ((Byte(x)==0xE9 || Byte(x)==0xEB) &amp;&amp; i==0) ) break;\n    if ( Dword(x) == 0 ) break; // 04.01.96\n    x = [ nextbase, Word(x) ];\n    i = i + 1;\n  }\n}\n\n</code></pre>"},{"location":"developer-guide/idc/idc-examples.html#new-file-format-definition","title":"New file format definition","text":"<pre><code>//\n//  This is an example how New Executable Format resources can be\n//  analysed. In this example we analyse Version Information resource\n//      type only.\n\n//-------------------------------------------------------------------\nstatic nextResource(ea) {   // find next resource\n  auto next;\n  auto name;\n\n  next = ea;\n  while ( (next=NextSeg(next)) != -1 ) {\n    name = SegName(next);\n    if ( substr(name,0,3) == \"res\" ) break; // Yes, this is a resource\n  }\n  return next;\n}\n\n//-------------------------------------------------------------------\nstatic getResourceType(cmt) {\n  auto i;\n  i = strstr(cmt,\"(\");\n  if ( i != -1 ) {\n    i = i + 1;\n    return xtol(substr(cmt,i,i+4)); // get type of the resource\n  }\n  return 0;             // couldn't determine rsc type\n}\n\n//-------------------------------------------------------------------\nstatic getResourceID(cmt) {\n  auto i;\n  i = strstr(cmt,\":\");\n  if ( i != -1 ) {\n    i = i + 1;\n    return long(substr(cmt,i,-1));  // get ID of the resource\n  }\n  return 0;             // couldn't determine rsc ID\n}\n\n//-------------------------------------------------------------------\nstatic ResourceCursor(ea,id) {\n  Message(form(\"Cursor, id: %ld\\n\",id));\n}\n\n//-------------------------------------------------------------------\nstatic ResourceBitmap(ea,id) {\n  Message(form(\"Bitmap, id: %ld\\n\",id));\n}\n\n//-------------------------------------------------------------------\nstatic ResourceIcon(ea,id) {\n  Message(form(\"Icon, id: %ld\\n\",id));\n}\n\n//-------------------------------------------------------------------\nstatic ResourceMenu(ea,id) {\n  Message(form(\"Menu, id: %ld\\n\",id));\n}\n\n//-------------------------------------------------------------------\nstatic ResourceDbox(ea,id) {\n  Message(form(\"Dbox, id: %ld\\n\",id));\n}\n\n//-------------------------------------------------------------------\nstatic ResourceStrT(ea,id) {\n  Message(form(\"String Table, id: %ld\\n\",id));\n}\n\n//-------------------------------------------------------------------\nstatic ResourceFontDir(ea,id) {\n  Message(form(\"FontDir, id: %ld\\n\",id));\n}\n\n//-------------------------------------------------------------------\nstatic ResourceFont(ea,id) {\n  Message(form(\"Font, id: %ld\\n\",id));\n}\n\n//-------------------------------------------------------------------\nstatic ResourceAccl(ea,id) {\n  Message(form(\"Accelerator, id: %ld\\n\",id));\n}\n\n//-------------------------------------------------------------------\nstatic ResourceData(ea,id) {\n  Message(form(\"Resource Data, id: %ld\\n\",id));\n}\n\n//-------------------------------------------------------------------\nstatic ResourceCurDir(ea,id) {\n  Message(form(\"Cursor Dir, id: %ld\\n\",id));\n}\n\n//-------------------------------------------------------------------\nstatic ResourceIconDir(ea,id) {\n  Message(form(\"Icon Dir, id: %ld\\n\",id));\n}\n\n//-------------------------------------------------------------------\nstatic ResourceName(ea,id) {\n  Message(form(\"Cursor, id: %ld\\n\",id));\n}\n\n//-------------------------------------------------------------------\nstatic ResourceVersion(ea,id) {\n\n  Message(form(\"Version info, id: %ld\\n\",id));\n\n  ea = AnalyseVBlock(ea,0);\n}\n\n//-------------------------------------------------------------------\nstatic ConvertToStr(vea,len) {\n  auto ea;\n  auto slen;\n  ea = vea;\n  for ( ea=vea; len &gt; 0; vea = ea ) {\n    while ( Byte(ea) != 0 ) ea = ea + 1;\n    ea = ea + 1;\n    slen = ea - vea;\n    MakeStr(vea,slen);\n    len = len - slen;\n  }\n}\n\n//-------------------------------------------------------------------\nstatic Pad32(ea) {\n  auto vea;\n  vea = (ea + 3) &amp; ~3;          // align to 32-bit boundary\n  if ( vea != ea ) {            // extra bytes found\n    MakeArray(ea,vea-ea);\n    MakeComm(ea,\"Padding bytes\");\n  }\n  return vea;\n}\n\n//-------------------------------------------------------------------\nstatic AnalyseVBlock(ea,blnum) {\n  auto key,block,vsize,x,vea,keyea;\n  auto blstart,blend;\n\n  blstart = ea;             // save block start\n\n  block = Word(ea);\n  MakeName(ea,form(\"rscVinfoBlSize_%ld\",blnum));\n  MakeWord(ea);\n  OpNumber(ea,0);\n\n  ea = ea + 2;\n  vsize = Word(ea);\n  MakeName(ea,form(\"rscVinfoValSize_%ld\",blnum));\n  MakeWord(ea);\n  OpNumber(ea,0);\n\n  ea = ea + 2;\n  keyea = ea;\n  MakeName(key,form(\"rscVinfoKey_%ld\",blnum));\n  key = \"\";\n  while ( Byte(ea) != 0 ) {\n    key = key + char(Byte(ea));\n    ea = ea + 1;\n  }\n  ea = ea + 1;\n  MakeStr(keyea,ea-keyea);\n\n  vea = Pad32(ea);\n\n  MakeName(vea, form(\"rscVinfoValue_%ld\",blnum));\n\n  blend = vea + vsize;          // find block end\n\n//  Message(form(\"At %lX key is: \",keyea) + key + \"\\n\");\n\n  if      ( key == \"VS_VERSION_INFO\" ) {\n\n    ;   // nothing to do\n\n  } else if ( key == \"VarFileInfo\"     ) {\n\n    ;   // nothing to do\n\n  } else if ( key == \"Translation\"     ) {\n\n    for ( ea=vea; ea \n\n</code></pre>"},{"location":"developer-guide/idc/idc-examples.html#structures-manipulation","title":"Structures manipulation","text":"<p>This program demonstrates basic structure manipulation.</p> <pre><code>#include &lt;idc.idc&gt;\n\nstatic main() {\n  auto idx;\n\n  for ( idx=GetFirstStrucIdx(); idx != -1; idx=GetNextStrucIdx(idx) ) {\n    auto id,m;\n    id = GetStrucId(idx);\n    if ( id == -1 ) Fatal(\"Internal IDA error, GetStrucId returned -1!\");\n    Message(\"Structure %s:\\n\",GetStrucName(id));\n    Message(\"  Regular    comment: %s\\n\",GetStrucComment(id,0));\n    Message(\"  Repeatable comment: %s\\n\",GetStrucComment(id,1));\n    Message(\"  Size              : %d\\n\",GetStrucSize(id));\n    Message(\"  Number of members : %d\\n\",GetMemberQty(id));\n    for ( m = 0;\n      m != GetStrucSize(id);\n      m = GetStrucNextOff(id,m) ) {\n      auto mname;\n      mname = GetMemberName(id,m);\n      if ( mname == \"\" ) {\n        Message(\"  Hole (%d bytes)\\n\",GetStrucNextOff(id,m)-m);\n      } else {\n        auto type;\n        Message(\"  Member name   : %s\\n\",GetMemberName(id,m));\n        Message(\"    Regular cmt : %s\\n\",GetMemberComment(id,m,0));\n        Message(\"    Rept.   cmt : %s\\n\",GetMemberComment(id,m,1));\n        Message(\"    Member size : %d\\n\",GetMemberSize(id,m));\n    type = GetMemberFlag(id,m) &amp; DT_TYPE;\n         if ( type == FF_BYTE     ) type = \"Byte\";\n    else if ( type == FF_WORD     ) type = \"Word\";\n    else if ( type == FF_DWRD     ) type = \"Double word\";\n    else if ( type == FF_QWRD     ) type = \"Quadro word\";\n    else if ( type == FF_TBYT     ) type = \"Ten bytes\";\n    else if ( type == FF_ASCI     ) type = \"ASCII string\";\n    else if ( type == FF_STRU     ) type = form(\"Structure '%s'\",GetStrucName(GetMemberStrId(id,m)));\n    else if ( type == FF_XTRN     ) type = \"Unknown external?!\"; // should not happen\n    else if ( type == FF_FLOAT    ) type = \"Float\";\n    else if ( type == FF_DOUBLE   ) type = \"Double\";\n    else if ( type == FF_PACKREAL ) type = \"Packed Real\";\n    else                type = form(\"Unknown type %08X\",type);\n    Message(\"    Member type : %s\",type);\n    type = GetMemberFlag(id,m);\n         if ( isOff0(type)  ) Message(\" Offset\");\n    else if ( isChar0(type) ) Message(\" Character\");\n    else if ( isSeg0(type)  ) Message(\" Segment\");\n    else if ( isDec0(type)  ) Message(\" Decimal\");\n    else if ( isHex0(type)  ) Message(\" Hex\");\n    else if ( isOct0(type)  ) Message(\" Octal\");\n    else if ( isBin0(type)  ) Message(\" Binary\");\n    Message(\"\\n\");\n      }\n    }\n  }\n  Message(\"Total number of structures: %d\\n\",GetStrucQty());\n}\n</code></pre>"},{"location":"developer-guide/idc/idc-examples.html#vxd-analysis","title":"VxD analysis","text":"<p>This program is automatically executed when a new VxD is loaded.</p> <pre><code>static Describe(ddb,i) {\n  auto next,x,y;\n\n  x = ddb;\n  MakeDword(x);\n  MakeComm (x,form(\"Next_%ld\",i));\n  next = Dword(x);\n  if ( next != 0 ) OpOffset(x,0);\n  x = x + 4;\n\n  MakeWord(x);\n  MakeName(x,form(\"SDK_Version_%ld\",i));\n  OpNum   (x);\n  x = x + 2;\n\n  MakeWord(x);\n  MakeName(x,form(\"Req_Device_Number_%ld\",i));\n  OpNum   (x);\n  x = x + 2;\n\n  MakeByte(x);\n  MakeName(x,form(\"Dev_Major_Version_%ld\",i));\n  OpNum(x);\n  MakeComm(x,\"Major device number\");\n  x = x + 1;\n\n  MakeByte(x);\n  MakeName(x,form(\"Dev_Minor_Version_%ld\",i));\n  OpNum   (x);\n  MakeComm(x,\"Minor device number\");\n  x = x + 1;\n\n  MakeWord(x);\n  MakeName(x,form(\"Flags_%ld\",i));\n  OpNum   (x);\n  MakeComm(x,\"Flags for init calls complete\");\n  x = x + 2;\n\n  MakeStr (x,8);\n  MakeName(x,form(\"Name_%ld\",i));\n  MakeComm(x,\"Device name\");\n  x = x + 8;\n\n  MakeDword(x);\n  MakeName(x,form(\"Init_Order_%ld\",i));\n  OpNum   (x);\n  MakeComm(x,\"Initialization Order\");\n  x = x + 4;\n\n  MakeDword(x);\n  MakeName(x,form(\"Control_Proc_%ld\",i));\n  OpOffset(x,0);\n  MakeComm(x,\"Offset of control procedure\");\n  MakeCode( Dword(x) );\n  MakeName( Dword(x), form(\"Control_%ld\",i) );\n  x = x + 4;\n\n  MakeDword(x);\n  MakeName(x,form(\"V86_API_Proc_%ld\",i));\n  MakeComm(x,\"Offset of API procedure (or 0)\");\n  y = Dword(x);\n  if ( y != 0 ) {\n    OpOffset(x,0);\n    MakeCode( y );\n    MakeName( y, form(\"V86_%ld\",i) );\n  }\n  x = x + 4;\n\n  MakeDword(x);\n  MakeName(x,form(\"PM_API_Proc_%ld\",i));\n  MakeComm(x,\"Offset of API procedure (or 0)\");\n  y = Dword(x);\n  if ( y != 0 ) {\n    OpOffset(x,0);\n    MakeCode( y );\n    MakeName( y, form(\"PM_%ld\",i) );\n  }\n  x = x + 4;\n\n  MakeDword(x);\n  MakeName(x,form(\"V86_API_CSIP_%ld\",i));\n  MakeComm(x,\"CS:IP of API entry point\");\n  x = x + 4;\n\n  MakeDword(x);\n  MakeName(x,form(\"PM_API_CSIP_%ld\",i));\n  MakeComm(x,\"CS:IP of API entry point\");\n  x = x + 4;\n\n  MakeDword(x);\n  MakeName(x,form(\"Reference_Data_%ld\",i));\n  MakeComm(x,\"Reference data from real mode\");\n  x = x + 4;\n\n  MakeDword(x);\n  MakeName(x,form(\"Service_Table_Ptr_%ld\",i));\n  MakeComm(x,\"Pointer to service table\");\n  y = Dword(x);\n  if ( y != 0 ) {\n    OpOffset(x,0);\n    MakeName( y, form(\"Service_Table_%ld\",i) );\n    MakeDword(y);\n    MakeArray( y, Dword(x+4) );\n  }\n  x = x + 4;\n\n  MakeDword(x);\n  MakeName(x,form(\"Service_Size_%ld\",i));\n  MakeComm(x,\"Number of services\");\n  x = x + 4;\n\n  return next;\n}\n\n//-----------------------------------------------------------------------\nstatic main() {\n  auto ea;\n  auto i;\n\n  i  = 0;\n  ea = ScreenEA();\n  while ( GetFlags(ea) != 0 ) { // While ea points to valid address\n    ea = Describe(ea,i);\n    if ( ea == 0 ) break;\n    i = i + 1;\n  }\n}\n</code></pre>"},{"location":"developer-guide/idc/core-concepts/classes.html","title":"Classes","text":"<p>Classes can be declared the following way:</p> <pre><code>  class name\n  {\n    method1(...) {}\n    ...\n  };\n</code></pre> <p>Inside the class, method functions are declared without the 'static' keyword. The method with the name of the class is the class constructor. For example:</p> <pre><code>  class myclass\n  {\n     myclass(x,y)\n     {\n       print(\"myclass constructor has been called with two arguments: \", x, y);\n       this.x = x;\n       this.y = x;\n     }\n     ~myclass()\n     {\n       print(\"destructor has been called: \", this);\n     }\n  };\n</code></pre> <p>Inside the class methods, the 'this' variable can be used to refer to the current object.</p> <p>Only one constructor per class is allowed.</p> <p>Class instances are created like this:</p> <pre><code>  o = myclass(1, 2);\n</code></pre> <p>And object attributes (or fields) are accessed like this:</p> <pre><code>  print(o.x);\n  o.y = o.x + 1;\n</code></pre> <p>A new attribute is created upon assigning to it:</p> <pre><code>  o.new_attr = 1;\n</code></pre> <p>Accessing an unexisting attribute generates an exception, which can be caught.</p> <p>The following special method names exist:</p> <pre><code>  __setattr__(attr, value)\n    This method is called when an object attribute is assigned a new value.\n    Instead of assigning a value, this method can do something else.\n    To modify a class attribute from this method, please use the setattr()\n    global function.\n    Compare with: Python _setattr_ method\n\n  __getattr__(attr)\n    This method is called when an object attribute is accessed for reading.\n    Instead of simply returning a value, this method can do something else,\n    for example to calculate the attribute on the fly. To retrieve a\n    attribute from this function, use the getattr() global function.\n    Compare with: Python _getattr_ method\n</code></pre> <p>Simple class inheritance is support. Derived classed are declared like this:</p> <pre><code>  class derived : base\n  {\n    ...\n  };\n</code></pre> <p>Here we declare the 'derived' class that is derived from the 'base' class. For derived classes, the base class constructor can be called explicitly:</p> <pre><code>  class derived : base\n  {\n    derived() : base(args...)\n    {\n    }\n  };\n</code></pre> <p>If the base class constructor is not called explicitly, IDA will call it implicitly, without any arguments.</p> <p>It is possible to call base class methods using full names:</p> <pre><code>    base::func(this, args...);\n</code></pre> <p>The 'this' argument must be passed explicitly in this case.</p> <p>When there are no more references to an object, it is automatically destroyed. We use a simple reference count algorithm to track the object use. Circularly dependent objects are not detected: they are never destroyed.</p> <p>The following built-in object classes exist:</p> <pre><code>  - object: the default base class for all new classes. When the base class\n    is not specified, the new class will inherit from 'object'\n    This class has no fields and no special constructor. It has the following\n    methods:\n</code></pre> <ul> <li>void object.store(typeinfo, ea, flags)</li> <li> <p>void object.retrieve(typeinfo, ea, flags)</p> <p>``` - exception: class used to report exceptions. It has the following attributes:</p> <p>file - source file name where the exception occurred   func - current function name   line - line number   pc   - program counter value (internal to idc)</p> <p>Runtime errors are reported as exceptions too. They are two more fields:</p> <p>qerrno      - runtime error code   description - printable error description</p> <p>This class has no special constructor and has no methods.</p> <ul> <li>typeinfo: class used to represent type info. It has the following attributes:</li> </ul> <p>type        - binary encoded type string   fields      - field names for the type (e.g. structure member names)   name        - (optional) variable/function name ```</p> </li> </ul> <p>Human readable form of the typeinfo can be obtained by calling the print() method. The type size can be calculated using the size() method.</p> <ul> <li>loader_input_t: class to read files.</li> </ul>"},{"location":"developer-guide/idc/core-concepts/constants.html","title":"Constants","text":"<p>The following constants can be used in IDC:</p> <pre><code> - long numbers (32-bit for 32-bit version of IDA\n            and 64-bit for 64-bit version of IDA)\n\n    12345 - decimal constants\n    0x444 - hex constants\n    01236 - octal constants\n    0b110 - binary constants\n    'c'   - character constants\n\n  Any numeric constant may have 'u' and 'l' suffixes, they are ignored.\n\n - 64-bit numbers. To declare a 64-bit constant, use 'i64' suffix:\n\n   123i64\n\n   Also, if a constant does not fit 32-bits, it will automatically be\n   stored as a 64-bit constant.\n\n - strings. Strings are declared using the double quotes. The backslash\n   character can be used to as an escape:\n\n   \"string\"\n   \"string\\nwith four embedded \\x0\\x00\\000\\0 zeroes\"\n\n   Multiple string constants in a row will be automatically concatenated:\n\n   \"this\" \" is\" \" one \" \"string\"\n</code></pre>"},{"location":"developer-guide/idc/core-concepts/exceptions.html","title":"Exceptions","text":"<p>Any runtime error generates an exception. Exceptions terminate the execution. It is possible to catch an exception instead of terminating the execution:</p> <pre><code>    auto e;\n    try\n    {\n      ... some statements that cause a runtime error...\n    }\n    catch ( e )\n    {\n      // e holds the exception information\n      // it is an instance of the exception class\n    }\n</code></pre> <p>See the details of classes. </p> <p>The try/catch blocks can be nested. If the current function has no try/catch blocks, the calling function will be examined, and so on, until we find a try/catch block or exit the main function. If no try/catch block is found, an unhandled exception is reported.</p> <p>It is also possible to throw an exception explicitly. Any object can be thrown. For example:</p> <pre><code>    throw 5;\n</code></pre> <p>will throw value '5'.</p>"},{"location":"developer-guide/idc/core-concepts/expressions.html","title":"Expressions","text":"<p>In the IDC expressions you can use almost all C operations except:</p> <pre><code>  complex assignment operations as '+='\n</code></pre> <p>Constants are defined more or less like in C, with some minor differences.</p> <p>There are four type conversion operations:</p> <pre><code>  long(expr)  floating point numbers are truncated during conversion\n  char(expr)\n  float(expr)\n  __int64(expr)\n</code></pre> <p>However, explicit type conversions are rarely required because all type conversions are made automatically:</p> <pre><code>  - addition:\n        if both operands are strings,\n          string addition is performed (strings are concatenated);\n        if both operands are objects,\n          object combination is performed (a new object is created)\n        if floating point operand exists,\n          both operands are converted to floats;\n        otherwise\n          both operands are converted to longs;\n\n  - subtraction/multiplication/division:\n        if floating point operand exists,\n          both operands are converted to floats;\n        if both operands are objects and the operation is subtraction,\n          object subtraction is performed (a new object is created)\n        otherwise\n          both operands are converted to longs;\n\n  - comparisons (==,!=, etc):\n        if both operands are strings, string comparison is performed;\n        if floating point operand exists,\n          both operands are converted to floats;\n        otherwise\n          both operands are converted to numbers;\n\n  - all other operations:\n        operand(s) are converted to longs;\n</code></pre> <p>If any of the long operands is 64bit, the other operand is converted to 64bit too.</p> <p>There is one notable exception concerning type conversions: if one operand is a string and the other is zero (0), then a string operation is performed. Zero is converted to an empty string in this case.</p> <p>The &amp; operator is used to take a reference to a variable. References themselves cannot be modified once created. Any assignment to them will modify the target variable. For example:</p> <pre><code>        auto x, r;\n        r = &amp;x;\n        r = 1;   // x is equal to 1 now\n</code></pre> <p>References to references are immediately resolved:</p> <pre><code>        auto x, r1, r2;\n        r1 = &amp;x;\n        r2 = &amp;r1; // r2 points to x\n</code></pre> <p>Since all non-object arguments are passed to functions by value, references are a good way to pass arguments by reference.</p>"},{"location":"developer-guide/idc/core-concepts/functions.html","title":"Functions","text":"<p>An IDC function always returns a value. There are 2 kinds of functions:</p> <ul> <li>built-in functions</li> <li>user-defined functions A user-defined function is declared this way: static func(arg1,arg2,arg3) { statements ... } It is not necessary to specify the parameter types because all necessary type conversions are performed automatically.</li> </ul> <p>By default all function arguments are passed by value, except:</p> <pre><code>  - objects are always passed by reference\n  - functions are always passed by reference\n  - it is possible to pass a variable by reference using the &amp; operator\n</code></pre> <p>If the function to call does not exist, IDA tries to resolve the name using the debugged program labels. If it succeeds, an dbg_appcall is performed.</p>"},{"location":"developer-guide/idc/core-concepts/loader_input_t-class.html","title":"loader_input_t class","text":"<p>The loader_input_t class can read from input files. It has the following methods:</p> <ul> <li>long read(vref buf, long size);</li> <li>long size();</li> <li>long seek(long pos, long whence);</li> <li>long tell();</li> <li>string gets(long maxsize);</li> <li>string getz(long pos, long maxsize);</li> <li>long getc();</li> <li>long readbytes(vref result, long size, long mf);</li> <li>void close();</li> </ul> <p>Instances of this class can be created by calling the open_loader_input function.</p> <p>See other IDC classes.</p>"},{"location":"developer-guide/idc/core-concepts/predefined-symbols.html","title":"Predefined symbols","text":"<p>The following symbols are predefined in the IDC preprocessor:</p> <pre><code>  _NT_           IDA is running under MS Windows\n  _LINUX_        IDA is running under Linux\n  _MAC_          IDA is running under Mac OS X\n  _UNIX_         IDA is running under Unix (linux or mac)\n  _EA64_         64-bit version IDA\n  _QT_           GUI version of IDA (Qt)\n  _GUI           GUI version of IDA\n  _TXT_          Text version of IDA\n  _IDA_VERSION_  The current IDA version. For example: \"9.1\"\n  _IDAVER_       The current, numerical IDA version. For example: \"900\" means v9.0\n</code></pre> <p>These symbols are also defined when parsing C header files.</p>"},{"location":"developer-guide/idc/core-concepts/slices.html","title":"Slices","text":"<p>The slice operator can be applied IDC objects are strings.</p> <p>For strings, the slice operator denotes a substring:</p> <pre><code>  str[i1:i2] - substring from i1 to i2. i2 is excluded\n  str[idx]   - one character substring at 'idx'.\n               this is equivalent to str[idx:idx+1]\n  str[:idx]  - substring from the beginning of the string to idx\n               this is equivalent to str[0:idx]\n  str[idx:]  - substring from idx to the end of the string\n               this is equivalent to str[idx:0x7fffffff]\n</code></pre> <p>Any indexes that are out of bounds are silently adjusted to correct values. If i1 &gt;= i2, empty string is returned. Negative indexes are used to denote positions counting from the end of the string.</p> <p>String slices can be used on the right side of an assignment. For example:</p> <pre><code>  str[0:2] = \"abc\";\n</code></pre> <p>will replace 2 characters at the beginning of the string by \"abc\".</p> <p>For objects, the slice operator denotes a subset of attributes. It can be used to emulate arrays:</p> <pre><code>  auto x = object();\n  x[0] = value1;\n  x[1] = \"value2\";\n</code></pre> <p>x[i1:i2] denotes all attributes with numeric values between i1 and i2 (i2 is excluded).</p> <p>Any non-numeric attributes are ignored by the slice operator.</p>"},{"location":"developer-guide/idc/core-concepts/statements.html","title":"Statements","text":"<p>In IDC there are the following statements:</p> <p>expression; (expression-statement) if (expression) statement\\ if (expression) statement else statement\\ for ( expr1; expr2; expr3 ) statement\\ while (expression) statement\\ do statement while (expression);\\ break;\\ continue;\\ return ;\\ return; the same as 'return 0;'\\ { statements... }\\ try statement catch ( var ) statement\\ throw ;\\ ; (empty statement)</p> <p>Please note that the 'switch' statement is not supported.</p>"},{"location":"developer-guide/idc/core-concepts/variables.html","title":"Variables","text":"<p>There are two kinds of variables in IDC:</p> <pre><code>  - local variables: they are created at the function entry\n    and destroyed at the exit\n\n  - global variables: they are created at the compilation time\n    and destroyed when the database is closed\n</code></pre> <p>A variable can contain:</p> <ul> <li>LONG: a 32-bit signed long integer (64-bit in 64-bit version of IDA)</li> <li>INT64: a 64-bit signed long integer</li> <li>STR: a character string</li> <li>FLOAT: a floating point number (extra precision, up to 25 decimal digits)</li> <li>OBJECT: an object with attributes and methods (a concept very close to C++ class) more</li> <li>REF: a reference to another variable</li> <li>FUNC: a function reference</li> </ul> <p>A local variable is declared this way:</p> <pre><code>  auto var1;\n  auto var2 = &lt;expr&gt;;\n</code></pre> <p>Global variables are declared like this:</p> <pre><code>  extern var;\n</code></pre> <p>Global variables can be redefined many times. IDA will silently ignore subsequent declarations. Please note that global variables cannot be initialized at the declaration time.</p> <p>All C and C++ keywords are reserved and cannot be used as a variable name.</p> <p>While it is possible to declare a variable anywhere in the function body, all variables are initialized at the function entry and all of them are destroyed only at the exit. So, a variable declared in a loop body will not be reinitialized at each loop iteration, unless explicitly specified with an assignment operator.</p> <p>If a variable or function name cannot be recognized, IDA tries to resolve them using the names from the disassembled application. In it succeeds, the name is replaced by its value in the disassembly listing.\\ For example:</p> <pre><code>  .data:00413060 errtable        dd 1   ; oscode\n  .data:00413060                 dd 16h ; errnocode\n\n        msg(\"address is: %x\\n\", _errtable);\n</code></pre> <p>will print 413060. If the label denotes a structure, it is possible to refer to its fields:</p> <pre><code>        msg(\"address is: %x\\n\", _errtable.errnocode);\n</code></pre> <p>will print 413064. Please note that IDA does not try to read the data but just returns the address of the structure field. The field address can also be calculated using the get_field_ea function.</p> <p>NOTE: The processor register names can be used in the IDC scripts when the debugger is active. Reading from such a variable return the corresponding register value. Writing to such a variable modifies the register value in the debugged process. Such variables are accessible only when the application is in the suspended mode.</p> <p>NOTE: another way to emulate global scope variables is to use array functions and create global persistent arrays.</p>"},{"location":"developer-guide/idc/idc-examples/analyzing-encrypted-code.html","title":"Analyzing encrypted code","text":"<p>This small tutorial demonstrates how to use IDC to decrypt part of a program at analysis time. The sample file is a portion of the Ripper virus.</p>"},{"location":"developer-guide/idc/idc-examples/analyzing-encrypted-code.html#1st-step","title":"1st step","text":"<p>The binary image of the virus is loaded into IDA and analysis is started at the entry point</p> <p></p> <p>Obviously, the bytes right after the call don\u2019t make sense, but the call gives us a clue: it is a decryption routine.</p> <p></p>"},{"location":"developer-guide/idc/idc-examples/analyzing-encrypted-code.html#2nd-step","title":"2nd step","text":"<p>We create a small IDC program that mimicks the decryption routine.</p> <pre><code>static decrypt(from, size, key ) {\n  auto i, x;           // we define the variables\n  for ( i=0; i &lt; size; i=i+1 ) { \n    x = Byte(from);    // fetch the byte\n    x = (x^key);       // decrypt it\n    PatchByte(from,x); // put it back\n    from = from + 1;   // next byte\n  } \n}\n\n</code></pre> <p>Save it on disk and press F2 to load it into IDA's interpreter.</p> <p></p>"},{"location":"developer-guide/idc/idc-examples/analyzing-encrypted-code.html#3rd-step","title":"3rd step","text":"<p>Then, we press shift-F2 to call it with the appropriate values. Please note the linear address used for the starting point. Pressing OK executes the statement.</p> <p></p> <p>The bytes are now decrypted</p> <p></p>"},{"location":"developer-guide/idc/idc-examples/analyzing-encrypted-code.html#4th-step","title":"4th step","text":"<p>We move the cursor to offset 0x50 and press C to inform IDA that there is now code at that location.</p> <p></p> <p>And the code to allocate memory for the virus appears, along with a rather impolite message... The analysis may now resume.</p>"},{"location":"developer-guide/idc/idc-examples/batch-analysis.html","title":"Batch analysis","text":"<p>This program forces the IDA Disassembler in \u201cbatch\u201d analysis mode if it is started in the following way : ida -Sanalysis.idc file.</p> <pre><code>static main() {\n  auto x,y;\n\n  Message(\"Waiting for the end of auto analys...\\n\");\n  Wait();\n\n  x = SegStart(BeginEA());\n  y = SegEnd(BeginEA());\n  Message(\"Analysing area %08X - %08X...\\n\",x,y);\n  AnalyseArea(x,y);\n  Wait();       // wait for code segment analysis to finish\n\n  Message(\"\\n\\n------ Creating output file.... --------\\n\");\n  WriteTxt(\"ida.out\",0,0xFFFFFFFF);\n  Message(\"All done, exiting...\\n\");\n  Exit(0);              // exit to OS, error code 0 - success\n}\n</code></pre>"},{"location":"developer-guide/idc/idc-examples/device-driver-analysis.html","title":"Device driver analysis","text":"<p>This program is automatically executed when a new device driver is loaded.</p> <pre><code>//\n//      This file is executed when a new device driver is loaded.\n//              Device drivers have extensions DRV or SYS.\n//\n\n#include &lt;idc.idc&gt;\n\nstatic main(void) {\n  auto x,i,base;\n  auto intr,strt;\n  auto attr,cmt;\n  auto nextbase;\n  auto DevReq;\n\n  i = 0;\n  x = MinEA();\n  base = (x &gt;&gt; 4);   // The segment base\n\n  while ( 1 ) {\n    Message(\"Device driver block at %04X\\n\",x);\n\n    MakeName(x,form(\"NextDevice_%ld\",i));\n    MakeWord(x);\n    OpNumber(x,0);\n    if ( Word(x) == 0xFFFF ) {\n      MakeComm(x,\"The last device\");\n    } else {\n      nextbase = base + Word(x+2);\n      OpOff(x,0,[nextbase,0]);\n      MakeComm(x,\"Offset to the next device\");\n    }\n\n    MakeWord(x+2);\n    OpNumber(x+2,0);\n\n    MakeName(x+4,form(\"DevAttr_%ld\",i));\n    MakeWord(x+4);\n    OpNumber(x+4,0);\n    attr = Word(x+4);\n    cmt = \"\";\n    if ( attr &amp; (132M\\n\");\n    if ( attr &amp; (1 Device Request Block\");\n    MakeComm( intr, \"Device Request Block:\\n\"\n          \"0 db length\\n\"\n      \"1 db unit number\\n\"\n      \"2 db command code\\n\"\n      \"5 d? reserved\\n\"\n      \"0D d? command specific data\");\n\n    if( Byte( strt )==0x2E &amp;&amp; Word(strt+1)==0x1E89\n     &amp;&amp; Byte(strt+5)==0x2E &amp;&amp; Word(strt+6)==0x068C\n     &amp;&amp; Word(strt+3)==Word(strt+8)-2)\n    {\n     DevReq=Word(strt+3);\n     Message(\"DevReq at %x\\n\",DevReq);\n     MakeUnkn(x+DevReq,0);MakeUnkn(x+DevReq+2,0);\n     MakeDword(x+DevReq);MakeName(x+DevReq,form(\"DevRequest_%ld\",i));\n    }\n\n    if ( Word(x) == 0xFFFF ||\n       ((Byte(x)==0xE9 || Byte(x)==0xEB) &amp;&amp; i==0) ) break;\n    if ( Dword(x) == 0 ) break; // 04.01.96\n    x = [ nextbase, Word(x) ];\n    i = i + 1;\n  }\n}\n\n</code></pre>"},{"location":"developer-guide/idc/idc-examples/new-file-format-definition.html","title":"New file format definition","text":"<pre><code>//\n//  This is an example how New Executable Format resources can be\n//  analysed. In this example we analyse Version Information resource\n//      type only.\n\n//-------------------------------------------------------------------\nstatic nextResource(ea) {   // find next resource\n  auto next;\n  auto name;\n\n  next = ea;\n  while ( (next=NextSeg(next)) != -1 ) {\n    name = SegName(next);\n    if ( substr(name,0,3) == \"res\" ) break; // Yes, this is a resource\n  }\n  return next;\n}\n\n//-------------------------------------------------------------------\nstatic getResourceType(cmt) {\n  auto i;\n  i = strstr(cmt,\"(\");\n  if ( i != -1 ) {\n    i = i + 1;\n    return xtol(substr(cmt,i,i+4)); // get type of the resource\n  }\n  return 0;             // couldn't determine rsc type\n}\n\n//-------------------------------------------------------------------\nstatic getResourceID(cmt) {\n  auto i;\n  i = strstr(cmt,\":\");\n  if ( i != -1 ) {\n    i = i + 1;\n    return long(substr(cmt,i,-1));  // get ID of the resource\n  }\n  return 0;             // couldn't determine rsc ID\n}\n\n//-------------------------------------------------------------------\nstatic ResourceCursor(ea,id) {\n  Message(form(\"Cursor, id: %ld\\n\",id));\n}\n\n//-------------------------------------------------------------------\nstatic ResourceBitmap(ea,id) {\n  Message(form(\"Bitmap, id: %ld\\n\",id));\n}\n\n//-------------------------------------------------------------------\nstatic ResourceIcon(ea,id) {\n  Message(form(\"Icon, id: %ld\\n\",id));\n}\n\n//-------------------------------------------------------------------\nstatic ResourceMenu(ea,id) {\n  Message(form(\"Menu, id: %ld\\n\",id));\n}\n\n//-------------------------------------------------------------------\nstatic ResourceDbox(ea,id) {\n  Message(form(\"Dbox, id: %ld\\n\",id));\n}\n\n//-------------------------------------------------------------------\nstatic ResourceStrT(ea,id) {\n  Message(form(\"String Table, id: %ld\\n\",id));\n}\n\n//-------------------------------------------------------------------\nstatic ResourceFontDir(ea,id) {\n  Message(form(\"FontDir, id: %ld\\n\",id));\n}\n\n//-------------------------------------------------------------------\nstatic ResourceFont(ea,id) {\n  Message(form(\"Font, id: %ld\\n\",id));\n}\n\n//-------------------------------------------------------------------\nstatic ResourceAccl(ea,id) {\n  Message(form(\"Accelerator, id: %ld\\n\",id));\n}\n\n//-------------------------------------------------------------------\nstatic ResourceData(ea,id) {\n  Message(form(\"Resource Data, id: %ld\\n\",id));\n}\n\n//-------------------------------------------------------------------\nstatic ResourceCurDir(ea,id) {\n  Message(form(\"Cursor Dir, id: %ld\\n\",id));\n}\n\n//-------------------------------------------------------------------\nstatic ResourceIconDir(ea,id) {\n  Message(form(\"Icon Dir, id: %ld\\n\",id));\n}\n\n//-------------------------------------------------------------------\nstatic ResourceName(ea,id) {\n  Message(form(\"Cursor, id: %ld\\n\",id));\n}\n\n//-------------------------------------------------------------------\nstatic ResourceVersion(ea,id) {\n\n  Message(form(\"Version info, id: %ld\\n\",id));\n\n  ea = AnalyseVBlock(ea,0);\n}\n\n//-------------------------------------------------------------------\nstatic ConvertToStr(vea,len) {\n  auto ea;\n  auto slen;\n  ea = vea;\n  for ( ea=vea; len &gt; 0; vea = ea ) {\n    while ( Byte(ea) != 0 ) ea = ea + 1;\n    ea = ea + 1;\n    slen = ea - vea;\n    MakeStr(vea,slen);\n    len = len - slen;\n  }\n}\n\n//-------------------------------------------------------------------\nstatic Pad32(ea) {\n  auto vea;\n  vea = (ea + 3) &amp; ~3;          // align to 32-bit boundary\n  if ( vea != ea ) {            // extra bytes found\n    MakeArray(ea,vea-ea);\n    MakeComm(ea,\"Padding bytes\");\n  }\n  return vea;\n}\n\n//-------------------------------------------------------------------\nstatic AnalyseVBlock(ea,blnum) {\n  auto key,block,vsize,x,vea,keyea;\n  auto blstart,blend;\n\n  blstart = ea;             // save block start\n\n  block = Word(ea);\n  MakeName(ea,form(\"rscVinfoBlSize_%ld\",blnum));\n  MakeWord(ea);\n  OpNumber(ea,0);\n\n  ea = ea + 2;\n  vsize = Word(ea);\n  MakeName(ea,form(\"rscVinfoValSize_%ld\",blnum));\n  MakeWord(ea);\n  OpNumber(ea,0);\n\n  ea = ea + 2;\n  keyea = ea;\n  MakeName(key,form(\"rscVinfoKey_%ld\",blnum));\n  key = \"\";\n  while ( Byte(ea) != 0 ) {\n    key = key + char(Byte(ea));\n    ea = ea + 1;\n  }\n  ea = ea + 1;\n  MakeStr(keyea,ea-keyea);\n\n  vea = Pad32(ea);\n\n  MakeName(vea, form(\"rscVinfoValue_%ld\",blnum));\n\n  blend = vea + vsize;          // find block end\n\n//  Message(form(\"At %lX key is: \",keyea) + key + \"\\n\");\n\n  if      ( key == \"VS_VERSION_INFO\" ) {\n\n    ;   // nothing to do\n\n  } else if ( key == \"VarFileInfo\"     ) {\n\n    ;   // nothing to do\n\n  } else if ( key == \"Translation\"     ) {\n\n    for ( ea=vea; ea \n\n</code></pre>"},{"location":"developer-guide/idc/idc-examples/structures-manipulation.html","title":"Structures manipulation","text":"<p>This program demonstrates basic structure manipulation.</p> <pre><code>#include &lt;idc.idc&gt;\n\nstatic main() {\n  auto idx;\n\n  for ( idx=GetFirstStrucIdx(); idx != -1; idx=GetNextStrucIdx(idx) ) {\n    auto id,m;\n    id = GetStrucId(idx);\n    if ( id == -1 ) Fatal(\"Internal IDA error, GetStrucId returned -1!\");\n    Message(\"Structure %s:\\n\",GetStrucName(id));\n    Message(\"  Regular    comment: %s\\n\",GetStrucComment(id,0));\n    Message(\"  Repeatable comment: %s\\n\",GetStrucComment(id,1));\n    Message(\"  Size              : %d\\n\",GetStrucSize(id));\n    Message(\"  Number of members : %d\\n\",GetMemberQty(id));\n    for ( m = 0;\n      m != GetStrucSize(id);\n      m = GetStrucNextOff(id,m) ) {\n      auto mname;\n      mname = GetMemberName(id,m);\n      if ( mname == \"\" ) {\n        Message(\"  Hole (%d bytes)\\n\",GetStrucNextOff(id,m)-m);\n      } else {\n        auto type;\n        Message(\"  Member name   : %s\\n\",GetMemberName(id,m));\n        Message(\"    Regular cmt : %s\\n\",GetMemberComment(id,m,0));\n        Message(\"    Rept.   cmt : %s\\n\",GetMemberComment(id,m,1));\n        Message(\"    Member size : %d\\n\",GetMemberSize(id,m));\n    type = GetMemberFlag(id,m) &amp; DT_TYPE;\n         if ( type == FF_BYTE     ) type = \"Byte\";\n    else if ( type == FF_WORD     ) type = \"Word\";\n    else if ( type == FF_DWRD     ) type = \"Double word\";\n    else if ( type == FF_QWRD     ) type = \"Quadro word\";\n    else if ( type == FF_TBYT     ) type = \"Ten bytes\";\n    else if ( type == FF_ASCI     ) type = \"ASCII string\";\n    else if ( type == FF_STRU     ) type = form(\"Structure '%s'\",GetStrucName(GetMemberStrId(id,m)));\n    else if ( type == FF_XTRN     ) type = \"Unknown external?!\"; // should not happen\n    else if ( type == FF_FLOAT    ) type = \"Float\";\n    else if ( type == FF_DOUBLE   ) type = \"Double\";\n    else if ( type == FF_PACKREAL ) type = \"Packed Real\";\n    else                type = form(\"Unknown type %08X\",type);\n    Message(\"    Member type : %s\",type);\n    type = GetMemberFlag(id,m);\n         if ( isOff0(type)  ) Message(\" Offset\");\n    else if ( isChar0(type) ) Message(\" Character\");\n    else if ( isSeg0(type)  ) Message(\" Segment\");\n    else if ( isDec0(type)  ) Message(\" Decimal\");\n    else if ( isHex0(type)  ) Message(\" Hex\");\n    else if ( isOct0(type)  ) Message(\" Octal\");\n    else if ( isBin0(type)  ) Message(\" Binary\");\n    Message(\"\\n\");\n      }\n    }\n  }\n  Message(\"Total number of structures: %d\\n\",GetStrucQty());\n}\n</code></pre>"},{"location":"developer-guide/idc/idc-examples/vxd-analysis.html","title":"VxD analysis","text":"<p>This program is automatically executed when a new VxD is loaded.</p> <pre><code>static Describe(ddb,i) {\n  auto next,x,y;\n\n  x = ddb;\n  MakeDword(x);\n  MakeComm (x,form(\"Next_%ld\",i));\n  next = Dword(x);\n  if ( next != 0 ) OpOffset(x,0);\n  x = x + 4;\n\n  MakeWord(x);\n  MakeName(x,form(\"SDK_Version_%ld\",i));\n  OpNum   (x);\n  x = x + 2;\n\n  MakeWord(x);\n  MakeName(x,form(\"Req_Device_Number_%ld\",i));\n  OpNum   (x);\n  x = x + 2;\n\n  MakeByte(x);\n  MakeName(x,form(\"Dev_Major_Version_%ld\",i));\n  OpNum(x);\n  MakeComm(x,\"Major device number\");\n  x = x + 1;\n\n  MakeByte(x);\n  MakeName(x,form(\"Dev_Minor_Version_%ld\",i));\n  OpNum   (x);\n  MakeComm(x,\"Minor device number\");\n  x = x + 1;\n\n  MakeWord(x);\n  MakeName(x,form(\"Flags_%ld\",i));\n  OpNum   (x);\n  MakeComm(x,\"Flags for init calls complete\");\n  x = x + 2;\n\n  MakeStr (x,8);\n  MakeName(x,form(\"Name_%ld\",i));\n  MakeComm(x,\"Device name\");\n  x = x + 8;\n\n  MakeDword(x);\n  MakeName(x,form(\"Init_Order_%ld\",i));\n  OpNum   (x);\n  MakeComm(x,\"Initialization Order\");\n  x = x + 4;\n\n  MakeDword(x);\n  MakeName(x,form(\"Control_Proc_%ld\",i));\n  OpOffset(x,0);\n  MakeComm(x,\"Offset of control procedure\");\n  MakeCode( Dword(x) );\n  MakeName( Dword(x), form(\"Control_%ld\",i) );\n  x = x + 4;\n\n  MakeDword(x);\n  MakeName(x,form(\"V86_API_Proc_%ld\",i));\n  MakeComm(x,\"Offset of API procedure (or 0)\");\n  y = Dword(x);\n  if ( y != 0 ) {\n    OpOffset(x,0);\n    MakeCode( y );\n    MakeName( y, form(\"V86_%ld\",i) );\n  }\n  x = x + 4;\n\n  MakeDword(x);\n  MakeName(x,form(\"PM_API_Proc_%ld\",i));\n  MakeComm(x,\"Offset of API procedure (or 0)\");\n  y = Dword(x);\n  if ( y != 0 ) {\n    OpOffset(x,0);\n    MakeCode( y );\n    MakeName( y, form(\"PM_%ld\",i) );\n  }\n  x = x + 4;\n\n  MakeDword(x);\n  MakeName(x,form(\"V86_API_CSIP_%ld\",i));\n  MakeComm(x,\"CS:IP of API entry point\");\n  x = x + 4;\n\n  MakeDword(x);\n  MakeName(x,form(\"PM_API_CSIP_%ld\",i));\n  MakeComm(x,\"CS:IP of API entry point\");\n  x = x + 4;\n\n  MakeDword(x);\n  MakeName(x,form(\"Reference_Data_%ld\",i));\n  MakeComm(x,\"Reference data from real mode\");\n  x = x + 4;\n\n  MakeDword(x);\n  MakeName(x,form(\"Service_Table_Ptr_%ld\",i));\n  MakeComm(x,\"Pointer to service table\");\n  y = Dword(x);\n  if ( y != 0 ) {\n    OpOffset(x,0);\n    MakeName( y, form(\"Service_Table_%ld\",i) );\n    MakeDword(y);\n    MakeArray( y, Dword(x+4) );\n  }\n  x = x + 4;\n\n  MakeDword(x);\n  MakeName(x,form(\"Service_Size_%ld\",i));\n  MakeComm(x,\"Number of services\");\n  x = x + 4;\n\n  return next;\n}\n\n//-----------------------------------------------------------------------\nstatic main() {\n  auto ea;\n  auto i;\n\n  i  = 0;\n  ea = ScreenEA();\n  while ( GetFlags(ea) != 0 ) { // While ea points to valid address\n    ea = Describe(ea,i);\n    if ( ea == 0 ) break;\n    i = i + 1;\n  }\n}\n</code></pre>"},{"location":"getting-started/basic-usage.html","title":"Basic Usage","text":""},{"location":"getting-started/basic-usage.html#basic-usage_1","title":"Basic Usage","text":"<p>In this document, we'll explore the essentials of IDA capabilities to kickstart your journey and disassemble your first binary file.</p>"},{"location":"getting-started/basic-usage.html#prerequisites","title":"Prerequisites","text":"<p>Your IDA instance is installed and running.</p>"},{"location":"getting-started/basic-usage.html#before-you-begin","title":"Before you begin","text":""},{"location":"getting-started/basic-usage.html#what-files-and-processors-are-supported","title":"What files and processors are supported?","text":"<p>IDA natively recognizes plenty of file formats and processors.</p> <p>If you later realize that's not enough, you can always use one of our community plugins that add additional formats or processor types or try to write your own with C++ SDK.</p>"},{"location":"getting-started/basic-usage.html#what-are-ida-database-files","title":"What are IDA database files?","text":"<p>IDA stores the analysis results in the IDA Database files (called IDB), with the extension <code>.i64</code>. This allows you to save your work and continue from the same point later. After loading a file at the beginning, IDA does not require access to the binary.</p> <p>Any modifications you make are saved in the database and do not affect the original executable file.</p> <p>Dive deeper</p> <ul> <li>Blog: :pencil: Check what exactly IDB contains in Igor's tip of the week about IDA database.</li> </ul>"},{"location":"getting-started/basic-usage.html#what-decompilers-can-i-work-with","title":"What decompilers can I work with?","text":"<p>IDA provides decompilers designed to work with multiple processor architectures. The number of decompilers and their type (local or remote) available in your IDA instance depends on your chosen product and subscription plan and affects your ability to produce C-like pseudocode.</p>"},{"location":"getting-started/basic-usage.html#where-can-i-find-exemplary-binaries-to-work-with","title":"Where can I find exemplary binaries to work with?","text":"<p>Check CrackMe, from where you can download executable files to test your reverse engineering skills.</p>"},{"location":"getting-started/basic-usage.html#part-1-loading-your-file","title":"Part 1: Loading your file","text":"<p>When you launch IDA, you will see a Quick Start dialog that offers three ways to continue. For now, we'll focus on loading a new file and proceeding to disassembly results.</p> <ol> <li>Launch IDA and in the Quick start dialog (1), click New.</li> <li>Specify the path for your binary file.</li> <li>In the Load a new file dialog (2), IDA presents loaders that are suited to deal with a selected file. Accepting the loader default selection and then the processor type is a good strategy for beginners. Click OK to confirm your selection.</li> </ol> <p></p> <ol> <li>IDA begins autoanalysis of your binary file.</li> </ol> <p>After completion, you will be present with the default IDA desktop layout, that we'll describe in the next part.</p> <p>Dive deeper</p> <ul> <li>Video: :video_camera: Watch different ways of loading files in our channel.</li> </ul>"},{"location":"getting-started/basic-usage.html#part-2-ui-overview","title":"Part 2: UI overview","text":"<p>After autoanalysis is done, you'll see the main IDA desktop with the initial results. Let's examine the default desktop layout and commonly used UI elements.</p> <p></p> <ol> <li>Main menu bar (1)</li> <li>Toolbar (2)</li> <li>Navigation band (3)</li> <li>Subviews (4)</li> <li>Output (5)</li> <li>Status bar (6)</li> </ol>"},{"location":"getting-started/basic-usage.html#main-menu-bar","title":"Main menu bar","text":"<p>The main menu bar provides quick access to essential features. Moreover, almost all menu commands can be quickly accessible via customizable shortcuts.</p> <p></p> <p>For a handy cheatsheet of all commands and their hotkeys, check Options -&gt; Show command palette....</p> <p>Dive deeper</p> <ul> <li>Docs: :book: Check our User Guide for a comprehensive description of all menu items.</li> </ul>"},{"location":"getting-started/basic-usage.html#toolbar","title":"Toolbar","text":"<p>Below the main menu bar, you will see a toolbar with icons that give you quick access to common functionalities (available also via the main menu/shortcuts). It has just one line by default, but you can customize it by adding or rearranging your actions.</p> <p></p> <p>Dive deeper</p> <ul> <li>Video: :video_camera: Curious about practical ways to set up your toolbar? Watch our video tutorial.</li> </ul>"},{"location":"getting-started/basic-usage.html#navigation-band","title":"Navigation band","text":"<p>The navigation band shows the graphical representation of the analyzed binary file and gives a short overview of its contents and which areas may need your attention. The yellow arrow (indicator) shows where the cursor is currently positioned in the disassembly view.</p> <p></p> <p>As you'll soon recognize, the colors used in the nav band match those in other views.</p> <p>Dive deeper</p> <ul> <li>Blog: :pencil: A detailed navigation band overview with the full colors legend you can found in Igor's tip of the week.</li> </ul>"},{"location":"getting-started/basic-usage.html#output","title":"Output","text":"<p>The output window is a place where various messages and logs are displaying, often describing what currently IDA is doing, like analyzing data or running a script. In the CLI box you can type commands in IDC language or IDAPython.</p>"},{"location":"getting-started/basic-usage.html#status-bar","title":"Status bar","text":"<p>At the bottom left corner of the IDA window, you can see the status bar, which contains:</p> <ul> <li>analysis indicator <code>AU</code>, which shows the actual status of autoanalysis (1). In our case, it is <code>idle</code>, which means the autoanalysis is already finished.</li> <li>search direction indicator (2)</li> <li>remaining free disk space (3)</li> </ul> <p></p> <p>Right-clicking on the status bar brings up a context menu that allows you to reanalyze the program.</p> <p>Dive deeper</p> <ul> <li>Docs: :book: To check all possible values and their meaning, take a look at analysis options.</li> </ul>"},{"location":"getting-started/basic-usage.html#subviews","title":"Subviews","text":"<p>The subviews are one of the most prominent parts of your everyday work with IDA. These additional views (behaving like tabs) give a different perspective and information on the binary file, but the number of native IDA subviews may be a bit overwhelming. Here, we will focus on the most versatile and common subviews for beginners, where you'll spend most of the time, like:</p> <ul> <li>IDA View</li> <li>Pseudocode</li> <li>Hex Dump View</li> <li>Local Types</li> <li>Functions View</li> </ul> <p></p>"},{"location":"getting-started/basic-usage.html#ida-view-disassembly-window","title":"IDA View / Disassembly Window","text":"<p>When autoanalysis is done, you will see a graph view inside an IDA View by default. This flowchart graph should help you to understand the flow of the functions.</p> <p>{% hint style=\"info\" %} The graph view is available only for the part of the binary that IDA has recognized as functions.</p> <p>IDA view has three modes:</p> <ul> <li>graph view (1), that shows instructions grouped in blocks,</li> <li>linear view (2), that lists all instructions and data in order of their addresses,</li> <li>and proximity view (3), which allows you to see relations between functions, global variables, and other parts of the program.</li> </ul> <p></p> <p>{% hint style=\"info\" %} Press <code>Space</code> to switch between graph and linear mode. Proximity view is available from the context menu in IDA view.</p> <p>Dive deeper</p> <ul> <li>Video: :video_camera: Check our video tutorial covering the basics of graph view.</li> <li>Blog: :pencil: Read the graph mode overview in Igor's tip of the week.</li> </ul>"},{"location":"getting-started/basic-usage.html#hex-view-window","title":"Hex View Window","text":"<p>In hex view, you can see the raw bytes of the program's instructions.</p> <p>There are two ways of highlighting the data in this view:</p> <ol> <li>Text match highlight, which shows matches of the selected text anywhere in the views.</li> <li>Current item highlight, which shows the bytes group constituting the current item.</li> </ol> <p></p> <p>{% hint style=\"info\" %} The IDA view, pseudocode, and hex view can be synchronized, meaning that they highlight the same part of the analyzed program, and changes made inside one of the views are visible in the others.</p> <p>Dive deeper</p> <ul> <li>Video: :video_camera: Listen about hex view and others in our video tutorial.</li> <li>Blog: :pencil: Detailed overview of the hex view you can read in Igor's tip of the week.</li> </ul>"},{"location":"getting-started/basic-usage.html#pseudocode-window","title":"Pseudocode Window","text":"<p>Generated by the famous <code>F5</code> shortcut, the pseudocode shows the assembly language translated into human-readable, C-like pseudocode. Click <code>Tab</code> to jump right into the Pseudocode view.</p> <p></p>"},{"location":"getting-started/basic-usage.html#local-types-window","title":"Local Types Window","text":"<p>This view shows the high-level types used in databases, like structs or enums.</p> <p>Dive deeper</p> <ul> <li>Docs: :book: Check our manual giving an overview of Local Types window.</li> </ul>"},{"location":"getting-started/basic-usage.html#functions-window","title":"Functions Window","text":"<p>This window displays all the functions recognized by IDA, along with key details for each:</p> <ul> <li>Function name</li> <li>Segment the segment that contains the function</li> <li>Start: the function starting address</li> <li>Length: the size of the function in bytes</li> <li>Local: the amount of stack space taken by local variables</li> <li>Arguments: the amount of stack space taken by arguments</li> </ul> <p>By default, the entire window is not visible, so you may scroll horizontally to see the hidden elements. As you probably noticed, the colors in Functions window match the colors in navigation band; in our example, green highlighting shows functions recognized by Lumina.</p> <p></p> <p>This view is read-only, but you can automatically synchronize the function list with the IDA view, pseudocode, or hex view. Click to open the context menu and select Turn on synchronization.</p> <p>Dive deeper</p> <ul> <li>Docs: :book: Read the manual explaining all of the function window columns in detail.</li> <li>Video: :video_camera: Watch our video tutorial exploring the functions view.</li> </ul>"},{"location":"getting-started/basic-usage.html#part-3-basic-navigation","title":"Part 3: Basic navigation","text":"<p>A crucial step in mastering IDA is learning how to navigate quickly to specific locations in the output. To help you get started, we'll cover essential commands and hotkeys commonly used for efficient navigation in IDA.</p>"},{"location":"getting-started/basic-usage.html#double-click-and-jump-to-the-location","title":"Double-click and jump to the location","text":"<p>When you double-click on an item, such as a name or address, IDA automatically jumps to that location and relocate the display.</p>"},{"location":"getting-started/basic-usage.html#jump-to-address","title":"Jump to address","text":"<ol> <li>Go to Jump -&gt; Jump to address.. or press <code>G</code> hotkey</li> <li>Enter the item name or hex address in the dialog box, then click OK.</li> </ol> <p>To jump back to the previous position, press <code>Esc</code>. To jump to the next position, press <code>Ctrl + Enter</code>. You can also navigate using the arrows in the toolbar.</p>"},{"location":"getting-started/basic-usage.html#see-the-list-of-cross-references","title":"See the list of cross-references","text":"<ol> <li>Position the cursor on a function or instruction, then go to Jump -&gt; Jump to xref to operand... or press <code>X</code> to see the dialog with listed all cross-references to this identifier.</li> <li>Select an item from the list and click OK to jump to that location.</li> </ol> <p>Dive deeper</p> <ul> <li>Video: :video_camera: Explore the rest of the jump commands in our video tutorial</li> </ul>"},{"location":"getting-started/basic-usage.html#part-4-manipulate-your-disassembly-results","title":"Part 4: Manipulate your disassembly results","text":"<p>Now that the initial autoanalysis is done and you\u2019ve mastered the basics of navigation, it\u2019s time to explore the basic interactive operations that reveal the true power of IDA in transforming your analysis.</p>"},{"location":"getting-started/basic-usage.html#rename-a-stack-variable","title":"Rename a stack variable","text":"<p>One of the first steps you might take is to enhance readability by assigning meaningful names to local or global variables, but also functions, registers and other objects that IDA initially assigned a dummy name.</p> <ol> <li>In the IDA View, right-click on the variable you want to rename and click Rename or press <code>N</code> when the variable is cursor-highlighted.</li> <li>In the newly opened dialog, insert a new name and click OK.</li> </ol> <p>If at any point you want to go back to the original dummy name given by IDA, leave the field blank and click OK. It will reset the name to the default one.</p> <p>{% hint style=\"info\" %} Once you change the name, IDA will propagate the changes through the decompiler and Pseudocode view.</p> <p>Dive deeper</p> <ul> <li>Docs: :book: Check the details on renaming items in the User Guide</li> <li>Video: :video_camera: Watch our step-by-step tutorial on renaming techniques.</li> <li>Blog: :pencil: Check Igor's tips of the week for expert advice on renaming.</li> </ul>"},{"location":"getting-started/basic-usage.html#add-a-comment","title":"Add a comment","text":"<p>Adding comments may be a useful way to annotate your work.</p> <ol> <li>Highlight the line where you want to insert a comment and press <code>:</code>.</li> <li>In the dialog box, type your comment (you can use multiple lines) and click OK. This will add a regular (non-repeatable) comment to the location.</li> </ol> <p>{% hint style=\"info\" %} If you want to add a repeatable comment in every location that refers to the original comment, press ';'.</p> <p>Dive deeper</p> <ul> <li>Video: :video_camera: Watch our tutorial about commenting.</li> </ul>"},{"location":"getting-started/basic-usage.html#part-5-customizing-ida","title":"Part 5: Customizing IDA","text":"<p>Nearly every UI element is customizable, allowing you to rearrange and align widgets to suit your habits. You can save your personalized desktop layout by going to Windows -&gt; Save desktop.</p> <p>Most of the basic appearance you can change under Options menu.</p> <ul> <li>To change the colors or theme, go to Options -&gt; Colors.</li> <li>To change the font, go to Options -&gt; Fonts.</li> </ul> <p>If you need more control over customization settings, you may check the IDA configuration files.</p>"},{"location":"getting-started/basic-usage.html#part-6-debug-your-file","title":"Part 6: Debug your file","text":"<p>If you are ready to delve into dynamic analysis and start debugging your programs, here are some key steps to get you started:</p> <ol> <li>Select the right debugger and complete the setup: Go to Debugger -&gt; Select debugger... and pick up one of the available debuggers. Under Debugger -&gt; Debugger options, you can configure the setup in detail.</li> <li>Add breakpoints: Right-click on the line where you want to stop the execution and select Add breakpoint from the context menu, or press <code>F2</code>.</li> <li>Start the process: Run the debugging session by pressing <code>F9</code> or click a green arrow on the tooltip.</li> </ol> <p>Dive Deeper</p> <ul> <li>Docs: :book: Read our User Guide for local and remote debugging manuals, or check step-by-step tutorials for specific debuggers.</li> </ul>"},{"location":"getting-started/basic-usage.html#part-7-install-a-plugin","title":"Part 7: Install a plugin","text":"<p>One of the most common way of extending IDA capabilities is to use one of our community-developed plugins.</p>"},{"location":"getting-started/basic-usage.html#where-can-i-find-ida-plugins","title":"Where can I find IDA plugins?","text":"<p>You can find a variety of plugins in the official Hex-Rays plugin repository</p>"},{"location":"getting-started/basic-usage.html#installing-your-plugin","title":"Installing your plugin","text":"<p>For this guide purposes, we'll walk you through general installation steps.</p> <p>{% hint style=\"info\" %} The installation process can vary depending on the plugin and some of them may required installing dependencies or further configuration. Don't hesitate to refer to the specific instructions provided by the plugin author.</p>"},{"location":"getting-started/basic-usage.html#load-your-plugin","title":"Load your plugin","text":"<ol> <li>Copy your plugin folder to the plugins directory inside your IDA installation directory.</li> <li>Alternatively, you can load the plugin from the command line in IDA by using File -&gt; Script file... and selecting <code>app.entry.py</code> file.</li> </ol>"},{"location":"getting-started/basic-usage.html#run-your-plugin","title":"Run your plugin","text":"<ol> <li>Navigate to Edit -&gt; Plugins -&gt; your_plugin_name or use the assigned hotkey.</li> </ol> <p>{% hint style=\"info\" %} You may need to restart IDA to see your plugin in the list.</p> <p>Dive deeper</p> <ul> <li>Docs: :book: Want to learn about writing your own plugins? Check our Developer Guide on how to create a plugin in IDAPython or with C++ SDK.</li> </ul>"},{"location":"getting-started/basic-usage.html#key-hotkeys-cheatsheet","title":"Key hotkeys cheatsheet","text":"<p>Here's a handy list of all of the shortcuts we used so far.</p> <ul> <li><code>Space</code> Switches between graph and linear mode in the IDA View</li> <li><code>F5</code> Generates pseudocode</li> <li><code>Tab</code> Jumps into pseudocode View</li> <li><code>G</code> Opens Jump to address dialog</li> <li><code>Esc</code> Jumps back to the previous position</li> <li><code>Ctrl + Enter</code> Jumps to the next position</li> <li><code>X</code> Shows the list of all cross-references</li> <li><code>N</code> Opens dialog to rename the current item</li> <li><code>;</code> Adds repeatable comment</li> <li><code>:</code> Adds regular comment</li> </ul>"},{"location":"getting-started/install-ida.html","title":"Install IDA","text":"<p>By following the steps in this guide, you can successfully install your IDA instance on macOS, Linux, and Windows.</p> <p>The installation steps are valid for all product versions: IDA Pro, IDA Home, or IDA Free.</p> <p>This installation guide is dedicated to individual users.</p>"},{"location":"getting-started/install-ida.html#minimum-system-requirements","title":"Minimum system requirements","text":"<p>{% tabs %} {% tab title=\"macOS\" %} macOS 12 (Monterey) or later (x64 or ARM64)</p> <p>{% tab title=\"Linux\" %} x64 (x86_64) CentOS 7 or later, Ubuntu 16.04 or later. Other equivalent distributions may work but not guaranteed.</p> <p>{% tab title=\"Windows\" %} Windows 8 or later (x64) {% endtab %}</p>"},{"location":"getting-started/install-ida.html#pre-installation-steps","title":"Pre-installation steps","text":"<p>Activate your named or computer license via My Hex-Rays portal.</p>"},{"location":"getting-started/install-ida.html#installation-on-macos","title":"Installation on macOS","text":"<p>Prerequisites:</p> <ul> <li>Ensure that you have activated your computer/named license and downloaded your license file (ida.hexlic) locally.</li> <li>Make sure Python 3 or later is installed on your computer for the IDAPython API to function properly.</li> </ul> <p>Step 1: Download the installer</p> <ul> <li>Download the macOS version of IDA Pro from Download Center in My Hex-Rays portal.</li> </ul> <p>Step 2: Run the installer</p> <ul> <li>Extract the .zip archive.</li> <li>Double-click on the extracted file to run the instalation wizard.</li> <li>Follow the wizard's instructions to complete the installation:</li> <li>accept the license agreement and installation directory;</li> <li>copy your <code>ida.hexlic</code> file to IDA installation directory or to <code>$HOME/.idapro</code> directory before launching IDA.</li> </ul> <p>Step 4: Launch IDA Pro for the first time</p> <ul> <li>Double-click on the IDA Pro icon to launch the application.</li> </ul> <p>Step 5: Point to your named/computer license</p> <p>{% hint style=\"info\" %} The step below is valid for named and computer licenses for individual use. If you are going to use floating licenses, check this alternative step.</p> <ul> <li>In the License manager pop-up window, specify the path of your license file and click OK.</li> </ul> <p></p> <p>{% hint style=\"info\" %} You won't be asked about your license again unless the subscription period expires or you move your license file to a different location.</p>"},{"location":"getting-started/install-ida.html#installation-on-linux","title":"Installation on Linux","text":"<p>Prerequisites:</p> <ul> <li>Ensure that you have activated your computer/named license and downloaded your license file (ida.hexlic) locally.</li> <li>Make sure Python 3 or later is installed on your computer for the IDAPython API to function properly.</li> <li>Verify that you have the required libraries installed. Use your package manager to install any missing dependencies. Common dependencies include <code>libx11</code>, <code>libxext</code>, <code>libxrender</code>, and <code>libglib2.0</code>.</li> </ul> <p>Step 1: Download the installer</p> <ul> <li>Download the Linux version of IDA Pro from Download Center in My Hex-Rays portal.</li> </ul> <p>Step 4: Run the installer</p> <ul> <li>Navigate to the directory containing your IDA installer, and make it executable.</li> <li>Run the installer by double-click it or enter <code>./&lt;your_IDA_version_&gt;linux.run</code> in the terminal to execute it.</li> <li>Follow the wizard's instructions to complete the installation:</li> <li>accept the license agreement and installation directory;</li> <li>copy your <code>ida.hexlic</code> file to IDA installation directory or to <code>$HOME/.idapro</code> directory before launching IDA.</li> </ul> <p>Step 5: Launch IDA Pro for the first time</p> <ul> <li>Go to the directory where IDA is installad and run the command: <code>./ida90</code></li> </ul> <p>Step 6: Point to your named/computer license</p> <p>{% hint style=\"info\" %} The step below is valid for named and computer licenses for individual use. If you are going to use floating licenses, check this alternative step.</p> <ul> <li>In the License manager pop-up window, specify the path of your license file and click OK.</li> </ul> <p>{% hint style=\"info\" %} You won't be asked about your license again unless the subscription period expires or you move your license file to a different location.</p>"},{"location":"getting-started/install-ida.html#installation-on-windows","title":"Installation on Windows","text":"<ul> <li>Ensure that you have activated your computer/named license and downloaded your license file (ida.hexlic) locally.</li> <li>Make sure Python 3 or later is installed on your computer for the IDAPython API to function properly.</li> </ul> <p>Step 1: Download the installer</p> <ul> <li>Download the Windows version of IDA Pro from Download Center in My Hex-Rays portal .</li> </ul> <p>Step 2: Run the installer</p> <ul> <li>Locate the downloaded <code>.exe</code> file and double-click it to run the installer.</li> <li>Follow the installation wizard's instructions to complete the installation:</li> <li>accept the license agreement and installation directory;</li> <li>copy your <code>ida.hexlic</code> file to IDA installation directory or to <code>%APPDATA%/Hex-Rays/IDA Pro</code> directory before launching IDA.</li> </ul> <p>Step 5: Launch IDA Pro for the first time</p> <ul> <li>Navigate to the Start Menu or desktop shortcut and launch IDA Pro.</li> </ul> <p>Step 6: Point to your named/computer license</p> <p>{% hint style=\"info\" %} The step below is valid for named and computer licenses for individual use. If you are going to use floating licenses, check this alternative step.</p> <ul> <li>In the License Manager pop-up window, specify the path of your license file and click OK.</li> </ul> <p>{% hint style=\"info\" %} You won't be asked about your license again unless the subscription period expires or you move your license file to a different location.</p>"},{"location":"getting-started/install-ida.html#use-floating-license-server","title":"Use floating license server","text":"<p>Step 1: In the License manager pop-up window, select the option Use floating license server and then type a license server hostname provided by your administrator.</p> <p>Step 2: Borrow one of the licenses visible under the available licenses list and click OK.</p> <p>Note that you don't need a license file stored on your machine locally while using floating licenses.</p>"},{"location":"getting-started/install-ida.html#common-post-installation-steps","title":"Common Post-Installation Steps","text":"<p>Step 1: Update IDA Pro</p> <ul> <li>After installation, check for any available updates. Hex-Rays often releases patches and updates for IDA Pro. You can check for updates within the application via Help -&gt; Check for free update or download the latest version from My Hex-Rays portal.</li> </ul> <p>Step 2: Configure environment (optional)</p> <ul> <li>Customize your IDA Pro environment settings to suit your preferences. This can include configuring hotkeys, and adjusting appearance settings.</li> </ul> <p>Step 3: Install additional plugins (optional)</p> <ul> <li>You can extend the functionality of IDA Pro by installing additional plugins that can be found on the official Hex-Rays repository or other trusted sources in the reverse engineering community.</li> </ul>"},{"location":"getting-started/licensing.html","title":"Licensing","text":"<p>In this document, we covered the fundamentals of our licensing model\u2014including how to activate your license based on its type, check license's details and share them with your team members.</p> <p>Here, you can learn how to: - Activate your licenses Named | Computer | Floating | In Bulk - Add and activate servers Lumina | Teams | License server - Check license details or modify them - Download your license files - Invite team members</p>"},{"location":"getting-started/licensing.html#licenses-overview","title":"Licenses overview","text":""},{"location":"getting-started/licensing.html#license-types","title":"License types","text":"<p>In Hex-Rays, we offer two basic license types for IDA products, that are suitable for individual users:</p> <ul> <li>Named licenses, that are assigned to specific individuals.</li> <li>Computer licenses that are assigned to specific devices.</li> </ul> <p>There is also an additional type, called floating licenses, that allow a set number of concurrent users but are not assigned to specific individuals or devices.</p> <p>{% hint style=\"info\" %} Floating licenses are available only for IDA Pro and dedicated to business/organization purposes.</p>"},{"location":"getting-started/licensing.html#how-many-licenses-should-i-have","title":"How many licenses should I have?","text":"<p>Beside the license for IDA product, you need also a separate active license for each server available in your subscription.</p> <p>The components of your subscription that require their own license: - Base IDA license (e.g., IDA PRO Expert 4) - Teams server for Teams add-on - Lumina server for Lumina add-on - License server for floating licenses</p> <p>Example: You've purchased IDA PRO Expert 4 Plan with Teams and Private Lumina, along with floating type of license with 6 seats. In this case, you\u2019ll need to activate the following four licenses: 1. License server license 2. Private Lumina server license 3. Teams server license 4. IDA PRO Expert 4 license</p>"},{"location":"getting-started/licensing.html#whats-a-license-file","title":"What's a license file?","text":"<p>The <code>.hexlic</code> license file contains your license ID and other data, and is required to make your IDA instance fully operative after installation (or your Lumina, Teams or License server).  You can download your license files from My Hex-Rays portal, after their activation.</p> <p>{% hint style=\"info\" %} Once you've downloaded your license, it cannot be modified.</p>"},{"location":"getting-started/licensing.html#license-activation","title":"License activation","text":"<p>To complete the installation, you need an active IDA license with an assigned owner (for a named license) or a MAC address (for a computer/floating license). Without activation, you cannot download your license file.</p>"},{"location":"getting-started/licensing.html#what-is-needed-to-activate-my-license","title":"What is needed to activate my license?","text":"<ul> <li>for named licenses: the email address of the owner,</li> <li>for computer licenses: the MAC address of a specific device</li> <li>for floating licenses: the MAC address of the device where the license server will be running</li> </ul> <p>{% hint style=\"info\" %} The license type (named/computer/floating) is selected when you purchase your subscription.</p>"},{"location":"getting-started/licensing.html#where-can-i-activate-my-license","title":"Where can I activate my license?","text":"<p>From the License tab in My Hex-Rays portal, you can initiate the activation process and open the License activation dialog from several locations: - Under the Actions column, click the three dots and then Activate License from the dropdown menu (1), - Click on the desired license to open its detail view, then click Activate License (2), or - Select multiple licenses of the same type by ticking their checkboxes, then click Bulk Activation (3). </p> <p></p> <p></p> <p></p>"},{"location":"getting-started/licensing.html#named-licenses-activation","title":"Named licenses activation","text":"<ol> <li>Go to My Hex-Rays portal and navigate to the Licenses tab.</li> <li>Locate the license ID you want to activate. Ensure it has the Pending activation status.</li> </ol> <p>{% hint style=\"info\" %} If you haven't completed the KYC procedure yet, you will need to do so for accessing paid products. If the \"Activate License\" option is not visible despite a Pending Activation status, it means your KYC process is still in progress. </p> <ol> <li>Open the License activation dialog, select decompilers and click Next. </li> <li>Assign the ownership of the license: set the email address for this IDA instance user (it can be yours) and click Activate license.</li> </ol> <p></p> <p>Your license is now active.</p> <p>You can check the license details and modify it if needed. If all details are correct, you can download your license key.</p>"},{"location":"getting-started/licensing.html#computer-licenses-activation","title":"Computer licenses activation","text":"<ol> <li>Go to My Hex-Rays portal and navigate to the Licenses tab.</li> <li>Locate the license ID you want to activate. Ensure it has the Pending activation status.</li> </ol> <p>{% hint style=\"info\" %} If you haven't completed the KYC procedure yet, you will need to do so for accessing paid products. If the \"Activate License\" option is not visible despite a Pending Activation status, it means your KYC process is still in progress. </p> <ol> <li>Open the License activation dialog, select decompilers and click Next. </li> <li>Add the MAC address of the machine where this IDA instance will be installed and running (it can be yours) and click Activate license.</li> </ol> <p></p> <p>Your license is now active.</p> <p>You can check the license details and modify it if needed. If all details are correct, you can download your license key.</p>"},{"location":"getting-started/licensing.html#download-the-license-files","title":"Download the license files","text":"<p>If you are sure that all of the license details are correct, you can go ahead and download your license hexlic file. You will need it to complete the installation process. </p> <p>{% hint style=\"warning\" %}  Downloading the license locks the configuration and prevents further edits.</p> <ol> <li>Go to the License tab in My Hex-Rays portal.</li> <li>Under the Actions column, click the three dots and then Download hexlic from the dropdown menu (1), or, alternatively, in the license detail view, click Download hexlic.</li> </ol> <p></p> <ol> <li>To download multiple license files at once, select the desired licenses by ticking their checkboxes, or click Select all. Then, click Download License Files (2). You\u2019ll receive an email with a link to download all license files and a CSV.</li> </ol>"},{"location":"getting-started/licensing.html#whats-next","title":"What's next?","text":"<p>Now you are ready to install your IDA instance.</p>"},{"location":"getting-started/licensing.html#floating-licenses-activation","title":"Floating licenses activation","text":"<p>To use floating licenses, you need to activate: - A license for your license server - A base IDA Pro license linked to that server Both licenses can be activated and linked in a single step, as described below.</p> <ol> <li>Navigate to the Licenses tab and look for your IDA license with Floating label. Ensure it has the Pending activation status.</li> <li>Open the License activation dialog, select decompilers and click Next. </li> <li>Assign a license server. If you added the license server before, select the Use existing server option and then tick the server from the list. If you haven't done it yet, you can add and activate a license server now\u2014select Add new server option, type the MAC address and click Add.</li> </ol> <p></p> <ol> <li>Add tags if needed, and click Activate license to finalize.</li> <li>Your license(s) is now active.</li> </ol> <p>You can check the license details and modify it if needed. </p> <p>If all details are correct, you can download your license key and license files for the license server.</p>"},{"location":"getting-started/licensing.html#bulk-activation","title":"Bulk activation","text":"<p>If you have multiple licenses of the same type (for example, ten IDA PRO Expert 2 licenses), you can activate them all in a single batch operation. All licenses activated in bulk will share the same configuration details, decompilers set, and add-ons, while allowing for unique owner email addresses and MAC addresses.</p> <ol> <li>Go to My Hex-Rays portal and navigate to the Licenses tab.</li> <li>Locate the licenses you want to activate with the Pending activation status. Select all of them by ticking the checkboxes on their left side.</li> <li>In the top menu that appears after selection, click Bulk Activation.</li> </ol> <p></p> <ol> <li>In the new dialog, select decompilers (this action is done for all licenses in a batch) and click Next.</li> <li>Depending on your licenses type, assign the license user's emails or set the MAC addresses. Optionally, you can add tags.</li> <li>Click Activate Licenses.</li> </ol> <p>You've noticed a mistake? No worries, you can still edit your selected licenses before downloading them.</p>"},{"location":"getting-started/licensing.html#bulk-download-the-license-files","title":"Bulk download the license files","text":"<ol> <li>In the Licenses tab, select the licenses for bulk download and click Download License Files.</li> <li>After confirmation, you'll get an email with link to download all license files + CSV. </li> </ol>"},{"location":"getting-started/licensing.html#license-details","title":"License details","text":"<p>The License Details card provides a complete overview of the license, including assigned decompilers and users it has been shared with. You can edit access permissions and tags at any time, even for active and already downloaded licenses.  To open the License Details view, in the License tab in My Hex-Rays portal, click on the desired license.</p> <p></p>"},{"location":"getting-started/licensing.html#license-editing","title":"License editing","text":"<p>When you activate your license using one of the methods shown above, you can still make changes\u2014such as modifying the decompiler set\u2014as long as you have not downloaded the license file(s). Once the license file(s) are downloaded, further modifications will no longer be possible.</p> <p>To edit the license: 1. Go to My Hex-Rays portal and navigate to the Licenses tab. 2. Locate the licenses you want to edit with the Active status. Under the Actions column, click the three dots and then Edit from the dropdown menu, or alternatively, in the license detail view, click Edit. If the Edit option is not visible, it means the license has already been downloaded and can no longer be edited. </p> <p></p> <ol> <li>Make changes and click on Next/Activate license to confirm.</li> </ol>"},{"location":"getting-started/licensing.html#server-licenses","title":"Server licenses","text":"<p>If your subscription includes a server (for Private Lumina, Teams or floating licenses), you'll need to activate the corresponding server licenses to download the license files. To do so, make sure to add the relevant servers to your account.</p> <p>{% hint style=\"info\" %}  You can create and activate the license server simultaneously during the IDA floating license activation process. </p>"},{"location":"getting-started/licensing.html#add-servers","title":"Add servers","text":"<ol> <li>In My Hex-Rays portal, go to the Licenses tab and click on +Add server. </li> </ol> <ol> <li>Select the type of server(s) you want to add and click Next. You may add multiple servers at one go.</li> </ol> <ol> <li>Assign MAC addresses and click Create servers to finalize.</li> <li>After that, your servers will appear in the Licenses list with an Active status, allowing you to download the server certificates and hexlic files.</li> </ol> <ol> <li>If you are using floating licenses, you can now go ahead and activate your IDA licenses that uses the server.</li> </ol> <p>{% hint style=\"info\" %} Ensure all floating license plans associated with the license server are activated before downloading the license server hexlic file. </p>"},{"location":"getting-started/licensing.html#downloading-the-server-license-files","title":"Downloading the server license files","text":"<p>Once all IDA PRO licenses intended for use with your floating license server have been activated, you can proceed to download the server\u2019s hexlic file and license certificate. Maintaining this order is crucial\u2014the hexlic file contains essential details about the linked licenses, which are properly embedded only when the IDA license is associated with the specific floating license server.</p>"},{"location":"getting-started/licensing.html#license-server-installation-for-admins","title":"License server installation for admins","text":"<p>Server installation for floating licenses should be done by the administrator. Check our Admin Guide for details.</p>"},{"location":"getting-started/licensing.html#how-can-i-start-using-ida-as-a-floating-license-user","title":"How can I start using IDA as a floating license user?","text":"<p>Once your administrator installs a license server, adds particular license seats to the pool, and hands over the credentials, you are ready to install your IDA instance.</p> <p>You don't need to download a license file/key to your local machine while using the floating licenses server. New to the floating licenses? Check our Floating Licenses User Guide.</p> <p>Floating licenses check-out </p> <p>Every time you launch IDA, you'll see the License Manager pop-up window. As long as there are free seats, you can check-out one of the available licenses and start using IDA.</p> <p>{% hint style=\"info\" %} Note that some of the available licenses may have different decompilers and add-ons enabled.</p>"},{"location":"getting-started/licensing.html#add-ons-servers-licenses","title":"Add-ons servers' licenses","text":""},{"location":"getting-started/licensing.html#private-lumina-server-activation-for-admins","title":"Private Lumina server activation for admins","text":"<p>Each of our add-ons, Teams and Private Lumina, requires an active license to work properly. To proceed with Lumina installation and setup, an active server's license is required.</p> <ol> <li>Add server in your account (activate the license).</li> <li>Locate your server license on the Licenses tab and download the following files:</li> <li>lumina server certificate</li> <li>.hexlic file (license key)</li> </ol> <p>You'll need both files to continue with the server installation and setup.</p>"},{"location":"getting-started/licensing.html#private-lumina-server-installation-for-admins","title":"Private Lumina server installation for admins","text":"<p>Server installation for Private Lumina should be done by the administrator. Check our Admin Guide for details.</p>"},{"location":"getting-started/licensing.html#teams-server-activation-for-admins","title":"Teams server activation for admins","text":"<p>Each of our add-ons, Teams and Private Lumina, requires an active license to work properly. To proceed with Teams installation and setup, an active server's license is required.</p> <ol> <li>Add server in your account (activate the license).</li> <li>Locate your server license on the Licenses tab and download the following files:</li> <li>teams server certificate</li> <li>.hexlic file (license key)</li> </ol> <p>You'll need both files to continue with the server installation and setup.</p>"},{"location":"getting-started/licensing.html#teams-server-installation-for-admins","title":"Teams server installation for admins","text":"<p>Server installation for Teams should be done by the administrator. Check our Admin Guide for details.</p>"},{"location":"getting-started/licensing.html#grant-access-to-manage-licenses","title":"Grant access to manage licenses","text":"<p>You can invite your teammates to view and activate licenses via their own My Hex-Rays account. To grant access: 1. Select license(s) you want to share and click Grant Access (1). 2. Add the email address of your teammate and click Confirm (2).  3. Your team member will receive an email invitation to log in to the portal and access the shared licenses.</p> <p> </p> <p>The License Details view allows you to review who currently has access to the license, remove users, or grant access to new ones.</p> <p>Key points: - Once a license has been downloaded, it cannot be modified. - Multiple licenses of the same type can be activated in bulk. - You can grant the access to manage licenses to other teammates, while the ownership of the license remains the same.</p>"},{"location":"getting-started/whats-next.html","title":"What's next?","text":"Enroll in our trainings Maksimize your IDA experience with trainigs tailored to all skill levels.  Watch tutorials Explore the full collection of IDA Pro tutorial videos on our Hex-Rays channel. Delve into the User Guide Read in-depth manuals that cover every aspect of IDA. Check the blog Learn more about IDA with Igor's tip of the week and explore recent news from Hex-Rays."},{"location":"user-guide/configuration.html","title":"Configuration","text":""},{"location":"user-guide/debugger.html","title":"Debugger","text":"Instant debugger Remote debugging Local debugging Debugger tutorials"},{"location":"user-guide/decompiler.html","title":"Decompiler","text":"Prerequisites Quick primer Exception handler Interactive operation Introduction to Decompilation vs. Disassembly Batch operation Configuration Third party plugins Floating point support Support for intrinsic functions Overlapped variables gooMBA Failures and troubleshooting FAQ Limitations"},{"location":"user-guide/disassembler.html","title":"Disassembler","text":"Interactivity Background Analysis Graph View Proximity View Navigation Disassembly Gallery Supported processors Supported file formats Bitfields Structures tutorial Union tutorial Variable length structures tutorial Data types, operands and constructs Packed executables"},{"location":"user-guide/floating-licenses.html","title":"Floating licenses","text":""},{"location":"user-guide/floating-licenses.html#introduction-to-ida-floating-licenses","title":"Introduction to IDA floating licenses","text":"<p>Floating licenses allow organizations with multiple IDA users to install IDA across many different machines while limiting the number of concurrent IDA active sessions. One floating license (or one floating license seat, if multiple seats are available) permits one concurrent use of IDA Pro. The licenses are managed by a Hex-Rays license server.</p> <p>{% hint style=\"info\" %} To use floating licenses, IDA needs to maintain a permanent connection to your organization's license server, but you can borrow licenses to work offline.</p> <p>Users don't need to store license files locally on their machines while using floating licenses.</p>"},{"location":"user-guide/floating-licenses.html#core-concepts","title":"Core concepts","text":""},{"location":"user-guide/floating-licenses.html#one-server-different-ida-licenses","title":"One server, different IDA licenses","text":"<p>You can have several IDA Pro licenses available on the same license server, each with a different set of decompilers assigned.\\ You can switch between those licenses depending on your needs (e.g. the architecture of the file you're working on).</p>"},{"location":"user-guide/floating-licenses.html#seats-and-seat-allocation","title":"Seats and seat allocation","text":"<p>A \"seat\" represents an active session of IDA for the user+machine pair.\\ If your IDA Pro license has 3 seats available, it means that up to 3 different users or machines can run IDA at the same time.\\ When you open IDA, the License Manager displays all available licenses and their number of seats.\\ One seat is taken (checked out) from the pool when you start working with a file in IDA.\\ When you close IDA, the seat is released back to the pool for others to use.</p> <p>{% hint style=\"info\" %} When you run multiple instances of IDA on the same computer, only one seat is used up from the license pool on the server.</p>"},{"location":"user-guide/floating-licenses.html#license-check-out","title":"License check-out","text":"<p>Checking out the license allows the user to work with IDA (maintaining an active IDA session), while keeping a connection to the license server. IDA Pro checks out a license when launched and returns it when closed.</p>"},{"location":"user-guide/floating-licenses.html#license-borrowing","title":"License borrowing","text":"<p>Borrowing allows the user to check out the license for a fixed period and work offline (without connection to the license server). At the end of the borrow period, the license is released automatically by the server and returned to the common license pool.</p>"},{"location":"user-guide/floating-licenses.html#activation-installation-and-setup","title":"Activation, installation and setup","text":"<p>What steps are required to enable floating licenses?</p> <p>Admin level:</p> <ol> <li>Activate your license server license and your IDA instance at My Hex-Rays Portal. Download your license files locally, as well as the server installer -&gt; check Licensing Guide</li> <li>Install and set up your license server -&gt; see Admin Guide.</li> <li>Install IDA Pro on your workstations -&gt; read how to install IDA</li> <li>Provide your users with a license server hostname</li> </ol> <p>User level:</p> <ol> <li>Run IDA on your machine and check out one of the available license to start working</li> </ol>"},{"location":"user-guide/floating-licenses.html#how-to-check-out-a-license","title":"How to check out a license?","text":"<ol> <li>Connect to the network where your license server is available and run IDA.</li> <li>Navigate to Help -&gt; License manager.</li> <li>In the License manager dialog, select the option Use floating license server and then type the license server hostname provided by your administrator. Click Connect (1).</li> </ol> <ol> <li>Check out one of the licenses: select a license visible under the available licenses list and click OK (2). You can continue working with IDA now.</li> <li>When you exit IDA, the license will be automatically checked in (returned to the server) and becomes free to use for another user/session.</li> </ol>"},{"location":"user-guide/floating-licenses.html#offline-usage-and-license-borrowing","title":"Offline usage and license borrowing","text":"<p>Floating licenses can function in air-gapped environments, as long as the license server is placed inside that isolated network.\\ This setup is ideal for users working on-site in a specific physical location. For offsite use, you must borrow a license in advance to access it offline or in a different, remote location.</p>"},{"location":"user-guide/floating-licenses.html#how-to-borrow-a-license","title":"How to borrow a license?","text":"<p>Borrow a license to temporarily \"check it out\" and use IDA without connection to the license server for a fixed period of time.</p> <p>If your selected IDA license has multiple seats available, borrowing the license temporarily check-out only one of the available seats.</p> <ol> <li>Connect workstation to the network with your license server. Run IDA and go to Help -&gt; License manager.</li> <li>In the License manager dialog, right click on the selected license to open a context menu and click Borrow license....</li> </ol> <p></p> <ol> <li>In the Borrow or return a license dialog, specify the borrow period end date and click OK.</li> </ol> <p>\\</p> <ol> <li>You should see the confirmation dialog that the license was successfully borrowed, as well as info in the Output window.</li> </ol> <p>\\</p> <ol> <li>Right now, you can disconnect with the server and work offline.</li> </ol> <p>Once borrowed, the license remain checked out. That means it stays unavailable for others until the end of the borrow period or explicit manual return.</p>"},{"location":"user-guide/floating-licenses.html#returning-a-borrowed-license-early","title":"Returning a borrowed license early","text":"<p>Normally, there is no need to return the borrowed license explicitly as it will be returned to the server pool automatically at the end of the borrow period.\\ However, you can return a borrowed license earlier than its declared end date to free it up for other users.</p> <ol> <li>Reconnect to the network with your license server.</li> <li>Go to Help -&gt; License manager.</li> <li>In the License manager dialog, right-click on the selected license to open a context menu and click Return license.</li> </ol> <p></p> <ol> <li>In the Output window, you should see the notification about successfully returned IDA license.</li> </ol> <p>You can seamlessly continue your work after returning a borrowed license, as it will automatically be checked out for online use from the server in the background.</p> <p>Key notes:</p> <ul> <li>Borrowing reduces the number of available floating license seats.</li> <li>After the borrowing period ends, the license automatically returns to the server.</li> <li>Be mindful of the borrowing duration, as it locks that license/seat for the entire period, even if you no longer need it.</li> <li>You can return the license manually before the fixed period but only while connected to the network with the license server.</li> </ul>"},{"location":"user-guide/floating-licenses.html#faq","title":"FAQ","text":""},{"location":"user-guide/floating-licenses.html#how-can-i-know-whos-occupying-the-seats","title":"How can I know who's occupying the seats?","text":"<p>If all seats are occupied, regular users cannot directly see who is using them. To get details about active users, your administrator can use the <code>lsadm</code> tool shipped with the server.</p>"},{"location":"user-guide/helper-tools.html","title":"Helper Tools","text":"<p>Helper tools, also known as utilities, are small programs designed to enhance your IDA functionality. Since IDA 9.1, most of these utilities are shipped alongside IDA and included with the IDA installation. </p>"},{"location":"user-guide/helper-tools.html#built-in-tools","title":"Built-in tools","text":"<p>You can find these tools in the <code>tools</code> folder inside the main IDA installation directory: - Flair: allows to add your own compiler libraries to the FLIRT engine - IDAClang: a command line version of IDAClang plugin - idsutils: helps create/maintain IDS files from DLLs - loadint: creates your own disassembler comment databases - Tilib: creates type libraries (til files) for IDA</p>"},{"location":"user-guide/helper-tools.html#idat-tools","title":"idat tools","text":"<p>In addition to the tools listed above, IDA includes utilities used by idat, such as Qwingraph and TVision.</p>"},{"location":"user-guide/helper-tools.html#additional-tools-in-the-download-center","title":"Additional tools in the Download Center","text":"<p>The IDA PIN tool is available for download in the My Hex-Rays Portal.</p> <p>Additionally, the Download Center provides utilities for older IDA versions (prior to 9.1).</p>"},{"location":"user-guide/helper-tools.html#how-to-use-these-tools","title":"How to use these tools?","text":"<p>For detailed usage instructions and tips, refer to the README files located in each tool's folder.</p>"},{"location":"user-guide/idalib.html","title":"idalib","text":"<p>IDA as a library (idalib) allows you to use the C++ and IDA Python APIs outside IDA as standalone applications. That way, IDA's engine is used inside your app, which simplifies development with the IDA APIs, which can be done now from your IDE of choice.</p>"},{"location":"user-guide/idalib.html#prerequisites","title":"Prerequisites","text":"<ul> <li>IDA Pro 9.0 or newer installed and running</li> </ul>"},{"location":"user-guide/idalib.html#installation-for-c","title":"Installation for C++","text":"<p>To use the ida library from the C++, please refer to the idalib.hpp header file shipped with C++ SDK where you will find the relevant information.</p>"},{"location":"user-guide/idalib.html#installation-for-python","title":"Installation for Python","text":"<p>To use the ida library Python module, you need to install and configure <code>idapro</code> package by following these steps:</p> <p>Install ida library Python module 1. Navigate to the <code>idalib/python</code> folder within the IDA Pro installation directory 2. Run the command: <code>pip install .</code></p> <p>{% hint style=\"info\" %} When setting up idalib to work with IDA Feeds and your virtual environment (venv), make sure to run the above command from within your activated venv.</p>"},{"location":"user-guide/idalib.html#setting-up-the-ida-library-python-module","title":"Setting up the ida library Python module","text":"<p>Run the Activation Script 1. You need to inform the <code>idapro</code> Python module of your IDA Pro installation. To do this, run the <code>py-activate-idalib.py</code> script located in your IDA Pro installation folder, or inside the <code>idalib/python</code> folder (depends on the system version you use):</p> <pre><code> ```\n python /path/to/IDA/installation/py-activate-idalib.py [-d /path/to/active/IDA/installation]\n ```\n If the `-d` option is omitted, the script will automatically select the IDA installation folder from which it was executed.\n</code></pre>"},{"location":"user-guide/idalib.html#using-the-ida-library-python-module","title":"Using the ida library Python module","text":"<p>Import <code>idapro</code> in your script 1. Make sure to import the <code>idapro</code> package as the first import in your Python script    - After importing, you can utilize the existing ida Python APIs</p>"},{"location":"user-guide/idalib.html#example-script","title":"Example script","text":"<p>For a reference on how to use the ida module, check the <code>idalib/examples</code> folder in your IDA Pro installation directory or look at the sample script provided below.</p> <pre><code>#!/usr/bin/env python3\nimport argparse\nimport os\nimport json\nimport idapro\nfrom pathlib import Path\nimport ida_segment\nimport ida_idaapi\nimport ida_funcs\nimport ida_idp\nimport ida_auto\nimport ida_undo\n\n\n\nclass sig_hooks_t(ida_idp.IDB_Hooks):\n\n    def __init__(self):\n        ida_idp.IDB_Hooks.__init__(self)\n        self.matched_funcs = set()\n\n    def func_added(self, pfn):\n        self.matched_funcs.add(pfn.start_ea)\n\n    def func_deleted(self, func_ea):\n        try:\n            self.matched_funcs.remove(func_ea)\n        except:\n            pass\n\n    def func_updated(self, pfn):\n        self.matched_funcs.add(pfn.start_ea)\n\n    def idasgn_loaded(self, sig_name):\n        return print(f\"Sig {sig_name} loaded\")\n\n    def dump_matches(self):\n        for fea in self.matched_funcs:\n            print(f\"Matched function {ida_funcs.get_func_name(fea)}\")\n\n\n### List the segments for the loaded binary\ndef list_segments():\n    nb_items = ida_segment.get_segm_qty()\n    print(\"Segments number:\",  nb_items)\n    for i in range(0, nb_items):\n        seg_src = ida_segment.getnseg(i)\n        print(str(i+1) + \".\")\n        print(\"\\tname:\", ida_segment.get_segm_name(seg_src))\n        print(\"\\tstart_address:\", hex(seg_src.start_ea))\n        print(\"\\tend_address\", hex(seg_src.end_ea))\n        print(\"\\tis_data_segment:\", ida_segment.get_segm_class(seg_src) == ida_segment.SEG_DATA)\n        print(\"\\tbitness:\", seg_src.bitness)\n        print(\"\\tpermissions:\",  seg_src.perm, \"\\n\")\n\n### Just call an existing python script\ndef run_script(script_file_name:str):\n    if not os.path.isfile(script_file_name):\n        print(f\"The specified script file {script_file_name} is not a valid python script\")\n        return\n    ida_idaapi.IDAPython_ExecScript(script_file_name, globals())\n\n\n### Apply provided sig file name\ndef apply_sig_file(database_file_name:str, sig_file_name:str, sig_res_file:str):\n    if not os.path.isfile(sig_file_name):\n        print(f\"The specified value {sig_file_name} is not a valid file name\")\n        return\n\n    root, extension = os.path.splitext(sig_file_name)\n    if extension != \".sig\":\n        print(f\"The specified value {sig_file_name} is not a valid sig file\")\n        return\n\n    # Install hook on IDB to collect matches\n    sig_hook = sig_hooks_t()\n    sig_hook.hook()\n\n    # Start apply process and wait for it\n    ida_funcs.plan_to_apply_idasgn(sig_file_name)\n    ida_auto.auto_wait()\n\n    matches_no = 0\n    for index in range(0, ida_funcs.get_idasgn_qty()):\n        fname, _, fmatches = ida_funcs.get_idasgn_desc_with_matches(index)\n        if fname in sig_file_name:\n            matches_no = fmatches\n            break\n\n    matches = {\n        \"total_matches\": matches_no,\n        \"matched_functions\": []\n    }\n\n    for fea in sig_hook.matched_funcs:\n        matches['matched_functions'].append({ \"func_name\": ida_funcs.get_func_name(fea), \"start_ea\": hex(fea) })\n\n\n    with open(sig_res_file, 'w') as jsonfile:\n        json.dump(matches, jsonfile, indent=2)\n\n    print(f\"Total matches {matches_no} while applying {sig_file_name} on {database_file_name}, saved results to {sig_res_file}\")\n\n### Internal string to bool converter used for command line arguments\ndef str_to_bool(value:str):\n    if isinstance(value, bool):\n        return value\n    if value.lower() in {'false', 'f', '0', 'no', 'n'}:\n        return False\n    elif value.lower() in {'true', 't', '1', 'yes', 'y'}:\n        return True\n    raise ValueError(f'{value} is not a valid boolean value')\n\n# Parse input arguments\nparser=argparse.ArgumentParser(description=\"IDA Python Library Demo\")\nparser.add_argument(\"-f\", \"--file\", help=\"File to be analyzed with IDA\", type=str, required=True)\nparser.add_argument(\"-l\", \"--list-segments\", help=\"List segmentes\", type=str_to_bool, nargs='?', const=True, default=False)\nparser.add_argument(\"-s\", \"--script-file-name\", help=\"Execute an existing python script file\", type=str, required=False)\nparser.add_argument(\"-g\", \"--sig-file-name\", help=\"Provide a signature file to be applied, requires also -o\", type=str, required=False)\nparser.add_argument(\"-o\", \"--sig-res-file\", help=\"Signature file applying result json file, works only together with -g\", type=str, required=False)\nparser.add_argument(\"-p\", \"--persist-changes\", help=\"Persist database changes\", type=str_to_bool, nargs='?', const=True, default=True)\n\nargs=parser.parse_args()\n\nif (args.sig_file_name is not None and args.sig_res_file is None) or (args.sig_file_name is None and args.sig_res_file is not None):\n    print(\"error: '-g/--sig-file-name' and '-o/--sig-res-file' arguments must be specified together or none of them.\\n\")\n    parser.print_help()\n    exit(-1)\n\n# Run auto analysis on the input file\nprint(f\"Opening database {args.file}...\")\nidapro.open_database(args.file, True)\n\n# Create an undo point\nif ida_undo.create_undo_point(b\"Initial state, auto analysis\"):\n    print(f\"Successfully created an undo point...\")\nelse:\n    print(f\"Failed to created an undo point...\")\n\n# List segments if required so\nif args.list_segments:\n    print(\"Listing segments...\")\n    list_segments()\n\n# Run a script if one provided\nif args.script_file_name is not None:\n    print(f\"Running script {args.script_file_name}...\")\n    run_script(script_file_name=args.script_file_name)\n\n# Apply signature file if one provided\nif args.sig_file_name is not None:\n    print(f\"Applying sig file {args.sig_file_name}...\")\n    apply_sig_file(database_file_name=args.file, sig_file_name=args.sig_file_name, sig_res_file=args.sig_res_file)\n\n# Revert any changes if specified so\nif not args.persist_changes:\n    if ida_undo.perform_undo():\n        print(f\"Successfully reverted database changes...\")\n    else:\n        print(f\"Failed to revert database changes...\")\n\n# Let the idb in a consistent state, explicitly terminate the database\nprint(\"Closing database...\")\nidapro.close_database()\nprint(\"Done, thanks for using IDA!\")\n</code></pre>"},{"location":"user-guide/lumina.html","title":"Teams","text":""},{"location":"user-guide/plugins.html","title":"Plugins","text":""},{"location":"user-guide/signatures.html","title":"Creating Signatures","text":"FLIRT Makesig"},{"location":"user-guide/teams.html","title":"Teams","text":""},{"location":"user-guide/type-libraries.html","title":"Creating Type Libraries","text":""},{"location":"user-guide/types.html","title":"Types","text":""},{"location":"user-guide/types.html#working-with-types-a-beginners-guide","title":"Working with Types: A Beginner's Guide","text":""},{"location":"user-guide/types.html#ida-type-system-fundamentals","title":"IDA type system fundamentals","text":"<p>The IDA type system is based on C-like constructs such as:</p> <ul> <li>Structures: Aggregate data types that group multiple members.</li> <li>Unions: Allow overlapping the same memory with different data types.</li> <li>Enums: Provide named integer constants.</li> </ul> <p>IDA ships with type libraries out-of-the-box, but you can define custom types in the Local Types window.</p>"},{"location":"user-guide/types.html#type-definitions-sources","title":"Type definitions sources","text":"<ul> <li>Built-in or custom type libraries(.til files)</li> <li>Custom types</li> <li>Debug information (e.g., PDB or DWARF)</li> </ul>"},{"location":"user-guide/types.html#type-libraries","title":"Type libraries","text":"<p>IDA ships with type libraries for popular platforms and operating systems. They provide predefined data types that can be used in your analysis. You can view a list of currently loaded type libraries in the Type Libraries window (View -&gt; Open subviews -&gt; Type Libraries, or Shift+F11)</p>"},{"location":"user-guide/types.html#load-additional-type-libraries","title":"Load additional type libraries","text":"<ol> <li>Go to the Type Libraries window. Right-click on the libraries list and select Load type library..., or press the Ins key.</li> </ol> <ol> <li>Select the type library from the list and click OK.</li> </ol> <p>Once loaded, type library definitions are accessible throughout IDA, including the Local Types window.</p> <p>{% hint style=\"info\" %} Relation between Local Types and Type Libraries:\\ In IDA, Local Types are custom or imported type definitions specific to your current project, while Type Libraries provide pre-defined types for common platforms and architectures.\\ Types in the Type Libraries, once referenced, are copied into the IDB and appear under the Local Types window.</p> <p>See also:</p> <ul> <li>Check TILIB tutorial for creating custom type libraries</li> </ul>"},{"location":"user-guide/types.html#type-management-essentials-local-types-view","title":"Type management essentials: Local Types view","text":"<p>The Local Types view provides a centralized hub for managing and customizing type definitions directly within the IDA UI. To access this view, navigate to View -&gt; Open subviews -&gt; Local Types or press Shift+F1 keys.</p> <p></p> <p>In the Local Types window, you can:</p> <ul> <li>Add a single type (structure, union, and enumeration), including importing types from loaded type libraries</li> <li>Create multiple types at once by parsing declarations</li> <li>Modify existing types</li> <li>Delete existing types</li> <li>Copy full type(s) definition to clipboard</li> </ul>"},{"location":"user-guide/types.html#add-new-types","title":"Add new types","text":"<p>In the Add type dialog, you can create a custom structure, union, and enumeration, or import them from loaded libraries. To add a new type:</p> <ul> <li>press the Ins key or</li> <li>right-click on the types list and select Add type... from the context menu.</li> </ul>"},{"location":"user-guide/types.html#create-a-structure-struct","title":"Create a structure (struct)","text":"<ol> <li>Open the Add type dialog and in the Struct tab configure the structure settings:</li> </ol> <p>Understanding structure options:</p> <ul> <li>Name: the unique name of your struct.</li> <li>Fixed layout (default: enabled)\\   When checked:</li> <li>It locks the struct size and members. It prevents accidentally changing the struct size, for example, if the user moves members around while modifying another type.</li> <li>You need to specify the Structure size in bytes.</li> <li>Make type choosable (default: enabled)\\   When checked:</li> <li>It includes this struct in the type listing.</li> <li>Pack fields (default: disabled)\\   When checked:</li> <li>It packs the fields of the struct (removes padding) and saves memory.</li> <li>Create union (Leave unchecked for structures)</li> <li> <p>Only check it when creating a union instead of a struct.</p> </li> <li> <p>Click OK.</p> </li> </ul> <p>As an alternative, you can create or edit structures via free-text editor.</p>"},{"location":"user-guide/types.html#create-a-union","title":"Create a union","text":"<p>{% hint style=\"info\" %} A union is de facto a type of a struct. Creating and editing unions follow the same principles as working with structs.</p> <ol> <li>Open the Add type dialog and in the Struct tab configure the union settings:</li> <li>specify the unique name of your union, and</li> <li>check the Create union checkbox.</li> </ol> <p></p> <p>{% hint style=\"info\" %} When you choose to create a union, the fixed layout option will no longer be available.\\ If you would like to turn a union to a fixed layout structure, first change \"union\" to \"struct\" in the C syntax tab, and then edit the struct.</p> <ol> <li>Click OK.</li> </ol>"},{"location":"user-guide/types.html#create-an-enumeration-enum","title":"Create an enumeration (enum)","text":"<ol> <li>Open the Add type dialog and in the Enum tab configure the enum settings:</li> </ol> <p>Understanding enum options:</p> <ul> <li>Name: specify the unique name of your enum</li> <li>Size: (default: auto)</li> <li>It determines how much memory the enum values will occupy</li> <li>You can select from dropdown the number of bytes (1, 2, 4, or 8 bytes)</li> <li>The auto option lets the compiler decide based on values</li> <li>Number representation: defines how enum values are displayed in IDA</li> <li>Select the format for enum members from the available options: Hexadecimal, Decimal, Octal, Binary or Character (ASCII/Unicode)</li> <li>Signed: (default: disabled)</li> <li>It determines if enum values can be negative</li> <li>Bitmask: (default: disabled)\\   When checked:</li> <li> <p>It makes the enum a bitfield, and allows the representation of multiple flags in a single value using bitwise operations (e.g., OR, AND)</p> </li> <li> <p>Click OK.</p> </li> </ul> <p>As an alternative, you can create or edit enums via free-text editor.</p>"},{"location":"user-guide/types.html#modify-existing-types","title":"Modify existing types","text":"<p>To modify an existing type:</p> <ul> <li>press Ctrl+E or</li> <li>right-click on the list of existing types and select Edit type... from the context menu.</li> </ul>"},{"location":"user-guide/types.html#delete-existing-types","title":"Delete existing types","text":"<p>To delete an existing type:</p> <ul> <li>press Del or</li> <li>right-click on the list of existing types and select Delete type... from the context menu.</li> </ul>"},{"location":"user-guide/types.html#copy-full-types-definition-to-clipboard","title":"Copy full type(s) definition to clipboard","text":"<p>To copy the entire C-style definition of the type:</p> <ol> <li>In the Local Types view, right-click on the type you want to copy and select Copy full type(s) from the context menu</li> <li>The complete definition, including all nested types and dependencies, will be copied to your clipboard.</li> </ol>"},{"location":"user-guide/types.html#addingediting-types-via-free-text-editor","title":"Adding/editing types via free-text editor","text":"<p>The Struct/Enum tabs are perfect for learning IDA type system and creating simple, single types. However, for more complex tasks\u2014such as copying types from existing source code or defining multiple related types simultaneously\u2014the text editor offers greater efficiency and flexibility.</p> <p>Add a type using C syntax tab</p> <ol> <li>In the Local Types view, open the Add type dialog.</li> <li>Go to the C syntax tab and enter a new type declaration.</li> </ol> <p></p> <p>Edit a type using C syntax tab</p> <ol> <li>In the Local Types view, right-click on the existing type and select Edit type... from the context menu.</li> <li>Go to the C syntax tab and modify the type.</li> </ol> <p></p> <p>Create multiple type definitions at once</p> <p>The Parse declarations... option allows you to input and process many type definitions at once, enabling batch creation of multiple types.</p> <ol> <li>Right-click on the types list in the Local Types view and select Parse declarations... from the context menu.</li> <li>In the Parse declarations... dialog, enter the type definitions using C syntax and click OK to add them to the Local Types.</li> </ol> <p></p>"},{"location":"user-guide/types.html#importing-types","title":"Importing types","text":""},{"location":"user-guide/types.html#import-types-from-loaded-type-libraries","title":"Import types from loaded type libraries","text":"<p>Before you start importing types from type libraries, ensure that your desired library is already loaded in the Type Libraries window.</p> <p>Import standard structures</p> <p>If you want to import an existing standard structure:</p> <ol> <li> <p>Open the Add type dialog and in the Struct tab, click Import standard structure.</p> <p> 2. In the new dialog, browse and select the structure from the list of all corresponding types in the loaded libraries, then click OK to import it.</p> </li> </ol> <p>Import standard enums</p> <p>If you want to import an existing standard enum from the type library:</p> <ol> <li> <p>Open the Add type dialog and in the Enum tab, click:</p> </li> <li> <p>Import standard enum by enum name (1), or</p> </li> <li>Import standard enum by symbol name (2) (useful when you know member names but not the enum name).</li> </ol> <p></p> <ol> <li>In the new dialog, browse and select the enum from the list of all corresponding types in the loaded libraries, then click OK to import it.</li> </ol>"},{"location":"user-guide/types.html#import-types-definitions-from-cc-header-files","title":"Import types definitions from C/C++ header files","text":"<p>Header files can be parsed by two different parsers:</p> <ul> <li>a default parser, shipped out-of-the-box with IDA, that supports basic C, or</li> <li>IDACLang, which deals with complex C/C++/Objective-C source code.</li> </ul> <p>You can select source parser in Options \u2192 Compiler...:\\ </p> <p>To import type definitions from header files:</p> <ol> <li>Navigate to Files -&gt; Load file -&gt; Parse C header file...</li> <li>Select your header file and click OK to import it. You should see a notification about a successful compilation.\\    When you import a header file, all the type definitions from that file are added to your Local Types.</li> </ol> <p>How can I download IDACLang?\\ IDAClang is a standalone command line tool to produce type libraries, that you can get from My Hex-Rays download center.</p> <p>See also:</p> <ul> <li>IDAClang tutorial</li> </ul>"},{"location":"user-guide/types.html#import-debug-information","title":"Import debug information","text":"<p>IDA supports debugging information formats such as PDB and DWARF. If your input file includes debugging information with types data, IDA will automatically import the types while loading the file.\\ \\</p> <p>The imported types will be displayed in the Local Types window, organized under the corresponding folder (either dwarf or pdb).</p> <p></p>"},{"location":"user-guide/types.html#working-with-types-programmatically","title":"Working with types programmatically","text":"<p>In addition to the manual approach through IDA's graphical interface, types can be created, modified, and managed programmatically using our APIs. This, among others, allows for the automation of type-related tasks or the creation of complex data structures, making it particularly useful for handling large sets of types or performing repetitive operations.</p> <p>What next:</p> <ul> <li>Check IDAPython examples dedicated to working with types</li> </ul>"},{"location":"user-guide/user-interface.html","title":"User Interface","text":"Menu Bar Learn about the various options in the main menu bar Desktops Understand how to create, save, and switch between different desktops Command line Check IDA command-line input field to execute advanced operations License Manager Manage your license access, including floating licenses How To Use List Viewers in IDA Discover how to efficiently interact with IDA's list viewers Database Conversion from idb to i64 Learn how to convert 32-bit database files (IDB) to 64-bit format"},{"location":"user-guide/configuration/index.html","title":"Configuration","text":""},{"location":"user-guide/configuration/all-the-low-level-configuration-options-in-.cfg-files.html","title":"All the low-level configuration options in .cfg files","text":""},{"location":"user-guide/configuration/command-line-switches.html","title":"Command line switches","text":"<p>IDA recognizes the following command line switches:</p> Switch Effect <code>-a</code> disable auto analysis. (<code>-a-</code> enables it) <code>-A</code> autonomous mode. IDA will not display dialog boxes. Designed to be used together with <code>-S</code> switch. <code>-b####</code> loading address, a hexadecimal number, in paragraphs (a paragraph is 16 bytes) <code>-B</code> batch mode. IDA will generate .IDB and .ASM files automatically -c disassemble a new file (delete the old database) <code>-C####</code> set compiler in format name:abi <code>-ddirective</code> A configuration directive which must be processed at the first pass. Example: <code>-dVPAGESIZE=8192</code> <code>-Ddirective</code> A configuration directive which must be processed at the second pass. <code>-f</code> disable FPP instructions (IBM PC only) <code>-h</code> help screen -i#### program entry point (hex) <code>-I#</code> set IDA as just-in-time debugger (0 to disable and 1 to enable) <code>-L####</code> name of the log file <code>-M</code> disable mouse (text only) <code>-O####</code> options to pass to plugins. This switch is not available in the IDA Home edition. <code>-o####</code> specify the output database (implies <code>-c</code>) <code>-p####</code> processor type <code>-P+</code> compress database (create zipped idb) <code>-P</code> pack database (create unzipped idb) <code>-P-</code> do not pack database (not recommended, see Abort command) <code>-r###</code> immediately run the built-in debugger format of this switch is explained here <code>-R</code> load MS Windows exe file resources <code>-S###</code> Execute a script file when the database is opened <code>-T###</code> interpret the input file as the specified file type The file type is specified as a prefix of a file type visible in the 'load file' dialog box To specify archive member put it after the colon char, for example: <code>-TZIP</code>: classes.dex You can specify any nested paths: <code>-T</code>| <code>&lt;ftype&gt;[:&lt;member&gt;{:&lt;ftype&gt;:&lt;member&gt;}[:&lt;ftype&gt;]]</code> IDA does not display the \"Load file\" dialog in this case <code>-t</code> create an empty database. <code>-W###</code> specify MS Windows directory <code>-x</code> do not create segmentation (used in pair with Dump database command) this switch affects EXE and COM format files only. <code>-z</code> turn on debugging <code>-?</code> this screen (works for the text version) <code>?</code> this screen (works for the text version) <code>-h</code> this screen (works for the text version) <code>-H</code> this screen (works for the text version) <code>--help</code> this screen (works for the text version)"},{"location":"user-guide/configuration/command-line-switches.html#debugging-flags","title":"Debugging flags","text":"<p>The following bitfield can be used with the <code>-z</code> directive:</p> <pre><code>00000001 drefs\n00000002 offsets\n00000004 flirt\n00000008 idp module\n00000010 ldr module\n00000020 plugin module\n00000040 ids files\n00000080 config file\n00000100 check heap\n00000200 licensing\n00000400 demangler\n00000800 queue\n00001000 rollback\n00002000 already data or code\n00004000 type system\n00008000 show all notifications\n00010000 debugger\n00020000 [dbg\\_appcall](1572.html)\n00040000 source-level debugger\n00080000 accessibility\n00100000 network\n00200000 full stack analysis (simplex method)\n00400000 handling of debug info (e.g. pdb, dwarf)\n00800000 lumin\n</code></pre>"},{"location":"user-guide/configuration/command-line-switches.html#batch-mode","title":"Batch mode","text":"<p>It is possible to run IDA in so-called \"batch mode\", using the following the <code>-B</code> switch:</p> <pre><code>    ida -B input-file\n</code></pre> <p>which is equivalent to:</p> <pre><code>    ida -c -A -Sanalysis.idc input-file\n</code></pre> <p>(For more information, please see the analysis.idc file in the IDC subdirectory.)</p> <p>A couple notes:</p> <ul> <li>regular plugins are not automatically loaded in batch mode because the <code>analysis.idc</code> file quits and the kernel has no chance to load them.</li> <li>Although the GUI version of IDA is perfectly of running batch scripts, we recommend using the \"idalib\" Python module for this task as it uses fewer system resources.</li> </ul>"},{"location":"user-guide/configuration/command-line-switches.html#executing-a-script","title":"Executing a script","text":"<p>The script file extension (<code>.idc</code>, <code>.py</code>) is used to determine which interpreter will be used to run the script.</p> <p>It is possible to pass command line arguments after the script name. For example: <code>-S\"myscript.py argument1 \\\\\"argument 2\\\\\" argument3\"</code></p> <p>The passed parameters are stored in the \"ARGV\" global IDC variable, which means:</p> <ul> <li>For IDC scripts:</li> <li>Use <code>ARGV.count</code> to determine the number of arguments.</li> <li>The first argument, <code>ARGV[0]</code>, contains the script name.</li> <li>For Python scripts:</li> <li>you can import the <code>idc</code> compatibility layer (<code>import idc</code>), and then</li> <li>access the <code>idc.ARGV</code> array</li> </ul> <p>NOTE: The <code>-S</code> switch is not available in the IDA Home edition.</p>"},{"location":"user-guide/configuration/configuration-files.html","title":"Configuration files","text":"<p>The configuration files are searched first in %IDADIR%\\cfg, then in %IDAUSR%\\cfg.</p> <p>See documentation about the IDAUSR environment variable.</p> <p>In the configuration files, you can use C,C++ style comments and include files. If no file is found, IDA uses default values. IDA uses the following configuration files:</p> <pre><code> IDA.CFG    - general config file\n IDATUI.CFG - text mode interface config file\n IDAGUI.CFG - graphics mode interface config file\n</code></pre> <p>In the IDATUI.CFG, you can define the hotkeys and keyboard macros for the text version of IDA. Syntax:</p> <pre><code>        \"ActionName\" = Value\n</code></pre> <p>where value may be:</p> <pre><code>        a string:       \"Ctrl-F5\"\n        a char:         'F'\n        a scancode:     0x4900\n        zero:           0\n</code></pre> <p>Zero scancode disables the hotkey.</p> <p>To define the keyboard macros:</p> <pre><code>     MACRO key { key1 key2 key3 ... keyN }\n</code></pre> <p>where key is a string (key name), char or a scancode. Example:</p> <pre><code>        MACRO   \"Alt-W\" // this sample macro jumps to \"start\" label\n        {\n                \"Ctrl-G\"\n                's' 't' 'a' 'r', 't'\n                \"Enter\"\n        }\n</code></pre>"},{"location":"user-guide/configuration/configuration.html","title":"Configuration","text":""},{"location":"user-guide/configuration/css-based-styling.html","title":"CSS-based styling Tutorial","text":""},{"location":"user-guide/configuration/css-based-styling.html#before-ida-73","title":"Before IDA 7.3","text":"<p>IDA used to store colors in the registry:</p> <ul> <li><code>HKEY_CURRENT_USER\\Software\\Hex-Rays\\IDA</code> on Windows,</li> <li><code>~/.idapro/ida.reg</code> on Linux &amp; Mac OSX.</li> </ul> <p>This was somewhat inconvenient because color values were stored in binary format, and hard to move from computer to computer.</p> <p>In addition, this only lets users style a small subset of the widgets that compose IDA, which can be insufficient.</p>"},{"location":"user-guide/configuration/css-based-styling.html#ida-73-css-based-styling","title":"IDA 7.3: CSS-based styling","text":"<p>Since we had to introduce yet another set of new colors in 7.3, we took the opportunity to moved away from the registry-stored, binary-only approach, to a CSS-based approach.</p> <p>This gives us the following advantages:</p> <ul> <li>CSS is a well-known format</li> <li>CSS is human-readable</li> <li>Qt understands CSS out-of-the-box (parts of it, at least)</li> <li>Using CSS will therefore let us style not only the custom IDA widgets, but all widgets</li> </ul> <p>This last point is important, because many users have been asking for the ability to style IDA more thoroughly, rather than just styling a few custom widgets (such as the disassembly views, navigation band, \u2026)</p>"},{"location":"user-guide/configuration/css-based-styling.html#how-ida-73-css-based-styling-works","title":"How IDA 7.3 CSS-based styling works","text":"<p>IDA 7.3 ships with 2 themes by default:</p> <ul> <li>default</li> <li>dark</li> </ul> <p>Those themes are located in <code>$IDA_INSTALL/themes/</code>:</p> <pre><code>aundro@flatiron:~/IDA-7.3$ tree themes/\nthemes/\n\u251c\u2500\u2500 _base\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 theme.css\n\u251c\u2500\u2500 dark\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 icons\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 expand.png\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 spacer.png\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 theme.css\n\u2514\u2500\u2500 default\n    \u2514\u2500\u2500 theme.css\n\n4 directories, 5 files\naundro@flatiron:~/IDA-7.3$\n</code></pre> <p>Notice that, in addition to <code>dark</code> and <code>default</code> directories, you can also spot an additional <code>_base</code> directory.</p> <p>The <code>_base</code> theme holds all the CSS directives that are required for IDA to work correctly, and therefore it must be \u201cimported\u201d by other themes (using the IDA-specific <code>@importtheme</code> directive) before any other styling directives are declared.</p> <p>For example, here are the first 3 lines of <code>$IDA_RELEASE/themes/dark/theme.css</code>:</p> <pre><code>aundro@flatiron:~/IDA-7.3$ head -n 3 themes/default/theme.css\n\n@importtheme \"_base\";\n\naundro@flatiron:~/IDA-7.3$\n</code></pre>"},{"location":"user-guide/configuration/css-based-styling.html#what-happens-when-colors-are-modified-through-the-colors-dialog","title":"What happens when colors are modified through the \u201cColors\u201d dialog?","text":"<p>When you change colors in the \u2018Colors\u2019 dialog, IDA will not modify the files that are present in <code>$IDA_INSTALL/themes/</code>.</p> <p>Instead, IDA will create a file in IDA\u2019s user directory, holding what we will refer to as \u201cuser overrides\u201d.</p> <p>Let\u2019s assume the user:</p> <ul> <li>switched to the <code>dark</code> theme,</li> <li>modified the <code>Instruction</code> text color to red.</li> <li>clicked \u2018OK\u2019</li> </ul> <p>IDA will then have created the file:</p> <ul> <li><code>~/.idapro/themes/dark/user.css</code></li> <li><code>%APPDATA%\\Hex-Rays\\IDA Pro\\themes\\dark\\user.css</code> on Windows</li> </ul> <p>with the following contents:</p> <pre><code>aundro@flatiron:~/.idapro$ tree themes\nthemes\n\u2514\u2500\u2500 dark\n    \u2514\u2500\u2500 user.css\n\n1 directory, 1 file\naundro@flatiron:~/.idapro$\naundro@flatiron:~/.idapro$ cat themes/dark/user.css\n/* NOTE: This is an autogenerated file; please do not edit. */\n\nCustomIDAMemo\n{\n    qproperty-line-fg-insn: red;\n}\naundro@flatiron:~/.idapro$\n</code></pre> <p>In other words, the themes that are shipped with IDA are never modified, but instead a \u201cuser override\u201d file is created, that will contain whatever customization the user made to the theme.</p>"},{"location":"user-guide/configuration/css-based-styling.html#importingexporting-themes-customization","title":"Importing/Exporting themes customization","text":"<p>IDA 7.3 removed the Import/Export feature from its <code>Colors</code> dialog, because an equivalent is already automatically present in the form of those \u201cuser overrides\u201d files, which can be found in:</p> <ul> <li><code>%APPDATA%\\Hex-Rays\\IDA Pro\\themes\\*\\user.css</code> on Windows,</li> <li><code>~/.idapro/themes/*/user.css</code> on Linux and Mac OSX.</li> </ul> <p>In order to re-use customizations across different computers, it is enough to just copy those <code>user.css</code> file(s).</p>"},{"location":"user-guide/configuration/css-based-styling.html#debugging-style-sheets-lookup","title":"Debugging style sheets lookup","text":"<p>In case IDA misbehaves, and appears to ignore some styling directives, it\u2019s possible to launch IDA with the following command-line flag to debug themes loading: <code>ida -z1000000</code></p> <p>In IDA\u2019s <code>Output window</code>, you should spot something along the lines of this:</p> <pre><code>Themes: Trying file \"/home/aundro/IDA-7.3/themes/dark/theme.css\" ... found.\nThemes: Trying file \"/home/aundro/.idapro/themes/dark/theme.css\" ... not found.\nThemes: Found @importtheme (/home/aundro/IDA-7.3/themes/dark/theme.css:6)\nThemes: Trying file \"/home/aundro/IDA-7.3/themes/_base/theme.css\" ... found.\nThemes: Trying file \"/home/aundro/.idapro/themes/_base/theme.css\" ... not found.\nThemes: Trying file \"/home/aundro/IDA-7.3/themes/dark/user.css\" ... not found.\nThemes: Trying file \"/home/aundro/.idapro/themes/dark/user.css\" ... found.\n</code></pre> <p>First of all, IDA tries to load the desired (<code>dark</code>) theme contents (that corresponds to the first 5 lines):</p> <ul> <li>IDA looked for <code>$IDA_INSTALL/themes/dark/theme.css</code>, and found it</li> <li>IDA also looked for <code>~/.idapro/themes/dark/theme.css</code>! (we\u2019ll discuss this in the following chapter)</li> <li>IDA spotted that the <code>dark</code> theme imports the <code>_base</code> theme, and loaded contents from that one as well.</li> </ul> <p>Then, IDA tries to load user overrides for the <code>dark</code> theme (corresponds to the 2 final lines):</p> <ul> <li>IDA looked for <code>$IDA_INSTALL/themes/dark/user.css</code>, but didn\u2019t find it (this is, in fact, pretty much unnecessary, since user overrides should never be in IDA\u2019s installation directory. We\u2019ll eventually get rid of this.)</li> <li>IDA looked for in <code>~/.idapro/themes/dark/user.css</code>, and found it.</li> </ul>"},{"location":"user-guide/configuration/css-based-styling.html#adding-themes","title":"Adding themes","text":"<p>As was mentioned in the previous chapter, IDA also looks for themes contents in IDA\u2019s user directory:</p> <ul> <li><code>%APPDATA%\\Hex-Rays\\IDA Pro\\themes</code> on Windows,</li> <li><code>~/.idapro/themes</code> on Linux &amp; Mac OSX</li> </ul> <p>That means it\u2019s possible to add your own themes there, without having to modify the (possibly read-only) <code>$IDA_INSTALL</code> directory.</p> <p>In addition, putting additional themes in IDA\u2019s user directory means that new version of IDA will be able to pick them up automatically.</p>"},{"location":"user-guide/configuration/css-based-styling.html#example-new-theme","title":"Example new theme","text":"<p>Let\u2019s say you want to create a new theme, called <code>blue</code>.</p> <p>You should therefore create the following CSS file:</p> <ul> <li><code>~/.idapro/themes/blue/theme.css</code></li> </ul> <p>\u2026in which you can override anything you want, after importing the <code>_base</code> theme.</p> <p>For example:</p> <pre><code>aundro@flatiron:~/.idapro$ cat themes/blue/theme.css\n\n@importtheme \"_base\";\n\nQWidget\n{\n    background-color: lightblue;\n}\n\nCustomIDAMemo\n{\n    qproperty-line-fg-regular-comment: red;\n    [...snipped...]\n}\naundro@flatiron:~/.idapro$\n</code></pre> <p>You can then ship that <code>~/.idapro/themes/blue/theme.css</code> file to other users, and any personal modifications they make to it, will be stored in <code>~/.idapro/themes/blue/user.css</code>, leaving your original <code>blue</code> theme untouched.</p>"},{"location":"user-guide/configuration/css-based-styling.html#what-can-be-styled-and-how","title":"What can be styled, and how?","text":"<p>Conceptually, IDA\u2019s CSS styling can be \u201csplit\u201d into 2 categories:</p> <ol> <li>Core Qt widgets styling</li> <li>IDA custom widgets styling</li> </ol>"},{"location":"user-guide/configuration/css-based-styling.html#1-core-qt-widgets-styling","title":"1) Core Qt widgets styling","text":"<p>In order to know what, and how to style Qt widgets, the best is to have a look at the references:</p> <ul> <li>Qt Style Sheets, and</li> <li>Qt Style Sheets Reference</li> </ul>"},{"location":"user-guide/configuration/css-based-styling.html#2-ida-custom-widgets-styling","title":"2) IDA custom widgets styling","text":"<p>IDA\u2019s main stylable custom widgets have the following class names:</p> <ul> <li>CustomIDAMemo</li> <li>TextArrows</li> <li>MainMsgList</li> <li>TCpuRegs</li> <li>navband_t</li> </ul> <p>You can find the entire set of properties supported by those, by looking at the contents of:</p> <ul> <li><code>$IDA_INSTALL/themes/_base/theme.css</code></li> <li><code>$IDA_INSTALL/themes/default/theme.css</code></li> </ul>"},{"location":"user-guide/configuration/css-based-styling.html#a-note-about-the-clr-file-format","title":"A note about the \u201c.clr\u201d file format","text":"<p>In order to re-use color schemes with IDA &lt; 7.3, users had to export, and then import them using <code>.clr</code> files.</p> <p>It\u2019s worth pointing out that colors in those files, are in the form <code>\"BBGGRR\"</code>, while CSS expects <code>\"#RRGGBB\"</code>, so you will need to pay attention to that when porting colors from a <code>.clr</code> file.</p> <p>Alternatively, you can use the following script, which might help get most of the job done.</p> <p>{% file src=\"../.gitbook/assets/port_clr72_to_css.py\" %} Download a script</p>"},{"location":"user-guide/configuration/css-based-styling.html#a-note-about-the-dark-theme","title":"A note about the dark theme","text":"<p>Note that even though IDA ships with a \u2018dark\u2019 theme, the version of Qt we use still doesn\u2019t support OS-induced theme switches, and therefore IDA won\u2019t automatically switch to it; the user will still have to change it manually.</p>"},{"location":"user-guide/configuration/css-based-styling.html#restrictions","title":"Restrictions","text":"<p>Qt is mostly stylable using CSS, but it has a few restrictions:</p> <ul> <li>Styling of URLs in <code>QLabel</code> instances is not supported (see this question)</li> <li>In tabular views (e.g., the <code>Functions window</code> widget), we added the ability to highlight the portions of text that match the \u201cquick filter\u201d query (which can be opened using <code>Ctrl+F</code>). Unfortunately, the code we added to do that, will simply not be called for items in those views to which CSS directives apply. This is the case for e.g., \u201cselected\u201d items, in the <code>dark</code> mode. We will try and solve this in the future, but currently don\u2019t have a fix.</li> </ul>"},{"location":"user-guide/configuration/customizing-ida.html","title":"Customizing IDA","text":"<p>IDA offers a MDI tabbed interface. Here are a few tips to customize it.</p> <p>{% file src=\"assets/customize.pdf\" %}</p>"},{"location":"user-guide/configuration/keyboard-macros.html","title":"Keyboard macros","text":"<p>You can define a keyboard macro to automate frequent keystroke sequences. They are defined in the same manner as in the Borland IDE:</p> <pre><code>        - Press Alt--\n        - Press &lt;key&gt; - macro name\n        - Enter macro body\n        - Press Alt-=\n</code></pre> <p>All macros are lost when you exit IDA. If you want to have a static macro which is not lost when you quit IDA, then write it down into IDATUI.CFG file. The format of a macro definition is explained here.</p> <p>NOTE: keyboard macros are available only in the text version of IDA.</p>"},{"location":"user-guide/configuration/shortcuts.html","title":"Shortcuts","text":"<p>This doc provide a quick references to common default shortcuts to streamline your workflow in IDA.</p>"},{"location":"user-guide/configuration/shortcuts.html#navigation","title":"Navigation","text":"Action Shortcut Jump to Operand <code>Enter</code> Jump in a New Window <code>Alt+Enter</code> Jump to Previous Position <code>Esc</code> Jump to Next Position <code>Ctrl+Enter</code> Jump to Address <code>G</code> Jump by Name <code>Ctrl+L</code> Jump to Function <code>Ctrl+P</code> Open Cross-References Window <code>X</code> View Pseudocode <code>Tab</code> Jump to Segment <code>Ctrl+S</code> Jump to Segment Register <code>Ctrl+G</code> Jump to Problem <code>Q</code> Jump to Entry Point <code>Ctrl+E</code>"},{"location":"user-guide/configuration/shortcuts.html#bookmarks","title":"Bookmarks","text":"Action Shortcut Mark Position <code>Alt+M</code> Jump to Bookmark <code>Ctrl+M</code> Open Bookmarks Window <code>Ctrl+Shift+M</code>"},{"location":"user-guide/configuration/shortcuts.html#search","title":"Search","text":"Action Shortcut Search Text <code>Alt+T</code> Search Next Text <code>Ctrl+T</code> Search Sequence of Bytes <code>Alt+B</code> Search Immediate Value <code>Alt+I</code> Search Next Immediate Value <code>Ctrl+I</code> Search Next Code <code>Alt+C</code> Search Next Data <code>Ctrl+D</code>"},{"location":"user-guide/configuration/shortcuts.html#debugging","title":"Debugging","text":"Action Shortcut Add Breakpoint <code>F2</code> Start Process <code>F9</code> Terminate Process <code>Ctrl+F2</code> Step Into <code>F7</code> Step Over <code>F8</code> Run Until Return <code>Ctrl+F7</code> Breakpoint List <code>Ctrl+Alt+B</code> View Stack Trace <code>Ctrl+Alt+S</code>"},{"location":"user-guide/configuration/shortcuts.html#operands","title":"Operands","text":"Action Shortcut Change to Hexadecimal <code>Q</code> Change to Decimal <code>H</code> Change to Binary <code>B</code> Change to Character <code>R</code> Change Enum Member <code>Ctrl+O</code> Change to Offset (data segment) <code>O</code> Change to Offset (in any segment) <code>Alt+R</code> Change to Offset (user-defined) <code>Ctrl+R</code> Select Union Member <code>T</code> Change to Stack Variable <code>K</code> Bitwise Negate <code>~</code> Change Sign <code>_</code>"},{"location":"user-guide/configuration/shortcuts.html#function-management","title":"Function Management","text":"Action Shortcut Create Function <code>P</code> Edit Function <code>Alt+P</code> Set Function End <code>E</code> Edit Stack Variables <code>Ctrl+K</code> Set Type <code>Y</code> Open Stack Variables Window <code>Ctrl+K</code>"},{"location":"user-guide/configuration/shortcuts.html#annotate","title":"Annotate","text":"Action Shortcut Annotate (Rename) <code>N</code> Enter Repeatable Comment <code>;</code> Enter Comment <code>:</code> Insert Line Before <code>Ins</code> Insert Line After <code>Shift+Ins</code> Enter Anterior Lines <code>Alt+Q</code> Enter Posterior Lines <code>Alt+A</code>"},{"location":"user-guide/configuration/shortcuts.html#open-subviews","title":"Open Subviews","text":"Subview Shortcut Local Types <code>Shift+F1</code> Functions <code>Shift+F3</code> Names <code>Shift+F4</code> Signatures <code>Shift+F5</code> Segments <code>Shift+F7</code> Segment Registers <code>Shift+F8</code> Structures <code>Shift+F9</code> Type Libraries <code>Shift+F11</code> Strings <code>Shift+F12</code>"},{"location":"user-guide/configuration/shortcuts.html#miscellaneous","title":"Miscellaneous","text":"Action Shortcut Undo <code>Ctrl+Z</code> Redo <code>Ctrl+Shift+Z</code> Begin Selection <code>Alt+L</code> Open Calculator <code>?</code> Save <code>Ctrl+S</code> Exit <code>Alt+X</code>"},{"location":"user-guide/configuration/shortcuts.html#get-the-handy-shortcuts-cheatsheet","title":"Get the handy shortcuts cheatsheet","text":"<p>You can download the cheatsheet here:</p>"},{"location":"user-guide/configuration/ui-fonts-themes.html","title":"UI/Fonts/Themes","text":"<p>Coming soon!</p>"},{"location":"user-guide/debugger/debugger-tutorials.html","title":"Debugger tutorials","text":"<p>Here you can find a comprehensive set of step-by-step tutorials categorized by different debugging types and platforms.</p>"},{"location":"user-guide/debugger/debugger-tutorials.html#general-introduction-into-debugging-with-ida","title":"General introduction into debugging with IDA","text":"<ul> <li>Overview of Linux debugging with IDA</li> <li>Overview of Windows debugging with IDA</li> <li>Debugging a Windows executable locally and remotely</li> <li>IDA scriptable debugger: Overview and scriptability</li> </ul>"},{"location":"user-guide/debugger/debugger-tutorials.html#local-debugging-tutorials","title":"Local debugging tutorials","text":"<p>Windows local debugging: - IDA Win32 local debugging - Debugging Windows applications with IDA Bochs plugin</p> <p>Linux local debugging: - Debugging Linux applications locally - IDA Linux local debugging - Using the Bochs debugger plugin in Linux</p>"},{"location":"user-guide/debugger/debugger-tutorials.html#remote-debugging-tutorials","title":"Remote debugging tutorials","text":"<ul> <li>General remote debugging with IDA Pro</li> <li>Debugging Mac OSX Applications with IDA Pro</li> <li>Debugging iOS Applications with IDA Pro</li> <li>Debugging iOS &gt;= 17 Applications via CoreDevice with IDA Pro</li> <li>Debugging a Windows executable remotely</li> <li>Debugging Windows Kernel with VMWare and IDA WinDbg plugin</li> <li>Debugging Linux Kernel under VMWare using IDA GDB debugger</li> </ul> <p>PIN Tracer: - Debugging Linux/Windows applications with PIN Tracer module</p>"},{"location":"user-guide/debugger/debugger-tutorials.html#other-specialized-debugging-tutorials","title":"Other specialized debugging tutorials","text":"<p>Android/Dalvik debugging: - Debugging Dalvik programs</p> <p>XNU debugging: - Debugging the XNU Kernel with IDA Pro</p> <p>QEMU debugging: - Debugging code snippets with QEMU debugger (a la IDA Bochs debugger)</p> <p>Trace and replay debugger features: - Trace Replayer and Managing Traces - Using IDA Pro's tracing features</p> <p>Appcall mechanism: - Appcall</p>"},{"location":"user-guide/debugger/debugger-tutorials.html#archived-tutorials","title":"Archived tutorials","text":"<p>Outdated tutorials that no longer apply have been moved to the archive. - IDA Win32 to Win32 debugging - IDA Win32 to Win64 debugging</p>"},{"location":"user-guide/debugger/debugger.html","title":"Debugger","text":""},{"location":"user-guide/debugger/instant-debugger.html","title":"Instant debugger","text":"<p>The -r command line switch is used to run the built-in debugger without creating a database in advance. The format is this switch is:</p> <pre><code>  -rdebname{params}:pass@hostname:port+pid\n</code></pre> <p>The explanation of the fields:</p> <pre><code>  debname       Debugger name. Should contain the debugger\n                module name. Examples: win32, linux. This prefix\n                can be shortened or even completely\n                omitted if there is no ambiguity\n  params        Optional parameter for the debugger module\n                The parameters from the appropriate configuration file\n                can be specified here, separated by semicolons.\n  pass          Password for the remote debugger server\n  hostname      Host name or address of the remote debugger server.\n                IPv6 addresses need to be enclosed in [].\n  port          Port number to use to connect to the debugger server\n  pid           PID of the process to attach\n</code></pre> <p>All fields except the first one are optional. Also, the pid field can be specified as '+'. IDA will display the process list to attach. See examples below for typical command lines:</p> <pre><code>  ida -rwin32 file args\n        Run 'file' with command line 'args' in the local debugger\n        We have to specify the debugger name to avoid ambiguities.\n  ida -rwindbg+450\n        Attach to process 450 on the local machine using the windbg backend\n  ida -rl:hippy@mycom:4567+\n        Connect to the remote linux computer 'mycom' at port 4567 using the\n        password 'hippy' and display the list of processes running on it.\n        Allow the user to select a process and attach to it.\n  ida -rl@mycom /bin/ls e*\n        Run '/bin/ls' command on the 'mycom' computer using the remote\n        debugger server on Linux. Use an empty password and the\n        default port number. Pass \"e*\" as the parameter to /bin/ls.\n  ida -rl@mycom whobase.idb\n        Run '/usr/bin/who' command on the 'mycom' computer using the\n        remote linux debugger server. Use an empty password and the\n        default port number. IDA will extract the name of the\n        executable from the whobase.idb file in the local current\n        directory. If the database does not exist, then this command\n        will fail.\n  ida \"-rwindbg{MODE=1}@com:port=\\\\.\\pipe\\com_1,baud=115200,pipe,reconnect+\"\n        Attach using windbg in kernel mode. The connection string is\n        \"com:port=\\\\.\\pipe\\com_1,baud=115200,pipe,reconnect\". A mini database\n        will be created on the fly.\n</code></pre> <p>When the -r switch is used, IDA works with the databases in the following way:</p> <pre><code>        - if a database corresponding to the input file exists and\n        the -c switch has not been specified, then IDA will use the\n        database during the debugging session\n\n        - otherwise, a temporary database will be created\n</code></pre> <p>Temporary databases contain only meta-information about the debugged process and not the memory contents. The user can make a memory snapshot any time before the process stops. If IDA detects that a command will cause the process to exit or detach IDA, it will propose to make a snapshot.</p> <p>The rest of the command line is passed to the launched process.</p> <p>In the case there is no input file (when attaching to an existing process, for example), then the temporary database is created in the standard temporary directory. For Windows, this directory is usually \"Local Setting\\Temp\" in the user profile directory.</p> <p>See also How to launch remote debugging</p>"},{"location":"user-guide/debugger/local-debugging.html","title":"Local debugging","text":"WinDbg Debugger WinDbg: Time Travel Debugging Linux debugger Intel/ARM macOS debugger"},{"location":"user-guide/debugger/remote-debugging.html","title":"Remote debugging","text":"<p>1. Launch a remote IDA debugger server on the remote host. The remote server is started from the command line and accepts command line parameters. You can specify a password if you want to protect your debugger server from strangers. For example, to launch the server under MS Windows, you could enter:</p> <pre><code>        win32_remote -Pmy_secret_password\n</code></pre> <p>2. Specify the remote debugger parameters in the Debugger, Process options. The file paths must be valid on the remote host. Do not forget to specify the same password as you have specified when launching the server. For example, to debug notepad.exe on the remote computer remote.host.com:</p> <pre><code>        Application: c:\\windows\\notepad.exe\n        Input file:  c:\\windows\\notepad.exe\n        Directory:   c:\\windows\n        Hostname:    remote.host.com\n        Port:        23946\n        Password:    my_secret_password\n</code></pre> <p>3. The rest of debugging is the same as with local debugging.</p> <p>{% hint style=\"info\" %} The Linux debugger server can handle one debugger session at once. If you need to debug several applications simultaneously, launch several servers at different network ports.</p> <p>The following debugger servers are shipped with IDA</p> <pre><code> File name             Target system         Debugged programs\n ------------------    ------------------    ----------------------------\n android_server32      ARM Android           32-bit ELF files\n android_server        AArch64 Android       64-bit ELF files\n android_x64_server    x86 Android 32-bit    32-bit ELF files\n android_x86_server    x86 Android 64-bit    64-bit ELF files\n armlinux_server32     ARM Linux             32-bit ELF files\n armlinux_server       AArch64 Linux         64-bit ELF files\n linux_server          Linux 64-bit          64-bit ELF files\n mac_server            Mac OS X/macOS 11     64-bit Mach-O files (x64)\n mac_server_arm        ARM macOS 11          64-bit Mach-O files (arm64)\n mac_server_arme       ARM macOS 11          64-bit Mach-O files (arm64e)\n win32_remote32.exe    MS Windows 32-bit     32-bit PE files\n win64_remote.exe      MS Windows 64-bit     64-bit PE files\n</code></pre> <p>An appropriate server must be started on the remote computer before starting a debug session.</p> <p>See also</p> <ul> <li>Start process</li> <li>Debugger submenu</li> <li>Debugger for Linux</li> <li>Debugger for macOS</li> <li>Debugger for Android native code</li> <li>Remote iOS debugger</li> </ul>"},{"location":"user-guide/debugger/local-debugging/intel-arm-macos-debugger.html","title":"Intel/ARM macOS debugger","text":"<p>On macOS, the suggested approach is to use Remote debugging with one of the mac_server* binaries that are shipped with IDA - even when debugging apps on your local machine.</p> <p>Using a standalone debug server application makes it easier to get around the codesigning and debugging restrictions that are built into macOS. Note that this is also the approach used by lldb. Internally lldb uses a dedicated debugserver that implements the core debugger engine - so IDA does the same.</p> <p>It is possible to use the Local Mac OS X Debugger in ida.app, but you must run IDA as root.</p> <p>For a deeper dive into macOS debugging, see our tutorial.</p> <p>See also</p> <ul> <li>How to launch remote debugging</li> <li>Debugger submenu</li> <li>Start process</li> <li>Remote iOS debugger</li> </ul>"},{"location":"user-guide/debugger/local-debugging/linux-debugger.html","title":"Linux debugger","text":"<p>The Linux debugger has the following particularities and limitations:</p> <ul> <li>The debugger server can handle only one IDA client at a time</li> <li>By default, the 64-bit debugger will try to load \"libunwind-x86_64.so.8\" and \"libunwind-ptrace.so.0\" in order to help with stack recovery.</li> <li>ARMLinux: hardware breakpoints are not supported</li> <li>ARMLinux: The THUMB mode is not supported</li> </ul>"},{"location":"user-guide/debugger/local-debugging/linux-debugger.html#configuration-options","title":"Configuration options","text":"<p>Debugger-specific options can be changed from <code>Debugger -&gt; Debugger options -&gt; Set specific options</code>.</p> <p>The linux debugger has the following configuration options:</p> <ul> <li>Path to libunwind</li> <li>\"libunwind-x64_64.so.8\" (the default) - the debugger will try to load     libunwind \"libunwind-x86_64.so.8\" + \"libunwind-ptrace.so.0\" pair     using the regular 'ld' search path.</li> <li>\"libunwind-x64_64.so\" (note the lack of \".8\" at the end) - like the default, except the debugger will look for \"libunwind-x86_64.so\" and \"libunwind-ptrace.so\" (this is particularly useful for working with libunwind \"dev\" packages)</li> <li>absolute path to \"libunwind-x64_64.so.8\" or \"libunwind-x64_64.so\" - the debugger will try to load libunwind only from the provided path.</li> <li>absolute path to \"libunwind-x64_64.so[.8]\" - the debugger will try to load the two libraries from there (the absolute path to \"libunwind-ptrace.so[.0]\" will be derived from that of \"libunwind-x64_64.so[.8]\")</li> <li>left blank - don't use libunwind to collect stack traces</li> </ul> <p>By default this is set to libunwind-x86_64.so meaning the default   path will be used to load libunwind-x86_64.so(.8) and libunwind-ptrace.so(.0). If an absolute   path is provided, both libraries will be loaded from this path. If left empty, the call   stack will be analyzed by IDA and not libunwind.</p>"},{"location":"user-guide/debugger/local-debugging/linux-debugger.html#related-pages","title":"Related pages","text":"<p>See also:</p> <ul> <li>Start process</li> <li>Debugger submenu</li> <li>How to launch remote debugging</li> </ul>"},{"location":"user-guide/debugger/local-debugging/windbg-debugger.html","title":"WinDbg Debugger","text":"<p>The WinDbg debugger plugin uses Microsoft's Debugging Engine COM interfaces from the Debugging Tools package.</p> <p>In order to use the WinDbg debugger plugin, please download the latest debugging tools from https://learn.microsoft.com/en-us/windows-hardware/drivers/debugger/debugger-download-tools.</p> <p>The WinDbg debugger can be used to debug local programs as well as remote programs. This is controlled via the connection string in the \"Process Option\" dialog. If it is left blank, it means that a local debugging is in effect. Otherwise, a debug engine compatible connection string is expected. IDA will display an error message if the connection string could not be accepted: in that case, try using the same connection string with \"cdb\", or \"windbg\" and see if it works.</p>"},{"location":"user-guide/debugger/local-debugging/windbg-debugger.html#configuration-options","title":"Configuration options","text":"<p>Debugger-specific options can be changed from <code>Debugger -&gt; Debugger options -&gt; Set specific options</code>.</p> <p>Windbg debugger plugin has the following configuration options:</p> <ul> <li>Debugging mode</li> <li>User mode - Check this option to debug MS Windows applications.</li> <li>Kernel mode debugging - Check this option when debugging the kernel.</li> <li>Non-Invasive user-mode process attach - Check this option to enable attaching to user-mode processes non-invasively.</li> <li>Kernel mode debugging with reconnect and initial break - Select this option\\     when debugging a kernel and when the connection string contains 'reconnect'. This option\\     will assure that the debugger breaks as soon as possible after a reconnect.</li> <li>Output flags - These flags tell the debugging engine which kind of output\\   messages to display and which to omit.</li> </ul>"},{"location":"user-guide/debugger/local-debugging/windbg-debugger.html#idacfg-options","title":"ida.cfg options","text":"<p>WinDbg debugger plugin has the following options that can be configured in <code>cfg/ida.cfg</code> (in the installation folder):</p> <ul> <li>DBGTOOLS - This should be configured to point to the same\\   folder where Microsoft Debugging Tools are installed. The plugin will try to\\   guess where the tools are, but if it fails, a manual intervention will be required.\\   If this option is not set, then the plugin will try to use dbgeng.dll from\\   MS Windows system folder, while normal debug operations will work, extensions will not.</li> </ul>"},{"location":"user-guide/debugger/local-debugging/windbg-debugger.html#features","title":"Features","text":""},{"location":"user-guide/debugger/local-debugging/windbg-debugger.html#send-commands-to-the-debugger-engine","title":"Send commands to the debugger engine","text":"<p>After the debugging session is started, you can send commands to the debugger engine.</p> <p>Use the \".\" key to switch to the command line and start typing commands.</p> <p>Please note that while it is possible to send any command to the engine, commands that change the execution status should not be used: go (\"g\"), step (\"t\"), step into (\"p\"), etc...</p> <p>The WinDbg debugger module adds a new menu item: Debugger -&gt; WinDbg command. It can be used to send arbitrary commands to the debugger engine. The command output is displayed in the output window.</p>"},{"location":"user-guide/debugger/local-debugging/windbg-debugger.html#symbol-information","title":"Symbol information","text":"<p>If the symbol path is configured properly, then the debugger engine will fetch debug symbols from the appropriate location (symbol server, cache, etc.)</p> <p>Example: if the following environment variable is set windbg will download the symbols from the specified paths:</p> <pre><code>_NT_SYMBOL_PATH=srv*c:\\pdb\\_cache*http://msdl.microsoft.com/download/symbols\n</code></pre>"},{"location":"user-guide/debugger/local-debugging/windbg-debugger.html#multi-processor-support","title":"Multi-processor support","text":"<p>Debugger Engine will create a virtual thread for each processor that it finds. Similarly, IDA will present these processors as threads.</p>"},{"location":"user-guide/debugger/local-debugging/windbg-debugger.html#remote-debugging-support","title":"Remote debugging support","text":"<p>It is possible to use the process server \"dbgsrv.exe\" to enable remote debugging. For example:</p> <ol> <li>Run <code>dbgsrv -t tcp:port=PORT_NUM,server=HOST_NAME</code></li> <li> <p>Verify that the server is correctly running by listing all process\\     servers on the given HOST_NAME:</p> <p><code>cdb -QR \\\\HOST_NAME</code> 3.  Finally, run IDA and specify the following connection string:</p> <p><code>tcp:port=PORT_NUM,server=HOST_NAME</code></p> </li> </ol>"},{"location":"user-guide/debugger/local-debugging/windbg-debugger.html#use-windbg-extensions","title":"Use WinDbg extensions","text":"<p>It is possible to use the extension commands that usually work with WinDbg. Make sure that the \"Debugging Tools folder\" setting is properly set so that this feature works.</p>"},{"location":"user-guide/debugger/local-debugging/windbg-debugger.html#kernel-debugging","title":"Kernel debugging","text":"<p>It is possible to debug the kernel the same way as it is\\ done with WinDbg. Simply setup the target kernel and configure the WinDbg plugin by checking the \"kernel mode debugging\" option and by typing a correct connection string.</p> <p>If the user detaches from a kernel session (using Debugger -&gt; Detach from process), the debugged kernel will resume. However, if the user selects Debugger -&gt; Terminate process,\\ the kernel will be suspended (it will wait until another client attaches to it).</p>"},{"location":"user-guide/debugger/local-debugging/windbg-debugger.html#dump-files-support","title":"Dump files support","text":"<p>It is possible to load into IDA dump files generated either manually (using the \".dump\" command) or crash dumps generated from a crashed process or kernel. For reference, check the windmp file loader.</p> <p>After the dump has been loaded, it is possible to run the debugger and investigate the crash by typing WinDbg commands into the command line window.\\ For example, one could check the call-stack or use any other WinDbg extension.</p>"},{"location":"user-guide/debugger/local-debugging/windbg-debugger.html#external-breakpoints","title":"External breakpoints","text":"<p>It is possible to use the command line to create breakpoints that are not supported by IDA but are supported by the debugging engine. In such cases, any unknown (external) breakpoints will cause IDA to suspend execution when triggered.</p>"},{"location":"user-guide/debugger/local-debugging/windbg-debugger.html#api","title":"API","text":"<p>Additional IDC functions provided by the WinDbg debugger</p>"},{"location":"user-guide/debugger/local-debugging/windbg-ttd.html","title":"WinDbg: Time Travel Debugging","text":"<p>IDA supports WinDbg Time-Travel debugging. When used with a compatible version of WinDbg, you can load a <code>.run</code> file into IDA, similarly to a crash dump.</p>"},{"location":"user-guide/debugger/local-debugging/windbg-ttd.html#installation","title":"Installation","text":"<p>Only the standalone version of WinDbg supports Time Travel Debugging. The version of WinDbg from Debugging Tools for Windows can not be used to load TTD traces.</p>"},{"location":"user-guide/debugger/local-debugging/windbg-ttd.html#downloading-windbg","title":"Downloading WinDbg","text":"<p>You can find the list of current ways to download WinDbg here: https://learn.microsoft.com/en-us/windows-hardware/drivers/debugger/</p> <p>You can either install WinDbg onto your system or extract it manually.</p>"},{"location":"user-guide/debugger/local-debugging/windbg-ttd.html#copying-windbg-files","title":"Copying WinDbg files","text":"<p>WinDbg is an AppX package, and Windows by default forbids the execution of files in its installation folder. It is required to copy the files to another directory to use them with IDA.</p> <p>You can find the installation directory for WinDbg by opening a PowerShell window and running:</p> <pre><code>Get-AppxPackage Microsoft.WinDbg | select InstallLocation\n</code></pre> <p>For example, for version 1.2410.110001.0 the path might be <code>C:\\Program Files\\WindowsApps\\Microsoft.WinDbg_1.2410.11001.0_x64__8wekyb3d8bbwe</code>. In general, users do not have access to list the <code>C:\\Program Files\\WindowsApps</code> folder by default, however it is possible to navigate to the WinDbg subfolder directly by pasting the path into Explorer.</p> <p>Please copy the <code>amd64</code> subdirectory into a directory of your choice and update the <code>DBGTOOLS</code> path in <code>ida.cfg</code> to point to the copied folder. The folder pointed to by <code>DBGTOOLS</code> should contain a <code>dbgeng.dll</code> file.</p>"},{"location":"user-guide/debugger/local-debugging/windbg-ttd.html#manually-extracting-windbg-files","title":"Manually extracting WinDbg files","text":"<p>If you do not want to install WinDbg onto your system, you can instead download and extract it manually by doing the following:</p> <ol> <li>Download the .appinstaller file from https://aka.ms/windbg/download</li> <li>Open the .appinstaller file as xml in a text editor. Take the value of <code>Uri=</code> on the line containing the <code>&lt;MainBundle</code> definition and download the file specified by it, e.g., from <code>&lt;MainBundle Name=\"Microsoft.WinDbg\" Version=\"1.2410.11001.0\" Publisher=\"CN=Microsoft Corporation, O=Microsoft Corporation, L=Redmond, S=Washington, C=US\" Uri=\"https://windbg.download.prss.microsoft.com/dbazure/prod/1-2410-11001-0/windbg.msixbundle\" /&gt;</code> download the <code>https://windbg.download.prss.microsoft.com/dbazure/prod/1-2410-11001-0/windbg.msixbundle</code> file.</li> <li>Extract the <code>windbg_win-x64.msix</code> file from the downloaded .msixbundle (it is a zip file with a custom extension)</li> <li>Extract the <code>amd64</code> folder from the <code>windbg_win-x64.msix</code> file (it is a zip file with a custom extension)</li> </ol> <p>Once you have followed these steps, update the <code>DBGTOOLS</code> path in <code>ida.cfg</code> to point to the copied folder. The folder pointed to by <code>DBGTOOLS</code> should contain a <code>dbgeng.dll</code> file.</p>"},{"location":"user-guide/debugger/local-debugging/windbg-ttd.html#features","title":"Features","text":""},{"location":"user-guide/debugger/local-debugging/windbg-ttd.html#time-travel","title":"Time travel","text":"<p>The WinDbg time travel implementation uses a trace file that you later load. Unlike a crash dump you can still continue execution, however this works by navigating through a recorded instruction log. You cannot change registers or affect the program behavior.</p> <p>Additional UI actions are available when loading a time travel log. You can use the UI to continue the execution both forwards and backwards by selecting either the normal \"Continue\" action, or the \"Continue backwards\" action. Additionally, the \"Step into (backwards)\", \"Step over (backwards)\", \"Run to cursor (backwards)\" actions become available, however they do not work with source-level debugging.</p> <p>You can access these actions either using the toolbar or from the \"Debugger\" menu.</p> <p></p>"},{"location":"user-guide/debugger/local-debugging/windbg-ttd.html#commands","title":"Commands","text":"<p>The <code>!positions</code> command can be used to show the current position in the trace.</p> <p>The <code>!tt</code> command can be used to travel to a specific position in the trace that you have obtained before.</p> <p>For more details, please see the Microsoft documentation page.</p> <p>The <code>dx</code> command can be used to query information about the trace, such as memory writes or reads to a specific address. See this tutorial for how to use it.</p>"},{"location":"user-guide/debugger/remote-debugging/android-debugger.html","title":"Android debugger","text":"<p>The Android debugger has the following particularities and limitations:</p> <p>- Android on ARM is supported (not on x86)</p> <p>- Both ARM and Thumb mode code is supported</p> <p>- Multithreaded applications can be debugged. However, since the operating system does not report thread deaths, they are reported only when the debugger notices that the thread is missing (for example, because there is an error when we try to suspend it)</p> <p>- Apparently Android reports applications that are currently executing a system call as executing \"LDMFD SP!, {R4,R7}\" before the syscall. Once the syscall completes, the next instruction is reached.</p> <p>- Hardware breakpoints are not supported. See also</p> <ul> <li>Start process</li> <li>Debugger submenu</li> <li>How to launch remote debugging</li> </ul>"},{"location":"user-guide/debugger/remote-debugging/bochs-debugger.html","title":"Bochs debugger","text":"<p>The Bochs debugger plugin uses the Bochs internal command line debugger. For more about the internal debugger: http://bochs.sourceforge.net/doc/docbook/user/internal-debugger.html</p> <p>To use the Bochs debugger plugin, the following steps must be carried out:</p> <ul> <li> <p>Download and install Bochs v2.6.x from: http://bochs.sourceforge.net/getcurrent.html For Mac OS or Linux, please refer to the following guide: https://www.hex-rays.com//products/ida/support/tutorials/debugging_bochs_linux.pdf</p> <p>``` - Open or create an IDB file in IDA and select the Bochs debugger</p> <ul> <li>Configure the debugger specific options in       Debugger Options, Set specific options.   One of three possible modes of operation can be selected: image, idb, or pe. ```</li> </ul> </li> </ul> <p>Because the debugger plugin uses the Bochs command line debugger, it has the following limitations:</p> <pre><code>  - Breakpoints: the Bochs debugger has the limit of 10 physical, 10\n    virtual, and 10 linear breakpoints. Since IDA uses some breakpoints\n    for its own purposes, only 20 breakpoints can be set by the user\n\n  - Watchpoints: the Bochs debugger has the limit of 16 read and 16 write\n    watchpoints\n\n  - FPU registers, MMX, XMM, control, task and segment registers cannot be modified\n</code></pre> <p>There are ways to overcome some of the limitations mentioned above by downloading Bochs source code and modifying it. For example, the number of allowed breakpoints can be increased.</p> <p>The Bochs debugger configuration dialog box has the following entries:</p> <pre><code>  BOCHSRC\n    This is the path to the Bochs configuration file template. It contains\n    special variables prefixed with \"$\". These variables should not be\n    modified or changed by the user, as they are automatically filled by the\n    plugin. Other entries can be modified as needed.\n</code></pre> <p>Operation mode The user can choose between Disk Image, IDB and PE operation modes.</p> <pre><code>  Delete image files upon session end\n    If enabled, IDA will automatically delete the Bochs disk images used for\n    the debugging session (this option only applies to IDB and PE operation modes).\n    If the plugin (in IDB operation mode) finds a previously created image, it verifies that it\n    corresponds to the database and uses it as is. Unchecking this option\n    for the IDB operation mode will speed up launching the debugger.\n\n  64-bit emulation\n    This options enables 64bit emulation. It is only present in the 64-bit version of IDA.\n    By default, the Bochs plugin will try to detect whether to choose 32 or 64-bit emulation.\n</code></pre> <p>Default configuration parameters are taken from ida\\cfg\\dbg_bochs.cfg.</p> <p>The Bochs debugger module adds a new menu item: Debugger, Bochs Command. It can be used to send arbitrary commands to Bochs. The command output is displayed in the message window (there is also an IDC counterpart of this function, please refer to \"startup.idc\" file). This command is very useful but may interfere with IDA, especially if the user modifies breakpoints or resume execution outside IDA.</p> <p>See also:</p> <ul> <li>Disk Image operation mode</li> <li>Bochs IDB operation mode</li> <li>Bochs PE operation mode</li> <li>Bochs plugin operation mode FAQ</li> </ul>"},{"location":"user-guide/debugger/remote-debugging/dalvik-debugger.html","title":"Dalvik debugger","text":""},{"location":"user-guide/debugger/remote-debugging/dalvik-debugger.html#dalvik-debugger","title":"Dalvik debugger","text":"<p>The Dalvik debugger is a plugin to debug Android applications written for the Dalvik Virtual Machine. It includes the source level debugging too.</p> <p>Dalvik debugger specific options:</p> <pre><code>    ADB executable\n\n        IDA needs to know where the 'adb' utility resides, and tries various\n        methods to locate it automatically. Usually IDA finds the path to adb,\n        but if it fails then we can define the ANDROID_SDK_HOME or the\n        ANDROID_HOME environment variable to point to the directory where the\n        Android SDK is installed to. Or set the path to 'adb' here.\n\n    Emulator/device serial number\n\n        If multiple emulator/device instances are running, you must specify\n        the target instance to connect to.\n\n    Package name\n\n        Set the package name for the application as specified in\n        AndroidManifest.xml. It is a mandatory option to start an application.\n        If you plan to use \"Attach to process\" debugger action then you may\n        leave this field empty.\n\n    Activity\n\n        If your want to start an application using the \"Start process\"\n        debugger action then you have to set this option too. Copy it from\n        AndroidManifest.xml. If you plan to use the \"Attach to process\"\n        debugger action then you may leave this field empty.\n\n    Command line arguments\n\n        Every object inside Dalvik VM has an ID. It is the 64-bit number.\n        If you want to see it in \"Locals\"/\"Watches\" windows then set this\n        checkbox.\n</code></pre> <p>Source-level debugging</p> <pre><code>    In order to use source-level debugging you have to set paths to the\n    application source code files. Do it using \"Options/Sources path\"\n    menu item.\n\n    Our dalvik debugger presumes that the application sources reside\n    in the current (\".\") directory.  If this is not the case, you can\n    map current directory (\".\") to the directory where the source files\n    are located.\n</code></pre> <p>List of special things about our Dalvik debugger:</p> <pre><code>  - In Dalvik there is no stack and there is no SP register.\n    The only available register is IP.\n  - The method frame registers and slots (v0, v1, ...) are represented as\n    local variables in IDA.\n    We can see them in the Debugger/Debugger Windows/Locals window\n  - The stack trace is available from \"Debugger/Windows/Stack trace\"\n  - When the application is running, it may execute some system code.\n    If we break the execution by clicking on the \"Cancel\" button,\n    quite often we may find ourselves outside of the application,\n    in the system code. The value of the IP register is 0xFFFFFFFF in this\n    case, and stack trace shows only system calls and a lot of 0xFFFFFFFFs.\n    It means that IDA could not locate the current execution position inside\n    the application. We recommend to set more breakpoints inside the\n    application, resume the execution and interact with application by\n    clicking on its windows, selecting menu items, etc.\n    The same thing can occur when we step out the application or\n    step into the system code. In the last case we can use \"Run until\n    return\" debugger command to return to the application code.\n</code></pre> <p>Locals window</p> <pre><code>    IDA considers the method frame registers, slots, and\n    variables (v0, v1, ...) as local variables.\n    To see their values we have to open the \"Locals\" window\n    from the \"Debugger/Debugger windows/Locals\" menu item.\n\n    If the information about the frame is available (the symbol table is\n    intact) then IDA shows the method arguments, the method local variables\n    with names and other non-named variables.\n    Otherwise some variable values will not be displayed because IDA\n    does not know their types. Variables without type information are\n    marked with \"Bad type\" in the \"Locals\" window.\n    To see the variable value in this case please use the \"Watches\" window.\n</code></pre> <p>Watches window</p> <pre><code>    To open the \"Watches\" window please select the \"Debugger/Windows/Watches\"\n    menu item. In this window we can add any variable to watch its value.\n\n    Please note that we have to specify type of variable if it is not known.\n    Use C-style casts:\n        (Object*)v0\n        (String)v6\n        (char*)v17\n        (int)v7\n\n    We do not need to specify the real type of an object variable,\n    the \"(Object*)\" cast is enough.  IDA can derive the real object type\n    itself.\n\n    ATTENTION! An incorrect type may cause the Dalvik VM to crash.\n\n    There is not much we can do about it. Our recommendation is to never\n    cast an integer variable to an object type, the Dalvik VM usually\n    crashes if we do that. But the integer cast \"(int)\" is safe in practice.\n\n    Keeping the above in the mind, do not leave the cast entries\n    in the \"Watches\" window for a long time. Delete them before any\n    executing instruction that may change the type of the watched variable\n</code></pre> <p>See also Debugger submenu.</p>"},{"location":"user-guide/debugger/remote-debugging/pin-debugger.html","title":"PIN debugger","text":"<p>The PIN debugger is a remote debugger plugin used to record execution traces. It allows to record traces on Linux and Windows (x86 and x86_64) from any of the supported IDA platforms (Windows, Linux and MacOSX). Support for MacOSX targets is not yet available. Please see the section PIN support for MacOSX for more details on this subject.</p> <p>To use the PIN debugger plugin the following steps must be carried out:</p> <ul> <li>Download the appropriate version of PIN from http://www.pintool.org</li> <li> <p>Build the PIN tool</p> <p>``` - Configure the debugger specific options in   Debugger Options, Set specific options.</p> <p>PIN debugger plugin has the following configuration options: ```</p> </li> </ul> <p>- PIN Binary Path: Full path to the pin binary.</p> <ul> <li>PIN Tool Path: Directory where the idadbg.so or .dll PIN tool resides.</li> <li>Tracing options:</li> <li>Instruction tracing: trace individual instructions</li> <li>Basic block tracing: trace basic blocks</li> <li>Function tracing: trace functions</li> <li>Recording of register values: record register values or not. If this option is disabled, only EIP/RIP will be recorded.</li> <li>PIN Tool options:</li> <li>Autolaunch pin for \"localhost\": When this option is set and the host name specified in Debugger, Process Options is \"localhost\", the PIN tool will be executed by IDA. Otherwise IDA expects the PIN tool to be already running and listening. Please refer to Connecting a remote PIN tool instance from IDA for more details.</li> <li>Debug mode: This flag allows one to see what's happening in the PIN tool side. It prints out some debugging information.</li> <li>Extra-arguments: Additional command line arguments to be used when constructing the command line to launch PIN locally. The extra arguments can be added before the PIN tool specification (before '-t /path/to/pin/tool) or after the PIN tool (after '-t /path/to/pin/tool' but before '-- application'). Please consult the section \"Command Line Switches\" of the Intel PIN manual for more details. Optionally you can launch PIN yourself and connect to it from IDA. See Connecting a remote PIN tool instance from IDA for more details.</li> </ul>"},{"location":"user-guide/debugger/remote-debugging/remote-gdb-debugger.html","title":"Remote GDB Debugger","text":"<p>Remote GDB Debugger module allows for debugging code using the GDB remote serial protocol. For this, the debuggee must contain a so-called \"GDB stub\" that controls the execution and handles the remote protocol commands. There are many implementations of such stubs available with different capabilities. The module has been tested with the following GDB stubs: gdbserver: Windows (Cygwin), Linux (ARM, MIPS, PowerPC) VMWare: x86 (16/32 bit) QEMU: x86 (16/32 bit), ARM, MIPS, PowerPC OpenOCD: ARM It is quite possible that the module will work with other stubs. Note that only x86, ARM, MIPS and PowerPC processors are supported at the moment.</p> <p>Some GDB stubs support so-called \"monitor\" commands. For example, VMWare stub can return extra info about system registers. Use the command line at the bottom of the main IDA window to send such commands. The output will be displayed in the message window. Hint: most stubs have a \"help\" command (if they support any commands at all).</p> <p>The module also makes the following function available from IDC: string send_dbg_command(string command);</p> <pre><code> NOTE\n</code></pre> <p>When using instant debugging, you will need to tell IDA on which CPU the target is running. This is done in the Remote GDB Debugger options dialog, available via \"Debugger specific options\" button in the Process options dialog shown when you choose Remote GDB Debugger from the Run or Attach menu.</p> <pre><code> NOTE\n</code></pre> <p>Many GDB stubs do not report the address that triggered a hardware breakpoint. In this case, IDA will report a memory breakpoint hit as a generic TRAP signal. Examine the previous instruction to see if it referenced a memory location with breakpoint. When continuing from such a breakpoint, choose not to pass the signal to the program.</p> <pre><code> NOTE\n</code></pre> <p>IDA can be used together with a J-Link debug probe from SEGGER Microcontroller GmbH:</p> <p>https://segger.com/jlink-debug-probes.html</p> <p>See also</p> <ul> <li>Remote GDB Debugger options</li> <li>Debugger submenu.</li> </ul>"},{"location":"user-guide/debugger/remote-debugging/remote-ios-debugger.html","title":"Remote iOS Debugger","text":"<p>The Remote iOS Debugger allows for debugging iOS applications directly from IDA.</p> <p>IDA's iOS debugger acts as a client to Apple's debugserver. So, you must ensure that the debugserver is already installed on your device for the debugger to work.</p> <p>See: https://www.hex-rays.com/products/ida/support/tutorials/ios_debugger_tutorial.pdf</p> <p>for a detailed tutorial on getting started with iOS.</p> <p>See also</p> <ul> <li>Remote GDB Debugger</li> <li>Debugger for macOS</li> <li>How to launch remote debugging</li> </ul>"},{"location":"user-guide/debugger/remote-debugging/replayer-debugger.html","title":"Replayer debugger","text":"<p>The replayer debugger is a pseudo-debugger used to replay recorded traces.</p> <p>The replayer debugger supports replaying traces recorded with any of the currently supported debuggers, ranging from local Linux or win32 debuggers to remote GDB targets. Currently supported targets include x86, x86_64, ARM, MIPS and PPC.</p> <p>To use the replayer debugger you will need first to record a trace by enabling instruction tracing, function tracing or basic block tracing with another debugger. Then, after loading a recorded trace in the Tracing window, select the replay debugger from the debugger's dropdown list and start the debugger normally as you would do with any other debugger.</p> <p>One of the advantages of the replay debugger module over re-executing the debuggee is that in the replayer debugger it is possible to step not only forward, but also backwards, making it easier to analyze what happened during the execution of the recorded trace.</p> <p>There are two types of traces that can be replayed: instruction level traces or partial traces. Instruction level traces are recorded by enabling instruction tracing and partial traces are recorded using either function tracing or basic block tracing. When a trace is recorded with instruction tracing enabled all register values are saved. With basic block or function level tracing only the instruction pointer is saved. Additionally, in basic block tracing the register values are also saved when the last instruction of a basic block is reached or a call in the middle of a basic block is about to be executed.</p> <p>The replayer debugger module adds a new menu item: Debugger, Step Back command. It can be used to step back to the previous instruction when replaying a recorded trace.</p> <p>Additional IDC functions provided by the replayer debugger</p>"},{"location":"user-guide/debugger/remote-debugging/bochs-debugger/bochs-debugger-faq.html","title":"Bochs debugger FAQ","text":"<p>General:</p> <p>- How are breakpoints treated by IDA Bochs Plugin: Bochs debugger does not use breakpoints by inserting 0xCC at the given address. Instead, since it is an emulator, it constantly compares the current instruction pointer against the breakpoint list. Data breakpoints are supported by Bochs and are known as \"watchpoints\". If the user creates hardware breakpoints, IDA will automatically create Bochs watchpoints.</p> <p>- How to select the Bochs operation mode programmatically: using IDC: it is possible to use process_config_line() function to pass a key=value. For example, process_config_line(\"DEFAULT_MODE=1\") will select the disk image operation mode. (Please refer to cfg\\dbg_bochs.cfg for list of configurable options).</p> <p>- When debugging, IDA undefines instructions: if the \"Debugger options / Reconstruct stack\" is checked and the stack pointer is in the same segment as the currently executing code, then IDA might undefine instructions. To solve this program, uncheck the reconstruct stack option.</p> <p>- How to convert from physical to linear addresses and vice versa: Bochs internal debugger provides two useful commands for this: \"info tab\" and \"page\".</p> <p>Disk image operation mode:</p> <p>- Data/Software breakpoints are not always triggered: During a debugging session, when a breakpoint is created while the protected mode/paging is enabled, the page table information is used to translate addresses and correctly create the breakpoint. When debugging session is started again, IDA cannot access translation tables to re-create the same breakpoint, thus the breakpoint will be created without any translation information (it will be treated as physical addresses) This is why those breakpoints are not triggered. As a workaround, we suggest disabling those breakpoints and re-enable them when paging is enabled. This problem can also arise when the \"use virtual breakpoints\" option is enabled.</p> <p>IDB/PE operation mode:</p> <p>- Cannot map VA: Sometimes, IDA may display a message stating that a given VA could not be mapped. This mainly happens because both IDB/PE operation modes use virtual addresses from 0x0 to 0x9000 and from 0xE0000000 to 0xFFFFFFFF internally. To solve the problem, please rebase the program to another area:</p> <pre><code>  - IDB operation mode: use Edit, Segment, Rebase program\n  - PE operation mode: rebase the input file using a third party utility\n</code></pre> <p>PE operation mode:</p> <p>- Dynamic DLL loading: sometimes, when running a program, the plugin may attempt to load a DLL that is not declared in the stub or load section of the startup script. In this case, please write down the name of the DLL, then add it to the startup script, and restart the debug session. It is possible to create a local copy, next to your database, of startup scripts so that these scripts will be used with this database only.</p> <p>- Disk image loading slow: The disk image produced in the PE operation mode can be as big as 20MB. The reason for this slow loading is most probably because the plugin tries to load all referenced DLLs instead of stubbing them. To fix this, when the process starts, please take note of the loaded DLLs list (using IDA / Modules List) then add the desired module names in the startup.* / \"stub\" section. See also: Bochs debugger</p>"},{"location":"user-guide/debugger/remote-debugging/bochs-debugger/bochs-disk-image-operation-mode.html","title":"Bochs Disk Image operation mode","text":"<p>The disk image operation mode is used to run Bochs with any Bochs disk image.</p> <p>A simple way to get started is to launch IDA and disassemble the bochsrc file associated with your disk image. IDA will recognize bochsrc files, parse the contents, determine the associated disk image and create a new database containing the first sector of the disk image (usually the boot sector).</p> <p>The database does not have to correspond to the disk image: it could in fact start as an empty database, then user could convert the needed segments to loader segments for later analysis. The following script can be used for that purpose:</p> <pre><code>        attrs = get_segm_attr(desired__segment__start, SEGATTR_FLAGS);\n        attrs = (attrs &amp; ~SFL_DEBUG) | SFL_LOADER;\n        set_segm_attr(desired__segment__start, SEGATTR_FLAGS, attrs);\n</code></pre> <p>If the disk image switches to protected mode with memory paging enabled, IDA will use the page table mapping to display segments. For 16-bit applications, IDA automatically creates a default DOS memory map (Interrupt vector table, Bios Data Area, User Memory and BIOS ROM). Also, the Bochs Debugger plugin will try to guess the debugger segment bitness, nonetheless the user can edit the bitness manually.</p> <p>Moreover, the Bochs internal debugger provides the ability to add hardware like breakpoints, known as watchpoints, but the addresses must be physical addresses. In order to use the disk image operation mode in a more convenient way, the plugin will convert the virtual addresses to physical addresses (if page table information is present) before adding the hardware breakpoint. This mechanism will not always work, please check the FAQ for more information. For hardware breakpoint on execute, the plugin will use the selected address as-is and create a physical breakpoint.</p> <p>The following parameters can be specified for the disk image operation mode:</p> <pre><code>  - The bochsrc file which contains the configuration for the Bochs virtual machine in question.\n    The bochsrc file should be entered in:\n    Debugger -&gt; Process Options -&gt; Application (other fields are ignored)\n\n  - Use virtual breakpoints when protected mode is enabled:\n    This parameter is set in the Debugger Specific options.\n    It will allow the plugin to use \"vb\" command to create\n    virtual breakpoints (using cs:eip), instead of using the \"lb\" which\n    creates linear breakpoints (using only \"eip\"). It is useful when\n    debugging code where the \"cs\" segment selector base is not zero.\n</code></pre> <p>This is a small example on how to debug a given disk image:</p> <p>1. Prepare the needed bochs virtual machine files (bochsrc, disk image, floppy image if needed, etc...)</p> <p>2. Load the bochsrc file into IDA. IDA will automatically create a database.</p> <p>(Step 2, is optional. It is possible to use a database of your choice, but remember to point its \"Debugger-&gt;Process Options-&gt;Input file\" to the bochsrc file)</p> <p>3. Make sure the \"Disk image\" operation mode is selected (If Step 2 was used, then Disk image operation mode will be selected automatically)</p> <p>4. Enable \"Debugger Options-&gt;Suspend on debugging start\", and start debugging!</p> <p>In the disk image operation mode, the Bochs debugger plugin does not handle or report exceptions, if they must be caught and handled, please put breakpoints in the IDT or IVT entries.</p> <p>See also:</p> <ul> <li>Bochs debugger</li> <li>Bochs plugin operation mode FAQ</li> </ul>"},{"location":"user-guide/debugger/remote-debugging/bochs-debugger/bochs-idb-operation-mode.html","title":"Bochs IDB operation mode","text":"<p>The IDB operation mode, as its name implies, takes the current database as the input and runs it under the Bochs debugger. This mode can be used to debug any x86 32 or 64-bit code. Please note that the code executes with privilege ring 3.</p> <p>The following parameters can be specified in the IDB operation mode:</p> <pre><code>  - Entry address: the address where the execution starts.\n    This parameter can be specified in three ways (listed in order of\n    precedence):\n      - by renaming the desired location as \"ENTRY\" (global name)\n      - by selecting an address range with the mouse or keyboard.\n        The selection start address is used as the entry point\n      - by positioning the cursor at a given position and running the\n        debugger\n\n  - Exit address (optional): the address where the execution ends.\n    This parameter can be specified in two ways:\n      - by renaming the desired location as \"EXIT\" (global name). Please note that\n        the emulation will stop at the item following the exit label.\n      - by selecting an address range with the mouse or keyboard\n        The selection end address is used as the exit point\n    If the exit address is not specified, the execution will continue until\n    an exception occurs. However, if the exit address is reached, the debugger\n    will ask the user if emulation should be continued or not.\n\n  - Startup stack size: number of KBs to allocate for the stack segment.\n    The stack segment is automatically created and named as \"STACK\".\n</code></pre> <p>It may also prove useful to enable the \"Debugger Setup/Suspend on debugging start\" so that IDA automatically suspends the process before executing the first instruction.</p> <p>While debugging, exceptions may occur and are caught by IDA. Please note that these exceptions are raw machine exceptions. For example, instead of an access violation exception, a page fault exception is generated.</p> <p>See also:</p> <ul> <li>Bochs debugger</li> <li>Bochs plugin operation mode FAQ</li> </ul>"},{"location":"user-guide/debugger/remote-debugging/bochs-debugger/bochs-pe-operation-mode.html","title":"Bochs PE operation mode","text":"<p>The PE operation mode can be used to load PE files and debug them in a MS Windows like environment.</p> <p>The current limitations include:</p> <pre><code>  - Thread or process manipulation are not supported\n\n  - Limited support for PE+\n\n  - We provide implementations of a limited number of system calls. Feel\n    free to implement missing functions using IDC scripts or DLLs.\n\n  - LoadLibrary() will fail on unknown DLLs: the list of desired DLLs must\n    be specified before running the debugger in the startup.idc file\n\n  - Limited emulation environment: IDA does not emulate the complete MS Windows\n    operating system: it just provides the basic environment for a\n    32bit PE file to run (please check the features below). There are many\n    ways how the debugged program can detect that it runs in an emulated\n    environment.\n</code></pre> <p>PE executables feature list:</p> <p>- SEH support: we try to mimic MS Windows as much as possible. For example, the ICEBP instruction is a privileged instruction, but Windows reports back a single step exception. Similarly, MS Windows does not distinguish between 0xCC and 0xCD 0x03, so when an exception occurs, it reports that the exception address is always one byte before the trap. So if it was an INT 0x3 (CD03), the exception address will point to the 0x03 (in the middle of the instruction).</p> <p>- TLS callbacks: TLS callbacks are normally parsed by IDA and presented as entry points. They will be called by the debugger before jumping to the main entry point of the application. Turning on the \"Debugger Setup/Suspend on debugging start\" may be a good idea since it will make all this logic clearly visible.</p> <p>- Emulation of NT structures: Some malware do not use GetProcAddress() or GetModuleHandle(). Instead, they try to parse the system structures and deduce these values. For this we also provide and build the basic structure of TIB, PEB, PEB_LDR_DATA, LDR_MODULE(s) and RTL_USER_PROCESS_PARAMETERS. Other structures can be built in the bochs_startup() function of the startup.idc file.</p> <p>PE/PE+ executables feature list:</p> <p>- Extensible API emulation: The user may provide an implementation of a any API function using scripts. The plugin supports IDC language by default, but if there are any other registered and active external languages, then external language will be used. Currently, the plugin ships with preconfigured IDC and Python scripts (please refer to startup.idc/startup.py).</p> <p>It is also possible to take a copy of all the API and startup scripts and place them next to the database in question. This will tell the Bochs debugger plugin that these scripts are to be used with the current database directory. Such mechanism makes it possible to customize API/startup scripts for different databases.</p> <p>In the following example, kernel32!GlobalAlloc is implemented via IDC like this:</p> <pre><code> (file name: api_kernel32.idc)\n ///func=GlobalAlloc entry=k32_GlobalAlloc purge=8\n static k32_GlobalAlloc()\n {\n   eax = BochsVirtAlloc(0, BochsGetParam(2), 1);\n   return 0;\n }\n ///func=GlobalFree entry=k32_GlobalFree purge=4\n static k32_GlobalFree()\n {\n   eax = BochsVirtFree(BochsGetParam(1), 0);\n   return 0;\n }\n</code></pre> <p>A simple MessageBoxA replacement can be:</p> <pre><code> (file name: api_user32.idc)\n ///func=MessageBoxA entry=messagebox purge=0x10\n static messagebox()\n {\n   auto param2; param2 = BochsGetParam(2);\n   msg(\"MessageBoxA has been called: %s\\n\",\n        get_strlit_contents(param2, -1, STRTYPE_C));\n\n   // Supply the return value\n   eax = 1;\n\n   // Continue execution\n   return 0;\n }\n</code></pre> <p>To access the stack arguments passed to a given IDC function, please use the BochsGetParam() IDC function.</p> <p>For a full reference on using IDC to implement API calls, please refer to ida\\plugins\\bochs\\api_kernel32.idc file.</p> <p>- Remap a DLL path (from the startup.idc script):</p> <pre><code>    /// map /home/johndoe/sys_dlls/user32.dll=d:\\winnt\\system32\\user32.dll\n    /// map /home/johndoe/sys_dlls/kernel32.dll=d:\\winnt\\system32\\kernel32.dll\n</code></pre> <p>- Specify additional DLL search path (and optionally change the mapping):</p> <pre><code>    /// map /home/johndoe/sys_dlls/=d:\\winnt\\system32\n  Or:\n\n    /// map c:\\projects\\windows_xpsp2_dlls\\=c:\\windows\\system32\n  Or just as a search path without mapping:\n\n    /// map c:\\program files\\my program\n  You need to add the appropriate terminating slashes\n</code></pre> <p>- Redefine the environment variables: the environment variables can be redefined in startup.idc</p> <pre><code>    /// env PATH=c:\\windows\\system32\\;c:\\programs    /// env USERPROFILE=c:\\Users\\Guest\n\n  In Linux, if no environment variable is defined in the startup file then no environment strings will be present.\n  In Windows, we take the environment variables from the system if none were defined.\n</code></pre> <p>- Use native code: it is possible to write a custom Win32/64 DLL and map it into the process space.</p> <p>Existing APIs can then be redirected to custom written functions. For example:</p> <pre><code>  ///func=GetProcAddress entry=bochsys.BxGetProcAddress\n  ///func=ExitProcess entry=bochsys.BxExitProcess\n  ///func=GetModuleFileNameA entry=bochsys.BxGetModuleFileNameA\n  ///func=GetModuleHandleA entry=bochsys.BxGetModuleHandleA\n</code></pre> <p>Here we redirect some functions to bochsys.dll that modify the memory space of the application. Please note that bochsys.dll is a special module, IDA is aware of it. Custom functions are declared like this:</p> <pre><code>  (file name: api_kernel32.idc)\n  ///func=GetCommandLineA entry=mydll.GetCommandLineA purge=0\n</code></pre> <p>Then in startup.idc file, the following line must be added:</p> <pre><code>   /// load mydll.dll\n</code></pre> <p>Custom DLLs are normal DLLs that can import functions from any other DLL. However, it is advisable that the custom DLL is kept small in size and simple, by not linking it to the runtime libraries.</p> <p>- Helper IDC functions: a set of helper IDC functions are available when the debugger is active. For more information, please refer to \"startup.idc\".</p> <p>- Less demanding PE loader: Most PE files can be loaded and run, including system drivers, DLL and some PE files that cannot be run by the operating system.</p> <p>- Dependency resolution: In the PE operation mode, the plugin will recursively load all DLLs referenced by the program. All DLLs that are not explicitly marked with \"stub\" in startup.idc will be loaded as is. It is important to \"stub\" all system DLLs for faster loading. The PE loader creates empty stubs for undefined functions in stubbed DLLs. For example, the following line defines a stub that will always return 0 for CreateFileA:</p> <pre><code>  /// func=CreateFileA retval=0\n</code></pre> <p>Since CreateFileA is mentioned in the IDS files and IDA knows how many bytes it purges from the stack, there is no need to specify the \"purge\" value. For other functions that are not known to IDA, a full definition line would look like:</p> <pre><code>  /// func=FuncName purge=N_bytes retval=VALUE\n</code></pre> <p>- Startup and Exit scripts: It is possible to assign IDC functions that run when the debugging session starts or is about to terminate (before the application continues from the PROCESS_EXITED event). In addition to running code at startup, the startup script serves a role in telling the PE loader which DLLs are to be mapped for the current debugging session. For example:</p> <pre><code>  /// stub ntdll.dll\n  /// stub kernel32.dll\n  /// stub user32.dll\n  /// stub shell32.dll\n  /// stub shlwapi.dll\n  /// stub wininet.dll\n</code></pre> <p>These lines list the DLLs that will be used during the debugging session. IDA creates empty stubs for all functions from these DLLs. Non-trivial implementations of selected functions can be specified in api_xxxx.idc files, where xxxx is the module name.</p> <p>API and startup scripts are searched first in the current directory and then in the ida/plugins/bochs directory.</p> <p>- Memory allocation limit: The PE loader has a simple memory manager. It is used for the initial memory allocation at the loading stage and for dynamic memory allocation during the debugging session. No memory limits are applied at the loading stage: the loader will load all modules regardless of their size. However, when the debugging session starts, a limit applies on how much memory can be dynamically allocated. This limit is specified in the debugger specific options as \"Max allocatable memory\". Memory allocation will fail once this limit is reached.</p> <p>Some notes on bochsys.dll:</p> <p>- BxIDACall: This exported function is used as a trap to suspend the code execution in Bochs and perform some actions in IDA. For example, when the target calls kernel32.VirtualAlloc, it is redirected to bochsys.BxVirtualAlloc, which calls BxIDACall, which triggers IDA:</p> <pre><code>  kernel32.VirtualAlloc -&gt; bochsys.BxVirtualAlloc -&gt; BxIDACall -&gt; IDA bochs plugin\n</code></pre> <p>A breakpoint can be set on this function to monitor all API calls that are handled by IDA.</p> <p>- BxUndefinedApiCall: This exported function is executed when the application calls an unimplemented function. Setting a breakpoint on it will allow discovering unimplemented functions and eventually implementing them as IDC or DLL functions. It can also be used to determine when unpacking/decryption finishes (provided that all functions used by the unpacker have been defined).</p> <p>See also:</p> <ul> <li>Bochs debugger</li> <li>Bochs plugin operation mode FAQ</li> </ul>"},{"location":"user-guide/debugger/remote-debugging/pin-debugger/building-the-pin-tool.html","title":"Building the pin tool","text":""},{"location":"user-guide/debugger/remote-debugging/pin-debugger/building-the-pin-tool.html#building-the-pin-tool","title":"Building the PIN tool","text":"<p>Before using the PIN tracer the PIN tool module (distributed only in source code form) must be built as the Intel PIN license disallows redistributing PIN tools in binary form.</p> <p>Please refer to the Debugging Linux/Windows Applications with PIN Tracer tutorial to learn how to build our PIN tool.</p>"},{"location":"user-guide/debugger/remote-debugging/pin-debugger/connecting-a-remote-pin-tool-instance-from-ida.html","title":"Connecting a remote PIN tool instance from IDA","text":"<p>For local debugging the PIN tool can be automatically launched by IDA. For remote debugging it must be launched manually, as in the following example:</p> <pre><code>  $ /path/to/pin -t /path/to/idadbg/lib -p PORT -- APPLICATION [ARGUMENTS]\n</code></pre> <p>Where PORT is the port that the PIN tool will listen for incoming connections from IDA. APPLICATION is the target application to be traced and the optional parameter ARGUMENTS are the arguments to be passed to the target application. Please note that on Win64 it may be required to specify the path to specific x64 binary instead to the pin.bat batch file.</p> <p>To attach to an already running process instead of starting a new one a command like the following one must be executed:</p> <pre><code>  $ /path/to/pin -pid PID -t /full/path/to/idadbg/lib/with.extension -p PORT\n</code></pre> <p>Where PID is the pid of the running process to attach and PORT the port that the PIN tool will listen for incoming connections.</p> <p>The hostname and port where the PIN tool is listening for incoming connections should be specified in IDA. See the Debugger, Process options dialog.</p> <p>After successfully launching the PIN tool the IDA debugger can be launched by pressing F9 or selecting Debugger, Start Process.</p> <p>PIN accepts the following optional environment variables and command line arguments:</p> <pre><code>  - Environment variables:\n    IDAPIN_DEBUG: Set this environment variable to 1 or higher to print\n    debugging information.\n\n  - Command line arguments:\n    -p number: Port where the PIN tool will listen for incoming connections from IDA\n    -idadbg [0|1|2]: Same as the IDAPIN_DEBUG environment variable\n</code></pre>"},{"location":"user-guide/debugger/remote-debugging/pin-debugger/pin-support-for-macosx.html","title":"PIN support for MacOSX","text":"<p>Recording traces on MacOSX target is not supported yet. Versions equal or prior to 2.12-55942 does not have support for the API PIN_SpawnInternalThread, which is needed by IDA to communicate with the PIN tool.</p> <p>However, it's possible to record traces from a Linux or Windows target using the MacOSX version of IDA.</p>"},{"location":"user-guide/debugger/remote-debugging/remote-gdb-debugger/debugging-code-snippets-with-qemu.html","title":"Debugging code snippets with QEMU","text":"<p>Using the \"Run external program\" option it is easy to debug small ARM, MIPS or PowePC code snippets directly from inside IDA.</p> <p>1) Download and install QEMU. Win32 builds can be downloaded from http://homepage3.nifty.com/takeda-toshiya/qemu/.</p> <p>2) Edit cfg\\gdb_arch.cfg file and change the \"set QEMUPATH\" line to point to the install directory of QEMU.</p> <p>3) In Remote GDB Debugger options (Debugger|Debugger options, Set specific options), enable \"Run a program before debugging\".</p> <p>4) Click \"Choose a configuration\" and choose a predefined configuration. Choose \"for snippets\", if mentioned.</p> <p>5) If necessary, edit the command line or memory map.</p> <p>6) Click OK, OK to confirm and close the options dialog.</p> <p>7) In Debugger|Process options make sure that Hostname is set to \"localhost\" and port is non-zero.</p> <p>8) Select the code range to emulate or at least the first instruction. Alternatively, you can rename the starting address \"ENTRY\" and end address as \"EXIT\".</p> <p>9) Choose Debugger|Run or press F9.</p> <p>IDA will write the database into an ELF file (if %e was specified), start QEMU with the specified command line and connect to its GDB stub. It will set the SP and PC values so that the code can be stepped through.</p> <p>NOTE</p> <p>While it can be very useful, QEMU emulation has certain limitations:</p> <p>1) the memory map is usually fixed at compile time. So if your program addresses intersect some of the system regions as specified by the memory map, IDA will refuse to start debugging. In that case, you can either rebase the program so that it fits into RAM regions or check other QEMU board configurations for a compatible memory layout.</p> <p>2) the emulation starts at the system (kernel) level when there is no OS loaded. That means that system calls and imported functions will not work.</p> <p>3) the hardware access will only work to the extent emulated by QEMU. If the code you are emulating does not match the chosen board configuration of QEMU, the code accessing the hardware most likely will not work properly, if at all.</p> <p>See also</p> <ul> <li>External programs and GDB Debugger</li> <li>Remote GDB Debugger</li> </ul>"},{"location":"user-guide/debugger/remote-debugging/remote-gdb-debugger/debugging-with-gdbserver.html","title":"Debugging with gdbserver","text":"<p>gdbserver is a GDB stub implemented as a separate program. It runs a program to be debugged or attaches to a process and then waits for commands. The remote GDB debugger module has been tested with gdbserver available with Cygwin and Linux.</p> <p>To debug a specific program from the start, run the following command:</p> <pre><code>    gdbserver localhost:23946 &lt;program&gt;\n</code></pre> <p>and then choose Debugger,Attach,\\ in IDA. <p>To debug a running process:</p> <pre><code>    gdbserver --multi localhost:23947\n</code></pre> <p>then choose Debugger,Attach,\\ in IDA and enter the PID of the process to attach to. <p>Another method of debugging a running process is:</p> <pre><code>    gdbserver localhost:23947 --attach &lt;PID&gt;\n</code></pre> <p>then choose Debugger,Attach,\\ in IDA. <p>To start a program from inside IDA, first launch the debugger server:</p> <pre><code>    gdbserver --multi localhost:23947\n</code></pre> <p>Then use Debugger,Start process or Debugger,Run in IDA.</p> <pre><code> NOTE\n</code></pre> <p>The --multi option is only available in GDB 6.8 or higher.</p> <p>Back to Remote GDB Debugger</p>"},{"location":"user-guide/debugger/remote-debugging/remote-gdb-debugger/debugging-with-openocd.html","title":"Debugging with OpenOCD","text":"<p>Make sure the following line is present in the .cfg file for your target:</p> <pre><code> gdb_port 3333\n</code></pre> <p>Edit the port number if necessary. Specify that port in the process options and use the Debugger, Attach command.</p> <p>Tips: Use the GDB command line to send commands directly to OpenOCD interpreter.</p>"},{"location":"user-guide/debugger/remote-debugging/remote-gdb-debugger/debugging-with-qemu.html","title":"Debugging with QEMU","text":"<p>Using the \"Run external program\" option it is easy to debug small ARM, MIPS or PowePC code snippets directly from inside IDA.</p> <p>1) Download and install QEMU. Win32 builds can be downloaded from http://homepage3.nifty.com/takeda-toshiya/qemu/.</p> <p>2) Edit cfg\\gdb_arch.cfg file and change the \"set QEMUPATH\" line to point to the install directory of QEMU.</p> <p>3) In Remote GDB Debugger options (Debugger|Debugger options, Set specific options), enable \"Run a program before debugging\".</p> <p>4) Click \"Choose a configuration\" and choose a predefined configuration. Choose \"for snippets\", if mentioned.</p> <p>5) If necessary, edit the command line or memory map.</p> <p>6) Click OK, OK to confirm and close the options dialog.</p> <p>7) In Debugger|Process options make sure that Hostname is set to \"localhost\" and port is non-zero.</p> <p>8) Select the code range to emulate or at least the first instruction. Alternatively, you can rename the starting address \"ENTRY\" and end address as \"EXIT\".</p> <p>9) Choose Debugger|Run or press F9.</p> <p>IDA will write the database into an ELF file (if %e was specified), start QEMU with the specified command line and connect to its GDB stub. It will set the SP and PC values so that the code can be stepped through.</p> <p>NOTE: While it can be very useful, QEMU emulation has certain limitations: 1) the memory map is usually fixed at compile time. So if your program addresses intersect some of the system regions as specified by the memory map, IDA will refuse to start debugging. In that case, you can either rebase the program so that it fits into RAM regions or check other QEMU board configurations for a compatible memory layout.</p> <p>2) the emulation starts at the system (kernel) level when there is no OS loaded. That means that system calls and imported functions will not work.</p> <p>3) the hardware access will only work to the extent emulated by QEMU. If the code you are emulating does not match the chosen board configuration of QEMU, the code accessing the hardware most likely will not work properly, if at all.</p> <p>See also:</p> <ul> <li>External programs and GDB Debugger,</li> <li>Remote GDB Debugger</li> </ul>"},{"location":"user-guide/debugger/remote-debugging/remote-gdb-debugger/debugging-with-vmware.html","title":"Debugging with VMWare","text":"<p>VMWare Workstation 6.5 is recommended for debugging, though earlier versions may work too. Only 32-bit debugging is supported.</p> <p>In order to enable debugging with GDB protocol, add the following lines to the .vmx file of the virtual machine:</p> <pre><code>   debugStub.listen.guest32 = \"TRUE\"\n   debugStub.hideBreakpoints= \"TRUE\"\n</code></pre> <p>To debug the VM startup, use:</p> <pre><code>   monitor.debugOnStartGuest32 = \"TRUE\"\n</code></pre> <p>Please note that the execution will start in the BIOS.</p> <p>To accept connections from remote computers, the following line must be specified:</p> <pre><code>   debugStub.listen.guest32.remote = \"TRUE\"\n</code></pre> <p>VMWare Workstation will listen on port 8832.</p> <p>Tips:</p> <p>Since the GDB server does not report the memory layout, it must be specified manually. For example, to debug BIOS startup code, create a 16-bit segment from F0000 to 10000 with base F000.</p> <p>Use the GDB command line to get extra info about the registers. For example, use \"r cr0\" to see current value of the cr0 register or \"r cs\" to see the base, limit and other attributes of the CS selector in protected mode.</p> <p>Back to Remote GDB Debugger</p>"},{"location":"user-guide/debugger/remote-debugging/remote-gdb-debugger/external-programs-and-gdb-debugger.html","title":"External programs and GDB Debugger","text":"<p>The \"Run a program before debugging\" option in Remote GDB Debugger options allows to automatically run a program (such as a debugging server) when starting a debugging session. If you enable it, the following options become available:</p> <p>Command line</p> <pre><code>        Command line of the program to run. The following special symbols can be used:\n</code></pre> <p>%i: input file name from the Process options dialog %p: port number from the Process options dialog %e: file name of a temporary ELF file created from the database contents Initial SP</p> <pre><code>        IDA will set the SP (or a similar register) after connecting to the server\n</code></pre> <p>Choose a configuration</p> <pre><code>        Load one of the pre-defined configurations (command line, memory map and SP value)\n        described in the gdb_arch.cfg file.\n</code></pre> <p>Memory map</p> <pre><code>        Edit the memory map for the external server. It will be used during debugging.\n</code></pre> <p>One use of these options is to debug small code snippets using the QEMU emulator.</p> <p>See also</p> <ul> <li>Remote GDB Debugger options</li> <li>Debugger submenu.</li> </ul>"},{"location":"user-guide/debugger/remote-debugging/remote-gdb-debugger/remote-gdb-debugger-options.html","title":"Remote GDB Debugger options","text":"<p>Max packet size</p> <pre><code>        Maximum packet size supported by the GDB stub (in bytes).\n        Some stubs can crash on big packets, e.g. memory reads. IDA\n        will try to split such requests in smaller chunks so that\n        replies should fit in this size. You can enter -1 to\n        autodetect (in this case IDA will use the size of the\n        \"g\" packet reply as the max packet size).\n</code></pre> <p>Timeout</p> <pre><code>        Default timeout in milliseconds for remote GDB stub responses.\n        Some targets can be slow to respond, so increase this value\n        when having problems, e.g. with disappearing memory bytes.\n</code></pre> <p>Run a program before starting debugging Check to enable external program options. Processor This option is only visible when starting debugger without a database. Use it to specify on which CPU the target is running. For some processors you can also specify the endianness. Software breakpoints at EIP+1</p> <pre><code>        Most GDB stubs for x86 report software breakpoint hits with EIP one byte after\n        the breakpoint address. However, some emulators report the actual breakpoint\n        address. This option allows IDA to recognize such situations.\n        Recommendations: uncheck for QEMU, check for others.\n</code></pre> <p>Use CS:IP in real mode</p> <pre><code>        When debugging real-mode (16-bit) code, the stub can send either\n        just 16 bits of IP register or the full EIP (CS&lt;&lt;4 + IP).\n        Enable this option in the former case.\n        Recommendations: check for QEMU, uncheck for others.\n</code></pre> <p>See also</p> <ul> <li>Instant debugger</li> <li>Remote GDB Debugger</li> </ul>"},{"location":"user-guide/debugger/tutorials/appcall_primer/appcall_primer.html","title":"Appcall","text":"<p>IDA Pro - Appcall user guide</p> <p>Copyright 2023 Hex-Rays SA</p>"},{"location":"user-guide/debugger/tutorials/appcall_primer/appcall_primer.html#introduction","title":"Introduction","text":"<p>Appcall is a mechanism to call functions under a debugger session in the context of the debugged program using IDA's CLI (Command Line Interpreter) or from a script.\\ Such a mechanism can be used for seamless blackbox function calling and use, fuzzing, process instrumentation, DLL injection, testing or extending applications.</p> <p>Appcall mechanism highly depends on the type information of the called function. For that reason, it is necessary to have a correct function prototype before doing an Appcall, otherwise different or incorrect results may be returned.</p> <p>In a nutshell, Appcall works by first hijacking the current thread's stack (please do switch threads explicitly if you want to Appcall in a different context), then pushing the arguments, and then temporarily adjusting the instruction pointer to the beginning of the called function. After the function returns (or an exception occurs), the original stack, instruction pointer, and other registers are restored, and the result is returned to the caller.</p> <p>Please note that while most of the examples in this document are illustrated using a Windows user mode application, Appcall is not limited to Windows and can be used with any platform supported by IDA debuggers.</p>"},{"location":"user-guide/debugger/tutorials/appcall_primer/appcall_primer.html#quick-start","title":"Quick start","text":"<p>Let's start explaining the basic concepts of Appcall using the IDC CLI. Let's imagine we have the following <code>printf()</code> in the disassembly somewhere:</p> <pre><code>.text:00000001400015C0 ; __int64 printf(const char *, ...)\n.text:00000001400015C0 _printf         proc near               \n.text:00000001400015C0                                         \n.text:00000001400015C0\n.text:00000001400015C0 arg_0           = qword ptr  8\n.text:00000001400015C0 arg_8           = qword ptr  10h\n.text:00000001400015C0 arg_10          = qword ptr  18h\n.text:00000001400015C0 arg_18          = qword ptr  20h\n.text:00000001400015C0\n.text:00000001400015C0                 mov     [rsp+arg_0], rcx\n.text:00000001400015C5                 mov     [rsp+arg_8], rdx\n.text:00000001400015CA                 mov     [rsp+arg_10], r8\n.text:00000001400015CF                 mov     [rsp+arg_18], r9\n...\n</code></pre> <p>It can be called by simply typing the following in the IDC CLI (press \".\" to jump to the CLI):</p> <pre><code>_printf(\"hello world\\n\");\n</code></pre> <p>As you noticed, we invoked an Appcall by simply treating <code>_printf</code> as if it was a built-in IDC function. If the application had a console window, then you should see the message printed in it.</p> <p>If you have a function with a mangled name or with characters that cannot be used as an identifier name in the IDC language, such as \"_my_func@8\", then you can use the <code>LocByName</code> function to get its address given its name, then using the address variable (which is callable) we issue the Appcall:</p> <pre><code>auto myfunc = LocByName(\"_my_func@8\");\nmyfunc(\"hello\", \"world\");\n</code></pre> <p>Or simply directly as:</p> <pre><code>LocByName(\"_my_func@8\")(\"hello\", \"world\");\n</code></pre>"},{"location":"user-guide/debugger/tutorials/appcall_primer/appcall_primer.html#using-appcall-with-idc","title":"Using AppCall with IDC","text":"<p>Apart from calling Appcall naturally as shown in the previous section, it is possible to call it explicitly using the <code>dbg_appcall</code> function:</p> <pre><code>// Call application function\n//      ea - address to call\n//      type - type of the function to call. can be specified as:\n//              - declaration string. example: \"int func(void);\"\n//              - typeinfo object. example: get_tinfo(ea)\n//              - zero: the type will be retrieved from the idb\n//      ... - arguments of the function to call\n// Returns: the result of the function call\n// If the call fails because of an access violation or other exception,\n// a runtime error will be generated (it can be caught with try/catch)\n// In fact there is rarely any need to call this function explicitly.\n// IDC tries to resolve any unknown function name using the application labels\n// and in the case of success, will call the function. For example:\n//      _printf(\"hello\\n\")\n// will call the application function _printf provided that there is\n// no IDC function with the same name.\n\nanyvalue dbg_appcall(ea, type, ...);    \n</code></pre> <p>The Appcall IDC function requires you to pass a function address, function type information (various forms are accepted) and the parameters (if any):</p> <pre><code>auto msgbox;\nmsgbox = LocByName(\"__imp_MessageBoxA\");\n// Pass \"0\" for the type to deduce it from the database\ndbg_appcall(msgbox, 0, 0, \"Hello world\", \"Info\", 0);\n</code></pre> <p>We've seen so far how to call a function if it already has type information, now suppose we have a function that does not:</p> <pre><code>user32.dll:00007FFF3AD730F0 user32_FindWindowA proc near\nuser32.dll:00007FFF3AD730F0      mov     r9, rdx\nuser32.dll:00007FFF3AD730F3      mov     r8, rcx\nuser32.dll:00007FFF3AD730F6      xor     edx, edx\nuser32.dll:00007FFF3AD730F8      xor     ecx, ecx\nuser32.dll:00007FFF3AD730FA      jmp     sub_7FFF3ADC326C\nuser32.dll:00007FFF3AD730FA user32_FindWindowA endp  \n</code></pre> <p>Before calling this function with <code>dbg_appcall</code> we have two options:</p> <ol> <li>Pass the prototype as a string</li> <li>Or, parse the prototype separately and pass the returned type info object.</li> </ol> <p>This is how we can do it using the first option:</p> <pre><code>auto window_handle;\nwindow_handle = dbg_appcall(\n    LocByName(\"user32_FindWindowA\"),\n    \"long __stdcall FindWindow(const char *cls, const char *wndname)\",\n    0,\n    \"Calculator\");\n\nmsg(\"handle=%d\\n\", window_handle);\n</code></pre> <p>As for the second option, we can use <code>parse_decl()</code> first, then proceed as usual:</p> <pre><code>auto window_handle, tif;\n\ntif = parse_decl(\"long __stdcall FindWindow(const char *cls, const char *wndname)\", 0);\n\nwindow_handle = dbg_appcall(\n    LocByName(\"user32_FindWindowA\"),\n    tif,\n    0,\n    \"Calculator\");\n\nmsg(\"handle=%d\\n\", window_handle);\n\n</code></pre> <p>Note that we used <code>parse_decl()</code> function to construct a typeinfo object that we can pass to <code>dbg_appcall</code>.</p> <p>It is possible to permanently set the prototype of a function programmatically using <code>apply_type()</code>:</p> <pre><code>auto tif;\ntif = parse_decl(\"long __stdcall FindWindow(const char *cls, const char *wndname)\", 0);\napply_type(\n    LocByName(\"user32_FindWindowA\"),\n    tif);\n</code></pre> <p>In the following sections, we are going to cover different scenarios such as calling by reference, working with buffers and complex structures, etc.</p>"},{"location":"user-guide/debugger/tutorials/appcall_primer/appcall_primer.html#passing-arguments-by-reference","title":"Passing arguments by reference","text":"<p>To pass function arguments by reference, it suffices to use the &amp; symbol as in the C language.</p> <ul> <li>For example to call this function:</li> </ul> <pre><code>void ref1(int *a)\n{\n  if (a == NULL)\n    return;\n  int o = *a;\n  int n = o + 1;\n  *a = n;\n  printf(\"called with %d and returning %d\\n\", o, n);\n}\n</code></pre> <p>We can use this code from IDC:</p> <pre><code>auto a = 5;\nmsg(\"a=%d\", a);\nref1(&amp;a);\nmsg(\", after the call=%d\\n\", a);\n</code></pre> <ul> <li>To call a C function that takes a string buffer and modifies it:</li> </ul> <pre><code>/* C code */\nint ref2(char *buf)\n{\n  if (buf == NULL)\n    return -1;\n\n  printf(\"called with: %s\\n\", buf);\n  char *p = buf + strlen(buf);\n  *p++ = '.';\n  *p = '\\0';\n  printf(\"returned with: %s\\n\", buf);\n  int n=0;\n  for (;p!=buf;p--)\n    n += *p;\n  return n;\n}\n</code></pre> <p>We need to create a buffer and pass it by reference to the function:</p> <pre><code>auto s = strfill('\\x00', 20); // create a buffer of 20 characters\ns[0:5] = \"hello\"; // initialize the buffer\nref2(&amp;s); // call the function and pass the string by reference\n\n// check if the string has a dot appended to it\nif (s[5] != \".\")\n{\n  msg(\"not dot\\n\");\n}  \nelse\n{\n  msg(\"dot\\n\");\n}\n</code></pre>"},{"location":"user-guide/debugger/tutorials/appcall_primer/appcall_primer.html#__usercall-calling-convention","title":"__usercall calling convention","text":"<p>It is possible to Appcall functions with non standard calling conventions, such as routines written in assembler that expect parameters in various registers and so on. One way is to use the __usercall calling convention.</p> <p>Consider this function:</p> <pre><code>/* C code */\n// eax = esi - edi\nint __declspec(naked) asm1()\n{\n  __asm\n  {\n    mov eax, esi\n    sub eax, edi\n    ret\n  }\n}\n</code></pre> <p>And from IDC:</p> <pre><code>auto x = dbg_appcall(\n  LocByName(\"asm1\"),\n  \"int __usercall asm1@&lt;eax&gt;(int a@&lt;edi&gt;, int b@&lt;esi&gt;);\",\n  1,\n  5);\nmsg(\"result = %d\\n\", x);\n</code></pre>"},{"location":"user-guide/debugger/tutorials/appcall_primer/appcall_primer.html#variadic-functions","title":"Variadic functions","text":"<p>In C:</p> <pre><code>int va_altsum(int n1, ...)\n{\n  va_list va;\n  va_start(va, n1);\n\n  int r = n1;\n  int alt = 1;\n  while ( (n1 = va_arg(va, int)) != 0 )\n  {\n    r += n1*alt;\n    alt *= -1;\n  }\n\n  va_end(va);\n  return r;\n}\n</code></pre> <p>And in IDC:</p> <pre><code>auto result = va_altsum(5, 4, 2, 1, 6, 9, 0);\n</code></pre>"},{"location":"user-guide/debugger/tutorials/appcall_primer/appcall_primer.html#calling-functions-that-might-cause-exceptions","title":"Calling functions that might cause exceptions","text":"<p>Exceptions may occur during an Appcall. To capture them, use the try/catch mechanism:</p> <pre><code>auto e;\ntry\n{\n  dbg_appcall(some_func_addr, func_type, args...);\n  // Or equally:\n  // some_func_name(arg1, arg2, ...);\n}\ncatch (e)\n{\n  // Exception occured .....\n}\n</code></pre> <p>The exception object \"e\" will be populated with the following fields:</p> <ul> <li>description: description text generated by the debugger module while it was executing the Appcall</li> <li>file: The name of the file where the exception happened.</li> <li>func: The IDC function name where the exception happened.</li> <li>line: The line number in the script</li> <li>qerrno: The internal code of last error occurred</li> </ul> <p>For example, one could get something like this:</p> <pre><code>description: \"Appcall: The instruction at 0x401012 referenced memory at 0x0. The memory could not be written\"\nfile: \"\"\nfunc: \"___idcexec0\"\nline:           4.        4h           4o \nqerrno:          92.       5Ch         134o \n</code></pre> <p>In some cases, the exception object will contain more information.</p>"},{"location":"user-guide/debugger/tutorials/appcall_primer/appcall_primer.html#functions-that-accept-or-return-structures","title":"Functions that accept or return structures","text":"<p>Appcall mechanism also works with functions that accept or return structure types. Consider this C code:</p> <pre><code>#pragma pack(push, 1)\nstruct UserRecord \n{\n  int id;\n  char name[50];\n  struct UserRecord* next;\n};\n#pragma pack(pop)\n\n// Function to create a new record\nUserRecord *makeRecord(char name[], int id) \n{\n  UserRecord* newRecord = (UserRecord*)malloc(sizeof(UserRecord));\n  strcpy(newRecord-&gt;name, name);\n  newRecord-&gt;id = id;\n  newRecord-&gt;next = NULL;\n  return newRecord;\n}\n\nvoid printRecord(UserRecord* record) \n{\n  printf(\"Id: %d ; Name: %s\\n\", record-&gt;id, record-&gt;name);\n}\n\n// Function to list all student records in the linked list\nvoid listRecords(UserRecord* head) \n{\n  if (head == NULL) \n  {\n      printf(\"No records found.\\n\");\n      return;\n  }\n\n  printf(\"Records:\\n\"\n         \"--------\\n\");\n  while (head != NULL) \n  {\n      printRecord(head);\n      head = head-&gt;next;\n  }\n}\n</code></pre> <p>We can create a couple of records and link them up together:</p> <pre><code>auto rec1, rec2, rec3;\n// Create records\nrec1 = makeRecord(\"user1\", 1);\nrec2 = makeRecord(\"user2\", 2);\nrec3 = makeRecord(\"user3\", 3);\n// Link them up\nrec1.next = rec2;\nrec2.next = rec3;\n// Display them\nlistRecords(rec1);\n</code></pre> <p>Because we issued an Appcall, when <code>listRecords</code> is called, we expect to see the following output in the console:</p> <pre><code>Records:\n--------\nId: 1 ; Name: user1\nId: 2 ; Name: user2\nId: 3 ; Name: user3\n</code></pre> <p>We can then access the fields naturally (even the linked objects). We can verify that if we just dump the first record through the IDC CLI (or just by calling IDC's <code>print</code> function):</p> <pre><code>IDC&gt;rec1\nobject\n  id:           1.        1h           1o\n  name: \"user1\\x00\"\n  next: object\n    id:           2.        2h           2o\n    name: \"user2\\x00\"\n    next: object\n      id:           3.        3h           3o \n      name: \"user3\\x00\"\n      next: 0x0i64\n</code></pre> <p>Notice how when <code>rec1</code> is dumped, its <code>next</code> field is automatically followed and properly displayed. The same happens for <code>rec2</code> and <code>rec3</code>.</p> <p>We can also directly access the fields of the structure from IDC and have those changes reflected in the debugee's memory:</p> <pre><code>rec1.id = 11;\nrec1.name = \"hey user1\";\nrec1.next.name = \"hey user2\";\nrec1.next.id = 21;\nrec1.next.next.name = \"hey user3\";\nrec1.next.next.id = 31;\n// Display them\nlistRecords(rec1);\n</code></pre> <p>Notable observations:</p> <ul> <li>Objects are always passed by reference (no need to use the &amp;)</li> <li>Objects are created on the stack</li> <li>Objects are untyped</li> <li>Missing object fields are automatically created by IDA and filled with zero</li> </ul>"},{"location":"user-guide/debugger/tutorials/appcall_primer/appcall_primer.html#calling-an-api-that-receives-a-structure-and-its-size","title":"Calling an API that receives a structure and its size","text":"<p>Let us take another example where we call the GetVersionExA API function:</p> <pre><code>kernel32.dll:00007FFF3A0F9240 kernel32_GetVersionExA proc near\nkernel32.dll:00007FFF3A0F9240                 jmp     cs:off_7FFF3A1645E0\nkernel32.dll:00007FFF3A0F9240 kernel32_GetVersionExA endp\n</code></pre> <p>This API requires one of its input fields to be initialized to the size of the structure. Therefore, we need to initialize the structure correctly before passing it to the API to be further populated therein:</p> <pre><code>// Create an empty object\nauto ver = object();\n// We need to initialize the size of the structure\nver.dwOSVersionInfoSize = sizeof(\"OSVERSIONINFO\");\n// This is the only field we need to have initialized, the other fields will be created by IDA and filled with zeroes\n// Now issue the Appcall:\nGetVersionExA(ver);\n\nmsg(\"%d.%d (%d)\\n\", ver.dwMajorVersion, ver.dwMinorVersion, ver.dwBuildNumber);\n</code></pre> <p>Now if we dump the ver object contents we observe something like this:</p> <pre><code>  IDC&gt;print(ver);\n  object\n    dwBuildNumber:        9200.     23F0h       21760o\n    dwMajorVersion:           6.        6h           6o \n    dwMinorVersion:           2.        2h           2o\n    dwOSVersionInfoSize:         148.       94h         224o\n    dwPlatformId:           2.        2h           2o\n    szCSDVersion: \"\\x00\\x00\\x00\\x00\\x00\\x00....\"  \n</code></pre>"},{"location":"user-guide/debugger/tutorials/appcall_primer/appcall_primer.html#working-with-opaque-types","title":"Working with opaque types","text":"<p>Opaque types like <code>FILE</code>, <code>HWND</code>, <code>HANDLE</code>, <code>HINSTANCE</code>, <code>HKEY</code>, etc. are not meant to be used as structures by themselves but like pointers.</p> <p>Let us take for example the <code>FILE</code> structure that is used with <code>fopen()</code>; its underlying structure looks like this (implementation details might change):</p> <pre><code>00000000 FILE struc ; (sizeof=0x18, standard type)\n00000000 curp dd ?\n00000004 buffer dd ?\n00000008 level dd ?\n0000000C bsize dd ?\n00000010 istemp dw ?\n00000012 flags dw ?\n00000014 hold dw ?\n00000016 fd db ?\n00000017 token db ?\n00000018 FILE ends\n</code></pre> <p>And the <code>fopen()</code> function prototype is:</p> <pre><code>msvcrt.dll:00007FFF39F1B7B0 ; FILE *__cdecl fopen(const char *FileName, const char *Mode)\nmsvcrt.dll:00007FFF39F1B7B0 fopen           proc near\nmsvcrt.dll:00007FFF39F1B7B0                 mov     r8d, 40h ; '@'\nmsvcrt.dll:00007FFF39F1B7B6                 jmp     msvcrt__fsopen\nmsvcrt.dll:00007FFF39F1B7B6 fopen           endp\n</code></pre> <p>Let us see how we can get a \"FILE *\"\" and use it as an opaque type and issue an <code>fclose()</code> call properly:</p> <pre><code>auto fp;\nfp = fopen(\"c:\\\\temp\\\\x.cpp\", \"r\");\nprint(fp);\nfclose(fp.__at__);\n</code></pre> <p>Nothing special about the fopen/fclose Appcalls except that we see the __at__ attribute showing up although it does not belong to the FILE structure definition.\\ This is a special attribute that IDA inserts into all objects, and it contains the memory address from which IDA retrieved the object attribute values. We can use the __at__ to retrieve the C pointer of a given IDC object.</p> <p>Previously, we omitted the __at__ field from displaying when we dumped objects output, but in reality this is what one expects to see as part of the objects attributes used in Appcalls. Let's create a user record again:</p> <pre><code>auto rec;\nrec1 = makeRecord(\"user1\", 13);\nrec2 = makeRecord(\"user2\", 14);\nrec1.next = rec2;\nprint(rec1);\n</code></pre> <p>..and observe the output:</p> <pre><code>object\n  __at__:     5252736.   502680h    24023200o\n  id:          13.        Dh          15o\n  name: \"user1\\x00...\"\n  next: object\n    __at__:     5252848.   5026F0h    24023360o \n    id:          14.        Eh          16o\n    name: \"user2\\x00...\"\n    next: 0x0i64\n</code></pre> <p>Please note that it is possible to pass as integer (which is a pointer) to a function that expects a pointer to a structure.</p>"},{"location":"user-guide/debugger/tutorials/appcall_primer/appcall_primer.html#findfirstfindnext-apis-example","title":"FindFirst/FindNext APIs example","text":"<p>In this example, we call the APIs directly without permanently setting their prototype first.</p> <pre><code>static main()\n{\n  auto fd, h, n, ok;\n\n  fd = object(); // create an object\n  h = dbg_appcall(\n    LocByName(\"kernel32_FindFirstFileA\"),\n    \"HANDLE __stdcall FindFirstFileA(LPCSTR lpFileName, LPWIN32_FIND_DATAA lpFindFileData);\",\n    \"c:\\\\windows\\\\*.exe\", \n    fd);\n  if (h == -1) // INVALID_HANDLE_VALUE\n  {\n    msg(\"No files found!\\n\");\n    return -1;\n  }\n  for (n=1;;n++)\n  {\n    msg(\"Found: %s\\n\", fd.cFileName);\n    ok = dbg_appcall(\n          LocByName(\"kernel32_FindNextFileA\"),\n          \"BOOL __stdcall FindNextFileA(HANDLE hFindFile, LPWIN32_FIND_DATAA lpFindFileData);\",\n          h,\n          fd);\n\n    if ( (n &gt; 5) || (ok == 0) )\n      break;\n  }\n  dbg_appcall(\n    LocByName(\"kernel32_FindClose\"),\n    \"BOOL __stdcall FindClose(HANDLE hFindFile);\",\n    h);\n\n  return n;\n}  \n</code></pre>"},{"location":"user-guide/debugger/tutorials/appcall_primer/appcall_primer.html#using-loadlibrarygetprocaddress","title":"Using LoadLibrary/GetProcAddress","text":"<p>In this example, we are going to initialize the APIs by setting up their prototypes correctly so we can use them later conveniently.</p> <pre><code>extern getmodulehandle, getprocaddr, findwindow, loadlib;\n\nstatic init_api()\n{\n  loadlib = LocByName(\"kernel32_LoadLibraryA\");\n  getmodulehandle = LocByName(\"kernel32_GetModuleHandleA\");\n  getprocaddr = LocByName(\"kernel32_GetProcAddress\");\n\n  if (loadlib == BADADDR || getmodulehandle == BADADDR || getprocaddr == BADADDR)\n    return \"Failed to locate required APIs\";\n\n  // Let us permanently set the prototypes of these functions\n  apply_type(loadlib, \"HMODULE __stdcall loadlib(LPCSTR lpModuleName);\");\n  apply_type(getmodulehandle, \"HMODULE __stdcall gmh(LPCSTR lpModuleName);\");\n  apply_type(getprocaddr, \"FARPROC __stdcall gpa(HMODULE hModule, LPCSTR lpProcName);\");\n\n  // Resolve address of FindWindow api\n  auto t = getmodulehandle(\"user32.dll\");\n  if (t == 0)\n  {\n    t = loadlib(\"user32.dll\");\n    if (t == 0)\n        return \"User32 is not loaded!\";\n  }\n  findwindow = getprocaddr(t, \"FindWindowA\");\n  if (findwindow == 0)\n    return \"FindWindowA API not found!\";\n\n  // Set type\n  apply_type(findwindow, \"HWND __stdcall FindWindowA(LPCSTR lpClassName, LPCSTR lpWindowName);\");\n\n  return \"ok\";\n}\n\nstatic main()\n{\n  auto ok = init_api();\n  if (ok != \"ok\")\n  {\n    msg(\"Failed to initialize: %s\", ok);\n    return -1;\n  }\n  auto hwnd = dbg_appcall(findwindow, 0, 0, \"Calculator\");\n  if (hwnd == 0)\n  {\n    msg(\"Failed to locate the Calculator window!\\n\");\n    return -1;\n  }\n  msg(\"Calculator hwnd=%x\\n\", hwnd);\n  return 0;\n}\n</code></pre>"},{"location":"user-guide/debugger/tutorials/appcall_primer/appcall_primer.html#retrieving-applications-command-line","title":"Retrieving application's command line","text":"<pre><code>extern getcommandline;\n\nstatic main()\n{\n  getcommandline = LocByName(\"kernel32_GetCommandLineA\");\n  if (getcommandline == BADADDR)\n  {\n    msg(\"Failed to resolve GetCommandLineA API address!\\n\");\n    return -1;\n  }\n  apply_type(getcommandline, \"const char *__stdcall GetCommandLineA();\");\n\n  msg(\"This application's command line:&lt;\\n%s\\n&gt;\\n\", getcommandline());\n  return 0;\n}\n</code></pre>"},{"location":"user-guide/debugger/tutorials/appcall_primer/appcall_primer.html#specifying-appcall-options","title":"Specifying Appcall options","text":"<p>Appcall can be configured with <code>set_appcall_options()</code> and passing one or more options:</p> <ul> <li>APPCALL_MANUAL: Only set up the appcall, do not run it (you should call <code>cleanup_appcall()</code> when finished). Please Refer to the \"Manual Appcall\" section for more information.</li> <li>APPCALL_DEBEV: If this bit is set, exceptions during appcall will generate IDC exceptions with full information about the exception. Please refer to the \"Capturing exception debug events\" section for more information.</li> </ul> <p>It is possible to retrieve the Appcall options, change them and then restore them back. To retrieve the options use the <code>get_appcall_options()</code>.</p> <p>Please note that the Appcall options are saved in the database so if you set it once it will retain its value as you save and load the database.</p>"},{"location":"user-guide/debugger/tutorials/appcall_primer/appcall_primer.html#manual-appcall","title":"Manual Appcall","text":"<p>So far, we've seen how to issue an Appcall and capture the result from the script, but what if we only want to setup the environment and manually step through a function?</p> <p>This can be achieved with manual Appcall. The manual Appcall mechanism can be used to save the current execution context, execute another function in another context and then pop back the previous context and continue debugging from that point.</p> <p>Let us directly illustrate manual Appcall with a real life scenario:</p> <ol> <li>You are debugging your application</li> <li>You discover a buggy function (foo()) that misbehaves when called with certain arguments: foo(0xdeadbeef)</li> <li>Instead of waiting until the application calls foo() with the desired arguments that can cause foo() to misbehave, you can manually call foo() with the desired arguments and then trace the function from its beginning.</li> <li>Finally, one calls <code>cleanup_appcall()</code> to restore the execution context</li> </ol> <p>To illustrate, let us take the <code>ref1</code> function (from the previous example above) and call it with an invalid pointer:</p> <ol> <li> <p>Set manual Appcall mode:</p> <p><code>set_appcall_options(APPCALL_MANUAL);</code> 2.  Call the function with an invalid pointer:</p> <p><code>ref1(6);</code></p> </li> </ol> <p>Directly after doing that, IDA will switch to the function and from that point on we can debug:</p> <pre><code>.text:0000000140001050 ; void __stdcall ref1(int *a)\n.text:0000000140001050 ref1            proc near\n.text:0000000140001050                 test    rcx, rcx  ; &lt;&lt; RIP starts here \n.text:0000000140001053                 jz      short locret_14000106A\n.text:0000000140001055                 mov     edx, [rcx]\n.text:0000000140001057                 lea     r8d, [rdx+1]\n.text:000000014000105B                 mov     [rcx], r8d\n.text:000000014000105E                 lea     rcx, aCalledWithDAnd ; \"called with %d and returning %d\\n\"\n.text:0000000140001065                 jmp     _printf\n.text:000000014000106A locret_14000106A:      \n.text:000000014000106A                 retn\n.text:000000014000106A ref1            endp  \n</code></pre> <p>Now you are ready to single step that function with all its arguments properly set up for you. When you are done, you can return to the previous context by calling <code>cleanup_appcall()</code>.</p>"},{"location":"user-guide/debugger/tutorials/appcall_primer/appcall_primer.html#initiating-multiple-manual-appcalls","title":"Initiating multiple manual Appcalls","text":"<p>It is possible to initiate multiple manual Appcalls. If manual Appcall is enabled, then issuing an Appcall from an another Appcall will push the current context and switch to the new Appcall context. <code>cleanup_appcall()</code> will pop the contexts one by one (LIFO style).</p> <p>Such technique is useful if you happen to be tracing a function then you want to debug another function and then resume back from where you were!</p> <p>Manual Appcalls are not designed to be called from a script (because they don't finish), nonetheless if you use them from a script:</p> <pre><code>auto i;\nprintf(\"Loop started\\n\"); // appcall 1\nfor (i=0;i&lt;10;i++)\n{\n  msg(\"i=%d\\n\", i);\n}\nprintf(\"Loop finished\\n\"); // appcall 2\n</code></pre> <p>We observe the following:</p> <ol> <li>First Appcall will be initiated</li> <li>The script will loop and display the values of i in IDA's output window</li> <li>Another Appcall will be initiated</li> <li>The script finishes. None of the two Appcalls actually took place</li> <li>The execution context will be setup for tracing the last issued Appcall</li> <li>After this Appcall is finished, we observe \"Loop finished\"</li> <li>We issue <code>cleanup_appcall</code> and notice that the execution context is back to printf but this time it will print \"Loop started\"</li> <li>Finally when we call again <code>cleanup_appcall</code> we resume our initial execution context</li> </ol>"},{"location":"user-guide/debugger/tutorials/appcall_primer/appcall_primer.html#capturing-exception-debug-events","title":"Capturing exception debug events","text":"<p>We previously illustrated that we can capture exceptions that occur during an Appcall, but that is not enough if we want to learn more about the nature of the exception from the operating system point of view.</p> <p>It would be better if we could somehow get the last debug_event_t that occured inside the debugger module. This is possible if we use the APPCALL_DEBEV option. Let us repeat the previous example but with the APPCALL_DEBEV option enabled:</p> <pre><code>auto e;\ntry\n{\n  set_appcall_options(APPCALL_DEBEV); // Enable debug event capturing\n  ref1(6);\n}\ncatch (e)\n{\n  // Exception occured ..... this time \"e\" is populated with debug_event_t fields (check idd.hpp)\n}\n</code></pre> <p>And in this case, if we dump the exception object's contents, we get these attributes:</p> <pre><code>Unhandled exception: object\n  can_cont:           1.        1h           1o\n  code:  3221225477. C0000005h 30000000005o\n  ea:     4198442.   40102Ah    20010052o\n  eid:          64.       40h         100o\n  file: \"\"\n  func: \"___idcexec0\"\n  handled:           1.        1h           1o\n  info: \"The instruction at 0x40102A referenced memory at 0x6. The memory could not be read\"\n  line:           2.        2h           2o\n  pc:          11.        Bh          13o\n  pid:       40128.     9CC0h      116300o\n  ref:           6.        6h           6o\n  tid:       36044.     8CCCh      106314o\n</code></pre>"},{"location":"user-guide/debugger/tutorials/appcall_primer/appcall_primer.html#appcall-related-functions","title":"Appcall related functions","text":"<p>There are some functions that can be used while working with Appcalls.</p>"},{"location":"user-guide/debugger/tutorials/appcall_primer/appcall_primer.html#parse_declget_tinfosizeof","title":"parse_decl/get_tinfo/sizeof","text":"<p>The <code>get_tinfo()</code> function is used to retrieve the typeinfo string associated with a given address.</p> <pre><code>/// Get type information of function/variable as 'typeinfo' object\n///      ea - the address of the object\n///      type_name - name of a named type\n/// returns: typeinfo object, 0 - failed\n/// The typeinfo object has one mandatory attribute: typid\n\ntypeinfo get_tinfo(long ea);\ntypeinfo get_tinfo(string type_name);  \n</code></pre> <p>The <code>parse_decl()</code> function is used to construct a typeinfo string from a type string. We already used it to construct a typeinfo string and passed it to <code>dbg_appcall()</code>.</p> <pre><code>/// Parse one type declaration\n///      input -  a C declaration\n///      flags -  combination of PT_... constants or 0\n///               PT_FILE should not be specified in flags (it is ignored)\n/// returns: typeinfo object or num 0\n\ntypeinfo parse_decl(string input, long flags);\n</code></pre> <p>And finally, given a typeinfo string, one can use the <code>sizeof()</code> function to calculate the size of a type:</p> <pre><code>/// Calculate the size of a type\n///      type - type to calculate the size of\n///             can be specified as a typeinfo object (e.g. the result of get_tinfo())\n///             or a string with C declaration (e.g. \"int\")\n/// returns: size of the type or -1 if error\n\nlong sizeof(typeinfo type);  \n</code></pre>"},{"location":"user-guide/debugger/tutorials/appcall_primer/appcall_primer.html#accessing-enum-members-as-constants","title":"Accessing enum members as constants","text":"<p>In IDC, it is possible to access all the defined enumerations as if they were IDC constants:</p> <pre><code>00000001 ; enum MACRO_PAGE (standard) (bitfield)\n00000001 PAGE_NOACCESS  = 1\n00000002 PAGE_READONLY  = 2\n00000004 PAGE_READWRITE  = 4\n00000008 PAGE_WRITECOPY  = 8\n00000010 PAGE_EXECUTE  = 10h\n00000020 PAGE_EXECUTE_READ  = 20h\n00000040 PAGE_EXECUTE_READWRITE  = 40h\n</code></pre> <p>Then one can type:</p> <pre><code>msg(\"PAGE_EXECUTE_READWRITE=%x\\n\", PAGE_EXECUTE_READWRITE);\n</code></pre> <p>This syntax makes it even more convenient to use enumerations when calling APIs via Appcall.</p>"},{"location":"user-guide/debugger/tutorials/appcall_primer/appcall_primer.html#storingretrieving-typed-elements","title":"Storing/Retrieving typed elements","text":"<p>It is possible to store/retrieve (aka serialize/deserialize) objects to/from the database (or the debugee's memory). To illustrate, let us consider the following memory contents:</p> <pre><code>0001000C dd 1003219h\n00010010 dw 0FFEEh\n00010012 dw 0FFEEh\n00010014 dd 1\n</code></pre> <p>And we know that this maps to a given type:</p> <pre><code>struct X\n{\n  unsigned long a;\n  unsigned short b, c;\n  unsigned long d;\n};\n</code></pre> <p>To retrieve (deserialize) the memory contents into a nice IDC object, we can use the <code>object.retrieve()</code> function:</p> <pre><code>/// Retrieve a C structure from the idb or a buffer and convert it into an object\n///  typeinfo - description of the C structure. Can be specified\n///             as a declaration string or result of \\ref get_tinfo() or\n///             similar functions\n///  src      - address (ea) to retrieve the C structure from\n///             OR a string buffer previously packed with the store method\n///  flags    - combination of \\ref object_store[PIO_...] bits\n\nvoid object.retrieve(typeinfo, src, flags);\n</code></pre> <p>Here is an example:</p> <pre><code>// Create the typeinfo string\nauto t = parse_decl(\"struct X { unsigned long a; unsigned short b, c; unsigned long d;};\", 0);\n// Create a dummy object\nauto o = object();\n// Retrieve the contents into the object:\no.retrieve(t, 0x1000C, 0);\n</code></pre> <p>And now if we dump the contents of o:</p> <pre><code>IDC&gt;print(o);\nobject\n  __at__:       65548.    1000Ch      200014o 00000000000000010000000000001100b\n  a:    16790041.  1003219h   100031031o 00000001000000000011001000011001b\n  b:       65518.     FFEEh      177756o 00000000000000001111111111101110b\n  c:       65518.     FFEEh      177756o 00000000000000001111111111101110b\n  d:           1.        1h           1o 00000000000000000000000000000001b\n</code></pre> <p>and again we notice the __at__ which holds the address of the retrieved object.</p> <p>To store (serialize) the object back into memory, we can use the <code>object.store()</code> function:</p> <pre><code>/// Convert the object into a C structure and store it into the idb or a buffer\n  ///  typeinfo - description of the C structure. Can be specified\n  ///             as a declaration string or result of \\ref get_tinfo() or\n  ///             similar functions\n  ///  dest     - address (ea) to store the C structure\n  ///             OR a reference to a destination string\n  ///  flags    - combination of PIO_.. bits\n\n  void object.store(typeinfo, dest, flags);\n</code></pre> <p>Here's an example continuing from the previous one:</p> <pre><code>o.a++; // modify the field\no.d = 6; // modify another field\no.store(t, o.__at__, 0);\n</code></pre> <p>And finally to verify, we go to the memory address:</p> <pre><code>0001000C dd 100321Ah\n00010010 dw 0FFEEh\n00010012 dw 0FFEEh\n00010014 dd 6\n</code></pre>"},{"location":"user-guide/debugger/tutorials/appcall_primer/appcall_primer.html#using-appcall-with-idapython","title":"Using Appcall with IDAPython","text":"<p>The Appcall concept remains the same between IDC and Python, nonetheless Appcall/Python has a different syntax (using references, unicode strings, etc.)</p> <p>The Appcall mechanism is provided by <code>ida_idd</code> module (also via <code>idaapi</code>) through the Appcall variable. To issue an Appcall using Python:</p> <pre><code>from idaapi import Appcall\nAppcall.printf(\"Hello world!\\n\");\n</code></pre> <p>One can take a reference to an Appcall:</p> <pre><code>printf = Appcall.printf\n# ...later...\nprintf(\"Hello world!\\n\");\n</code></pre> <ul> <li>In case you have a function with a mangled name or with characters that cannot be used as an identifier name in the Python language, then use the following syntax:</li> </ul> <pre><code>findclose     = Appcall[\"__imp__FindClose@4\"]\ngetlasterror  = Appcall[\"__imp__GetLastError@0\"]\nsetcurdir     = Appcall[\"__imp__SetCurrentDirectoryA@4\"]\n</code></pre> <ul> <li>In case you want to redefine the prototype of a given function, then use the <code>Appcall.proto(func_name or func_ea, prototype_string)</code> syntax as such:</li> </ul> <pre><code># pass an address or name and Appcall.proto() will resolve it\nloadlib = Appcall.proto(\"__imp__LoadLibraryA@4\", \"int (__stdcall *LoadLibraryA)(const char *lpLibFileName);\")\n# Pass an EA instead of a name\nfreelib = Appcall.proto(LocByName(\"__imp__FreeLibrary@4\"), \"int (__stdcall *FreeLibrary)(int hLibModule);\")\n</code></pre> <ul> <li>To pass unicode strings you need to use the Appcall.unicode() function:</li> </ul> <pre><code>getmodulehandlew = Appcall.proto(\"__imp__GetModuleHandleW@4\", \"int (__stdcall *GetModuleHandleW)(LPCWSTR lpModuleName);\")\nhmod = getmodulehandlew(Appcall.unicode(\"kernel32.dll\"))\n</code></pre> <ul> <li>To pass int64 values to a function you need to use the <code>Appcall.int64()</code> function:</li> </ul> <pre><code>/* C code */\nint64 op_two64(int64 a, int64 b, int op)\n{\n  if (op == 1)\n    return a + b;\n  else if (op == 2)\n    return a - b;\n  else if (op == 3)\n    return a * b;\n  else if (op == 4)\n    return a / b;\n  else\n    return -1;\n}\n</code></pre> <p>Python Appcall code:</p> <pre><code>r = Appcall.op_two64(Appcall.int64(1), Appcall.int64(2), 1)\nprint(\"result=\", r.value)\n</code></pre> <p>If the returned value is also an int64, then you can use the <code>int64.value</code> to unwrap and retrieve the value.</p> <ul> <li>To define a prototype and then later assign an address so you can issue an Appcall:</li> </ul> <pre><code># Create a typed object (no address is associated yet)\nvirtualalloc = Appcall.typedobj(\"int __stdcall VirtualAlloc(int lpAddress, SIZE_T dwSize, DWORD flAllocationType, DWORD flProtect);\")\n# Later we have an address, so we pass it:\nvirtualalloc.ea = idc.get_name_ea(0, \"kernel32_VirtualAlloc\")\n# Now we can Appcall:\nptr = virtualalloc(0, Appcall.Consts.MEM_COMMIT, 0x1000, Appcall.Consts.PAGE_EXECUTE_READWRITE)\nprint(\"ptr=%x\" % ptr)\n</code></pre> <p>Things to note:</p> <ul> <li>We used the Appcall.Consts syntax to access enumerations (similar to what we did in IDC)</li> <li>If you replicate this specific example, a new memory page will be allocated. You need to refresh the debugger memory layout (with <code>idaapi.refresh_debugger_memory()</code>) to access it</li> </ul>"},{"location":"user-guide/debugger/tutorials/appcall_primer/appcall_primer.html#passing-arguments-by-reference_1","title":"Passing arguments by reference","text":"<ul> <li>To pass function arguments by reference, one has to use the <code>Appcall.byref()</code>:</li> </ul> <pre><code># Create a byref object holding the number 5\ni = Appcall.byref(5)\n# Call the function\nAppcall.ref1(i)\n# Retrieve the value\nprint(\"Called the function:\", i.value)\n</code></pre> <ul> <li>To call a C function that takes a string buffer and modifies it, we need to use the <code>Appcall.buffer(initial_value, [size])</code> function to create a buffer:</li> </ul> <pre><code>buf = Appcall.buffer(\"test\", 100)\nAppcall.ref2(buf)\nprint(buf.cstr())\n</code></pre> <ul> <li>Another real life example is when we want to call the GetCurrentDirectory() API:</li> </ul> <pre><code># Take a reference\ngetcurdir = Appcall.proto(\"kernel32_GetCurrentDirectoryA\", \"DWORD __stdcall GetCurrentDirectoryA(DWORD nBufferLength, LPSTR lpBuffer);\")\n# make a buffer\nbuf = Appcall.byref(\"\\x00\" * 260)\n# get current directory\nn = getcurdir(260, buf)\nprint(\"curdir=%s\" % buf.cstr())\n</code></pre> <ul> <li>To pass int64 values by reference:</li> </ul> <pre><code>int64_t ref4(int64_t *a)\n{\n  if (a == NULL)\n  {\n    printf(\"No number passed!\");\n    return -1;\n  }\n  int64_t old = *a;\n  printf(\"Entered with %\" PRId64 \"\\n\", *a);\n  (*a)++;\n  return old;\n}\n</code></pre> <p>We use the following Python code:</p> <pre><code># Create an int64 value\ni = Appcall.int64(5)\n# create a reference to it\nv = Appcall.byref(i)\n# appcall\nold_val = Appcall.ref4(v)\nprint(f\"Called with {old_val.value}, computed {i.value}\")\n</code></pre> <ul> <li>To call a C function that takes an array of integers or an array of a given type:</li> </ul> <pre><code>/* C code */\nint ref3(int *arr, int sz)\n{\n  if (arr == NULL)\n    return 0;\n  int sum = 0;\n  for (int i=0;i&lt;sz;i++)\n    sum += arr[i];\n  return sum;\n}\n</code></pre> <p>First we need to use the <code>Appcall.array()</code> function to create an array type, then we use the <code>array_object.pack()</code> function to encode the Python values into a buffer:</p> <pre><code># create an array type\narr = Appcall.array(\"int\")\n# Create a test list\nL = [x for x in range(1, 10)]\n# Pack the list\np_list = arr.pack(L)\n\n# appcall to compute the total\nc_total = Appcall.ref3(p_list, len(L))\n# internally compute the total\ntotal = sum(L)\nif total != c_total:\n    print(\"Appcall failed!\")\nelse:\n    print(f\"Total computed using Appcall is {total}\")\n</code></pre>"},{"location":"user-guide/debugger/tutorials/appcall_primer/appcall_primer.html#functions-that-accept-or-return-structures_1","title":"Functions that accept or return structures","text":"<p>Like in IDC, we can create objects and pass them with at least two methods.</p> <p>The first method involves using the <code>Appcall.obj()</code> function that takes an arbitrary number of keyword args that will be used to create an object with the arguments as attributes. The second method is by using a dictionary.</p> <pre><code># Via dictionary\nrec1 = {\"id\": 1, \"name\": \"user1\"}\n\n# Via Appcall.obj\nrec2 = Appcall.obj(id=2, name=\"user2\")\n\nAppcall.printRecord(rec1)\nAppcall.printRecord(rec2)  \n</code></pre> <p>And finally, if you happen to have your own object instance then just pass your object. The IDAPython object to IDC object conversion routine will skip attributes starting and ending with \"__\".</p>"},{"location":"user-guide/debugger/tutorials/appcall_primer/appcall_primer.html#findfirstfindnext-example","title":"FindFirst/FindNext example","text":"<pre><code># For simplicity, let's alias the Appcall\na = idaapi.Appcall\ngetcurdir = a.proto(\n    \"kernel32_GetCurrentDirectoryA\", \n    \"DWORD __stdcall GetCurrentDirectoryA(DWORD nBufferLength, LPSTR lpBuffer);\")\n\ngetwindir = a.proto(\n    \"kernel32_GetWindowsDirectoryA\",\n    \"UINT __stdcall GetWindowsDirectoryA(LPSTR lpBuffer, UINT uSize);\")\n\nsetcurdir = a.proto(\n    \"kernel32_SetCurrentDirectoryA\",\n    \"BOOL __stdcall SetCurrentDirectoryA(LPCSTR lpPathName);\")\n\nfindfirst = a.proto(\n    \"kernel32_FindFirstFileA\",\n    \"HANDLE __stdcall FindFirstFileA(LPCSTR lpFileName, LPWIN32_FIND_DATAA lpFindFileData);\")\n\nfindnext = a.proto(\n    \"kernel32_FindNextFileA\",\n    \"BOOL __stdcall FindNextFileA(HANDLE hFindFile, LPWIN32_FIND_DATAA lpFindFileData);\")\n\nfindclose = a.proto(\n    \"kernel32_FindClose\",\n    \"BOOL __stdcall FindClose(HANDLE hFindFile);\")\n\ndef test():\n    # create a buffer\n    savedpath = a.byref(\"\\x00\" * 260)\n    # get current directory\n    n = getcurdir(250, savedpath)\n    out = []\n    out.append(\"curdir=%s\" % savedpath.value[0:n])\n\n    # get windir\n    windir = a.buffer(size=260) # create a buffer using helper function\n    n = getwindir(windir, windir.size)\n    if n == 0:\n        print(\"could not get current directory\")\n        return False\n\n    windir = windir.value[:n]\n    out.append(\"windir=%s\" % windir)\n\n    # change to windows folder\n    setcurdir(windir)\n\n    # initiate find\n    fd = a.obj()\n    h = findfirst(\"*.exe\", fd)\n    if h == -1:\n        print(\"no *.exe files found!\")\n        return False\n\n    found = False\n    while True:\n        fn = a.cstr(fd.cFileName)\n        if \"regedit\" in fn:\n            found = True\n        out.append(\"fn=%s&lt;\" % fn)\n        fd = a.obj() # reset the FD object\n        ok = findnext(h, fd)\n        if not ok:\n            break\n    #\n    findclose(h)\n\n    # restore cur dir\n    setcurdir(savedpath.value)\n\n    # verify\n    t = a.buffer(size=260)\n    n = getcurdir(t.size, t)\n    if t.cstr() != savedpath.cstr():\n        print(\"could not restore cur dir\")\n        return False\n\n    out.append(\"curdir=%s&lt;\" % t.cstr())\n    print(\"all done!\")\n    for l in out:\n        print(l)\n\n    if found:\n        print(\"regedit was found!\")\n    else:\n        print(\"regedit was not found!\")\n\n    return found\n\n\ntest()    \n</code></pre>"},{"location":"user-guide/debugger/tutorials/appcall_primer/appcall_primer.html#using-getprocaddress","title":"Using GetProcAddress","text":"<pre><code>a = idaapi.Appcall\nloadlib  = a.proto(\"kernel32_LoadLibraryA\", \"HMODULE __stdcall LoadLibraryA(const char *lpLibFileName);\")\ngetprocaddr = a.proto(\"kernel32_GetProcAddress\", \"FARPROC __stdcall GetProcAddress(HMODULE hModule, LPCSTR lpProcName);\")\nfreelib = a.proto(\"kernel32_FreeLibrary\", \"BOOL __stdcall FreeLibrary(HMODULE hLibModule);\")\n\ndef test_gpa():\n    h = loadlib(\"user32.dll\")\n    if idaapi.inf_is_64bit():\n        h = h.value\n    if h == 0:\n        print(\"failed to load library!\")\n        return False\n\n    p = getprocaddr(h, \"FindWindowA\")\n    if idaapi.inf_is_64bit():\n        p = p.value\n    if p == 0:\n        print(\"failed to gpa!\")\n        return -2\n    findwin = a.proto(p, \"HWND FindWindow(LPCTSTR lpClassName, LPCTSTR lpWindowName);\")\n    hwnd = findwin(0, \"Calculator\")\n    freelib(h)\n    if idaapi.inf_is_64bit():\n        hwnd = hwnd.value\n\n    print(\"%x: ok!-&gt;hwnd=%x\" % (p, hwnd))\n\n    return 1\n\ntest_gpa()\n</code></pre> <p>Please note that we used the <code>idaapi.inf_is_64bit()</code> method to properly unwrap integer values that depends on the bitness of the binary.</p>"},{"location":"user-guide/debugger/tutorials/appcall_primer/appcall_primer.html#setting-the-appcall-options","title":"Setting the Appcall options","text":"<p>In Python, the Appcall options can be set global or locally per Appcall.</p> <ul> <li>To set the global Appcall setting:</li> </ul> <pre><code>old_options = Appcall.set_appcall_options(Appcall.APPCALL_MANUAL)\n</code></pre> <ul> <li>To set the Appcall setting per Appcall:</li> </ul> <pre><code># take a reference to printf\nprintf = Appcall._printf\n# change the setting for this Appcall\nprintf.options = Appcall.APPCALL_DEBEV\nprintf(\"Hello world!\\n\")\n</code></pre> <p>Similarly, retrieving the Appcall options is done by either calling <code>Appcall.get_appcall_options()</code> or by reading the options attribute (for example: <code>printf.options</code>)</p> <p>To cleanup after a manual Appcall use <code>Appcall.cleanup_appcall()</code>.</p>"},{"location":"user-guide/debugger/tutorials/appcall_primer/appcall_primer.html#calling-functions-that-can-cause-exceptions","title":"Calling functions that can cause exceptions","text":"<p>An Appcall that generates an exception while executing in the current thread will throw a Python Exception object. This is inline with the IDC behavior we described above.</p> <ul> <li>Let us try when the Appcall options does not include the <code>APPCALL_DEBEV</code> flag:</li> </ul> <pre><code>try:\n  idaapi.Appcall.cause_crash()\nexcept Exception as e:\n  print(\"Got an exception!\")\n</code></pre> <p>This approach is useful if you want to know whether the Appcall passes or crashes.</p> <p>Now if we want more details about the exception, then we use the APPCALL_DEBEV flag, which will cause an OSError exception to be raised and have its args[0] populated with the last <code>debug_event_t</code>:</p> <pre><code>cause_crash = idaapi.Appcall.cause_crash\ncause_crash.options = idaapi.APPCALL_DEBEV\ntry:\n  cause_crash()\nexcept OSError as e:\n  debug_event = e.args[0]\n  print(f\"Exception: tid={debug_event.tid} ea={debug_event.ea:x}\")\nexcept Exception as e:\n  print(\"Unknown exception!\")\n</code></pre> <p>If the Appcall caused a crash, then the debug_event variable will be populated with the last <code>debug_event_t</code> structure inside the <code>OSError</code> exception handler.</p>"},{"location":"user-guide/debugger/tutorials/appcall_primer/appcall_primer.html#appcall-related-functions-in-python","title":"Appcall related functions in Python","text":""},{"location":"user-guide/debugger/tutorials/appcall_primer/appcall_primer.html#storingretrieving-objects","title":"Storing/Retrieving objects","text":"<p>Storing/Retrieving objects is also supported in Python:</p> <ol> <li>Using the IDA SDK (through the idaapi Python module)</li> <li>Using Appcall helper functions</li> </ol> <p>In this example we show how to:</p> <ol> <li>Unpack the DOS header at address 0x140000000 and verify the fields</li> <li>Unpack a string and see if it is unpacked correctly</li> </ol> <p>Let's start with the IDA SDK helper functions first:</p> <pre><code># Struct unpacking\ndef test_unpack_struct():\n  name, tp, flds = idc.parse_decl(\"IMAGE_DOS_HEADER;\", 0)\n  ok, obj = idaapi.unpack_object_from_idb(idaapi.get_idati(), tp, flds, 0x140000000, 0)\n  return obj.e_magic == 23117 and obj.e_cblp == 144\n\n# Raw unpacking\ndef test_unpack_raw():\n  # Parse the type into a type name, typestring and fields\n  name, tp, flds = idc.parse_decl(\"struct abc_t { int a, b;};\", 0)\n  # Unpack from a byte vector (bv) (aka string)\n  ok, obj = idaapi.unpack_object_from_bv(\n              idaapi.get_idati(), \n              tp, \n              flds, \n              b\"\\x01\\x00\\x00\\x00\\x02\\x00\\x00\\x00\", \n              0)\n  return obj.a == 1 and obj.b == 2\n\nprint(\"test_unpack_struct() passed:\", test_unpack_struct())\nprint(\"test_unpack_raw() passed:\", test_unpack_raw())\n</code></pre> <p>Now to accomplish similar result using Appcall helper functions:</p> <pre><code># Struct unpacking with Appcall\n  def test_unpack_struct():\n  tp = idaapi.Appcall.typedobj(\"IMAGE_DOS_HEADER;\")\n  ok, obj = tp.retrieve(0x140000000)\n  return ok and obj.e_magic == 23117 and obj.e_cblp == 144\n\n# Raw unpacking with Appcall\ndef test_unpack_raw():\n  global tp\n  # Parse the type into a type name, typestring and fields\n  tp = idaapi.Appcall.typedobj(\"struct abc_t { int a, b;};\")\n  ok, obj = tp.retrieve(b\"\\x01\\x00\\x00\\x00\\x02\\x00\\x00\\x00\")\n  return obj.a == 1 and obj.b == 2\n\nprint(\"test_unpack_struct() passed:\", test_unpack_struct())\nprint(\"test_unpack_raw() passed:\", test_unpack_raw())\n</code></pre> <p>When it comes to storing, instead of using the Appcall's <code>typedobj.retrieve()</code>, we can use the <code>typedobj.store()</code> function:</p> <pre><code># Packs/Unpacks a structure to the database using appcall facilities\ndef test_pack_idb(ea):\n  print(\"%x: ...\" % ea)\n  tp = a.typedobj(\"struct { int a, b; char x[4];};\")\n  o = a.obj(a=16, b=17,x=\"abcd\")\n  return tp.store(o, ea) == 0\n\nea = idc.here() # some writable area    \nif test_pack_idb(ea):\n  print(\"cool!\")\n  idaapi.refresh_debugger_memory()\n</code></pre>"},{"location":"user-guide/debugger/tutorials/appcall_primer/appcall_primer.html#accessing-enum-members-as-constants_1","title":"Accessing enum members as constants","text":"<p>Like in IDC, to access the enums, one can use the <code>Appcall.Consts</code> object:</p> <pre><code>print(\"PAGE_EXECUTE_READWRITE=%x\" % Appcall.Consts.PAGE_EXECUTE_READWRITE)\n</code></pre> <p>If the constant was not defined then an attribute error exception will be thrown. To prevent that, use the <code>Appcall.valueof()</code> method instead, which lets you provide a default value in case a constant was absent:</p> <pre><code>print(\"PAGE_EXECUTE_READWRITE=%x\" % Appcall.valueof(\"PAGE_EXECUTE_READWRITE\", 0x40))\n</code></pre> <p>Please send your comments or questions to support@hex-rays.com</p>"},{"location":"user-guide/debugger/tutorials/bochs_debugger_primer/bochs_debugger_primer.html","title":"Debugging Windows Applications with IDA Bochs Plugin","text":"<p>Check the tutorial about debuggind Windows apps with IDA Bochs:</p>"},{"location":"user-guide/debugger/tutorials/bochs_linux_primer/bochs_linux_primer.html","title":"Using the Bochs debugger plugin in Linux","text":""},{"location":"user-guide/debugger/tutorials/bochs_linux_primer/bochs_linux_primer.html#introduction","title":"Introduction","text":"<p>This guide illustrates how to configure the Bochs debugger plugin under Linux/MacOS. Downloading and compiling Bochs Please download the Bochs source code tarball and extract it.</p> <pre><code>tar zxf bochs-2.5.1.tar.gz\n</code></pre> <p>Run the 'configure' script (it is possible to pass other switches) and make sure that the switches marked in bold are present:</p> <pre><code>./configure --enable-sb16 --enable-ne2000 --enable-all-optimizations \\ --enable-cpu-level=6 --enable-x86-64 --enable-pci \\ --enable-clgd54xx --enable-usb --enable-usb-ohci \\ --enable-show-ips --with-all-libs \\ --enable-debugger --disable-readline\n</code></pre> <p>Note: under MacOS Lion 10.7.3 use the following switches:</p> <pre><code>./configure --enable-cpu-level=6 --with-nogui --enable-debugger --enable-disasm --enable-x86-debugger --enable-x86-64 --disable-readline --enable-all-optimizations --enable-sb16 --enable-ne2000 --enable-pci --enable-acpi --enable-clgd54xx --enable-usb --enable-usb-ohci --enable-show-ips\n</code></pre> <p>For a complete installation guide please check: http://bochs.sourceforge.net/doc/docbook/user/compiling.html. Now run \"make\" and \"make install\". Then type \"whereis bochs\" to get something like:</p> <pre><code>lallous@ubuntu:~/dev/bochs-2.5.1$ whereis bochsbochs: /usr/local/bin/bochs /usr/local/lib/bochs\n</code></pre>"},{"location":"user-guide/debugger/tutorials/bochs_linux_primer/bochs_linux_primer.html#configuring-ida-and-the-bochs-debugger-plugin","title":"Configuring IDA and the Bochs debugger plugin","text":""},{"location":"user-guide/debugger/tutorials/bochs_linux_primer/bochs_linux_primer.html#opening-a-database-and-selecting-the-bochs-debugger","title":"Opening a database and selecting the Bochs debugger","text":"<p>After installing Bochs, run IDA Pro and open a Windows PE file and select 'Debugger -&gt; switch debugger' and select \"Local Bochs Debugger\": If a PE file was loaded, then the Bochs debugger plugin will operate in \"PE mode\":</p> <p>In case the other two modes (IDB or Disk Image mode) are used then there is no need to specify any additional configurations options, otherwise please continue reading this guide. Before launching the debugger with F9, the Bochs debugger plugin needs to know where to find the MS Windows DLLs and which environment variables to use. Attempting to run the debugger without configuring it may result in errors like this:</p> <p>Here is a basic list of DLLs that are needed by most programs: \u2022 advapi32.dll \u2022 comctl32.dll \u2022 comdlg32.dll \u2022 gdi32.dll \u2022 kernel32.dll \u2022 msvcrt.dll \u2022 mswsock.dll \u2022 ntdll.dll \u2022 ntoskrnl.exe \u2022 shell32.dll \u2022 shlwapi.dll \u2022 urlmon.dll \u2022 user32.dll \u2022 wininet.dll \u2022 ws2_32.dll \u2022 wsock32.dll Let us create a directory in $HOME/bochs_windir/ and place those DLLs there. Specifying the Windows DLL path and environment variables using the startup file The startup file is a script file found in idadir\\plugins\\bochs directory. If IDC was the currently active language then startup.idc is used, otherwise startup.ext (where ext is the extension used by the currently selected extlang). In this tutorial we will be working with IDC, so we will edit the startup.idc file. (Please note that changes to this file will affect all databases. For local changes (database specific configuration) take a copy of the startup script file and place it in the same directory as the database then modify it). It is possible to specify a path map for a complete directory, for example:</p> <pre><code>/// path /home/lallous/bochs_windir/=c:\\windows\\system32\n</code></pre> <p>This line means that /home/lallous/bochs_windir/* will be visible to the debugged program as c:\\windows\\system32* (for example /home/lallous/bochs_windir/ntdll.dll will be visible as c:\\windows\\system32\\ntdll.dll)</p> <p>If all DLLs referenced by the program are in the bochs_windir directory, then running the process again should work: (Bochs has already started and IDA switched to debugging mode.) There are two things that should be configured. Press \u201c.\u201d to switch to the output window (or use the Debugger / Modules list window to inspect the modules list):</p> <pre><code>1.  The path to bochsys.dll is still not properly mapped. In our case, we need to add the following line to the startup file: \n```\n/// map /Users/elias/idasrc/current/bin/idaq.app/Contents/MacOS/plugins/bochs/bochsys.dll=c:\\windows\\system32\\bochsys.dll\n```\n(As opposed to the path keyword that maps complete directories, the map keyword to map individual files).\n\nTo hide the presence of bochsys.dll, simply map it to another name: \n```\n/// map /Users/elias/idasrc/current/bin/idaq.app/Contents/MacOS/plugins/bochs/bochsys.dll=c:\\windows\\system32\\kvm.dll\n```\n6.  The executable's path: we also need to add a map for the executable itself or a path entry for the whole folder: \n```\n/// path /Users/elias/idasrc/current/bin/=c:\\malware\n```\n</code></pre> <p>Now, after we run the program again we should get a more correct module list:</p> <p>It is equally important to specify some environment variables. We will use the env keyword to define all the environment variables:</p> <pre><code>/// env PATH=c:\\windows;c:\\tools/// env USERPROFILE=C:\\Users\\Guest\n</code></pre> <p>Specifying the Windows DLL path and environment variables using environment variables An alternative way of configuring the DLLs path and environment variables is to use the IDABXPATHMAP and the IDABXENVMAP environment variables. To specify the path map, export the following environment variable:</p> <pre><code>$ export IDABXPATHMAP=/home/lallous/bochs_windir/=c:/windows/system32;\\         /home/lallous/dev/idaadv/plugins/bochs/=c:/windows/system32;\\         /home/lallous/temp=c:/malware\n</code></pre> <p>(Please note that the forward slash (/) will be replaced with a backslash automatically by the plugin) Similarly, specify the environment variables with the IDABXENVMAP environment variable:</p> <pre><code>$ export IDABXENVMAP=\"USERPROFILE=c:/Users/Guest++PATH=c:/windows;c:\\tools\"\n</code></pre> <p>(Please note that we used the ++ to separate between multiple variables)</p> <p>In case you require to do specific changes (per database) to the startup file then please take a copy of it and place it in the same directory as the database. Refer to the help IDA Pro help file for more information.</p>"},{"location":"user-guide/debugger/tutorials/debugger_dalvik/debugger_dalvik.html","title":"Debugging Dalvik Programs","text":"<p>Last updated on September 27, 2023 \u2014 v0.3</p>"},{"location":"user-guide/debugger/tutorials/debugger_dalvik/debugger_dalvik.html#preface","title":"Preface","text":"<p>Starting with version 6.6, IDA Pro can debug Android applications written for the Dalvik Virtual Machine. This includes source level debugging too. This tutorial explains how to set up and start a Dalvik debugging session.</p>"},{"location":"user-guide/debugger/tutorials/debugger_dalvik/debugger_dalvik.html#installing-android-studio","title":"Installing Android Studio","text":"<p>First of all we have to install the Android SDK from the official site Android Studio.</p>"},{"location":"user-guide/debugger/tutorials/debugger_dalvik/debugger_dalvik.html#environment-variables","title":"Environment Variables","text":"<p>IDA needs to know where the <code>adb</code> utility resides, and tries various methods to locate it automatically. Usually IDA finds the path to <code>adb</code>, but if it fails then we can define the <code>ANDROID_SDK_HOME</code> or the <code>ANDROID_HOME</code> environment variable to point to the directory where the Android SDK is installed to.</p>"},{"location":"user-guide/debugger/tutorials/debugger_dalvik/debugger_dalvik.html#android-device","title":"Android Device","text":"<p>Start the Android Emulator or connect to the Android device.</p> <p>Information about preparing a physical device for development can be found at Using Hardware Devices.</p> <p>Check that the device can be correctly detected by <code>adb</code>:</p> <pre><code>$ adb devices\nList of devices attached\nemulator-5554 device\n</code></pre>"},{"location":"user-guide/debugger/tutorials/debugger_dalvik/debugger_dalvik.html#installing-the-app","title":"Installing the App","text":"<p>IDA assumes that the debugged application is already installed on the Android emulator/device.</p> <p>Please download:</p> <p>{% file src=\"MyFirstApp.apk.zip\" %}</p> <p>and</p> <p>{% file src=\"MyFirstApp.src.zip\" %}</p> <p>from our site. We will use this application in the tutorial.</p> <p>We will use <code>adb</code> to install the application:</p> <pre><code>$ adb -s emulator-5554 install MyFirstApp.apk\n</code></pre>"},{"location":"user-guide/debugger/tutorials/debugger_dalvik/debugger_dalvik.html#loading-application-into-ida","title":"Loading Application into IDA","text":"<p>IDA can handle both <code>.apk</code> app bundles, or just the contained <code>.dex</code> files storing the app\u2019s bytecode. If we specify an <code>.apk</code> file, IDA can either extract one of the contained <code>.dex</code> files by loading it with the <code>ZIP</code> load option, or load all <code>classes*.dex</code> files when using the <code>APK</code> loader.</p> <p></p>"},{"location":"user-guide/debugger/tutorials/debugger_dalvik/debugger_dalvik.html#dalvik-debugger-options","title":"Dalvik Debugger Options","text":"<p>The main configuration of the dalvik debugger happens resides in \"Debugger &gt; Debugger Options &gt; Set specific options\":</p> <p></p>"},{"location":"user-guide/debugger/tutorials/debugger_dalvik/debugger_dalvik.html#connection-settings","title":"Connection Settings","text":""},{"location":"user-guide/debugger/tutorials/debugger_dalvik/debugger_dalvik.html#adb-executable","title":"ADB executable","text":"<p>As mentioned above IDA tries to locate the <code>adb</code> utility. If IDA failed to find it then we can set the path to <code>adb</code> here.</p>"},{"location":"user-guide/debugger/tutorials/debugger_dalvik/debugger_dalvik.html#connection-string","title":"Connection string","text":"<p>Specifies the argument to the <code>adb connect</code> command. It is either empty (to let <code>adb</code> figure out a meaningful target) or a <code>&lt;host&gt;[:&lt;port&gt;]</code> combination to connect to a remote device somewhere on the network.</p>"},{"location":"user-guide/debugger/tutorials/debugger_dalvik/debugger_dalvik.html#emulatordevice-serial-number","title":"Emulator/device serial number","text":"<p>Serial number of an emulator or a device. Passed to <code>adb``'s -s</code> option. This option is useful if there are multiple potential target devices running. For the official Android emulator, it is typically <code>emulator-5554</code>.</p>"},{"location":"user-guide/debugger/tutorials/debugger_dalvik/debugger_dalvik.html#start-application","title":"Start Application","text":""},{"location":"user-guide/debugger/tutorials/debugger_dalvik/debugger_dalvik.html#fill-from-androidmanifestxml","title":"Fill from AndroidManifest.xml","text":"<p>Press button and point IDA to either the APK or the <code>AndroidManifest.xml</code> file of the mobile app. IDA then automatically fetches the package name and application start activity, as well as the <code>debuggable</code> flag from the specified file.</p>"},{"location":"user-guide/debugger/tutorials/debugger_dalvik/debugger_dalvik.html#package-name","title":"Package Name","text":"<p>Package name containing the activity to be launched by the debugger.</p>"},{"location":"user-guide/debugger/tutorials/debugger_dalvik/debugger_dalvik.html#activity","title":"Activity","text":"<p>Start activity to be launched by the debugger.</p>"},{"location":"user-guide/debugger/tutorials/debugger_dalvik/debugger_dalvik.html#alternative-start-command","title":"Alternative Start Command","text":"<p>Usually IDA builds the start command from the package and activity name and launches the APK from the command line as follows:</p> <pre><code>am start -D -n '&lt;package&gt;/&lt;activity&gt;' -a android.intent.action.MAIN -c android.intent.category.LAUNCHER\n</code></pre> <p>If that does not match your desired debugging setup, you can enter an alternative start command here. Note that you have to provide package and activity as part of the startup command.</p>"},{"location":"user-guide/debugger/tutorials/debugger_dalvik/debugger_dalvik.html#apk-debuggable","title":"APK Debuggable","text":"<p>The value of the debuggable flag, as extracted from the <code>AndroidManifest.xml</code> or the APK. APKs that do not have the debuggable flag set (most do not) cannot be started on unpatched phones. Hence, while this value is false, IDA will display a (silencable) warning when starting a debugging session. To produce a debuggable APK that has the flag set to true, please revert to third-party tooling.</p>"},{"location":"user-guide/debugger/tutorials/debugger_dalvik/debugger_dalvik.html#detect-local-variable-types","title":"Detect Local Variable Types","text":"<p>This controls the behavior of IDA\u2019s type guessing engine. \"Always\" and \"Never\" are pretty self-explanatory: The options force-enable or force-disable type guessing. \"Auto\" means that type guessing is disabled for Android APIs &lt; 28 and enabled on APIs &gt;= 28. If you work with very old (i.e. API 23 and lower) Android devices and experience crashes during debugging, set this option to \"Never\". Note that when type guessing is disabled, IDA automatically assumes <code>int</code> for unknown variable types, which causes warnings on API 30 and above.</p> <p>Local Variables with Type Guessing Deactivated</p> <p></p> <p>Local Variables with Type Guessing Activated</p> <p></p>"},{"location":"user-guide/debugger/tutorials/debugger_dalvik/debugger_dalvik.html#other-options","title":"Other Options","text":""},{"location":"user-guide/debugger/tutorials/debugger_dalvik/debugger_dalvik.html#show-object-id","title":"Show object ID","text":"<p>If active, IDA shows the object ID assigned by the Java VM for composite (non-trivial) types in the local variables window.</p>"},{"location":"user-guide/debugger/tutorials/debugger_dalvik/debugger_dalvik.html#preset-bpts","title":"Preset BPTs","text":"<p>If active, IDA sets breakpoints at the beginning of all (non-synthetic, non-empty) methods of the start activity class specified in the Activity field above.</p>"},{"location":"user-guide/debugger/tutorials/debugger_dalvik/debugger_dalvik.html#path-to-sources","title":"Path to Sources","text":"<p>To use source-level debugging we have to set paths to the application source files. We can do it using the \"Options &gt; Sources path\" menu item.</p> <p>Our Dalvik debugger presumes that the application sources reside in the current (\".\") directory. If this is not the case, we can map current directory (\".\") to the directory where the source files are located.</p> <p>Let us place the source files <code>DisplayMessageActivity.java</code> and <code>MainActivity.java</code> in the same directory as the <code>MyFirstApp.apk</code> package. This way we do not need any mapping.</p>"},{"location":"user-guide/debugger/tutorials/debugger_dalvik/debugger_dalvik.html#setting-breakpoints","title":"Setting Breakpoints","text":"<p>Before launching the application it is reasonable to set a few breakpoints. We can rely on the decision made by IDA (see above the <code>presetBPTs</code> option) or set breakpoints ourselves. A good candidate is the <code>onCreate</code> method of the application\u2019s main activity.</p> <p>We can use the activity name and the method name <code>onCreate</code> to set a breakpoint:</p> <p></p> <p>Naturally, we can set any other breakpoints any time. For example, we can do it later, when we suspend the application.</p>"},{"location":"user-guide/debugger/tutorials/debugger_dalvik/debugger_dalvik.html#starting-the-debugger","title":"Starting the Debugger","text":"<p>At last we can start the debugger. Check that the Dalvik debugger backend is selected. Usually it should be done automatically by IDA:</p> <p></p> <p>If the debugger backend is correct, we are ready to start a debugger session. There are two ways to do it:</p> <ul> <li>Launch a new copy of the application (Start process)</li> <li>Attach to a running process (Attach to process)</li> </ul>"},{"location":"user-guide/debugger/tutorials/debugger_dalvik/debugger_dalvik.html#launching-the-app","title":"Launching the App","text":"<p>To start a new copy of the application just press \\ or use the \"Debugger &gt; Start process\" menu item. The Dalvik debugger will launch the application, wait until application is ready and open a debugger session to it. <p>We may wait for the execution to reach a breakpoint or press the \u201cCancel\u201d button to suspend the application.</p> <p>In our case let us wait until execution reach of <code>onCreate</code> method breakpoint.</p>"},{"location":"user-guide/debugger/tutorials/debugger_dalvik/debugger_dalvik.html#attaching-to-a-running-app","title":"Attaching to a Running App","text":"<p>Instead of launching a new process we could attach to a running process and debug it. For that we could have selected the \"Debugger &gt; Attach to process\u2026\u200b\" menu item. IDA will display a list of active processes.</p> <p></p> <p>We just select the process we want to attach to.</p>"},{"location":"user-guide/debugger/tutorials/debugger_dalvik/debugger_dalvik.html#particularities-of-dalvik-debugger","title":"Particularities of Dalvik Debugger","text":"<p>All traditional debug actions like <code>Step into</code>, <code>Step over</code>, <code>Run until return</code> and others can be used. If the application sources are accessible then IDA will automatically switch to the source-level debugging.</p> <p>Below is the list of special things about our Dalvik debugger:</p> <ul> <li>In Dalvik there is no stack and there is no <code>SP</code> register. The only available register is <code>IP</code>.</li> <li>The method frame registers and slots (<code>v0</code>, <code>v1</code>, \u2026\u200b) are represented as local variables in IDA. We can see them in the \"Debugger &gt; Debugger Windows &gt; Locals\" window (see below)</li> <li>The stack trace is available from \"Debugger &gt; Debugger windows &gt; Stack trace\" (the hot key is \\). <li>When the application is running, it may execute some system code. If we break the execution by clicking on the \u201cCancel\u201d button, quite often we may find ourselves outside of the application, in the system code. The value of the <code>IP</code> register is <code>0xFFFFFFFF</code> in this case, and stack trace shows only system calls and a lot of <code>0xFFFFFFFF</code>. It means that IDA could not locate the current execution position inside the application. We recommend to set more breakpoints inside the application, resume the execution and interact with application by clicking on its windows, selecting menu items, etc. The same thing can occur when we step out the application.</li> <li>Use \u201cRun until return\u201d command to return to the source-level debugging if you occasionally step into a method and the value of the <code>IP</code> register becomes <code>0xFFFFFFFF</code>.</li>"},{"location":"user-guide/debugger/tutorials/debugger_dalvik/debugger_dalvik.html#locals-window","title":"Locals Window","text":"<p>IDA considers the method frame registers, slots, and variables (<code>v0</code>, <code>v1</code>, \u2026\u200b) as local variables. To see their values we have to open the \"Locals\" window from the \"Debugger &gt; Debugger windows &gt; Locals\" menu item.</p> <p>At the moment the debugger stopped the execution at the breakpoint which we set on <code>onCreate</code> method.</p> <p></p> <p>Perform \u201cStep over\u201d action (the hot key is \\) two times and open the \"Locals\" window, we will see something like the following: <p></p> <p>If information about the frame is available (the symbol table is intact) or type guessing is enabled then IDA shows the method arguments, the method local variables with names and other non-named variables. Otherwise some variable values will not be displayed because IDA does not know their types.</p> <p>Variables without type information are marked with \"Bad type\" in the \"Locals\" window. To see the variable value in this case please use the \"Watch view\" window and query them with an explicit type (see below).</p>"},{"location":"user-guide/debugger/tutorials/debugger_dalvik/debugger_dalvik.html#watch-view-window","title":"Watch View Window","text":"<p>To open the \"Watch view\" window select the \"Debugger &gt; Debugger windows &gt; Watch view\" menu item. In this window we can add any variable to watch its value.</p> <p></p> <p>note that we have to specify type of variable if it is not known. Use C-style casts:</p> <ul> <li><code>(Object*)v0</code></li> <li><code>(String)v6</code></li> <li><code>(char*)v17</code></li> <li><code>(int)v7</code></li> </ul> <p>We do not need to specify the real type of an object variable, the \u201c(Object*)\u201d cast is enough. IDA can derive the real object type itself.</p> <p>Attention! On Android API versions 23 and below an incorrect type may cause the Dalvik VM to crash. There is not much we can do about it. Our recommendation is to never cast an integer variable to an object type, the Dalvik VM usually crashes if we do that. But the integer cast \u201c(int)\u201d is safe in practice.</p> <p>Keeping the above in the mind, do not leave the cast entries in the \"Watch view\" window for a long time. Delete them before any executing instruction that may change the type of the watched variable.</p> <p>Overall we recommend to debug on a device that runs at least Android API 24.</p>"},{"location":"user-guide/debugger/tutorials/debugger_dalvik/debugger_dalvik.html#troubleshooting","title":"Troubleshooting","text":"<ul> <li>Check the path to <code>adb</code> in the \"Debugger specific options\"</li> <li>Check the package and activity names</li> <li>Check that the emulator is working and was registered as an <code>adb</code> device. Try to restart the <code>adb</code> daemon.</li> <li>Check that the application was successfully installed on the emulator/device</li> <li>Check the output window of IDA for any errors or warnings</li> <li>Turn on more debug print in IDA with the <code>-z50000</code> command line switch.</li> <li>Android APIs 24 and 25 are known to return wrong instruction sizes during single stepping. Try migrating to a different Android API if you have trouble with single steps.</li> <li>IDA exposes a subset of the JDWP specification as IDC commands. (Usually the name from the specification prefixed with <code>JDWP_</code>).</li> <li>Android APIs 23 and below crash if type guessing is enabled. Remedy this by setting the <code>Detect Local Variable Types</code> option to <code>Never</code> or migrate to a newer Android API.</li> </ul>"},{"location":"user-guide/debugger/tutorials/debugger_ios/ios_debugger_primer2.html","title":"Debugging iOS Applications with IDA Pro","text":"<p>Copyright 2020 Hex-Rays SA</p>"},{"location":"user-guide/debugger/tutorials/debugger_ios/ios_debugger_primer2.html#overview","title":"Overview","text":"<p>This tutorial discusses optimal strategies for debugging native iOS applications with IDA Pro.</p> <p>IDA Pro supports remote debugging on any iOS version since iOS 9 (including iPadOS). Debugging is generally device agnostic so it shouldn't matter which hardware you're using as long as it's running iOS. The debugger itself can be used on any desktop platform that IDA supports (Mac/Windows/Linux), although using the debugger on Mac makes more features available.</p> <p>Note that IDA supports debugging on both jailbroken and non-jailbroken devices. Each environment provides its own unique challenges and advantages, and we will discuss both in detail in this writeup.</p>"},{"location":"user-guide/debugger/tutorials/debugger_ios/ios_debugger_primer2.html#getting-started","title":"Getting Started","text":"<p>The quickest way to get started with iOS debugging is to use Xcode to install a sample app on your device, then switch to IDA to debug it.</p> <p>In this example we'll be using an iPhone SE 2 with iOS 13.4 (non-jailbroken) while using IDA 7.5 SP1 on OSX 10.15 Catalina. Start by launching Xcode and use menu File&gt;New&gt;Project... to create a new project from one of the iOS templates, any of them will work:</p> <p></p> <p>After selecting a template, set the following project options:</p> <p></p> <p>Note the bundle identifier primer.idatest, it will be important later. For the Team option choose the team associated with your iOS Developer account, and click OK. Before building be sure to set the target device in the top left of the Xcode window:</p> <p></p> <p>Now launch the build in Xcode. If it succeeds then Xcode will install the app on your device automatically.</p>"},{"location":"user-guide/debugger/tutorials/debugger_ios/ios_debugger_primer2.html#preparing-a-debugging-environment","title":"Preparing a Debugging Environment","text":"<p>Now that we have a test app installed on our device, let's prepare to debug it. First we must ensure that the iOS debugserver is installed on the device. Since our device is not jailbroken, this is not such a trivial task. By default iOS restricts all remote access to the device, and such operations are managed by special MacOS Frameworks.</p> <p>Fortunately Hex-Rays provides a solution. Download the ios_deploy utility from our download center. This is a command-line support utility that can perform critical tasks on iOS devices without requiring a jailbreak. Try running it with the listen phase. If ios_deploy can detect your device it will print a message:</p> <pre><code>$ ios_deploy listen\nDevice connected:\n- name:    iPhone SE 2\n- model:   iPhone SE 2\n- ios ver: 13.4\n- build:   17E8255\n- arch:    arm64e\n- id:      XXXXXXXX-XXXXXXXXXXXXXXXX\n</code></pre> <p>Use the mount phase to install DeveloperDiskImage.dmg, which contains the debugserver:</p> <pre><code>$ export DEVELOPER=/Applications/Xcode.app/Contents/Developer\n$ export DEVTOOLS=$DEVELOPER/Platforms/iPhoneOS.platform/DeviceSupport\n$ ios_deploy mount -d $DEVTOOLS/13.4/DeveloperDiskImage.dmg\n</code></pre> <p>The device itself is now ready for debugging. Now let's switch to IDA and start configuring the debugger. Load the idatest binary in IDA, Xcode likely put it somewhere in its DerivedData directory:</p> <pre><code>$ alias ida64=\"/Applications/IDA\\ Pro\\ 7.5\\ sp1/ida64.app/Contents/MacOS/ida64\"\n$ export XCDATA=~/Library/Developer/Xcode/DerivedData\n$ ida64 $XCDATA/idatest/Build/Products/Debug-iphoneos/idatest.app/idatest\n</code></pre> <p>Then go to menu Debugger&gt;Select debugger... and select Remote iOS Debugger:</p> <p></p> <p>When debugging a binary remotely, IDA must know the full path to the executable on the target device. This is another task that iOS makes surprisingly difficult. Details of the filesystem are not advertised, so we must use ios_deploy to retrieve the executable path. Use the path phase with the app's bundle ID:</p> <pre><code>$ ios_deploy path -b primer.idatest\n/private/var/containers/Bundle/Application/&lt;UUID&gt;/idatest.app/idatest\n</code></pre> <p>Use this path for the fields in Debugger&gt;Process options... </p> <p>NOTE: the path contains a hex string representing the application's 16-byte UUID. This id is regenerated every time you reinstall the app, so you must update the path in IDA whenever the app is updated on the device.</p> <p>Now go to Debugger&gt;Debugger options&gt;Set specific options... and ensure the following fields are set:</p> <p></p> <p>Make special note of the Symbol path option. This directory contains symbol files extracted from your device. Both IDA and Xcode use these files to load symbol tables for system libraries during debugging (instead of reading the tables in process memory), which will dramatically speed up debugging.</p> <p>Xcode likely already created this directory when it first connected to your device, but if not you can always use ios_deploy to create it yourself:</p> <pre><code>$ ios_deploy symbols\nDownloading /usr/lib/dyld\nDownloading 0.69 MB of 0.69 MB\nDownloading /System/Library/Caches/com.apple.dyld/dyld_shared_cache_arm64e\nDownloading 1648.38 MB of 1648.38 MB\nExtracting symbol file: 1866/1866\n/Users/troy/Library/Developer/Xcode/iOS DeviceSupport/13.4 (17E8255)/Symbols: done\n</code></pre> <p>Also ensure that the Launch debugserver automatically option is checked. This is required for non-jailbroken devices since we have no way to launch the server manually. This option instructs IDA to establish a connection to the debugserver itself via the MacOS Frameworks, which will happen automatically at debugging start.</p> <p>Lastly, Xcode might have launched the test application after installing it. Use the proclist phase to retreive the app's pid and terminate it with the kill phase:</p> <pre><code>$ ios_deploy proclist -n idatest\n32250\n$ ios_deploy kill -p 32250\n</code></pre> <p>Finally we are ready to launch the debugger. Go to main in IDA's disassembly view, use F2 to set a breakpoint, then F9 to launch the process, and wait for the process to hit our breakpoint:</p> <p></p> <p>You are free to single step, inspect registers, and read/write memory just like any other IDA debugger.</p>"},{"location":"user-guide/debugger/tutorials/debugger_ios/ios_debugger_primer2.html#source-level-debugging","title":"Source Level Debugging","text":"<p>You can also use IDA to debug the source code of your iOS application. Let's rebuild the idatest application with the DWARF with dSYM File build setting:</p> <p></p> <p>Since the app is reinstalled, the executable path will change. We'll need to update the remote path in IDA:</p> <pre><code>$ ios_deploy path -b primer.idatest\n</code></pre> <p></p> <p>Be sure to enable Debugger&gt;Use source-level debugging, then launch the process. At runtime IDA will be able to load the DWARF source information:</p> <p></p> <p>Note that the debugserver does not provide DWARF information to IDA - instead IDA looks for dSYM bundles in the vicinity of the idb on your local filesystem. Thus if you want IDA to load DWARF info for a given module, both the module binary and its matching dSYM must be in the same directory as the idb, or in the idb's parent directory.</p> <p>For example, in the case of the idatest build:</p> <pre><code>$ tree\n.\n\u251c\u2500\u2500 idatest.app\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 idatest\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 idatest.i64\n\u2514\u2500\u2500 idatest.app.dSYM\n    \u2514\u2500\u2500 Contents\n        \u2514\u2500\u2500 Resources\n            \u2514\u2500\u2500 DWARF\n                \u2514\u2500\u2500 idatest\n</code></pre> <p>IDA was able to find the idatest binary next to idatest.i64, as well as the dSYM bundle next to the parent app directory.</p> <p>If IDA can't find DWARF info on your filesystem for whatever reason, try launching IDA with the command-line option -z440010, which will enable much more verbose logging related to source-level debugging:</p> <pre><code>Looking for Mach-O file \"idatest.app/idatest.dSYM/Contents/Resources/DWARF/idatest\"\nFile \"idatest.app/idatest.dSYM/Contents/Resources/DWARF/idatest\" exists? -&gt; No.\nLooking for Mach-O file \"idatest.app.dSYM/Contents/Resources/DWARF/idatest\"\nFile \"idatest.app.dSYM/Contents/Resources/DWARF/idatest\" exists? -&gt; Yes.\nLooking for cpu=16777228:0, uuid=7a09f307-7503-3c0d-a182-ab552c1bf182.\nCandidate: cpu=16777228:0, uuid=7a09f307-7503-3c0d-a182-ab552c1bf182.\nFound, with architecture #0\nDWARF: Found DWARF file \"idatest.app.dSYM/Contents/Resources/DWARF/idatest\"\n</code></pre>"},{"location":"user-guide/debugger/tutorials/debugger_ios/ios_debugger_primer2.html#debugging-dyld","title":"Debugging DYLD","text":"<p>IDA can also be used to debug binaries that are not user applications. For example, dyld.</p> <p>The ability to debug dyld is a nice advantage because it allows us to observe critical changes in the latest versions of iOS (especially regarding the shared cache) before a jailbreak is even available. We document this functionality here in the hopes it will be useful to others as well.</p> <p>In this example we'll be using IDA to discover how dyld uses ARMv8.3 Pointer Authentication to perform secure symbol bindings. Start by loading the dyld binary in IDA. It is usually found here:</p> <pre><code>~/Library/Developer/Xcode/iOS DeviceSupport/13.4 (17E8255)/Symbols/usr/lib/dyld\n</code></pre> <p>The target application will be a trivial helloworld program:</p> <pre><code>#include &lt;stdio.h&gt;\n\nint main(void)\n{\n  puts(\"hello, world!\\n\");\n  return 0;\n}\n</code></pre> <p>Compile and install this app on your device, then set the following fields in Debugger&gt;Process options...</p> <p></p> <p>Under Debugger&gt;Debugger options, enable Suspend on debugging start. This will instruct IDA to suspend the process at dyld's entry point, before it has begun binding symbols. Now launch the process with F9 - immediately the process will be suspended at __dyld_start:</p> <p></p> <p>Double-click on the helloworld module to bring up its symbol list and go to the _main function:</p> <p></p> <p>Note that function sub_1009CBF98 is the stub for puts:</p> <p></p> <p>The stub reads a value from off_109CC000, then performs a branch with pointer authentication. We can assume that at some point, dyld will fill off_109CC000 with an authenticated pointer to puts. Let's use IDA to quickly track down this logic in dyld.</p> <p>The iOS debugger supports watchpoints. Now would be a good time to use one:</p> <pre><code>ida_dbg.add_bpt(0x1009CC000, 8, BPT_WRITE)\n</code></pre> <p>Resume the process and wait for dyld to trigger our watchpoint:</p> <p></p> <p>The instruction STR X21 [X19] triggered the watchpoint, and note the value in X21 (BB457A81BA95ADD8) which is the authenticated pointer to puts. Where did this value come from? We can see that X21 was previously set with MOV X21, X0 after a call to this function:</p> <pre><code>dyld3::MachOLoaded::ChainedFixupPointerOnDisk::Arm64e::signPointer\n</code></pre> <p>It seems like we're on the right track. Also note that IDA was able to extract a nice stack trace despite dyld's heavy use of PAC instructions to authenticate return addresses on the stack:</p> <pre><code>Address    Module  Function\n100CA5E14  dyld    ____ZNK5dyld311MachOLoaded21fixupAllChainedFixups_block_invoke\n100CA5EEC  dyld    dyld3::MachOLoaded::walkChain\n100CA5BF0  dyld    dyld3::MachOLoaded::forEachFixupInAllChains\n100CA5B50  dyld    dyld3::MachOLoaded::fixupAllChainedFixups\n100CA2210  dyld    ____ZN5dyld36Loader18applyFixupsToImage_block_invoke.68\n100CB0218  dyld    dyld3::MachOAnalyzer::withChainStarts\n100CA2004  dyld    ____ZN5dyld36Loader18applyFixupsToImage_block_invoke_3\n100CB3314  dyld    dyld3::closure::Image::forEachFixup\n100CA15EC  dyld    dyld3::Loader::applyFixupsToImage\n100CA0A00  dyld    dyld3::Loader::mapAndFixupAllImages\n100C88784  dyld    dyld::launchWithClosure\n100C86BE0  dyld    dyld::_main\n100C81228  dyld    dyldbootstrap::start\n100C81034  dyld    __dyld_start\n</code></pre> <p>This leads us to the following logic in the dyld-733.6 source:</p> <pre><code>// authenticated bind\nnewValue = (void*)(bindTargets[fixupLoc-&gt;arm64e.bind.ordinal]);\nif (newValue != 0)\n    newValue = (void*)fixupLoc-&gt;arm64e.signPointer(fixupLoc, newValue);\n</code></pre> <p>Here, fixupLoc (off_109CC00) and newValue (address of puts) are passed as the loc and target arguments for Arm64e::signPointer:</p> <pre><code>uint64_t discriminator = authBind.diversity;\nif ( authBind.addrDiv )\n    discriminator = __builtin_ptrauth_blend_discriminator(loc, discriminator);\nswitch ( authBind.key ) {\n  case 0: // IA\n    return __builtin_ptrauth_sign_unauthenticated(target, 0, discriminator);\n  case 1: // IB\n    return __builtin_ptrauth_sign_unauthenticated(target, 1, discriminator);\n  case 2: // DA\n    return __builtin_ptrauth_sign_unauthenticated(target, 2, discriminator);\n  case 3: // DB\n    return __builtin_ptrauth_sign_unauthenticated(target, 3, discriminator);\n}\n</code></pre> <p>Thus, the pointer to puts is signed using its destination address in helloworld:__auth_got as salt for the signing operation. This is quite clever because the salt value is subject to ASLR and therefore cannot be guessed, but at this point the executable has already been loaded into memory \u2013 so it won\u2019t change by the time the pointer is verified in the stub.</p> <p>To see this in action, use F4 to run to the BRAA instruction in the stub and note the values of the operands:</p> <p> </p> <p>The branch will use the operands to verify that the target address has not been modified after it was originally calculated by dyld. Since we haven't done anything malicious, one more single step should take us right to puts:</p> <p></p> <p>Just for fun, let's rewind the process back to the start of the stub:</p> <pre><code>IDC&gt;PC = 0x1009CBF98\n</code></pre> <p>Then overwrite the authenticated pointer to puts with a raw pointer to printf:</p> <pre><code>ida_bytes.put_qword(0x1009CC000, ida_name.get_name_ea(BADADDR, \"_printf\"))\n</code></pre> <p>Now when we step through the stub, the BRAA instruction should detect that the authenticated pointer has been modified, and it will purposefully crash the application by setting PC to an invalid address:</p> <p></p> <p>Any attempt to resume execution will inevitably fail:</p> <p></p> <p>It seems we now have an understanding of secure symbol bindings in dyld. Fascinating!</p>"},{"location":"user-guide/debugger/tutorials/debugger_ios/ios_debugger_primer2.html#debugging-the-dyld-shared-cache","title":"Debugging the DYLD Shared Cache","text":"<p>This section discusses how to optimally debug system libraries in a dyld_shared_cache.</p> <p><code>NOTE: full support for dyld_shared_cache debugging requires IDA 7.5 SP1</code></p> <p>Debugging iOS system libraries is a challenge because the code is only available in the dyld cache. IDA allows you to load a library directly from the cache, but this has its own complications. A single module typically requires loading several other modules before the analysis becomes useful. Fortunately IDA is aware of these annoyances and allows you to debug such code with minimal effort.</p> <p>To start, consider the following sample application that uses the CryptoTokenKit framework:</p> <pre><code>#import &lt;CryptoTokenKit/CryptoTokenKit.h&gt;\n\nint main(void)\n{\n  TKTokenWatcher *watcher = [[TKTokenWatcher alloc] init];\n  NSArray *tokens = [watcher tokenIDs];\n  for ( int i = 0; i &lt; [tokens count]; i++ )\n    printf(\"%s\\n\", [[tokens objectAtIndex:i] UTF8String]);\n  return 0;\n}\n</code></pre> <p>Assume this program has been compiled and installed on the device as ctk.app.</p> <p>Instead of debugging the test application, let's try debugging the CryptoTokenKit framework itself - focusing specifically on the -[TKTokenWatcher init] method.</p>"},{"location":"user-guide/debugger/tutorials/debugger_ios/ios_debugger_primer2.html#initial-analysis","title":"Initial Analysis","text":"<p>First we'll need access to the dyldcache that contains the CryptoTokenKit framework. The best way to obtain the cache is to extract it from the ipsw package for your device/iOS version. This ensures that you are working with the original untouched cache that was installed on your device.</p> <p>When opening the cache in IDA, choose the load option Apple DYLD cache for arm64e (single module) and select the CryptoTokenKit module:</p> <p></p> <p>Wait for IDA to finish the initial analysis of CryptoTokenKit. Immediately we might notice that the analysis suffers because of references to unloaded code. Most notably many Objective-C methods are missing a prototype, which is unusual:</p> <p></p> <p>However this is expected. Modern dyld caches store all Objective-C class names and method selectors inside the libobjc module. Objective-C analysis is practically useless without these strings, so we must load the libobjc module to access them. Since a vast majority of modules depend on libobjc in such a way, it is a good idea to automate this in a script.</p> <p>For a quick fix, save the following idapython code as init.py:</p> <pre><code># improve functions with branches to unloaded code\nidaapi.cvar.inf.af &amp;= ~AF_ANORET\n\ndef dscu_load_module(module):\n    node = idaapi.netnode()\n    node.create(\"$ dscu\")\n    node.supset(2, module)\n    load_and_run_plugin(\"dscu\", 1)\n\n# load libobjc, then analyze objc types\ndscu_load_module(\"/usr/lib/libobjc.A.dylib\")\nload_and_run_plugin(\"objc\", 1) \n</code></pre> <p>Then reopen the cache with:</p> <pre><code>$ ida64 -Sinit.py -Oobjc:+l dyld_shared_cache_arm64e\n</code></pre> <p>This will tell IDA to load libobjc immediately after the database is created, then perform the Objective-C analysis once all critical info is in the database. This should make the initial analysis acceptable in most cases. In the case of CryptoTokenKit, we see that the Objective-C prototypes are now correct:</p> <p></p> <p>Now let's go to the -[TKTokenWatcher init] method invoked by the ctk application:</p> <p></p> <p>If we right-click on the unmapped address 0x1B271C01C, IDA provides two options in the context menu:</p> <p></p> <p>In this case the better option is Load ProVideo:__auth_stubs, which loads only the stubs from the module and properly resolves the names:</p> <p></p> <p>This is a common pattern in the latest arm64e dyldcaches, and it is quite convenient for us. Loading a handful of __auth_stubs sections is enough to resolve most of the calls in CryptoTokenKit, which gives us some nice analysis for -[TKTokenWatcher init] and its helper method:</p> <p> </p>"},{"location":"user-guide/debugger/tutorials/debugger_ios/ios_debugger_primer2.html#debugger-configuration","title":"Debugger Configuration","text":"<p>Now that the static analysis is on par with a typical iOS binary, let's combine it with dynamic analysis. We can debug this database by setting the following options in Debugger&gt;Process options:</p> <p></p> <p>Here we set the Input file field to the full path of the CryptoTokenKit module. This allows IDA to easily detect the dyldcache slide at runtime. When CryptoTokenKit is loaded into the process, IDA will compare its runtime load address to the imagebase in the current idb, then rebase the database accordingly.</p> <p>By default the imagebase in the idb corresponds to the first module that was loaded:</p> <pre><code>IDC&gt;msg(\"%a\", get_imagebase())\nCryptoTokenKit:HEADER:00000001B8181000\n</code></pre> <p>Thus, it is easiest to set Input file to the module corresponding to the default imagebase.</p> <p>Note however that we could also use this configuration:</p> <p></p> <p>Provided that we update the imagebase in the idb to the base of the libobjc module:</p> <pre><code>ida_nalt.set_imagebase(ida_segment.get_segm_by_name(\"libobjc.A:HEADER\").start_ea)\n</code></pre> <p>This will result in the same dyld slide and should work just as well, because the the imagebase and the Input file field both correspond to the same module. This is something to keep in mind when debugging dyldcache idbs that contain multiple libraries.</p> <p>Now let's try launching the debugger. Set a breakpoint at -[TKTokenWatcher initWithClient:], use F9 to launch the process, then wait for our breakpoint to be hit:</p> <p></p> <p>IDA was able to map our database (including CryptoTokenKit, libobjc, and the satellite __auth_stubs sections) into process memory. We can single step, resume, inspect registers, and perform any other operation that is typical of an IDA debugging session.</p>"},{"location":"user-guide/debugger/tutorials/debugger_ios/ios_debugger_primer2.html#further-analysis","title":"Further Analysis","text":"<p>Note that after terminating the debugging session you can continue to load new modules from the cache. If a dyld slide has been applied to the database, new modules will be correctly loaded into the rebased address space. This did not work in previous versions of IDA.</p> <p>For example, after a debugging session we might notice some more unresolved calls:</p> <p></p> <p>IDA is aware that the address space has shifted, and it will load the new code at the correct address:</p> <p></p> <p>You are free to load new modules and relaunch debugging sessions indefinitely.</p>"},{"location":"user-guide/debugger/tutorials/debugger_ios/ios_debugger_primer2.html#debugging-system-applications","title":"Debugging System Applications","text":"<p>The previous examples used custom applications to demonstrate IDA's debugging capabilities. In this case IDA can utilize the debugserver included in Apple's iOS developer tools, but there are situations in which this server is not sufficient for our needs.</p> <p>The debugserver will refuse to debug any application that we didn't build ourselves. To demonstrate this, try launching IDA with an empty database and use Debugger&gt;Attach&gt;Remote iOS Debugger to attach to one of the system daemons:</p> <p></p> <p>You will likely get this error message:</p> <p></p> <p>It is possible to install a custom version of the debugserver that can debug system processes, but this requires a jailbroken device. We document the necessary steps and IDA configuration here. The device used in this example is an iPhone 8 with iOS 13.2.2, jailbroken with checkra1n 0.10.1.</p>"},{"location":"user-guide/debugger/tutorials/debugger_ios/ios_debugger_primer2.html#patching-the-debugserver","title":"Patching the debugserver","text":"<p>First we must obtain a copy of the debugserver binary from the DeveloperDiskImage.dmg:</p> <pre><code>$ export DEVELOPER=/Applications/Xcode.app/Contents/Developer\n$ export DEVTOOLS=$DEVELOPER/Platforms/iPhoneOS.platform/DeviceSupport\n$ hdiutil mount $DEVTOOLS/13.2/DeveloperDiskImage.dmg\n$ cp /Volumes/DeveloperDiskImage/usr/bin/debugserver .\n</code></pre> <p>Now save the following xml as entitlements.plist:</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/ PropertyList-1.0.dtd\"&gt;\n&lt;plist version=\"1.0\"&gt;\n&lt;dict&gt;\n    &lt;key&gt;task_for_pid-allow&lt;/key&gt; &lt;true/&gt;\n    &lt;key&gt;get-task-allow&lt;/key&gt; &lt;true/&gt;\n    &lt;key&gt;platform-application&lt;/key&gt; &lt;true/&gt;\n    &lt;key&gt;com.apple.springboard.debugapplications&lt;/key&gt; &lt;true/&gt;\n    &lt;key&gt;run-unsigned-code&lt;/key&gt; &lt;true/&gt;\n    &lt;key&gt;com.apple.system-task-ports&lt;/key&gt; &lt;true/&gt;\n&lt;/dict&gt; \n&lt;/plist&gt;\n</code></pre> <p>Then use ldid to codesign the server:</p> <pre><code>$ ldid -Sentitlements.plist debugserver\n</code></pre> <p>This will grant the debugserver permission to debug any application, including system apps. Now we can copy the server to the device and run it:</p> <pre><code>$ scp debugserver root@iphone-8:/usr/bin/\n$ ssh root@iphone-8\niPhone-8:~ root# /usr/bin/debugserver 192.168.1.7:1234\ndebugserver-@(#)PROGRAM:LLDB  PROJECT:lldb-900.3.98 for arm64.\nListening to port 1234 for a connection from 192.168.1.7...\n</code></pre> <p>Note that we specified 192.168.1.7 which is the IP of the host machine used in this example. Be sure to replace this with the IP of your host so that the server will accept incoming connections from IDA.</p>"},{"location":"user-guide/debugger/tutorials/debugger_ios/ios_debugger_primer2.html#ida-configuration","title":"IDA Configuration","text":"<p>To enable debugging with the patched debugserver, set the following options in dbg_ios.cfg:</p> <pre><code>// don't launch the debugserver. we did it manually\nAUTOLAUNCH = NO\n// your device's UUID. this is used when fetching the remote process list\nDEVICE_ID = \"\";\n// debugging symbols extracted by Xcode\nSYMBOL_PATH = \"~/Library/Developer/Xcode/iOS DeviceSupport/13.2.2 (17B102)/Symbols\";\n</code></pre> <p>We're now ready to open a binary in IDA and debug it. Copy the itunesstored binary from your device, it is typically found here:</p> <pre><code>/System/Library/PrivateFrameworks/iTunesStore.framework/Support/itunesstored\n</code></pre> <p>After loading the binary use Debugger&gt;Select debugger and choose Remote iOS Debugger, then under Debugger&gt;Process options set the following fields:</p> <p></p> <p>Since we set AUTOLAUNCH = NO, IDA now provides the Hostname and Port fields so we can specify how to connect to our patched debugserver instance.</p> <p>Now use Debugger&gt;Attach to process and choose itunesstored from the process list. Since we have modified the debugserver it should agree to debug the target process, allowing IDA to create a typically robust debugging environment:</p> <p>\\</p> <p>Note that although we're not using the debugserver from DeveloperDiskImage.dmg, IDA still depends on other developer tools to query the process list. We discuss how to install the DeveloperDiskImage in the Getting Started section above, but for a quick workaround you can always just specify the PID manually:</p> <p></p> <p>Now that we've successfully attached to a system process, let's do something interesting with it. Consider the method -[PurchaseOperation initWithPurchase:]. This logic seems to be invoked when a transaction is performed in the AppStore. Set a breakpoint at this method, then open the AppStore on your device and try downloading an app (it can be any app, even a free one).</p> <p>Immediately our breakpoint is hit, and we can start unwinding the logic that brought us here:</p> <p></p> <p>Stepping through this function, we see many Objective-C method call sites:</p> <p></p> <p>Instead of using F7 to step into the _objc_msgSend function, we can use shortcut Shift-O to take us directly to the Objective-C method that is being invoked:</p> <p></p> <p>We discuss the Shift-O action in detail in our mac debugger primer, but it is worth demonstrating that this action works just as well in arm64/iOS environments.</p> <p>It seems that we're well on our way to reverse-engineering transactions in the AppStore. The remaining work is left as an exercise for the reader :)</p>"},{"location":"user-guide/debugger/tutorials/debugger_ios/ios_debugger_primer2.html#conclusion","title":"Conclusion","text":"<p>Hopefully by now we've shown that IDA's iOS Debugger is quite versatile. It can play by Apple's rules when debugging on a non-jailbroken device, and it can also be configured to use an enhanced debugserver when a jailbreak is available.</p> <p>Also keep in mind that all previous examples in this writeup should work equally well with the patched debugserver. We encourage you to go back and try them.</p> <p>\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\</p>"},{"location":"user-guide/debugger/tutorials/debugger_ios/ios_debugger_primer2.html#troubleshooting","title":"Troubleshooting","text":"<p>IDA uses the Remote GDB Protocol to communicate with the iOS debugserver. Thus, the best way to diagnose possible issues is to log the packets transmitted between IDA and the server. You can do this by running IDA with the -z10000 command-line option:</p> <pre><code>$ ida64 -z10000 -L/tmp/ida.log\n</code></pre> <p>Often times these packets contain messages or error codes that provide clues to the issue.</p> <p>For more enhanced troubleshooting, you can also enable logging on the server side. Go to Debugger&gt;Debugger options&gt;Set specific options and set the Syslog flags field:</p> <p></p> <p>This will instruct the debugserver to log details about the debugging session to the iOS system log (all valid flags are documented under the SYSLOG_FLAGS option in dbg_ios.cfg).</p> <p>Start collecting the iOS system log with:</p> <pre><code>$ ios_deploy syslog -f /tmp/sys.log\n</code></pre> <p>Then launch the debugger. Now both the client (/tmp/ida.log) and the server (/tmp/sys.log) will log important events in the debugger session, which will often times reveal the issue.`</p>"},{"location":"user-guide/debugger/tutorials/debugger_ios/ios_debugger_primer2.html#notes","title":"Notes","text":"<p>This tutorial replaces the old iOS debugging tutorial, which is available here.</p>"},{"location":"user-guide/debugger/tutorials/debugger_linux_local/debugger_linux_local.html","title":"IDA Linux Local Debugging","text":""},{"location":"user-guide/debugger/tutorials/debugger_linux_local/debugger_linux_local.html#debugging-linux-applications-with-ida-pro-locally","title":"Debugging Linux Applications with IDA Pro, locally","text":"<p>Last updated on July 29, 2020 \u2014 v0.1</p> <p>You may already know that IDA lets you debug an application from an already existing IDB, by selecting the debugger using the drop-down debugger list.</p> <p>However, it is also possible to start IDA in a way that it will initially create an empty IDB, and then either:</p> <ul> <li>start a new process under its control</li> <li>attach to an existing process</li> </ul>"},{"location":"user-guide/debugger/tutorials/debugger_linux_local/debugger_linux_local.html#launch-ida-with-a-fresh-new-process","title":"Launch IDA with a fresh new process","text":"<p>To do so, you will have to launch IDA from the command line, like so:</p> <pre><code>ida -rlinux /bin/ls\n</code></pre> <p>IDA will then launch the /bin/ls program, and break at its entrypoint</p>"},{"location":"user-guide/debugger/tutorials/debugger_linux_local/debugger_linux_local.html#attaching-ida-to-an-existing-process","title":"Attaching IDA to an existing process","text":"<p>For this example, we\u2019ll launch, from a shell, a /usr/bin/yes process, and attach to.</p> <p>Now, we\u2019ll launch IDA so it offers a selection of processes to (and use quick filtering (Ctrl+F) to quickly find our process):</p> <pre><code>ida -rlinux+\n</code></pre> <p>IDA will then attach to the selected process, and leave it suspended at the place it was when it was attached to:</p>"},{"location":"user-guide/debugger/tutorials/debugger_mac/mac_debugger_primer2.html","title":"Debugging Mac OSX Applications with IDA Pro","text":""},{"location":"user-guide/debugger/tutorials/debugger_mac/mac_debugger_primer2.html#debugging-mac-osx-applications-with-ida-pro_1","title":"Debugging Mac OSX Applications with IDA Pro","text":"<p>Last updated on March 6, 2021 \u2014 v2.0</p>"},{"location":"user-guide/debugger/tutorials/debugger_mac/mac_debugger_primer2.html#overview","title":"Overview","text":"<p>IDA Pro fully supports debugging native macOS applications.</p> <p>Intel x86/64 debugging has been supported since IDA 5.6 (during OSX 10.5 Leopard), but due to IDA\u2019s use of libc++ we can only officially support debugging on OSX 10.9 Mavericks and later. Apple Silicon arm64 debugging for macOS11 is also supported since IDA 7.6.</p> <p>Note that this task is riddled with gotchas, and often times it demands precise workarounds that are not required for other platforms. In this tutorial we will purposefully throw ourselves into the various pitfalls of debugging on a Mac, in the hopes that learning things the hard way will ultimately lead to a smoother experience overall.</p> <p>Begin by downloading samples:</p> <p>{% file src=\"samples.zip\" %}</p> <p>which contains the sample applications used in this writeup.</p>"},{"location":"user-guide/debugger/tutorials/debugger_mac/mac_debugger_primer2.html#codesigning-permissions","title":"Codesigning &amp; Permissions","text":"<p>It is important to note that a debugger running on macOS requires special permissions in order to function properly. This means that the debugger itself must be codesigned in such a way that MacOS allows it to inspect other processes.</p> <p>The main IDA Pro application is not codesigned in this way. Later on we\u2019ll discuss why.</p> <p>To quickly demonstrate this, let\u2019s open a binary in IDA Pro and try to debug it. In this example we\u2019ll be debugging the helloworld app from samples.zip:</p> <p>{% file src=\"samples.zip\" %}</p> <p>on MacOSX 10.15 Catalina using IDA 7.5. Begin by loading the file in IDA:</p> <pre><code>$ alias ida64=\"/Applications/IDA\\ Pro\\ 7.5/ida64.app/Contents/MacOS/ida64\"\n$ ida64 helloworld\n</code></pre> <p>Now go to menu Debugger&gt;Select debugger and select Local Mac OS X Debugger:</p> <p>Immediately IDA should print a warning message to the Output window:</p> <pre><code>This program must either be codesigned or run as root to debug mac applications.\n</code></pre> <p>This is because IDA is aware that it is not codesigned, and is warning you that attempting to debug the target application will likely fail. Try launching the application with shortcut F9. You will likely get this error message:</p> <p>Codesigning IDA Pro might resolve this issue, but we have purposefully decided not to do this. Doing so would require refactoring IDA\u2019s internal plugin directory structure so that it abides by Apple\u2019s bundle structure guidelines. This would potentially break existing plugins as well as third-party plugins written by users. We have no plans to inconvenience our users in such a way.</p> <p>Also note that running IDA as root will allow you to use the Local Mac OS X Debugger without issue, but this is not advisable.</p> <p>A much better option is to use IDA\u2019s mac debug server - discussed in detail in the next section.</p>"},{"location":"user-guide/debugger/tutorials/debugger_mac/mac_debugger_primer2.html#using-the-mac-debug-server","title":"Using the Mac Debug Server","text":"<p>A good workaround for the debugging restrictions on macOS is to use IDA\u2019s debug server - even when debugging local apps on your mac machine. The mac debug server is a standalone application that communicates with IDA Pro via IPC, so we can ship it pre-codesigned and ready for debugging right out of the box:</p> <pre><code>$ codesign -dvv /Applications/IDA\\ Pro\\ 7.5/idabin/dbgsrv/mac_server64\nExecutable=/Applications/IDA Pro 7.5/ida.app/Contents/MacOS/dbgsrv/mac_server64\nIdentifier=com.hexrays.mac_serverx64\nFormat=Mach-O thin (x86_64)\nCodeDirectory v=20100 size=6090 flags=0x0(none) hashes=186+2 location=embedded\nSignature size=9002\nAuthority=Developer ID Application: Hex-Rays SA (ZP7XF62S2M)\nAuthority=Developer ID Certification Authority\nAuthority=Apple Root CA\nTimestamp=May 19, 2020 at 4:13:31 AM\n</code></pre> <p>Let\u2019s try launching the server:</p> <pre><code>$ /Applications/IDA\\ Pro\\ 7.5/idabin/dbgsrv/mac_server64\nIDA Mac OS X 64-bit remote debug server(MT) v7.5.26. Hex-Rays (c) 2004-2020\nListening on 0.0.0.0:23946...\n</code></pre> <p>Now go back to IDA and use menu Debugger&gt;Switch debugger to switch to remote debugging:</p> <p>Now use Debugger&gt;Process options to set the Hostname and Port fields to localhost and 23946.</p> <p>(Note that the port number was printed by mac_server64 after launching it):</p> <p>Also be sure to check the option Save network settings as default so IDA will remember this configuration.</p> <p>Now go to _main in the helloworld disassembly, press F2 to set a breakpoint, then F9 to launch the process. Upon launching the debugger you might receive this prompt from the OS:</p> <p>macOS is picky about debugging permissions, and despite the fact that mac_server is properly codesigned you still must explicitly grant it permission to take control of another process. Thankfully this only needs to be done once per login session, so macOS should shut up until the next time you log out (we discuss how to disable this prompt entirely in the Debugging Over SSH section below).</p> <p>After providing your credentials the debugger should start up without issue:</p>"},{"location":"user-guide/debugger/tutorials/debugger_mac/mac_debugger_primer2.html#using-a-launch-agent","title":"Using a Launch Agent","text":"<p>To simplify using the mac server, save the following XML as com.hexrays.mac_server64.plist in \\~/Library/LaunchAgents/:</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\"&gt;\n&lt;plist version=\"1.0\"&gt;\n&lt;dict&gt;\n    &lt;key&gt;Label&lt;/key&gt;\n    &lt;string&gt;com.hexrays.mac_server64&lt;/string&gt;\n    &lt;key&gt;ProgramArguments&lt;/key&gt;\n    &lt;array&gt;\n        &lt;string&gt;/Applications/IDA Pro 7.5/dbgsrv/mac_server64&lt;/string&gt;\n        &lt;string&gt;-i&lt;/string&gt;\n        &lt;string&gt;localhost&lt;/string&gt;\n    &lt;/array&gt;\n    &lt;key&gt;StandardOutPath&lt;/key&gt;\n    &lt;string&gt;/tmp/mac_server64.log&lt;/string&gt;\n    &lt;key&gt;StandardErrorPath&lt;/key&gt;\n    &lt;string&gt;/tmp/mac_server64.log&lt;/string&gt;\n    &lt;key&gt;KeepAlive&lt;/key&gt;\n    &lt;true/&gt;\n&lt;/dict&gt;\n&lt;/plist&gt;\n</code></pre> <p>Now mac_server64 will be launched in the background whenever you log in. You can connect to it from IDA at any time using the Remote Mac OS X Debugger option. Hopefully this will make local debugging on macOS almost as easy as other platforms.</p>"},{"location":"user-guide/debugger/tutorials/debugger_mac/mac_debugger_primer2.html#debugging-system-applications","title":"Debugging System Applications","text":"<p>There are some applications that macOS will refuse to allow IDA to debug.</p> <p>For example, load /System/Applications/Calculator.app/Contents/MacOS/Calculator in IDA and try launching the debugger. You will likely get this error message:</p> <p>Despite the fact that mac_server64 is codesigned, it still failed to retrieve permission from the OS to debug the target app. This is because Calculator.app and all other apps in /System/Applications/ are protected by System Integrity Protection and they cannot be debugged until SIP is disabled. Note that the error message is a bit misleading because it implies that running mac_server64 as root will resolve the issue - it will not. Not even root can debug apps protected by SIP.</p> <p>Disabling SIP allows IDA to debug applications like Calculator without issue:</p> <p>The effects of SIP are also apparent when attaching to an existing process. Try using menu Debugger&gt;Attach to process, with SIP enabled there will likely only be a handful of apps that IDA can debug:</p> <p>Disabling SIP makes all system apps available for attach:</p> <p>It is unfortunate that such drastic measures are required to inspect system processes running on your own machine, but this is the reality of MacOS. We advise that you only disable System Integrity Protection when absolutely necessary, or use a virtual machine that can be compromised with impunity.</p>"},{"location":"user-guide/debugger/tutorials/debugger_mac/mac_debugger_primer2.html#debugging-system-libraries","title":"Debugging System Libraries","text":"<p>With IDA you can debug any system library in /usr/lib/ or any framework in /System/Library/.</p> <p>This functionality is fully supported, but surprisingly it is one of the hardest problems the mac debugger must handle. To demonstrate this, let\u2019s try debugging the _getaddrinfo function in libsystem_info.dylib.</p> <p>Consider the getaddrinfo application from samples.zip:</p> <p>{% file src=\"samples.zip\" %}</p> <pre><code>#include &lt;sys/types.h&gt;\n#include &lt;sys/socket.h&gt;\n#include &lt;netdb.h&gt;\n#include &lt;netinet/in.h&gt;\n#include &lt;arpa/inet.h&gt;\n#include &lt;string.h&gt;\n#include &lt;stdio.h&gt;\n\nint main(int argc, char **argv)\n{\n  if ( argc != 2 )\n  {\n    fprintf(stderr, \"usage: %s &lt;hostname&gt;\\n\", argv[0]);\n    return 1;\n  }\n\n  struct addrinfo hints;\n  memset(&amp;hints, 0, sizeof(hints));\n\n  hints.ai_family = AF_INET;\n  hints.ai_flags |= AI_CANONNAME;\n\n  struct addrinfo *result;\n  int code = getaddrinfo(argv[1], NULL, &amp;hints, &amp;result);\n  if ( code != 0 )\n  {\n    fprintf(stderr, \"failed: %d\\n\", code);\n    return 2;\n  }\n\n  struct sockaddr_in *addr_in = (struct sockaddr_in *)result-&gt;ai_addr;\n  char *ipstr = inet_ntoa(addr_in-&gt;sin_addr);\n  printf(\"IP address: %s\\n\", ipstr);\n\n  return 0;\n}\n</code></pre> <p>Try testing it out with a few hostnames:</p> <pre><code>$ ./getaddrinfo localhost\nIP address: 127.0.0.1\n$ ./getaddrinfo hex-rays.com\nIP address: 104.26.10.224\n$ ./getaddrinfo foobar\nfailed: 8\n</code></pre> <p>Now load libsystem_info.dylib in IDA and set a breakpoint at _getaddrinfo:</p> <pre><code>$ ida64 -o/tmp/libsystem_info /usr/lib/system/libsystem_info.dylib\n</code></pre> <p>Choose Remote Mac OS X Debugger from the Debugger menu and under Debugger&gt;Process options be sure to provide a hostname in the Parameters field. IDA will pass this argument to the executable when launching it:</p> <p>Before launching the process, use Ctrl+S to pull up the segment list for libsystem_info.dylib. Pay special attention to the __eh_frame and __nl_symbol_ptr segments. Note that they appear to be next to each other in memory:</p> <p>This will be important later.</p> <p>Finally, use F9 to launch the debugger and wait for our breakpoint at _getaddrinfo to be hit. We can now start stepping through the logic:</p> <p>Everything appears to be working normally, but use Ctrl+S to pull up the segment information again. We can still see __eh_frame, but it looks like __nl_symbol_ptr has gone missing:</p> <p>It is actually still present, but we find it at a much higher address:</p> <p>Recall that we opened the file directly from the filesystem (/usr/lib/system/libsystem_info.dylib). However this is actually not the file that macOS loaded into memory. The libsystem_info image in process memory was mapped in from the dyld_shared_cache, and the library\u2019s segment mappings were modified before it was inserted into the cache.</p> <p>IDA was able to detect this situation and adjust the database so that it matches the layout in process memory. This functionality is fully supported, but it is not trivial. Essentially the debugger must split your database in half, rebase all code segments to one address, then rebase all data segments to a completely different address.</p> <p>It is worth noting there is another approach that achieves the same result, but without so much complexity.</p>"},{"location":"user-guide/debugger/tutorials/debugger_mac/mac_debugger_primer2.html#debugging-modules-in-dyld_shared_cache","title":"Debugging Modules in dyld_shared_cache","text":"<p>As an alternative for the above example, note that you can load any module directly from a dyld_shared_cache file and debug it. For example, open the shared cache in IDA:</p> <pre><code>$ ida64 -o/tmp/libsystem_info2 /var/db/dyld/dyld_shared_cache_x86_64h\n</code></pre> <p>When prompted, select the \"single module\" option:</p> <p>Then choose the libsystem_info module:</p> <p>Select the Remote Mac OS X Debugger and for Debugger&gt;Process options use the exact same options as before:</p> <p>Now set a breakpoint at _getaddrinfo and launch the process with F9.</p> <p>After launching the debugger you might see this warning:</p> <p>This is normal. Modules from the dyld_shared_cache will contain tagged pointers, and IDA patched the pointers when loading the file so that analysis would not be hindered by the tags. IDA is warning us that the patches might cause a discrepancy between the database and the process, but in this case we know it\u2019s ok. Check Don\u2019t display this message again and don\u2019t worry about it.</p> <p>Launching the process should work just like before, and we can start stepping through the function in the shared cache:</p> <p>This time there was no special logic to map the database into process memory. Since we loaded the module directly from the cache, segment mappings already match what\u2019s expected in the process. Thus only one rebasing operation was required (as apposed to the segment scattering discussed in the previous example).</p> <p>Both techniques are perfectly viable and IDA goes out of its way to fully support both of them. In the end having multiple solutions to a complex problem is a good thing.</p>"},{"location":"user-guide/debugger/tutorials/debugger_mac/mac_debugger_primer2.html#debugging-objective-c-applications","title":"Debugging Objective-C Applications","text":"<p>When debugging macOS applications it is easy to get lost in some obscure Objective-C framework. IDA\u2019s mac debugger provides tools to make debugging Objective-C code a bit less painful.</p> <p>Consider the bluetooth application from samples.zip:</p> <p>{% file src=\"samples.zip\" %}</p> <pre><code>#import &lt;IOBluetooth/IOBluetooth.h&gt;\n\nint main(void)\n{\n  NSArray *devices = [IOBluetoothDevice pairedDevices];\n  int count = [devices count];\n  for ( int i = 0; i &lt; count; i++ )\n  {\n    IOBluetoothDevice *device = [devices objectAtIndex:i];\n    NSLog(@\"%@:\\n\", [device name]);\n    NSLog(@\"  paired:    %d\\n\", [device isPaired]);\n    NSLog(@\"  connected: %d\\n\", [device isConnected]);\n  }\n  return 0;\n}\n</code></pre> <p>The app will print all devices that have been paired with your host via Bluetooth. Try running it:</p> <pre><code>$ ./bluetooth\n2020-05-22 16:27:14.443 bluetooth[17025:15645888] Magic Keyboard:\n2020-05-22 16:27:14.443 bluetooth[17025:15645888]   paired:    1\n2020-05-22 16:27:14.443 bluetooth[17025:15645888]   connected: 1\n2020-05-22 16:27:14.443 bluetooth[17025:15645888] Apple Magic Mouse:\n2020-05-22 16:27:14.443 bluetooth[17025:15645888]   paired:    1\n2020-05-22 16:27:14.443 bluetooth[17025:15645888]   connected: 1\n2020-05-22 16:27:14.443 bluetooth[17025:15645888] iPhone SE:\n2020-05-22 16:27:14.443 bluetooth[17025:15645888]   paired:    0\n2020-05-22 16:27:14.443 bluetooth[17025:15645888]   connected: 0\n</code></pre> <p>Let\u2019s try debugging this app. First consider the call to method +[IOBluetoothDevice pairedDevices]:</p> <p>If we execute a regular instruction step with F7, IDA will step into the _objc_msgSend function in libobjc.A.dylib, which is probably not what we want here. Instead use shortcut Shift+O. IDA will automatically detect the address of the Objective-C method that is being invoked and break at it:</p> <p>This module appears to be Objective-C heavy, so it might be a good idea to extract Objective-C type info from the module using right click -&gt; Load debug symbols in the Modules window:</p> <p>This operation will extract any Objective-C types encoded in the module, which should give us some nice prototypes for the methods we\u2019re stepping in:</p> <p>Let\u2019s continue to another method call - but this time the code invokes a stub for _objc_msgSend that IDA has not analyzed yet, so its name has not been properly resolved:</p> <p>In this case Shift+O should still work:</p> <p>Shift+O is purposefully flexible so that it can be invoked at any point before a direct or indirect call to _objc_msgSend. It will simply intercept execution at the function in libobjc.A.dylib and use the arguments to calculate the target method address.</p> <p>However, you must be careful. If you use this action in a process that does not call _objc_msgSend, you will lose control of the process. It is best to only use it when you\u2019re certain the code is compiled from Objective-C and an _objc_msgSend call is imminent.</p>"},{"location":"user-guide/debugger/tutorials/debugger_mac/mac_debugger_primer2.html#decompiling-objective-c-at-runtime","title":"Decompiling Objective-C at Runtime","text":"<p>The Objective-C runtime analysis performed by Load debug symbols will also improve decompilation.</p> <p>Consider the method -[IOBluetoothDevice isConnected]:</p> <p>Before we start stepping through this method we might want to peek at the pseudocode to get a sense of how it works. Note that the Objective-C analysis created local types for the IOBluetoothDevice class, as well as many other classes:</p> <p>This type info results in some sensible pseudocode:</p> <p>We knew nothing about this method going in - but it\u2019s immediately clear that device connectivity is determined by the state of an io_service_t handle in the IOBluetoothObject superclass, and we\u2019re well on our way.</p>"},{"location":"user-guide/debugger/tutorials/debugger_mac/mac_debugger_primer2.html#debugging-over-ssh","title":"Debugging Over SSH","text":"<p>In this section we will discuss how to remotely debug an app on a mac machine using only an SSH connection. Naturally, this task introduces some unique complications.</p> <p>To start, copy the mac_server binaries and the bluetooth app from samples.zip:</p> <p>{% file src=\"samples.zip\" %}</p> <p>to the target machine:</p> <pre><code>$ scp &lt;IDA install dir&gt;/dbgsrv/mac_server* user@remote:\n$ scp bluetooth user@remote:\n</code></pre> <p>Now ssh to the target machine and launch the mac_server:</p> <pre><code>$ ssh user@remote\nuser@remote:~$ ./mac_server64\nIDA Mac OS X 64-bit remote debug server(MT) v7.5.26. Hex-Rays (c) 2004-2020\nListening on 0.0.0.0:23946...\n</code></pre> <p>Now open the bluetooth binary on the machine with your IDA installation, select Remote Mac OS X Debugger from the debugger menu, and for Debugger&gt;Process options set the debugging parameters. Be sure to replace \\ and \\ with the username and ip address of the target machine: <p>Try launching the debugger with F9. You might get the following error message:</p> <p>This happened because debugging requires manual authentication from the user for every login session (via the Take Control prompt discussed under Using the Mac Debug Server, above).</p> <p>But since we\u2019re logged into the mac via SSH, the OS has no way of prompting you with the authentication window and thus debugging permissions are refused.</p> <p>Note that mac_server64 might have printed this workaround:</p> <pre><code>WARNING: The debugger could not acquire the necessary permissions from the OS to\ndebug mac applications. You will likely have to specify the proper credentials at\nprocess start. To avoid this, you can set the MAC_DEBMOD_USER and MAC_DEBMOD_PASS\nenvironment variables.\n</code></pre> <p>But this is an extreme measure. As an absolute last resort you can launch the mac_server with your credentials in the environment variables, which should take care of authentication without requiring any interaction with the OS. However there is a more secure workaround.</p> <p>In your SSH session, terminate the mac_server process and run the following command:</p> <pre><code>$ security authorizationdb read system.privilege.taskport &gt; taskport.plist\n</code></pre> <p>Edit taskport.plist and change the authenticate-user option to false:</p> <pre><code>&lt;key&gt;authenticate-user&lt;/key&gt;\n&lt;false/&gt;\n</code></pre> <p>Then apply the changes:</p> <pre><code>$ sudo security authorizationdb write system.privilege.taskport &lt; taskport.plist\n</code></pre> <p>This will completely disable the debugging authentication prompt (even across reboots), which should allow you to use the debug server over SSH without macOS bothering you about permissions.</p>"},{"location":"user-guide/debugger/tutorials/debugger_mac/mac_debugger_primer2.html#dealing-with-slow-connections","title":"Dealing With Slow Connections","text":"<p>When debugging over SSH you might experience some slowdowns. For example you might see this dialog appear for several seconds when starting the debugger:</p> <p>During this operation IDA is fetching function names from the symbol tables for all dylibs that have been loaded in the target process. It is a critical task (after all we want our stack traces to look nice), but it is made complicated by the sheer volume of dylibs loaded in a typical macOS process due to the dyld_shared_cache. This results in several megabytes of raw symbol names that mac_server must transmit over the wire every time the debugger is launched.</p> <p>We can fix this by using the same trick that IDA\u2019s Remote iOS Debugger uses to speed up debugging - by extracting symbol files from the dyld cache and parsing them locally. Start by downloading the ios_deploy utility from our downloads page, and copy it to the remote mac:</p> <pre><code>$ scp ios_deploy user@remote:\n</code></pre> <p>Then SSH to the remote mac and run it:</p> <pre><code>$ ./ios_deploy symbols -c /var/db/dyld/dyld_shared_cache_x86_64h -d mac_symbols\nExtracting symbols from /var/db/dyld/dyld_shared_cache_x86_64h =&gt; mac_symbols\nExtracting symbol file: 1813/1813\nmac_symbols: done\n$ zip -r mac_symbols.zip mac_symbols\n</code></pre> <p>Copy mac_symbols.zip from the remote machine to your host machine and unzip it. Then open Debugger&gt;Debugger options&gt;Set specific options and set the Symbol path field:</p> <p>Now try launching the debugger again, it should start up much faster.</p> <p>Also keep the following in mind:</p> <ul> <li>Use /var/db/dyld/dyld_shared_cache_i386 if debugging 32-bit apps</li> <li>You must perform this operation after every macOS update. Updating the OS will update the dyld_shared_cache, which invalidates the extracted symbol files.</li> <li>The ios_deploy utility simply invokes dyld_shared_cache_extract_dylibs_progress from the dsc_extractor.bundle library in Xcode. If you don\u2019t want to use ios_deploy there are likely other third-party tools that do something similar.</li> </ul>"},{"location":"user-guide/debugger/tutorials/debugger_mac/mac_debugger_primer2.html#debugging-arm64-applications-on-apple-silicon","title":"Debugging arm64 Applications on Apple Silicon","text":"<p>IDA 7.6 introduced the ARM Mac Debugger, which can debug any application that runs natively on Apple Silicon.</p> <p>On Apple Silicon, the same rules apply (see Codesigning &amp; Permissions above). The Local ARM Mac Debugger can only be used when run as root, so it is better to use the Remote ARM Mac Debugger with the debug server (mac_server_arm64), which can debug any arm64 app out of the box (see Using the Mac Debug Server).</p> <p>We have included arm64 versions of the sample binaries used in the previous examples. We encourage you to go back and try them. They should work just as well on Apple Silicon.</p>"},{"location":"user-guide/debugger/tutorials/debugger_mac/mac_debugger_primer2.html#debugging-arm64e-system-applications","title":"Debugging arm64e System Applications","text":"<p>Similar to Intel Macs, IDA cannot debug system apps on Apple Silicon until System Integrity Protection is disabled.</p> <p>But here macOS introduces another complication. All system apps shipped with macOS are built for arm64e - and thus have pointer authentication enabled. This is interesting because ptruath-enabled processes are treated much differently within the XNU kernel. All register values that typically contain pointers (PC, LR, SP, and FP) will be signed and authenticated by PAC.</p> <p>Thus, if a debugger wants to modify the register state of an arm64e process, it must know how to properly sign the register values. Only arm64e applications are allowed to do this (canonically, at least).</p> <p>You may have noticed that IDA 7.6 ships with two versions of the arm64 debug server:</p> <p>mac_server_arm64e is built specifically for the arm64e architecture, and thus will be able to properly inspect other arm64e processes. We might want to try running this version right away, but by default macOS will refuse to run any third-party software built for arm64e:</p> <p>According to Apple, this is because the arm64e ABI is not stable enough to be used generically. In order to run third-party arm64e binaries you must enable the following boot arg:</p> <pre><code>$ sudo nvram boot-args=-arm64e_preview_abi\n</code></pre> <p>After rebooting you can finally run mac_server_arm64e:</p> <p>This allows you to debug any system application (e.g. /System/Applications/Calculator.app) without issue:</p> <p>Also note that the arm64e ABI limitation means you cannot use the Local ARM Mac Debugger to debug system arm64e apps, since IDA itself is not built for arm64e. It is likely that Apple will break the arm64e ABI in the future and IDA might cease to work. We want to avoid this scenario entirely.</p> <p>Using the Remote ARM Mac Debugger with mac_server_arm64e is a nice workaround. It guarantees ida.app will continue to work normally regardless of any breakages in the arm64e ABI, and we can easily ship new arm64e builds of the server to anybody who needs it.</p>"},{"location":"user-guide/debugger/tutorials/debugger_mac/mac_debugger_primer2.html#apple-silicon-tldr","title":"Apple Silicon: TL;DR","text":"<p>To summarize:</p> <ul> <li>Use mac_server_arm64 if you\u2019re debugging third-party arm64 apps that aren\u2019t protected by SIP</li> <li>Use mac_server_arm64e if you\u2019re feeling frisky and want to debug macOS system internals. You must disable SIP and enable nvram boot-args=-arm64e_preview_abi, then you can debug any app you want (arm64/arm64e apps, system/non-system apps, shouldn\u2019t matter).</li> </ul>"},{"location":"user-guide/debugger/tutorials/debugger_mac/mac_debugger_primer2.html#support","title":"Support","text":"<p>If you have any questions about this writeup or encounter any issues with the debugger itself in your environment, don\u2019t hesitate to contact us at support@hex-rays.com.</p> <p>Our Mac support team has years of experience keeping the debugger functional through rapid changes in the Apple developer ecosystem. It is likely that we can resolve your issue quickly.</p>"},{"location":"user-guide/debugger/tutorials/debugger_pin/debugger_pin.html","title":"Debugging Linux/Windows Applications with PIN Tracer module","text":""},{"location":"user-guide/debugger/tutorials/debugger_pin/debugger_pin.html#introduction","title":"Introduction","text":"<p>The PIN tracer is a remote debugger plugin used to record execution traces. It allows to record traces on Linux and Windows (x86 and x86_64) from any of the supported IDA platforms (Windows, Linux and MacOSX). Support for MacOSX targets is not yet available.</p> <p>{% hint style=\"info\" %}  IDA PIN Tool Sources: The PIN tool for the latest versions of IDA can be found in the Download Center of My Hex-Rays portal, under SDK and Utilities. For older versions of IDA, refer to the direct links.</p>"},{"location":"user-guide/debugger/tutorials/debugger_pin/debugger_pin.html#pin-support-for-macosx","title":"PIN support for MacOSX","text":"<p>Recording traces on MacOSX target is not supported yet.</p> <p>However, it\u2019s possible to record traces from a Linux or Windows target using the MacOSX version of IDA.</p>"},{"location":"user-guide/debugger/tutorials/debugger_pin/debugger_pin.html#building-the-pin-tool","title":"Building the PIN tool","text":"<p>Before using the PIN tracer the PIN tool module (distributed only in source code form) must be built as the Intel PIN license disallows redistributing PIN tools in binary form.</p> <p>First of all download PIN from http://www.pintool.org , and unpack it on your hard drive.</p> <p>the PIN tools are a little sensitive to spaces in paths. Therefore, we recommend unpacking in a no-space path. E.g., \"C:\\pin\", but not \"C:\\Program Files (x86)\\.</p> <p>The building process of the PIN tool is different for Windows and Linux.</p>"},{"location":"user-guide/debugger/tutorials/debugger_pin/debugger_pin.html#building-on-windows","title":"Building on Windows","text":"<ol> <li>Install Visual Studio. It is possible to build the PIN tool with the Express version of Visual Studio for C++.</li> <li>Download the IDA pintool sources from:</li> <li>Download Center of My Hex-Rays portal (for the latest IDA versions).</li> <li> <p>https://hex-rays.com/hubfs/freefile/idapin76.zip (*) for older IDA versions.</p> <p>pintool 6.9 and higher should be built with PIN version 3.0 and higher, for earlier versions of pintool you should use PIN build 65163. 3. Unpack the .zip file into /path/to/pin/source/tools/ 4. Open /path/to/pin/source/tools/idapin/IDADBG.sln in Visual Studio, select the correct build configuration (either Win32 or x64) and build the solution.</p> </li> </ol> <p>Alternatively you can use GNU make:</p> <ol> <li>Install GNU make as a part of cygwin or MinGW package</li> <li>Unpack the .zip file into /path/to/pin/source/tools/</li> <li>Prepare Visual Studio environment (e.g. %VCINSTALLDIR%\\Auxiliary\\Build\\vcvars32.bat for 32-bit pintool or %VCINSTALLDIR%\\Auxiliary\\Build\\vcvars64.bat for 64-bit one)</li> <li>cd /path/to/pin/source/tools/idapin</li> <li>make</li> </ol>"},{"location":"user-guide/debugger/tutorials/debugger_pin/debugger_pin.html#building-on-linux","title":"Building on Linux","text":"<ol> <li>Install GCC 3.4 or later</li> <li>Download the IDA pintool sources from:</li> <li>Download Center of My Hex-Rays portal (for the latest IDA versions).</li> <li>https://hex-rays.com/hubfs/freefile/idapin76.zip (*) for older IDA versions.</li> <li>Unpack the .zip file into /path/to/pin/source/tools/</li> <li>Open a console, and do the following (only for versions of PIN prior to 3.0):</li> <li>cd /path/to/pin/ia32/runtime</li> <li>ln -s libelf.so.0.8.13 libelf.so</li> <li>cd /path/to/pin/intel64/runtime</li> <li>ln -s libelf.so.0.8.13 libelf.so</li> <li>cd /path/to/pin/source/tools/Utils</li> <li>ls testGccVersion 2&gt;/dev/null || ln -s ../testGccVersion testGccVersion</li> <li>cd /path/to/pin/source/tools/idapin</li> </ol> <pre><code>$ make TARGET=ia32\n</code></pre> <p>for building the x86 version, or</p> <pre><code>$ make TARGET=intel64\n</code></pre> <p>for the x64 version.</p>"},{"location":"user-guide/debugger/tutorials/debugger_pin/debugger_pin.html#url-schema","title":"URL Schema","text":"<p>(*) Where '$(IDAMAJMIN)' is the IDA version major/minor. E.g., for IDA 7.6, the final URL would be: https://hex-rays.com/hubfs/freefile/idapin76.zip </p> <p>NOTE: These URL links are intended for older versions of the PIN tool. To download the PIN tool for the latest versions of IDA, please visit the Download Center in My Hex-Rays portal.</p> <p>Pintool 6.9 and higher are compatible with versions 6.5-6.8 of IDA so currently you can use them.</p>"},{"location":"user-guide/debugger/tutorials/debugger_pin/debugger_pin.html#start-process","title":"Start process","text":"<p>Once the PIN tool module is built we can use it in IDA. Open a binary in IDA and wait for the initial analysis to finish. When it\u2019s done select the PIN tracer module from the debuggers drop down list or via Debugger &gt; Select debugger:</p> <p></p> <p>After selecting the PIN tracer module select the menu Debugger &gt; Debugger options &gt; Set specific options. The following new dialog will be displayed:</p> <p></p> <p>In this dialog at least the following options are mandatory:</p> <ol> <li>PIN executable: This is the full path to the PIN binary (including the \u201cpin.exe\u201d or \u201cpin\u201d file name). In some versions \u201cpin.sh\u201d may exist \u2013 in this case you should use it.</li> <li>Directory with idadbg: This is the directory where the idadbg.so or idadbg.dll PIN tool resides. Please note that only the directory must be specified.</li> </ol> <p>Fill the form with the correct paths and press OK in this dialog and enable option Autolaunch PIN for localhost.</p> <p>We can interact with the PIN tracer like with any other debugger module: add breakpoints and step into or step over functions by pressing F7 or F8 alternatively.</p> <p>Now we put a breakpoint in the very first instruction of function main</p> <p></p> <p>and launch the debugger by pressing the F9 key or by clicking the Start button in the debugger toolbar.</p> <p></p> <p>Make several steps by pressing F8. We can see all the instructions that were executed changed their color:</p> <p></p> <p>Now let the application run and finish by pressing F9 again. After a while the process will terminate and IDA will display a dialog telling us that is reading the recorded trace. Once IDA reads the trace the debugger will stop and the instructions executed will be highlighted (like with the built-in tracing engine) as in the following picture:</p> <p></p> <p>We can see in the graph view mode the complete path the application took in some specific function by switching to the graph view, pressing space bar and then pressing \u201cw\u201d to zoom out:</p> <p></p>"},{"location":"user-guide/debugger/tutorials/debugger_pin/debugger_pin.html#attach-to-an-existing-process","title":"Attach to an existing process","text":"<p>Instead of launching a new process we could attach to a running process and debug it. For that we could have selected the \"Debugger &gt; Attach to process\u2026\u200b\" menu item. IDA will display a list of active processes.</p> <p></p> <p>We just select the process we want to attach to. IDA will then attach to the selected process, and leave it suspended at the place it was when it was attached to:</p> <p></p>"},{"location":"user-guide/debugger/tutorials/debugger_pin/debugger_pin.html#remote-debugging","title":"Remote debugging","text":"<p>In case of remote debugging you can run IDA and PIN backend on different platforms.</p>"},{"location":"user-guide/debugger/tutorials/debugger_pin/debugger_pin.html#starting-the-remote-pin-backend","title":"Starting the remote PIN backend","text":"<p>The first thing to do, is to start the PIN debugging backend on the target machine. Command line depends of bitness of the target application.</p> <pre><code>$ &lt;path-to-pin&gt; -t &lt;path-to-pintool&gt; -p &lt;port&gt; -- &lt;application&gt; &lt;application-options&gt;\n</code></pre> <p>For example, a 64-bit application ls would be started for debugging by the following comand:</p> <pre><code>$ /usr/local/pin/pin \\\n  -t /usr/local/pin/source/tools/idapin/obj-intel64/idadbg64.so \\\n  -p 23947 -- \\\n  /bin/ls\n</code></pre> <p>whereas a 32-bit one hello32 as follows:</p> <pre><code>/usr/local/pin/pin \\\n  -t /usr/local/pin/source/tools/idapin/obj-ia32/idadbg.so \\\n  -p 23947 -- \\\n  ./hello32\n</code></pre> <p>there is a more complicated way to start an application regardless bitness:</p> <pre><code>/usr/local/pin/pin \\\n  -t64 /usr/local/pin/source/tools/idapin/obj-intel64/idadbg64.so \\\n  -t /usr/local/pin/source/tools/idapin/obj-ia32/idadbg.so \\\n  -p 23947 -- \\\n  /usr/bin/ls\n</code></pre> <p>Also you can attach to already running programs:</p> <pre><code>$ &lt;path-to-pin&gt; -pid &lt;pid-to-attach&gt; -t &lt;path-to-pintool&gt; -p &lt;port&gt; --\n</code></pre> <p>For example:</p> <p></p>"},{"location":"user-guide/debugger/tutorials/debugger_pin/debugger_pin.html#connecting-ida-to-the-backend","title":"Connecting IDA to the backend","text":"<p>The next step is to select PIN tracer module in IDA via Debugger &gt; Select debugger and switch IDA to remote PIN backend. For this you should disable option Autolaunch PIN for localhost in the PIN options dialod (Debugger &gt; Debugger options &gt; Set specific options):</p> <p></p> <p>and then tell IDA about the backend endpoint, through the menu action Debugger &gt; Process options\u2026\u200b</p> <p></p> <p>Once IDA knows what host to contact (and on what port), debugging an application remotely behaves exactly the same way as if you were debugging it locally.</p>"},{"location":"user-guide/debugger/tutorials/debugger_windbg_kernel/debugger_windbg_kernel.html","title":"Debugging Windows Kernel with VMWare and IDA WinDbg Plugin","text":""},{"location":"user-guide/debugger/tutorials/debugger_windbg_kernel/debugger_windbg_kernel.html#debugging-the-windows-kernel-with-vmware-and-ida-windbg-plugin","title":"Debugging the Windows Kernel with VMWare and IDA WinDbg Plugin","text":"<p>We will now demonstrate how to debug the kernel through a virtual machine.</p> <p>In this example we will be using VMware Workstation 15 Player and Windows 7.</p> <p>It is highly recommended to read the article Windows driver debugging with WinDbg and VMWare</p>"},{"location":"user-guide/debugger/tutorials/debugger_windbg_kernel/debugger_windbg_kernel.html#configuring-the-virtual-machine","title":"Configuring the virtual machine","text":"<p>Run the VM and use the <code>bcedit</code> command[^1] to configure the boot menu as stated in the article.</p> <p></p> <p>Edit the VM hardware settings and add a new serial port with option <code>use named pipe</code>:</p> <p></p> <p>Restart the VM to debug. At the boot prompt, select the menu item containing <code>[debugger enabled]</code> from the boot menu.</p>"},{"location":"user-guide/debugger/tutorials/debugger_windbg_kernel/debugger_windbg_kernel.html#configuring-windbg-debugger-plugin","title":"Configuring Windbg debugger plugin","text":"<p>The connection string <code>com:port=\\\\.\\pipe\\com_2,baud=115200,pipe,reconnect</code> for Windbg plugin should refer to the named pipe we set up in the previous steps.</p>"},{"location":"user-guide/debugger/tutorials/debugger_windbg_kernel/debugger_windbg_kernel.html#starting-the-debugger-step-by-step","title":"Starting the debugger step by step","text":"<p>Start IDA Pro with an empty database:</p> <pre><code>&gt; ida64 -t sample.i64\n</code></pre> <p>Select the Windbg debugger using \"Debugger &gt; Select debugger\":</p> <p></p> <p>Then configure it to use \u201cKernel mode debugging\u201d debugging in the \u201cDebugger specific options\u201d dialog:</p> <p></p> <p>After the debugger is properly configured, edit the process options and set the connection string:</p> <p></p> <p>Finally, start debugging using \"Debugger &gt; Attach to process\":</p> <p></p> <p>IDA Pro may display a wait box \"Refreshing module list\" for some time. Then it will display something like this:</p> <p></p>"},{"location":"user-guide/debugger/tutorials/debugger_windbg_kernel/debugger_windbg_kernel.html#starting-the-debugger-using-a-command-line-option","title":"Starting the debugger using a command line option","text":"<p>The simplest way to start WinDbg Plugin is to run IDA Pro with the following option:</p> <pre><code>&gt; ida64 -rwindbg{MODE=1}@com:port=\\\\.\\pipe\\com_2,baud=115200,pipe,reconnect+0 sample.i64\n</code></pre> <ul> <li><code>{MODE=1}</code> means \"Kernel mode\"</li> <li><code>+0</code> means the \"\\\" process"},{"location":"user-guide/debugger/tutorials/debugger_windbg_kernel/debugger_windbg_kernel.html#debugging","title":"Debugging","text":"<p>In kernel mode IDA Pro will display one entry in the threads window for each processor.</p> <p>For example a two processor configuration[^2] yields:</p> <p></p> <p>This screenshot shows how we are debugging the kernel and changing the disassembly listing (renaming stack variables, or using structure offsets):</p> <p></p> <p>At the end you can detach from the kernel and resume it or detach from the kernel and keep it suspended.</p> <p>To detach and resume, simply select the \u201cDebugger &gt; Detach from process\u201d, however to detach and keep the kernel suspended select \u201cDebugger &gt; Terminate Process\u201d.</p>"},{"location":"user-guide/debugger/tutorials/debugger_windbg_kernel/debugger_windbg_kernel.html#debugging-the-kernel-through-kdsrvexe","title":"Debugging the kernel through kdsrv.exe","text":"<p>In some cases, when debugging a 64bit kernel using a 1394 cable then 64bit drivers are needed, thus dbgeng (32bits) will not work. To workaround this problem we need to run the kernel debugger server from the x64 debugging tools folder and connect to it:</p> <ul> <li>Go to \u201cDebugging Tools (x64)\u201d installation</li> <li>Run kdsrv.exe (change the port number/transport appropriately):</li> <li><code>kdsrv -t tcp:port=6000</code></li> <li>Now run ida64 and specify the following connection string (change the transport value appropriately):</li> <li><code>kdsrv:server=@{tcp:port=6000,server=127.0.0.1},trans=@{com:port=\\\\.\\pipe\\com_3,baud=115200,pipe}</code></li> </ul> <p>[^1]: or edit the <code>c:\\boot.ini</code> file for Windows XP</p> <p>[^2]: as was specified in the VM hardware settings</p>"},{"location":"user-guide/debugger/tutorials/debugger_windbg_user/debugger_windbg_user.html","title":"Debugger windbg user","text":"<p>Last updated on August 18, 2020 \u2014 v0.1</p>"},{"location":"user-guide/debugger/tutorials/debugger_windbg_user/debugger_windbg_user.html#setup","title":"Setup","text":"<p>The Windbg debugger plugin is an IDA Pro debugger plugin that uses Microsoft\u2019s debugging engine (dbgeng) that is used by Windbg, Cdb or Kd.</p> <p>To get started, you need to install the latest Debugging Tools from Microsoft website:  Download the Windows Driver Kit (WDK) or from the Windows SDK / DDK package.</p> <p>Please use ar.exe.idb from samples.zip to follow this tutorial.</p> <p>After installing the debugging tools, make sure you select \"Debugger &gt; Switch Debugger\" and select the WinDbg debugger.</p> <p>Also make sure you specify the correct settings in the \u201cDebugger specific options\u201d dialog:</p> <p></p> <p>User mode Select this mode for user mode application debugging (default mode)</p> <p>Kernel mode Select this mode to attach to a live kernel.</p> <p>Non Invasive debugging Select this mode to attach to a process non-invasively</p> <p>Output flags These flags tell the debugging engine which kind of output messages to display and which to omit</p> <p>Kernel mode debugging with reconnect and initial break Select this option when debugging a kernel and when the connection string contains 'reconnect'. This option will assure that the debugger breaks as soon as possible after a reconnect.</p> <p>To make these settings permanent, please edit the <code>%IDA%\\cfg\\dbg_windbg.cfg</code> file.</p> <p>To specify the debugging tools folder you may add to the PATH environment variable the location of Windbg.exe or edit <code>%IDA%\\cfg\\ida.cfg</code> and change the value of the DBGTOOLS key.</p> <p>After the debugger is properly configured, edit the process options and leave the connection string value empty because we intend to debug a local user-mode application.</p> <p></p>"},{"location":"user-guide/debugger/tutorials/debugger_windbg_user/debugger_windbg_user.html#starting-the-debugger","title":"Starting the debugger","text":"<p>Now hit F9 to start debugging:</p> <p></p> <p>The Windbg plugin is very similar to IDA Pro\u2019s Win32 debugger plugin, nonetheless by using the former, one can benefit from the command line facilities and the extensions that ship with the debugging tools.</p> <p>For example, one can type <code>!chain</code> to see the registered Windbg extensions:</p> <p></p> <p><code>!gle</code> is another command to get the last error value of a given Win32 API call.</p> <p></p>"},{"location":"user-guide/debugger/tutorials/debugger_windbg_user/debugger_windbg_user.html#use-of-symbolic-information","title":"Use of symbolic information","text":"<p>Another benefit of using the Windbg debugger plugin is the use of symbolic information.</p> <p>Normally, if the debugging symbols path is not set, then the module window will only show the exported names. For example kernel32.dll displays 1603 names:[^1]</p> <p></p> <p>Let us configure a symbol source by adding this environment variable before running IDA:</p> <pre><code>set _NT_SYMBOL_PATH=srv*C:\\temp\\pdb*http://msdl.microsoft.com/download/symbols\n</code></pre> <p>It is also possible to set the symbol path directly while debugging typing <code>.sympath srv*C:\\temp\\pdb*http://msdl.microsoft.com/download/symbols</code> in the WINDBG console:</p> <p></p> <p>and then typing <code>.reload /f /v KERNEL32.DLL</code> to reload the symbols:</p> <p></p> <p>Now we try again and notice that more symbol names are retrieved from kernel32.dll:</p> <p></p> <p>Now we have 4852 symbols instead!</p> <p>It is also possible to use the <code>x *!*nt*continue</code> [^2] command to quickly search for symbols:</p> <p></p>"},{"location":"user-guide/debugger/tutorials/debugger_windbg_user/debugger_windbg_user.html#debugging-a-remote-process","title":"Debugging a remote process","text":"<p>We have seen how to debug a local user mode program, now let us see how to debug a remote process. First let us assume that <code>pcA</code> is the target machine (where we will run the debugger server and the debugged program) and <code>pcB</code> is the machine where IDA Pro and the debugging tools are installed.</p> <p>To start a remote process:</p> <ul> <li> <p>On <code>pcA</code>, type: <code>dbgsrv -t tcp:port=5000</code> [^3]</p> </li> <li> <p>On <code>pcB</code>, setup IDA Pro and Windbg debugger plugin:</p> </li> <li> <p>Application/Input file: these should contain a path to the     debuggee residing in <code>pcA</code></p> </li> <li> <p>Connection string: <code>tcp:port=5000,server=pcA</code></p> </li> </ul> <p>Now run the program and debug it remotely.</p> <p>To attach to a remote process, use the same steps to setup <code>pcA</code> and use the same connection string when attaching to the process.</p> <p>More about connection strings and different protocols (other than TCP/IP) can be found in <code>debugger.chm</code> in the debugging tools folder.</p> <p>[^1]: Double click at <code>KERNEL32.DLL</code> in <code>Modules</code> window to see this     list.</p> <p>[^2]: Looking for any symbol in any module that contains the word     'continue' after 'nt'</p> <p>[^3]: change the port number as needed</p>"},{"location":"user-guide/debugger/tutorials/debugger_windows_local/debugger_windows_local.html","title":"Debugging a Windows executable locally and remotely","text":""},{"location":"user-guide/debugger/tutorials/debugger_windows_local/debugger_windows_local.html#debugging-a-windows-executable-locally-and-remotely_1","title":"Debugging a Windows executable locally and remotely","text":"<p>Last updated on September 01, 2020 - v0.2</p> <p>This short tutorial introduces the main functionality of the IDA Debugger on Windows. IDA supports debugging of various binaries on various platforms, locally and remotely, but in this tutorial we will focus on debugging regular applications running on Windows.</p> <p>Let\u2019s see how the debugger can be used to locally debug a simple buggy C console program compiled under Windows.</p> <p>Please use sample.exe.idb from samples.zip:</p> <p>{% file src=\"samples.zip\" %}</p> <p>to follow this tutorial.</p>"},{"location":"user-guide/debugger/tutorials/debugger_windows_local/debugger_windows_local.html#the-buggy-program","title":"The buggy program","text":"<p>This program computes averages of a set of values (1, 2, 3, 4 and 5). Those values are stored in two arrays: one containing 8 bit values, the other containing 32-bit values.</p> <pre><code>#include &lt;stdio.h&gt;\n\nchar char_average(char array[], int count)\n{\n  int i;\n  char average;\n  average = 0;\n  for (i = 0; i &lt; count; i++)\n  average += array[i];\n  average /= count;\n  return average;\n}\n\nint int_average(int array[], int count)\n{\n  int i, average;\n  average = 0;\n  for (i = 0; i &lt; count; i++)\n  average += array[i];\n  average /= count;\n  return average;\n}\n\nvoid main(void)\n{\n  char chars[] = { 1, 2, 3, 4, 5 };\n  int integers[] = { 1, 2, 3, 4, 5 };\n  printf(\"chars[] - average = %d\\n\",\n  char_average(chars, sizeof(chars)));\n  printf(\"integers[] - average = %d\\n\",\n  int_average(integers, sizeof(integers)));\n}\n</code></pre> <p>Running this program gives us the following results:</p> <pre><code>&gt;sample.exe\nchars[] - average = 3\nintegers[] - average = -65498543\n</code></pre> <p>Obviously, the computed average on the integer array is wrong. Let us use the IDA debugger to understand the origin of this error.</p>"},{"location":"user-guide/debugger/tutorials/debugger_windows_local/debugger_windows_local.html#loading-the-file","title":"Loading the file","text":"<p>The debugger is completely integrated into IDA: to debug, we usually load the executable into IDA and create a database. We can disassemble the file interactively, and all the information which he will have added to the disassembly will be available during debugging. If the disassembled file is recognized as debuggable, the Debugger menu automatically appears in main window:</p> <p>Since IDA has many debugger backends, we have to select the desired backend. We will use Local Windows debugger in our tutorial:</p>"},{"location":"user-guide/debugger/tutorials/debugger_windows_local/debugger_windows_local.html#instruction-breakpoints","title":"Instruction breakpoints","text":"<p>Once we located our int_average() function in the disassembly (it is at 0x40104A), we can add a breakpoint at its entry point, by selecting the Add breakpoint command in the popup menu, or by pressing the F2 key:</p>"},{"location":"user-guide/debugger/tutorials/debugger_windows_local/debugger_windows_local.html#program-execution","title":"Program execution","text":"<p>Now we can start the execution. We can launch the debugger by pressing the F9 key or by clicking the Start button in the debugger toolbar. IDA displays a big warning message before really starting the debugger:</p> <p>Indeed, running untrusted binaries on your computer may compromise it, so you should never run them. Since in our tutorial we are playing with a toy sample, it is okay, we can accept him. However, please consider using remote debugging for untrusted binaries.</p> <p>Once we accept it, the program runs until it reaches our breakpoint:</p>"},{"location":"user-guide/debugger/tutorials/debugger_windows_local/debugger_windows_local.html#address-evaluation","title":"Address evaluation","text":"<p>By analyzing the disassembled code, we can now locate the loop which computes the sum of the values, and stores the result in EAX. The [edx+ecx*4] operand clearly shows us that EDX points to the array and ECX is used as an index in it. Thus, this operand will successively point to each integer from the integers array:</p>"},{"location":"user-guide/debugger/tutorials/debugger_windows_local/debugger_windows_local.html#step-by-step-and-jump-targets","title":"Step by step and jump targets","text":"<p>Let us advance step by step in the loop, by clicking on the adequate button in the debugger toolbar or by pressing the F8 key. If necessary, IDA draws a green arrow to show us the target of a jump instruction:</p>"},{"location":"user-guide/debugger/tutorials/debugger_windows_local/debugger_windows_local.html#the-bug-uncovered","title":"The bug uncovered","text":"<p>Now, let\u2019s have a look at value of [esp+count]. The ECX register (our index in the array) is compared to this register at each iteration: so, we can conclude that it is used as a counter in the loop. But, we also observe that it contains a rather strange number of elements: 14h (= 20). Remember that our original array contains only 5 elements! It seems we just found the source of our problem\u2026\u200b</p>"},{"location":"user-guide/debugger/tutorials/debugger_windows_local/debugger_windows_local.html#hardware-breakpoints","title":"Hardware breakpoints","text":"<p>To be sure, let us add a hardware breakpoint, just behind the last value of our integers array (in fact, on the first value of the chars array). If we reach this breakpoint during the loop, it will indeed prove that we read integers outside our array. For that jump to EDX, which points to the array, by clicking on a small arrow in the CPU register view:</p> <p>IDA displays a sequence of bytes, so we need to create an array. Do the following:</p> <ul> <li>press Alt-D, D to create a doubleword</li> <li>press * and specify the size of 5 elements</li> </ul> <p>Let us add a hardware breakpoint with a size of 4 bytes (the size of an integer) in Read/Write mode immediately after our array. Please note that the cursor is located after the array we created:</p> <p>As foreseen, if we continue the execution, the hardware breakpoint detects a read access to the first byte of the chars array.</p> <p>Please note that EIP points to the instruction following the one which caused the hardware breakpoint! It is in fact rather logical: to cause the hardware breakpoint, the preceding instruction has been fully executed, so EIP now points to the next one.</p>"},{"location":"user-guide/debugger/tutorials/debugger_windows_local/debugger_windows_local.html#callers-mistake","title":"Caller\u2019s mistake","text":"<p>By looking at the disassembly, we see that the value stored in [esp+count] comes from the count argument of our int_average() function. Let us try to understand why the caller gives us such a strange argument: if we go the call of int_average(), we easily locate the push 14h instruction, passing an erroneous count value to our function.</p> <p>Now, by looking closer at the C source code, we understand our error: we used the sizeof() operator, which returns the number of bytes in the array, rather than returning the number of items in it! As, for the chars array, the number of bytes was equal to the number of items, we didn\u2019t notice the error\u2026\u200b</p>"},{"location":"user-guide/debugger/tutorials/debugger_windows_local/debugger_windows_local.html#debugging-a-remote-process","title":"Debugging a remote process","text":"<p>Our debuggers support debugging processes running on a remote computer. We just need to set up a remote debugging session and then we can debug the same way as in local debugging. Let us consider the following three simple steps.</p>"},{"location":"user-guide/debugger/tutorials/debugger_windows_local/debugger_windows_local.html#starting-the-remote-server","title":"Starting the remote server","text":"<p>Regardless of the platform where IDA itself runs (be it Windows, Mac, or Linux), we need to launch a remote debugger server on the computer where the remotely debugged application will run.</p> <p>For Windows, we have two different debugger servers:</p> <ul> <li>for 32-bit programs, use win32_remote.exe</li> <li>for 64-bit programs, use win64_remote64.exe</li> </ul> <p>So, we copy the relevant debugger server to the remote computer and launch it:</p> <p>If the debugger server is accessible by others, it is a good idea to use a password for the connection (the -P command line option).</p> <p>Once this is done, we can return to the local computer, where we will run IDA, and configure it.</p>"},{"location":"user-guide/debugger/tutorials/debugger_windows_local/debugger_windows_local.html#configuring-ida-to-connect-to-the-remote-server","title":"Configuring IDA to connect to the remote server","text":"<p>We have to select the Remote Windows debugger:</p> <p>and specify the correct values in the Debugger &gt; Process options dialog:</p> <p>Please note that the Application, Input file, and Directory must be correct on the remote computer. We may eventully specify command line arguments for the application in the Parameters field.</p> <p>If you have specified a password when launching the remote debugger server, you must specify it in the Password field.</p>"},{"location":"user-guide/debugger/tutorials/debugger_windows_local/debugger_windows_local.html#starting-a-debug-session","title":"Starting a debug session","text":"<p>Once we have configured IDA, the rest is the same as with local debugging: press F9 to start a debugging session.</p>"},{"location":"user-guide/debugger/tutorials/debugger_windows_local/debugger_windows_local.html#attaching-to-a-running-process","title":"Attaching to a running process","text":"<p>In some cases we cannot launch the debugged process ourselves. Instead, we need to attach to an existing process. This is possible and very easy to do: just select Debugger &gt; Attach to process from the menu and select the desired process.</p>"},{"location":"user-guide/debugger/tutorials/debugger_windows_local/debugger_windows_local.html#other-features","title":"Other features","text":"<p>IDA debugger gives you access to the entire process memory, allowing you to use all powerful features: you can create structure variables in memory, draw graphs, create breakpoints in DLLs, define and decompile functions, etc. It is even possible to single step in the pseudocode window, if you have the decompiler installed!</p> <p>The way the debugger reacts to exceptions is fully configurable by the user. The user can select various Actions to be performed when the breakpoint is hit. An IDC or Python can be executed upon hitting a breakpoint:</p> <p>We invite you to play with the debugger and discover its many unique and powerful features!</p>"},{"location":"user-guide/debugger/tutorials/debugger_xnu/xnu_debugger_primer.html","title":"Debugging the XNU Kernel with IDA Pro","text":"<p>Copyright 2019 Hex-Rays SA</p>"},{"location":"user-guide/debugger/tutorials/debugger_xnu/xnu_debugger_primer.html#purpose","title":"Purpose","text":"<p>IDA 7.3 introduces the Remote XNU Debugger. It is designed to communicate with the GDB stub included with popular virtualization tools, namely VMWare Fusion (for OSX) and Corellium (for iOS). The debugger allows you to observe the Darwin kernel as it is running, while at the same time utilising the full power of IDA's analysis capabilities. It works equally well on Mac, Windows, and Linux.</p> <p>This writeup is intended to quickly get you familiar with debugger, as well as offer some hints to make the experience as smooth as possible.</p>"},{"location":"user-guide/debugger/tutorials/debugger_xnu/xnu_debugger_primer.html#debugging-osx-with-vmware","title":"Debugging OSX with VMWare","text":"<p>To get started with debugging OSX, we will perform a simple experiment. This is the same experiment outlined in this great writeup by GeoSn0w, but we will be performing the equivalent in IDA - which we hope you'll find is much simpler.</p> <p>Begin with the following setup:</p> <ol> <li>create an OSX virtual machine with VMWare Fusion. in this example the virtual machine is OSX 10.13.6, but the experiment should work with any recent OSX version.</li> <li> <p>open Terminal in the VM and enable some basic XNU debugging options:</p> <p><code>bash $ sudo nvram boot-args=\"slide=0 debug=0x100 keepsyms=1\"</code> 3.  shut down the VM and add the following line to the .vmx file:</p> <p><code>c debugStub.listen.guest64 = \"TRUE\"</code> 4.  power on the virtual machine, open Terminal, and run this command:</p> <p><code>$ uname -v  Darwin Kernel Version 17.7.0 ... root:xnu-4570.71.17~1/RELEASE_X86_64</code></p> <p>Let's use IDA to modify this version string.</p> </li> </ol> <p>Launch IDA, and when prompted with the window IDA: Quick start, choose Go to start with an empty database. Then go to menu Debugger&gt;Attach&gt;Remote XNU Debugger and set the following options:</p> <p></p> <p>Click OK, then select \\, and wait for IDA to attach. This step might take a few seconds (later we'll discuss how to speed things up). Once attached, the target is usually suspended in machine_idle: <p></p> <p>IDA should have printed the message FFFFFF8000200000: process kernel has started, meaning it successfully detected the kernel image in memory. Now let's find the version string. Conveniently, the string appears in the kernel's symbol table, so we can simply use shortcut G and enter the name _version to jump right to it:</p> <p></p> <p>Use IDAPython to overwrite the bytes at this address:</p> <pre><code>idaapi.dbg_write_memory(0xFFFFFF8000AF6A00, \"IDAPRO\")\n</code></pre> <p>Resume the process and allow the VM to run freely. Go back to Terminal in the VM and run the same command as before:</p> <pre><code>$ uname -v\nIDAPRO Kernel Version 17.7.0 ... root:xnu-4570.71.17~1/RELEASE_X86_64\n</code></pre> <p>The output should look almost the same, except Darwin has been replaced with IDAPRO. So, we have modified kernel memory without breaking anything! You can continue to explore memory, set breakpoints, pause and resume the OS as you desire.</p>"},{"location":"user-guide/debugger/tutorials/debugger_xnu/xnu_debugger_primer.html#using-the-kdk","title":"Using the KDK","text":"<p>If you have installed a Kernel Development Kit from Apple, you can set KDK_PATH in dbg_xnu.cfg to enable DWARF debugging:</p> <pre><code>KDK_PATH = \"/Library/Developer/KDKs/KDK_10.13.6_17G4015.kdk\";\n</code></pre> <p>Even if there is no KDK available for your OSX version, you can still utilise the KDK_PATH option in IDA to speed up debugging. For example, in the experiment above we could have done the following:</p> <ol> <li> <p>make your own KDK directory:</p> <p><code>bash $ mkdir ~/MyKDK</code> 2.  copy the kernelcache from your VM:</p> <p><code>bash $ scp user@vm:/System/Library/PrelinkedKernels/prelinkedkernel ~/MyKDK</code> 3.  decompress the kernelcache:</p> <p><code>bash $ kextcache -c ~/MyKDK/prelinkedkernel -uncompressed</code> 4.  set KDK_PATH in dbg_xnu.cfg:</p> <p><code>c KDK_PATH = \"~/MyKDK\";</code></p> </li> </ol> <p>Now whenever IDA needs to extract information from the kernel or kexts, it will parse the kernelcache file on disk instead of parsing the images in memory. This should be noticeably faster.</p>"},{"location":"user-guide/debugger/tutorials/debugger_xnu/xnu_debugger_primer.html#debugging-a-development-kernel","title":"Debugging a Development Kernel","text":"<p>Our next goal is to use the KDK to create a rich database that can be used to debug XNU in greater detail. In this example we will debug the development kernel included in the Apple KDK. Let's open this file in IDA:</p> <pre><code>$ export KDK=/Library/Developer/KDKs/KDK_10.13.6_17G4015.kdk\n$ export KERNELS=$KDK/System/Library/Kernels\n$ ida64 -okernel.i64 $KERNELS/kernel.development\n</code></pre> <p>Wait for IDA to load the DWARF info and complete the autoanalysis. This may take a few minutes, but we only need to do it once.</p> <p>While we wait, we can prepare the virtual machine to use the development kernel instead of the release kernel that is shipped with OSX (Note: System Integrity Protection must now be disabled in the VM). Open Terminal in the VM and run the following commands:</p> <ol> <li> <p>copy the development kernel from the KDK:</p> <p><code>bash $ sudo scp user@host:\"\\$KERNELS/kernel.development\" /System/Library/Kernels/</code> 2.  reconstruct the kernelcache:</p> <p><code>bash $ sudo kextcache -i /</code> 3.  reboot:</p> <p><code>bash $ sudo shutdown -r now</code> 4.  after rebooting, check that the development kernel was properly installed:</p> <p><code>$ uname -v  ... root:xnu-4570.71.17~1/DEVELOPMENT_X86_64</code></p> </li> </ol> <p>The VM is now ready for debugging.</p> <p>\\ \\</p>"},{"location":"user-guide/debugger/tutorials/debugger_xnu/xnu_debugger_primer.html#ida-configuration","title":"IDA Configuration","text":"<p>Return to IDA and use Debugger&gt;Select debugger to select Remote XNU Debugger. Then open Debugger&gt;Process options and set the following fields:</p> <p></p> <p>Now go to Debugger&gt;Debugger options&gt;Set specific options and make sure the KDK path field is set:</p> <p></p> <p>You can ignore the other options for now, and press OK.</p> <p>\\</p>"},{"location":"user-guide/debugger/tutorials/debugger_xnu/xnu_debugger_primer.html#assembly-level-debugging-dwarf","title":"Assembly-Level Debugging + DWARF","text":"<p>IDA supports source-level debugging for the XNU Kernel. However for demonstration purposes we will focus on assembly-level debugging, while taking advantage of source-level DWARF information like local variables. This is a bit more stable, and is still quite useful.</p> <p>Before attaching the debugger, open Options&gt;Source paths... and un-check the checkbox:</p> <p></p> <p>Then click Apply. This will prevent IDA from complaining when it can't find a source file.</p> <p>Finally, select Debugger&gt;Attach to process&gt;attach to the process started on target. After attaching, jump to function dofileread, and use F2 to set a breakpoint. Resume the debugger and and wait for the breakpoint to be hit (typically it will be hit right away, if not try simply running a terminal command in the guest). Once XNU hits our breakpoint, open Debugger&gt;Debugger windows&gt;Locals:</p> <p></p> <p>We can now perform detailed instruction-level debugging with the assistance of DWARF. You can continue to single step, set breakpoints, and inspect or modify local variables just like any other IDA debugger.</p> <p>\\ \\</p>"},{"location":"user-guide/debugger/tutorials/debugger_xnu/xnu_debugger_primer.html#kext-debugging","title":"KEXT Debugging","text":"<p>IDA also supports debugging kext binaries. To demonstrate this, we will debug IONetworkingFamily, a submodule of IOKit that is typically shipped with the KDK. Begin by opening the binary in IDA:</p> <pre><code>$ export KEXTS=$KDK/System/Library/Extensions\n$ ida64 -onet.i64 $KEXTS/IONetworkingFamily.kext/Contents/MacOS/IONetworkingFamily\n</code></pre> <p>Select Remote XNU Debugger from the debugger menu. Then in Debugger&gt;Process options, set:</p> <p></p> <p>Note that we provide the bundle ID of the kext (com.apple.iokit.IONetworkingFamily) as the Input file field. This allows the debugger to easily identify the target kext at runtime.</p> <p>Also note that loading all kexts in kernel memory can be a slow operation, which is why it is disabled by default. Open Debugger&gt;Debugger options&gt;Set specific options and ensure the KDK path field is set, then set the KEXT Debugging option to KDK only:</p> <p></p> <p>This tells the debugger to only load kexts that are present in the KDK. Since the KDK binaries are on the local filesystem, IDA can parse the kexts in a negligible amount of time - which is ideal since we're really only interested in IONetworkingFamily.</p> <p>Now power on your VM and allow it to boot up. Once it is running idle, attach the debugger. Immediately IDA should detect the kernel and all relevant kexts in memory, including IONetworkingFamily:</p> <p></p> <p>Double-click to bring up the debug names for this module, and search for IONetworkInterface::if_ioctl:</p> <p></p> <p>Now set a breakpoint at this function and resume the OS. Typically the breakpoint will be hit right away, but if it isn't try performing an action that requires a network interface (for instance, performing a google search). Once execution breaks in the kext we can use the database to debug it in detail:</p> <p>\\ \\ \\ \\</p>"},{"location":"user-guide/debugger/tutorials/debugger_xnu/xnu_debugger_primer.html#debugging-a-prelinked-kernelcache","title":"Debugging a Prelinked Kernelcache","text":"<p>For simplicity, all of the examples up until now have dealt with a subset of the kernel, but it is also possible to load a complete prelinked kernelcache in IDA and debug it. Naturally, we have some suggestions for this.</p>"},{"location":"user-guide/debugger/tutorials/debugger_xnu/xnu_debugger_primer.html#extending-the-kdk","title":"Extending the KDK","text":"<p>If you're interested in debugging the entire prelinked kernel, the biggest concern is speed. IDA must create a detailed and accurate depiction of kernel memory, which could contain hundreds of kext modules. If we're not careful, this can be slow.</p> <p>Fortunately there is an easy solution. Try the following:</p> <ol> <li> <p>create a writable copy of Apple's KDK:</p> <p><code>bash $ cp -r /Library/Developer/KDKs/KDK_10.13.6_17G4015.kdk ~/MyKDK</code> 2.  copy the kernelcache from your VM to the new KDK:</p> <p><code>bash $ scp user@vm:/System/Library/PrelinkedKernels/prelinkedkernel ~/MyKDK</code> 3.  decompress the kernelcache:</p> <p><code>bash $ kextcache -c ~/MyKDK/prelinkedkernel -uncompressed</code></p> </li> </ol> <p>Now IDA can use both the KDK and the kernelcache to extract debugging information for almost any kext at runtime. This should be fast.</p>"},{"location":"user-guide/debugger/tutorials/debugger_xnu/xnu_debugger_primer.html#loading-the-kernelcache","title":"Loading the Kernelcache","text":"<p>When loading a kernelcache, IDA now offers more load options:</p> <p></p> <p>In this example we want to load everything, so choose the kernel + all kexts option and wait for IDA to load all the subfiles and finish the autoanalysis. This will take a while but there's no way around it, it's a lot of code.</p> <p>IMPORTANT NOTE: Try to avoid saving the IDA database file in the KDK directory. It is important to keep irrelevant files out of the KDK since they might slow down IDA's KDK parsing algorithm.</p> <p>Now we might want to improve the static analysis by loading DWARF info from the KDK. In IDA 7.3 the dwarf plugin supports batch-loading all DWARF info from a KDK into a kernelcache database. Currently this feature must be invoked manually, so we have provided this script to make it easier.</p> <p>Copy kdk_utils.py to the plugins directory of your IDA installation. This plugin will create a new menu Edit&gt;Other&gt;KDK utils, with two new menu actions:</p> <ul> <li>Load KDK: This action will automatically detect all matching DWARF files in a given KDK, then apply the DWARF info to the subfiles in the database (including the kernel itself).</li> <li>Load DWARF for a prelinked KEXT: This action is useful if you have DWARF info for a prelinked kext that is not included in Apple's KDK. For a given DWARF file, the action will find a matching kext in the database and apply the DWARF info to this subfile.</li> </ul> <p>Try opening Edit&gt;Other&gt;KDK utils&gt;Load KDK and provide the KDK path:</p> <p></p> <p>Wait for IDA to scan the KDK for matching DWARF files and load them. This operation can also take a while, but it's worth it for all the extra structures, prototypes, and names that are added to the database. In the end we have a very detailed database that we are ready to use for debugging.</p> <p>Now open Debugger&gt;Process options and set the following options:</p> <p></p> <p>Then open Debugger&gt;Debugger options&gt;Set specific options and set the following fields:</p> <p></p> <p>Note that we set the KEXT Debugging option to all. This tells the debugger to detect every kext that has been loaded into memory and add it to the Modules list, including any non-prelinked kexts (there are likely only a handful of them, so it doesn't hurt).</p> <p>Finally, power on the VM and attach to it with Debugger&gt;Attach to process&gt;attach to the process started on target. IDA should be able to quickly generate modules for the kernel and all loaded kexts:</p> <p></p> <p>You are now free to explore the entire running kernel! Try performing any of the previous demos in this writeup. They should work about the same, but now they are all possible with one single database.</p>"},{"location":"user-guide/debugger/tutorials/debugger_xnu/xnu_debugger_primer.html#kernel-aslr-rebasing","title":"Kernel ASLR + Rebasing","text":"<p>It is worth noting that rebasing has been heavily improved in IDA 7.3. Even large databases like the one we just created can now be rebased in just a few seconds. Previous IDA versions would take quite a bit longer. Thus, IDA should be able to quickly handle kernel ASLR, even when working with prelinked kernelcaches.</p>"},{"location":"user-guide/debugger/tutorials/debugger_xnu/xnu_debugger_primer.html#debugging-the-osx-kernel-entry-point","title":"Debugging the OSX Kernel Entry Point","text":"<p>In this example we demonstrate how to gain control of the OS as early as possible. This task requires very specific steps, and we document them here. Before we begin, we must make an important note about a limitation in VMWare's GDB stub.</p>"},{"location":"user-guide/debugger/tutorials/debugger_xnu/xnu_debugger_primer.html#physical-memory","title":"Physical Memory","text":"<p>Currently VMWare's 64-bit GDB stub does not allow us to debug the kernel entry point in physical memory. According to VMWare's support team, the correct approach is to use the 32-bit stub to debug the first few instructions of the kernel, then switch to a separate debugger connected to the 64-bit stub once the kernel switches to 64-bit addressing.</p> <p>Since IDA's XNU debugger does not support 32-bit debugging, this approach is not really feasible (and it's not very practical anyway).</p>"},{"location":"user-guide/debugger/tutorials/debugger_xnu/xnu_debugger_primer.html#workaround","title":"Workaround","text":"<p>Rather than add support for the 32-bit stub just to handle a few instructions, the official approach in IDA is to break at the first function executed in virtual memory (i386_init). This allows us to gain control of the OS while it is still in the early stages of initialization, which should be enough for most use cases.</p> <p>Here's how you can do it:</p> <ol> <li> <p>Disable ALSR for the kernel. Open Terminal in the VM and run the following command:</p> <p><code>bash sudo nvram boot-args=\"slide=0\"</code></p> <p>Then power off the VM. 2.  Add this line to the .vmx file:</p> <p><code>c debugStub.hideBreakpoints = \"TRUE\"</code></p> <p>This ensures that hardware breakpoints are enabled in the GDB stub. For most versions of VMWare, TRUE is the default value, but it's better to be safe. 3.  Also add this line to the .vmx file:</p> <p><code>c monitor.debugOnStartGuest64 = \"TRUE\"</code></p> <p>This will tell VMWare to suspend the OS before it boots. 4. Power on the VM. It will remain suspended until we attach the debugger. 5.  Load a kernel binary in IDA, and set the following XNU debugger options:</p> <p></p> <p>Note that we un-checked the Debug UEFI option. This option is explained in detail in the UEFI Debugging section, but for now just ensure it is disabled. This will prevent IDA from doing any unnecessary work. 6.  Attach the debugger. The VM will be suspended in the firmware before the boot sequence has begun:</p> <p> 7.  Now jump to the function _i386_init and set a hardware breakpoint at this location:</p> <p><code>python idaapi.add_bpt(here(), 1, BPT_EXEC)</code></p> <p>We must use a hardware breakpoint because the kernel has not been loaded and the address is not yet valid. This is why steps 1 and 2 were important. It ensures the stub can set a breakpoint at a deterministic address, without trying to write to memory. 8.  Resume the OS, and wait for our breakpoint to be hit:</p> <p></p> <p>IDA should detect that execution has reached the kernel and load the kernel module on-the-fly. You can now continue to debug the kernel normally.</p> </li> </ol>"},{"location":"user-guide/debugger/tutorials/debugger_xnu/xnu_debugger_primer.html#uefi-debugging","title":"UEFI Debugging","text":"<p>It is possible to debug the EFI firmware of a VMWare Fusion guest. This gives us the unique opportunity to debug the OSX bootloader. Here's how it can be easily done in IDA:</p> <p>First copy the bootloader executable from your VM:</p> <pre><code>$ scp user@vm:/System/Library/CoreServices/boot.efi .\n</code></pre> <p>Now shut down the VM and add this line to the .vmx file:</p> <pre><code>monitor.debugOnStartGuest64 = \"TRUE\"\n</code></pre> <p>Load the boot.efi binary in IDA, open Debugger&gt;Debugger options, check Suspend on library load/unload, and set Event condition to:</p> <pre><code>get_event_id() == LIB_LOADED &amp;&amp; get_event_module_name() == \"boot\"\n</code></pre> <p>This will suspend the OS just before the bootloader entry point is invoked. Note: For some older versions of OSX, the bootloader will be named \"boot.sys\". You can check the name under the .debug section of the executable.</p> <p>Now select Remote XNU Debugger from the Debugger menu, and set the following fields in Debugger&gt;Process options:</p> <p>\\</p> <p>We're now ready to start debugging the bootloader. Power on the VM (note that the VM is unresponsive since it is suspended), and attach to it with Debugger&gt;Attach to process. After attaching IDA will try to detect the EFI_BOOT_SERVICES table. You should see the debugger print something like this to the console:</p> <pre><code>7FFD7430: EFI_BOOT_SERVICES\n</code></pre> <p>Now resume the process. You should see many UEFI drivers being loaded, until eventually boot.efi is loaded and IDA suspends the process:</p> <p></p> <p>At this point, the bootloader entry point function is about to be invoked. Jump to _ModuleEntryPoint in boot.efi and press F4. We can now step through boot.efi:</p> <p>\\</p>"},{"location":"user-guide/debugger/tutorials/debugger_xnu/xnu_debugger_primer.html#getmemorymap","title":"GetMemoryMap","text":"<p>To facilitate UEFI debugging, IDA provides an IDC helper function: xnu_get_efi_memory_map. This function will invoke EFI_BOOT_SERVICES.GetMemoryMap in the guest OS and return an array of EFI_MEMORY_DESCRIPTOR objects:</p> <pre><code>IDC&gt;extern map;\nIDC&gt;map = xnu_get_efi_memory_map();\nIDC&gt;map.size\n     35.       23h          43o\nIDC&gt;map[4]\nobject\n    Attribute: 0xFi64\n    NumberOfPages: 0x30B6i64\n    PhysicalStart: 0x200000i64\n    Type: \"EfiLoaderData\"\n    VirtualStart: 0x0i64\nIDC&gt;map[27]\nobject\n    Attribute: 0x800000000000000Fi64\n    NumberOfPages: 0x20i64\n    PhysicalStart: 0x7FF09000i64\n    Type: \"EfiRuntimeServicesCode\"\n    VirtualStart: 0x0i64\n\n</code></pre> <p>This function can be invoked at any point during firmware debugging.</p>"},{"location":"user-guide/debugger/tutorials/debugger_xnu/xnu_debugger_primer.html#uefi-debugging-dwarf","title":"UEFI Debugging + DWARF","text":"<p>If you build your own EFI apps or drivers on OSX, you can use IDA to debug the source code.</p> <p>In this example we will debug a sample EFI application. On OSX the convention is to build EFI apps in the Mach-O format, then convert the file to PE .efi with the mtoc utility. In this example, assume we have an EFI build on our OSX virtual machine that contains the following files in the \\~/TestApp directory:</p> <ul> <li>TestApp.efi - the EFI application that will be run</li> <li>TestApp.dll - the original Mach-O binary</li> <li>TestApp.dll.dSYM - DWARF info for the app</li> <li>TestApp.c - source code for the app</li> </ul> <p>Here's how we can debug this application in IDA:</p> <ol> <li> <p>On your host machine, create a directory that will mirror the directory on the VM:</p> <p><code>bash mkdir ~/TestApp</code> 2.  Copy the efi, macho, dSYM, and c files from your VM:</p> <p><code>scp -r vmuser@vm:TestApp/TestApp.* ~/TestApp</code> 3.  Open the TestApp.efi binary in IDA, and wait for IDA to analyze it.</p> <p>Note that you can improve the disassembly by loading the DWARF file from TestApp.dll.dSYM. You can do this with Edit&gt;Plugins&gt;Load DWARF file, or you can load it programatically from IDAPython:</p> <p><code>python path = \"~/TestApp/TestApp.dll.dSYM/Contents/Resources/DWARF/TestApp.dll\" node = idaapi.netnode() node.create(\"$ dwarf_params\") node.supset(1, os.path.expanduser(path)) idaapi.load_and_run_plugin(\"dwarf\", 3)</code> 4.  Select Remote XNU Debugger from the debugger menu, and set the following fields in Debugger&gt;Process options:</p> <p> 5.  In Debugger&gt;Debugger options, enable Suspend on library load/unload and set the Event condition field to:</p> <p><code>c get_event_id() == LIB_LOADED &amp;&amp; get_event_module_name() == \"TestApp\"</code> 6.  In Debugger&gt;Debugger options&gt;Set specific options, set the following fields:</p> <p></p> <p>Note that we must enable the Debug UEFI option, and set the UEFI symbols option so the debugger can find DWARF info for the EFI app at runtime. 7.  If the usernames on the host and VM are different, we will need a source path mapping:</p> <p><code>python idaapi.add_path_mapping(\"/Users/vmuser/TestApp\", \"/Users/hostuser/TestApp\")</code> 8. Reboot the VM and enter the EFI Shell 9.  Attach the debugger. After attaching IDA will detect the firmware images that have already been loaded:</p> <p> 10. Resume the OS and launch TestApp from the EFI Shell prompt:</p> <p><code>Shell&gt;fs1:\\Users\\vmuser\\TestApp\\TestApp.efi</code></p> <p>At this point IDA will detect that the target app has been loaded, and suspend the process just before the entry point of TestApp.efi (because of step 5). 11. Now we can set a breakpoint somewhere in TestApp.efi and resume the OS. The debugger will be able to load source file and local variable information from TestApp.dll.dSYM:</p> <p></p> <p>IMPORTANT NOTE: You must wait until TestApp has been loaded into memory before setting any breakpoints. If you add a breakpoint in the database before attaching the debugger, IDA might not set the breakpoint at the correct address. This is a limitation in IDA that we must work around for now.</p> </li> </ol>"},{"location":"user-guide/debugger/tutorials/debugger_xnu/xnu_debugger_primer.html#debugging-ios-with-corellium","title":"Debugging iOS with Corellium","text":"<p>IDA can also debug the iOS kernel, provided you have access to a virtual iOS device from Corellium.</p> <p>To get started with debugging iOS, we will perform a simple experiment to patch kernel memory. The device used in this example is a virtual iPhone XS with iOS 12.1.4, but it should work with any model or iOS version that Corellium supports. Begin by powering on your device and allow it to boot up. In the Corellium UI, look for the line labeled SSH under Advanced options:</p> <p></p> <p>Ensure you can connect to the device by running this command over ssh:</p> <pre><code>$ ssh root@10.11.1.3 uname -v\nDarwin Kernel Version 18.2.0 ... root:xnu-4903.242.2~1/RELEASE_ARM64_T8020\n</code></pre> <p>We will use IDA to patch this version string.</p> <p>Now launch IDA, and when prompted with the window IDA: Quick start, choose Go to start with an empty database and open Debugger&gt;Attach&gt;Remote XNU Debugger. In the Corellium UI, find the hostname:port used by the kernel GDB stub. It should be specified in the line labeled kernel gdb:</p> <p></p> <p>And set the Hostname and Port fields in IDA's application setup window:</p> <p></p> <p>Now click on Debug options&gt;Set specific options, and for the Configuration dropdown menu, be sure to select Corellium-ARM64:</p> <p></p> <p>You can ignore the other config options for now, and click OK.</p> <p>Click OK again, and wait for IDA to establish a connection to Corellium's GDB stub (this may take a few seconds). Then select \\ and wait for IDA to attach. This might take several seconds (we will address this later), but for now simply wait for IDA to perform the initial setup. <p>If IDA could detect the kernel, it should appear in the Modules list:</p> <p></p> <p>and the kernel version will be printed to the console:</p> <pre><code>FFFFFFF007029FD7: detected Darwin Kernel Version 18.2.0 ...\n</code></pre> <p>Navigate to this address and use IDAPython to overwrite the string:</p> <p></p> <pre><code>idaapi.dbg_write_memory(0xFFFFFFF007029FD7, \"IDAPRO\")\n</code></pre> <p>Resume the OS, and try running the same command as before:</p> <pre><code>$ ssh root@10.11.1.3 uname -v\nIDAPRO Kernel Version 18.2.0 ... root:xnu-4903.242.2~1/RELEASE_ARM64_T8020\n</code></pre> <p>If we could successfully write to kernel memory, IDAPRO should appear in the output.</p>"},{"location":"user-guide/debugger/tutorials/debugger_xnu/xnu_debugger_primer.html#creating-a-kdk-for-ios","title":"Creating a KDK for iOS","text":"<p>Typically a Kernel Development Kit is not available for iOS devices, but we can still utilise the KDK_PATH option in IDA to achieve faster debugging. In the example above, the initial attach can be slow because IDA must parse the kernel image in memory (which can be especially slow if the kernel has a symbol table).</p> <p>Here's how you can speed things up:</p> <ol> <li> <p>create the KDK directory:</p> <p><code>bash $ mkdir ~/iPhoneKDK</code> 2.  copy the kernelcache from the virtual device:</p> <p><code>bash $ scp root@ip:/System/Library/Caches/com.apple.kernelcaches/kernelcache /tmp</code> 3.  uncompress the kernelcache with lzssdec:</p> <p><code>bash $ lzssdec -o OFF &lt; /tmp/kernelcache &gt; ~/iPhoneKDK/kernelcache</code> 4.  set KDK_PATH in dbg_xnu.cfg:</p> <p><code>c KDK_PATH = \"~/iPhoneKDK\";</code></p> </li> </ol> <p>Now whenever the debugger must extract information from the kernel, it will parse the local file on disk. This should be noticeably faster, especially if the device is hosted by Corellium's web service.</p> <p>\\ \\ \\</p>"},{"location":"user-guide/debugger/tutorials/debugger_xnu/xnu_debugger_primer.html#debugging-the-ios-kernel-entry-point","title":"Debugging the iOS Kernel Entry Point","text":"<p>Corellium allows us to debug the first few instructions of kernel initialization. This can be very useful if we want to gain control of the OS as early as possible. In the Corellium UI, power on your device with the Start device paused option:</p> <p></p> <p>Now start IDA with an empty database and attach to the suspended VM:</p> <p></p> <p>From the XNU source, this is likely the _start symbol in osfmk/arm64/start.s, which simply branches to start_first_cpu. After stepping over this branch:</p> <p></p> <p>Press shortcut P to analyze start_first_cpu. This is where the kernel performs its initial setup (note that the value in X0 is a pointer to the boot_args structure). This function is interesting because it is responsible for switching the kernel to 64-bit virtual addressing. Typically the switch happens when this function sets X30 to a virtual address, then performs a RET:</p> <p></p> <p>Use F4 to run to this RET instruction. In this example X30 will now point to virtual address 0xFFFFFFF007B84474. After single stepping once more, we end up in arm_init in virtual memory:</p> <p></p> <p>After this single step, IDA detected that execution reached the kernel's virtual address space and automatically initialized the debugging environment. In this case a message will be printed to the console:</p> <pre><code>FFFFFFF007004000: process kernel has started\n</code></pre> <p>This signifies that IDA successfully detected the kernel base and created a new module in the Modules list. If the kernel has a symbol table, debug names will be available. Also note that PC now points inside the segment __TEXT_EXEC:__text instead of MEMORY, because the debugger parsed the kernel's load commands to generate proper debug segments.</p> <p>Now that we know the address of arm_init, we can streamline this task:</p> <ol> <li>power on the device with Start device paused</li> <li>attach to the paused VM</li> <li> <p>set a hardware breakpoint at arm_init:</p> <p><code>python idaapi.add_bpt(0xFFFFFFF007B84474, 1, BPT_EXEC)</code> 4. resume, and wait for the breakpoint to be hit</p> </li> </ol> <p>This gives us a quick way to break at the first instruction executed in virtual memory. You can continue debugging iOS as normal.</p>"},{"location":"user-guide/debugger/tutorials/debugger_xnu/xnu_debugger_primer.html#known-issues-and-limitations","title":"Known Issues and Limitations","text":"<p>Here is a list of known shortcomings in the XNU Debugger. Eventually we will address all of them, but it is unlikely we will resolve all of them by the next release. If any of the following topics are important to you, please let us know by sending an email to support@hex-rays.com. Issues with vocal support from our users are automatically prioritised.</p>"},{"location":"user-guide/debugger/tutorials/debugger_xnu/xnu_debugger_primer.html#iboot-debugging","title":"iBoot debugging","text":"<p>Debugging the iOS firmware/bootloader is not yet supported. An On-Premise Corellium box is required for this functionality, so we will only implement it if there is significant demand.</p>"},{"location":"user-guide/debugger/tutorials/debugger_xnu/xnu_debugger_primer.html#32-bit-xnu","title":"32-bit XNU","text":"<p>The XNU Debugger does not support debugging 32-bit XNU. Since pure 32-bit OSes are quite outdated it is unlikely we will support them unless there is exceptional demand.</p>"},{"location":"user-guide/debugger/tutorials/debugger_xnu/xnu_debugger_primer.html#kdp","title":"KDP","text":"<p>The XNU Debugger relies on the Remote GDB Protocol, and currently Apple's Kernel Debugging Protocol (KDP) is not supported. It is possible to add KDP support to IDA in the future.</p>"},{"location":"user-guide/debugger/tutorials/gdb_debugger_primer/gdb-qemu.html","title":"Gdb qemu","text":"<p>Using IDA's GDB debugger with QEMU emulator</p> <p>Copyright 2009 Hex-Rays SA</p> <p>QEMU is a processor emulator which can emulate a handful of processors, including Intel x86 and ARM architectures. It includes a GDB stub which can be used with new GDB debugger plugin in IDA 5.4.</p>"},{"location":"user-guide/debugger/tutorials/gdb_debugger_primer/gdb-qemu.html#getting-qemu","title":"Getting QEMU","text":"<p>QEMU's home page is at http://bellard.org/qemu/. Win32 builds can be downloaded from Takeda Toshiya's page at http://homepage3.nifty.com/takeda-toshiya/qemu/. This primer assumes you downloaded QEMU 0.9.1 for Win32 or later. We will debug the small Linux included with QEMU.</p>"},{"location":"user-guide/debugger/tutorials/gdb_debugger_primer/gdb-qemu.html#enabling-gdb-stub","title":"Enabling GDB stub","text":"<p>After unpacking QEMU, make a copy of the qemu-win.bat file, for example qemu-win-gdb.bat and edit it. Add -s -S to the qemu.exe call (-s enables GDB stub and -S instructs QEMU to stop at the system start):</p> <p></p> <p>Run the .bat file. QEMU will stop and wait for the debugger.</p> <p></p>"},{"location":"user-guide/debugger/tutorials/gdb_debugger_primer/gdb-qemu.html#debugging-with-ida","title":"Debugging with IDA","text":"<p>Start IDA.</p> <p></p> <p>If you get the welcome dialog, choose \"Go\".</p> <p></p> <p>Choose Debugger | Attach | Remote GDB debugger.</p> <p></p> <p>Enter \"localhost\" for hostname and 1234 for the port number. Click \"Debugger specific options\".</p> <p></p> <p>QEMU needs special configuration because it behave slightly differently from other GDB stubs. Uncheck \"Software breakpoints at EIP+1\" and check \"Use CS:IP in real mode\". Make sure Processor is set to \"Intel x86\". Click OK, then click OK in \"Debug application setup\" dialog.</p> <p></p> <p>Choose \\&lt;attach to the process started on target&gt; and click OK.</p>"},{"location":"user-guide/debugger/tutorials/gdb_debugger_primer/gdb-qemu.html#debugging-the-bios","title":"Debugging the BIOS","text":"<p> The BIOS entrypoint is displayed but the disassembly is wrong since the default MEMORY segment is 32-bit.</p> <p>Let's create some manual memory regions to reflect the real memory map.</p> <p></p> <p>Go to Debugger | Manual memory regions.</p> <p></p> <p>Right-click and choose \"Insert...\" (or press Ins).</p> <p></p> <p>Enter the following details:</p> <p>Start address: F0000 End address: 100000 Base address: F000 Name: BIOS Class: CODE select \"16-bit segment\"</p> <p>Click OK.</p> <p></p> <p>Now the disassembly is correct and you can trace the BIOS code.</p>"},{"location":"user-guide/debugger/tutorials/gdb_debugger_primer/gdb-qemu.html#debugging-the-kernel","title":"Debugging the kernel","text":"<p>To debug the Linux kernel, we first need to create memory regions where it will execute. The usual kernel entrypoint is at address 100000, and it can use memory almost to the maximum 4G address.</p> <p>Open memory regions list (Debugger | Manual memory regions) and add a new region:</p> <p></p> <p>Start address: 100000 End address: F0000000 Base address: 0 Name: LINUX Class: CODE select \"32-bit segment\"</p> <p>Click OK.</p> <p>We now have two regions:</p> <p></p> <p>Double-click the LINUX region to go to its beginning.</p> <p></p> <p>Press F2 or choose \"Add breakpoint\" from the context menu.</p> <p>Check \"Hardware breakpoint\" and select \"Execute\" in \"Modes\". Click OK.</p> <p>Now press F9 or choose Debugger | Continue process. You should see BIOS and LILO messages on the screen, and the execution will stop at the \"Loading Linux....\" message.</p> <p>This is the initial loader which decompresses the kernel. If you press F9 once more, you'll see \"Uncompressing Linux...\" and then \"Ok, booting the kernel\" messages in QEMU and IDA will stop at the decompressed kernel entrypoint:</p> <p>This code sets up paging table, enables paging, and then jumps to the \"real\" kernel entrypoint.</p>"},{"location":"user-guide/debugger/tutorials/gdb_debugger_primer/gdb-qemu.html#adding-symbols","title":"Adding symbols","text":"<p>Kernel symbols are available as /proc/ksyms or /proc/kallsyms pseudo-file after booting. If you get that file from the VM to the host, you can add the symbols to your disassembly. Go to File | Python command... and enter the following short script:</p> <p>ksyms = open(r\"D:\\ksyms\") #path to the ksyms file for line in ksyms: addr = int(line[:8], 16) name = line[9:-1] # use line[11:-1] in case of kallsyms idaapi.set_debug_name(addr, name) MakeNameEx(addr, name, SN_NOWARN) Message(\"%08X: %s\\n\"%(addr, name))</p> <p>Click OK and wait a bit until it finishes. After that you should see the symbols in the dissassembly and name list:</p> <p></p> <p>Happy debugging!</p> <p>Copyright 2009 Hex-Rays SA</p>"},{"location":"user-guide/debugger/tutorials/gdb_linux_vmware/gdb_linux_vmware.html","title":"Debugging Linux Kernel under VMWare using IDA GDB debugger","text":"<p>Current versions of VMWare Workstation include a GDB stub for remote debugging of the virtual machines running inside it. In version 5.4, IDA includes a debugger module which supports the remote GDB protocol. This document describes how to use it with VMWare. As an example, we'll debug a Linux kernel.</p>"},{"location":"user-guide/debugger/tutorials/gdb_linux_vmware/gdb_linux_vmware.html#debugging-a-linux-kernel","title":"Debugging a Linux kernel","text":"<p>Let's assume that you already have a VM with Linux installed. Before starting the debugging, we will copy symbols for the kernel for easier navigation later. Copy either /proc/kallsyms or /boot/Sytem.map* file from the VM to host.</p> <p>Now edit the VM's .vmx file to enable GDB debugger stub:</p> <p>Add these lines to the file:</p> <p>debugStub.listen.guest32 = \"TRUE\"</p> <p>debugStub.hideBreakpoints= \"TRUE\"</p> <p>monitor.debugOnStartGuest32 = \"TRUE\"</p> <p>Save the file.</p> <p>In VMWare, click \"Power on this virtual machine\" or click the green Play button on the toolbar.</p> <p></p> <p>A black screen is displayed since VMWare is waiting for a debugger to connect.</p> <p>Start IDA.</p> <p></p> <p>If you get the welcome dialog, choose \"Go\".</p> <p></p> <p>Choose Debugger | Attach | Remote GDB debugger.</p> <p></p> <p>Enter \"localhost\" for hostname and 8832 for the port number.</p> <p></p> <p>Choose \\ and click OK. <p></p> <p>We land in the BIOS, but since we're not interested in debugging it, we can skip directly to the kernel. Inspect the kallsyms or System.map file you downloaded from the guest and search for the start_kernel symbol:</p> <p></p> <p>Copy the address, and navigate to it in IDA (Jump | Jump to addres... or just \"g\").</p> <p>Press F2 or choose \"Add breakpoint\" from the context menu.</p> <p>Check \"Hardware breakpoint\" and select \"Execute\" in \"Modes\". Click OK.</p> <p>Press F9. You will see loading messages and then the execution will stop at the entrypoint.</p> <p></p>"},{"location":"user-guide/debugger/tutorials/gdb_linux_vmware/gdb_linux_vmware.html#adding-symbols","title":"Adding symbols","text":"<p>Symbols are very useful during debugging, and we can use the kallsyms or System.map file to add them to IDA. Go to File | Python command... and paste the following short script (don't forget to edit the file path):</p> <p>ksyms = open(r\"D:\\kallsyms\") # path to the kallsyms/map file\\ &amp;#xNAN;for line in ksyms:\\ &amp;#xNAN;if line[9]=='A': continue # skip absolute symbols\\ &amp;#xNAN;addr = int(line[:8], 16)\\ &amp;#xNAN;name = line[11:-1]\\ &amp;#xNAN;if name[-1]==']': continue # skip module symbols\\ &amp;#xNAN;idaapi.set_debug_name(addr, name)\\ &amp;#xNAN;MakeNameEx(addr, name, SN_NOWARN)\\ &amp;#xNAN;Message(\"%08X: %s\\n\"%(addr, name))</p> <p>Click OK and wait a bit until it finishes. After that you should see the symbols in the disassembly and name list:</p> <p> </p> <p>Happy debugging!</p> <p>Copyright 2009 Hex-Rays SA</p>"},{"location":"user-guide/debugger/tutorials/ida_scriptable_debugger/ida_scriptable_debugger1.html","title":"IDA Scriptable Debugger: overview","text":"<p>Debugging facilities in IDA 4.9 and 4.9 SP</p> <p>Since we enhanced the usability of IDA remote debugging options, many possibilities are now open. Explore the graph below to discover some of the possible connections.</p> <ul> <li>instant debugging, no need to wait for the analysis to be complete to start a debug session.</li> <li>easy connection to both local and remote processes.</li> <li>support for 64 bits systems and new connection possibilities.</li> <li>WindowCE remote debugging</li> </ul> <p>click on the links below to explore some of the remote debugging features.</p> <p></p>"},{"location":"user-guide/debugger/tutorials/ida_scriptable_debugger/ida_scriptable_debugger2.html","title":"IDA Scriptable Debugger: scriptability","text":"<p>Since 2003 IDA offers a debugger that complements the static analysis nicely. In many cases, one just can't beat dynamic analysis. The IDA Debugger now supports 32-bit and 64-bit MS Windows executablesMS Windows, Linux, Mac OS X both locally and remotely. However, because the debugger API requires the mastery of our SDK and uses an event based model, it has proved quite difficult to use for some of our users.</p> <ul> <li>because the API uses an event based model makes it hard to program a linear sequence of actions in a natural way. The user is forced to install an event handler and to implement a finite state machine that implements the core logic of his plugin. While this may, in many ways, be a more powerful approach, this is probably too complex for more mundane tasks.</li> <li>because the API is only available at the plugin level, the simplest debugger actions requires writing a plugin which is a much bigger investment of time and efforts than writing a small IDC script.</li> </ul> <p>IDA 5.2 will address both issues. The old event based model will remain available, but a simpler linear model will become available thanks to the function get_debugger_event(). This function pauses the execution of the plugin (or the script) until a new debugger event happens. The user can specify if she is interested only in the events that suspend the process or in all events. A timeout can also be confifured, after which the execution will continue if no event arose.</p> <p>The new function allows us to drop the event based model (except in the cases when it is superior to linear logic) and write IDC scripts to control the debugger. For example, to launch the debugger, run to a specific location, print some data and single step twice, the following lines will suffice:</p> <pre><code>  AppBpt(some_address);\n  StartDebugger(\"\",\"\",\"\");         // start debugger with default params\n  GetDebuggerEvent(WFNE_SUSP, -1); // ... and wait for bpt\n  Message (\"Stopped at %a, event code is %x\\n\", GetEventEA(), GetEventId());\n  StepInto();                      // request a single step\n  GetDebuggerEvent(WFNE_SUSP, -1); // ... and wait for app to execute\n  StepInto();                      // request a single step\n  GetDebuggerEvent(WFNE_SUSP, -1); // ... and wait for app to execute\n</code></pre> <p>In IDA 5.1 this would have required a event handler and a small finite state automata, for a total more than 200 lines of code. Please note that, in the above example, the error handling code is omitted for clarity. In real life, you might want to check for unexpected conditions like an exception happening after StepInto().</p> <p>To illustrate how easier it is to write scripts with the new approach, we rewrote the core functionality of the UUNP unpacker plugin. The original program requires about 600 lines of code and has a rather complex logic. The new script only requires 100 lines of code (almost half of them being comments and empty lines). More importantly, the script is easy to understand and modify for your needs.</p> <p>This is a reimplementation of the uunp universal unpacker in IDC. It illustrates the use of the new debugger functions in IDA v5.2</p> <pre><code>#include &lt;idc.idc&gt;\n\n//--------------------------------------------------------------------------\nstatic main()\n{\n  auto ea, bptea, tea1, tea2, code, minea, maxea;\n  auto r_esp, r_eip, caller, funcname;\n\n  // Calculate the target IP range. It is the first segment.\n  // As soon as the EIP register points to this range, we assume that\n  // the unpacker has finished its work.\n  tea1 = FirstSeg();\n  tea2 = SegEnd(tea1);\n\n  // Calculate the current module boundaries. Any calls to GetProcAddress\n  // outside of these boundaries will be ignored.\n  minea = MinEA();\n  maxea = MaxEA();\n\n  // Launch the debugger and run until the entry point\n  if ( !RunTo(BeginEA()) )\n    return Failed(-1);\n\n  // Wait for the process to stop at the entry point\n  code = GetDebuggerEvent(WFNE_SUSP, -1);\n  if ( code &lt;= 0 )\n    return Failed(code);\n\n  // Set a breakpoint at GetProcAddress\n  bptea = LocByName(\"kernel32_GetProcAddress\");\n  if ( bptea == BADADDR )\n    return Warning(\"Could not locate GetProcAddress\");\n  AddBpt(bptea);\n\n  while ( 1 )\n  {\n    // resume the execution and wait until the unpacker calls GetProcAddress\n    code = GetDebuggerEvent(WFNE_SUSP|WFNE_CONT, -1);\n    if ( code &lt;= 0 )\n      return Failed(code);\n\n    // check the caller, it must be from our module\n    r_esp = GetRegValue(\"ESP\");\n    caller = Dword(r_esp);\n    if ( caller &lt; minea || caller &gt;= maxea )\n      continue;\n\n    // if the function name passed to GetProcAddress is not in the \n    // ignore-list, then switch to the trace mode\n    funcname = GetString(Dword(r_esp+8), -1, ASCSTR_C);\n    // ignore some api calls because they might be used by the unpacker\n    if ( funcname == \"VirtualAlloc\" )\n      continue;\n    if ( funcname == \"VirtualFree\" )\n      continue;\n\n    // A call to GetProcAddress() probably means that the program has been\n    // unpacked in the memory and now is setting up its import table\n    break;\n  }\n\n  // trace the program in the single step mode until we jump to\n  // the area with the original entry point.\n  DelBpt(bptea);\n  EnableTracing(TRACE_STEP, 1);\n  for ( code = GetDebuggerEvent(WFNE_ANY|WFNE_CONT, -1); // resume\n        code &gt; 0;\n        code = GetDebuggerEvent(WFNE_ANY, -1) )\n  {\n    r_eip = GetEventEa();\n    if ( r_eip &gt;= tea1 &amp;&amp; r_eip &lt; tea2 )\n      break;\n  }\n  if ( code &lt;= 0 )\n    return Failed(code);\n\n  // as soon as the current ip belongs OEP area, suspend the execution and\n  // inform the user\n  PauseProcess();\n  code = GetDebuggerEvent(WFNE_SUSP, -1);\n  if ( code &lt;= 0 )\n    return Failed(code);\n\n  EnableTracing(TRACE_STEP, 0);\n\n  // Clean up the disassembly so it looks nicer\n  MakeUnknown(tea1, tea2-tea1, DOUNK_EXPAND|DOUNK_DELNAMES);\n  MakeCode(r_eip);\n  AutoMark2(tea1, tea2, AU_USED);\n  AutoMark2(tea1, tea2, AU_FINAL);\n  TakeMemorySnapshot(1);\n  MakeName(r_eip, \"real_start\");\n  Warning(\"Successfully traced to the completion of the unpacker code\\n\"\n          \"Please rebuild the import table using renimp.idc\\n\"\n          \"before stopping the debugger\");\n}\n//--------------------------------------------------------------------------\n// Print an failure message\nstatic Failed(code)\n{\n  Warning(\"Failed to unpack the file, sorry (code %d)\", code);\n  return 0;\n}\n</code></pre>"},{"location":"user-guide/debugger/tutorials/ios_debugging_coredevice/ios_debugging_coredevice.html","title":"Debugging iOS Applications using CoreDevice (iOS 17 and up)","text":"<p>This guide shows a walkthrough of how one can use IDA Pro to debug an app installed using Xcode on a device running iOS 17 or iOS 18. The pre-debugging setup is specific to non-jailbroken devices running iOS 18 with a macOS host but the steps in IDA can be reused for most iOS/iPadOS targets (jailbroken, Corellium) with a different platform as the host. The iOS debugger is available with all platforms IDA supports though due to Apple's iOS tools being available on macs only, the workflow is easier on macOS.</p> <p>Tested on macOS 15.0 (24A335) using Xcode 16.0 (16A242) with an iPhone 11 running iOS 18.0 (22A3354).</p>"},{"location":"user-guide/debugger/tutorials/ios_debugging_coredevice/ios_debugging_coredevice.html#1-installing-an-app-on-a-non-jailbroken-device","title":"1. Installing an app on a non-jailbroken device","text":"<p>Since it's the simplest way to install an app onto an iOS device, we'll be using Xcode to quickly build and install a sample app onto our target device.</p> <p>Create an iOS Game app by choosing the appropriate template:</p> <p></p> <p>Enter a Product name, make note of the resulting Bundle Identifier. For the scope of this guide, the rest of the project options aren't relevant.</p> <p></p> <p>In the main Xcode window, ensure that the appropriate target device (Run Destinations) is selected.</p> <p></p> <p>If the device hasn\u2019t been paired, a warning may appear requesting you to accept the \u201cTrust\u201d prompt on the device to pair with the host. If the device hasn\u2019t been used for development recently, Xcode will install a Developer Disk Image to enable development services. It will also copy and extract the shared cache symbols to the host (in <code>~/Library/Developer/Xcode/iOS DeviceSupport/&lt;device_and_os_version&gt;/</code>).</p> <p>If you try to Run (clicking on the \u201cplay\u201d icon or using CMD-R) the app, an error may appear prompting you to select a development team. Xcode requires that a developer certificate is selected for the signing of the application.</p> <p></p> <p>The developer team can be selected via the Signing &amp; Capabilities editor.</p> <p></p> <p>Now that a developer certificate was selected for the app, it must also be trusted on the device. If you attempt to Run the app, another warning should appear prompting you to trust the certificate on the device. (Please follow those instructions to trust that certificate)</p> <p></p> <p>Finally, Run the app and ensure that it starts properly on the target device.</p> <p></p>"},{"location":"user-guide/debugger/tutorials/ios_debugging_coredevice/ios_debugging_coredevice.html#2-setting-up-the-debug-environment-launching-the-app","title":"2. Setting up the debug environment, launching the app","text":"<p>Debugging an application on an iPhone is enabled by the <code>debugserver</code> that will attach to the application's process. The <code>debugserver</code> communicates with clients using (an extended version of) the GDB protocol. IDA comes with an iOS debugger that can \"talk\" that same protocol. The techniques necessary to prepare the debugging environment on an iPhone have evolved over time (and will likely keep evolving) but fundamentally the goal is always to establish a connection with a <code>debugserver</code>.</p> <p>The device communication stack was revamped with iOS 17. Devices expose a series of remote services (through <code>remoted</code> which is visible via Bonjour). One of those services is a <code>debugproxy</code> which is... a proxy to the <code>debugserver</code>. <code>debugproxy</code> is a secure service, it is not available to any client. To gain access to secure services, a trusted tunnel must be setup (requires the device to be paired with the host), between the host and the device (the service to set up the tunnel is itself available via <code>remoted</code>).</p> <p>One of the primary frameworks used for these communications is CoreDevice, with it Apple also provides <code>devicectl</code> which is a very convenient utility that can be used to automate certain tasks to control devices. We will use <code>devicectl</code> to perform certain tasks such as launching an application on the device. Unfortunately <code>devicectl</code> doesn't provide a direct interface to setup a trusted tunnel and retrieve ports of services exposed through it. It is however possible to reuse some commands of <code>devicectl</code> to create a tunnel and keep it open. In addition, the ports of services are written to system logs after the tunnel is set up so we can recover them with a few tricks.</p> <p>To make commands provided below immediately usable, we'll define two helper environment variables. The device name is the same as the one that was used for the target device in Xcode, it can also be found using <code>xcrun devicectl list devices</code>. The bundle identifier is the identifier of the application we\u2019d like to debug</p> <pre><code>export DEVICE_NAME=\"red_iphone11\"\nexport BUNDLE_ID=\"com.acme.spritegame\"\n</code></pre> <p>Trigger the creation of a trusted tunnel</p> <p>To request the creation of the trusted tunnel, the <code>devicectl device notification observe</code> command was selected because it can keep the tunnel open for an arbitrary amount of time (controlled using the timeout). Here the name for the Darwin notification ('foobar') to observe is one that will presumably never be posted. The timeout (3000[s]) was chosen to be long enough for a debugging session.</p> <p>Retrieve the details of the <code>debugproxy</code> service (provided through the trusted tunnel) from the system logs. The command below will filter for the specific log messages we\u2019re looking for (ipv6 address of device through tunnel and port of <code>debugproxy</code> service). In short <code>log show</code> (see <code>log(1)</code>) will show messages from the system logs; <code>--last 5m</code> will limit the search to the past 5 minutes (the tunnel should have been created when the previous command was started so 5 minutes ought to be enough); The messages we're looking for are \"Info\" messages so <code>--info</code> is necessary; <code>--predicate</code> is used for message filters.</p> <pre><code>log show --last 5m --info --predicate '((eventMessage CONTAINS \"Adding remote service\") &amp;&amp; (eventMessage CONTAINS \"debugproxy\")) || (eventMessage CONTAINS \"Tunnel established - interface\")'  --style compact\n</code></pre> <p>NOTE: if no log messages match the filter, it is recommended to force the recreation of the tunnel</p> <ul> <li>kill the <code>remotepairingd</code> daemon: <code>sudo pkill -9 remotepairingd</code></li> <li>retry previous two steps</li> </ul> <p>Some applications can keep the tunnel open, examples: Xcode, Console and Safari. It is preferable to close them before creating the tunnel. If multiple sets of messages match the filter (with different connection details), only the last one should be considered (previous connections would likely be stale).</p> <pre><code>2024-09-23 10:04:31.396 Df remotepairingd[1067:8211ab] [com.apple.dt.remotepairing:remotepairingd] device-138 (00008030-000D3988119A802E): Tunnel established - interface: utun5, local fd57:8329:afda::2-&gt; remote fd57:8329:afda::1\n2024-09-23 10:04:31.422 I  remoted[342:81eff3] [com.apple.RemoteServiceDiscovery:remoted] coredevice-15&gt; Adding remote service \"com.apple.internal.dt.remote.debugproxy\": {\n    Properties =&gt; {\n        Features =&gt; [&lt;capacity = 1&gt;\n            0: com.apple.coredevice.feature.debugserverproxy\n        ]\n        ServiceVersion =&gt; 1\n        UsesRemoteXPC =&gt; true\n    }\n    Entitlement =&gt; com.apple.private.CoreDevice.canDebugApplicationsOnDevice\n    Port =&gt; 49350\n}\n</code></pre> <p>The relevant pieces of information in the messages are:</p> <p><code>remote fd57:8329:afda::1</code> in the first message and <code>Port =&gt; 49350</code> in the second message.</p> <p>TIP: There are some really good third party tools out there such as DoronZ's pymobiledevice3 that reimplement the necessary machinery to create a trusted tunnel and make services available.</p> <p>Launch the app (<code>--start-stopped</code> will make it wait at the process entry point)</p> <pre><code>xcrun devicectl device process launch -d $DEVICE_NAME --start-stopped $BUNDLE_ID\n</code></pre> <p>Retrieve the PID of the process.</p> <pre><code>xcrun devicectl device info processes -d $DEVICE_NAME | grep $(awk '{print A[split($1, A, \"\\.\")]}' &lt;&lt;&lt; $BUNDLE_ID)\n</code></pre> <pre><code>820   /private/var/containers/Bundle/Application/4629EEFD-0AD5-4B3C-B773-FD7D643BC376/spritegame.app/spritegame\n</code></pre> <p>We have now created a trusted tunnel, found the connection details necessary for the <code>debugproxy</code>, launched an app and fetched its PID.</p>"},{"location":"user-guide/debugger/tutorials/ios_debugging_coredevice/ios_debugging_coredevice.html#3-debugging-in-ida","title":"3. Debugging in IDA","text":"<p>Open the application executable (typically located in <code>~/Library/Developer/Xcode/DerivedData/&lt;project_id&gt;/Build/Products/Debug-iphoneos/&lt;appname&gt;.app/&lt;appname&gt;</code>, the path to the build folder can also be retrieved via Xcode Product&gt;Copy Build Folder Path) in IDA.</p> <p>Open the Debugger&gt;Process options.. dialog.</p> <p></p> <p>Fill-in the Hostname (address) and Port of the <code>debugproxy</code>. Please use the ones retrieved from the system logs earlier.</p> <p>The Application and Parameters fields can safely be ignored since we\u2019ll be attaching to a process. For this example the input file is the main executable for the application, as such the Input file field doesn't need to be modified.</p> <p></p> <p>Open the Debugger specific options.</p> <p>IDA can speed up the loading of shared cache symbols if they have been copied and extracted to the host machine, it is highly recommended to provide the Symbol path (normally <code>~/Library/Developer/Xcode/iOS DeviceSupport/&lt;device_and_os_version&gt;/Symbols</code>). Launch debugserver automatically should be disabled as it is used to communicate with devices using the MobileDevice framework (no longer a viable option as of iOS 17). Accept this dialog.</p> <p></p> <p>Optionally, open the Debugger options and enable Suspend on debugging start. The Debugger setup dialog can then be closed as well as the Debug application setup dialog.</p> <p></p> <p>Now that the necessary connection details have been given to IDA, we can attach to the target process.</p> <p>Open Debugger&gt;Attach to process... We will provide the PID manually so accept this dialog.</p> <p></p> <p>Enter the PID of the target process retrieved earlier using <code>devicectl</code> and accept this dialog.</p> <p></p> <p>Profit! The Debugging session should start.</p> <p></p>"},{"location":"user-guide/debugger/tutorials/linux_debugger/linux_debugger.html","title":"IDA: Linux Debugger","text":"<p>Since version 4.7, IDA offers a console Linux debugger and a console Linux disassembler (since version 5.1 IDA also offers a Mac OS X debugger and disassembler). The Linux version of IDA brings the power of combined disassembly and debugging to the Linux world.</p> <p>The Linux version of IDA:</p> <ul> <li>is able to disassemble any file supported by the Windows version.</li> <li>supports all the features of the Windows console version, including interactivity, scripting and plugins.</li> <li>offer local debugging of Linux executables.</li> <li>can connect to Windows machines running our debugging server and debug Windows executables.</li> <li>remote debugging server that allows you to debug Linux programs from another Linux machine, or even a Windows one.</li> </ul> <p>Below: the Linux Debugger working locally.</p> <p></p> <p>Below: the Windows Debugger about to debug a remote Linux binary.</p> <p></p> <p>Below: the Windows Debugger in a remote debugging session.</p> <p></p> <p>A typical use of the remote linux debugger would be the safe analysis of an hostile Windows binary: the Linux debugger, for example, brings unprecedented flexibility and security to the virus analyst. A typical use of the remote Windows debugger would be Linux debugging in a comfortable, well known GUI.</p> <p>The IDA debugger, disassembler and remote debuggers are not sold separately but are included in the normal IDA distribution.</p>"},{"location":"user-guide/debugger/tutorials/linuxlocal/linuxlocal.html","title":"IDA Linux Local Debugging","text":"<p>You may either start a local debugging session on a new process or start a local debugging session and attach it to an existing process. Both options are accessible through the command line.</p> <p><code>idat -rlinux MY_PROGRAM</code></p> <p>will start the program, create a temporary database that allows the user to work with the target at once.</p> <p></p> <p>The command</p> <p><code>idat -rlinux+</code></p> <p>will offer you a choice of running processes to connect to.</p> <p></p> <p>and we can proceed with our local Linux debugging session.</p> <p></p>"},{"location":"user-guide/debugger/tutorials/linuxtowin64/linuxtowin64.html","title":"IDA Linux to Win64 Debugging","text":"<p>One of the fanciest options offered by the IDA 4.8 debugger is the debugging of Windows executables from a Linux machine. The 64 bits remote debugging server is started on the Windows64 machine.</p> <p></p> <p>and IDA for Linux is started with the following command line</p> <p>idat -rwin32@192.168.1.56+</p> <p>the command line switch specifies the debugger type (windows in this case), the machine name/IP (192.168.1.56) and the last + specifies that a list of running processes will be requested from the target machine. IDA will then display that list and you'll be able to connect to processes on the Windows64 machine.</p> <p></p> <p>and here is the 64 bit program, ready to be debugged under Linux.</p> <p></p>"},{"location":"user-guide/debugger/tutorials/qemu_debugger_primer/primer.html","title":"Debugging code snippets with QEMU debugger (a la IDA Bochs debugger)","text":""},{"location":"user-guide/debugger/tutorials/qemu_debugger_primer/primer.html#introduction","title":"Introduction","text":"<p>IDA Pro 5.6 has a new feature: automatic running of the QEMU emulator. It can be used to debug small code snippets directly from the database. In this tutorial we will show how to dynamically run code that can be difficult to analyze statically.</p>"},{"location":"user-guide/debugger/tutorials/qemu_debugger_primer/primer.html#target","title":"Target","text":"<p>As an example we will use shellcode from the article \"Alphanumeric RISC ARM Shellcode\" in Phrack 66. It is self-modifying and because of alphanumeric limitation can be quite hard to undestand. So we will use the debugging feature to decode it.</p> <p>The sample code is at the bottom of the article but here it is repeated:</p> <p>80AR80AR80AR80AR80AR80AR80AR80AR80AR80AR80AR80AR80AR80AR80AR80AR80AR80AR\\ 80AR80AR80AR80AR80AR80AR80AR80AR80AR00OB00OR00SU00SE9PSB9PSR0pMB80SBcACP\\ daDPqAGYyPDReaOPeaFPeaFPeaFPeaFPeaFPeaFPd0FU803R9pCRPP7R0P5BcPFE6PCBePFE\\ BP3BlP5RYPFUVP3RAP5RWPFUXpFUx0GRcaFPaP7RAP5BIPFE8p4B0PMRGA5X9pWRAAAO8P4B\\ gaOP000QxFd0i8QCa129ATQC61BTQC0119OBQCA169OCQCa02800271execme22727</p> <p>Copy this text to a new text file, remove all line breaks (i.e. make it a single long line) and save. Then load it into IDA.</p>"},{"location":"user-guide/debugger/tutorials/qemu_debugger_primer/primer.html#loading-binary-files-into-ida","title":"Loading binary files into IDA","text":"<p>IDA displays the following dialog when it doesn't recognize the file format (as in this case):</p> <p></p> <p>Since we know that the code is for ARM processor, choose ARM in the \"Processor type\" dropdown and click Set. Then click OK. The following dialog appears:</p> <p></p> <p>When you analyze a real firmware dumped from address 0, these settings are good. However, since our shellcode is not address-dependent, we can choose any address. For example, enter 0x10000 in \"ROM start address\" and \"Loading address\" fields.</p> <p></p> <p>IDA doesn't know anything about this file so it didn't create any code. Press C to start disassembly.</p> <p></p>"},{"location":"user-guide/debugger/tutorials/qemu_debugger_primer/primer.html#configuring-qemu","title":"Configuring QEMU","text":"<p>Before starting debug session, we need to set up automatic running of QEMU.</p> <ol> <li>Download a recent version of QEMU with ARM support (e.g. from http://homepage3.nifty.com/takeda-toshiya/qemu/index.html). If qemu-system-arm.exe is in a subdirectory, move it next to qemu.exe and all DLLs.\\    Note: if you're running Windows 7 or Vista, it's recommended to use QEMU 0.11 or 0.10.50 (\"Snapshot\" on Takeda Toshiya's page), as the older versions listen for GDB connections only over IPv6 and IDA can't connect to it.</li> <li>Edit cfg/gdb_arch.cfg and change \"set QEMUPATH\" line to point to the directory where you unpacked QEMU. Change \"set QEMUFLAGS\" if you're using an older version.</li> <li>In IDA, go to Debug-Debugger options..., Set specific options.</li> <li>Enable \"Run a program before starting debugging\".</li> <li>Click \"Choose a configuration\". Choose Versatile or Integrator board. The command line and Initial SP fields will be filled in.</li> <li>Memory map will be filled from the config file too. You can edit it by clicking the \"Memory map\" button, or from the Debugger-Manual memory regions menu item. See below for more details</li> </ol> <p>Now on every start of debugging session QEMU will be started automatically.</p>"},{"location":"user-guide/debugger/tutorials/qemu_debugger_primer/primer.html#executing-the-code","title":"Executing the code","text":"<p>By default, initial execution point is the entry point of the database. If you want to execute some other part of it, there are two ways:</p> <ol> <li>Select the code range that you want to execute, or</li> <li>Rename starting point ENTRY and ending point EXIT (convention similar to Bochs debugger)</li> </ol> <p>In our case we do want to start at the entry point so we don't need to do anything. If you press F9 now, IDA will write the database contents to an ELF file (database.elfimg) and start QEMU, passing the ELF file name as the \"kernel\" parameter. QEMU will load it, and stop at the initial point.</p> <p></p> <p>Now you can step through the code and inspect what it does. Most of the instructions \"just work\", however, there is a syscall at 0x0010118:</p> <p>ROM:00010118 SVCMI 0x414141</p> <p>Since the QEMU configuration we use is \"bare metal\", without any operating system, this syscall won't be handled. So we need to skip it.</p> <ol> <li>Navigate to 010118 and press F4 (Run to cursor). Notice that the code was changed (patched by preceding instructions):</li> <li>Right-click next line (0001011C) and choose Set IP.</li> <li>Press F7 three times. Once you're on BXPL R6 line, IDA will detect the mode switch and add a change point to Thumb code:</li> <li>Go to 01012C and press U (Undefine).</li> <li>Press Alt-G (Change Segment Register Value) and set value of T to 1. The erroneous CODE32 will disappear.</li> <li>Go back to 00010128 and press C (Make code). Nice Thumb code will appear:</li> <li>In Thumb code, there is another syscall at 00010152. If you trace or run until it, you can see that R7 becomes 0xB (sys_execve) and R0 points to 00010156.</li> </ol> <p>Hint: if the code you're investigating has many syscalls and you don't want to handle them one by one, put a breakpoint at the address 0000000C (ARM's vector for syscalls). Return address will be in LR.</p>"},{"location":"user-guide/debugger/tutorials/qemu_debugger_primer/primer.html#saving-results-to-database","title":"Saving results to database","text":"<p>If you want to keep the modified code or data for later analysis, you'll need to copy it to the database. For that:</p> <ol> <li>Edit segment attributes (Alt-S) and make sure that segments with the data you need have the \"Loader segment\" attribute set.</li> <li>Choose Debugger-Take memory snapshot and answer \"Loader segments\".</li> <li>Now you can stop the debugging and inspect the new data.\\    Note: this will update your database with the new data and discard the old. Repeated execution probably will not be correct.</li> </ol> <p>Happy debugging!\\ Please send any comments or questions to support@hex-rays.com</p>"},{"location":"user-guide/debugger/tutorials/remote_debugging/remote-debugging-with-ida-pro.html","title":"Remote debugging with IDA Pro","text":"<p>Remote debugging is the process of debugging code running on one networked computer from another networked computer:</p> <ul> <li>The computer running the IDA Pro interface will be called the \"debugger client\".</li> <li>The computer running the application to debug will be called the \"debugger server\".</li> </ul> <p>Remote debugging will be particularly useful in the following cases:</p> <ul> <li>To debug virus/trojans/malwares : in this way, the debugger client will be as isolated as possible from the compromised computer.</li> <li>To debug applications encountering a problem on one computer which is not duplicated on other computers.</li> <li>To debug distributed applications.</li> <li>To always debug from your main workstation, so you won't have to duplicate IDA configuration, documentation and various debugging related resources everywhere.</li> <li>In the future, to debug applications on more operating systems and architectures.</li> </ul> <p>This small tutorial will present how to setup and use remote debugging in practice.</p>"},{"location":"user-guide/debugger/tutorials/remote_debugging/remote-debugging-with-ida-pro.html#the-remote-ida-debugger-server","title":"The remote IDA debugger server","text":"<p>In order to allow the IDA client to communicate with the debugger server over the network, we must first start a small server which will handle all low-level execution and debugger operations. </p>"},{"location":"user-guide/debugger/tutorials/remote_debugging/remote-debugging-with-ida-pro.html#debugger-servers","title":"Debugger servers","text":"<p>The IDA distribution ships with the following debugger servers: * For Windows: win32_remote32 (x86), win64_remote.exe (x64) * For Linux: linux_server32 (x86), linux_server (x64), armlinux_server32 (ARM), armlinux_server (ARM64) * For Android: android_x86_server, android_x64_server, android_server32 (ARM), android_server (ARM64) * For Mac: mac_server32 (x86), mac_server (x64), mac_server_arm (ARM64), mac_server_arme (ARM64e)</p> <p>With these, we can: * Locally debug applications and shared libraries from the IDA graphical and text versions. * Remotely debug applications and shared libraries from the IDA graphical and text versions.</p> <p>So let's first copy the small x64 Windows debugger server file to our debugger server.</p> <p>This server accepts various command line arguments:</p> <pre><code>C:\\&gt; win64_remote -?\nIDA Windows 64-bit remote debug server(MT) v9.0.30. Hex-Rays (c) 2004-2024\nUsage: win64_remote [options]\n  -p ...  (--port-number ...) Port number\n  -i ...  (--ip-address ...) IP address to bind to (default to any)\n  -c ...  (--certchain-file ...) TLS certificate chain file\n  -k ...  (--privkey-file ...) TLS private key file\n  -v      (--verbose) Verbose mode\n  -t      (--no-tls) Use plain, unencrypted TCP connections\n  -P ...  (--password ...) Password\n  -k      (--on-broken-connection-keep-session) Keep debugger session alive when connection breaks\n  -K      (--on-stop-kill-process) Kill debuggee when closing session\n</code></pre> <p>Let's start it by specifying a password, to avoid unauthorized connections:</p> <pre><code>C:\\&gt;win64_remote -Pmypassword\nIDA Windows 64-bit remote debug server(MT) v9.0.30. Hex-Rays (c) 2004-2024\n2024-11-04 03:20:51 Listening on 0.0.0.0:23946 (my ip 172.20.156.1)...\n</code></pre> <p>Note that the remote debugger server can only handle one debugger session at a time. If you need to debug several applications simultaneously on the same host, launch several servers on different network ports by using the -p switch.</p>"},{"location":"user-guide/debugger/tutorials/remote_debugging/remote-debugging-with-ida-pro.html#setting-up-the-debugger-client","title":"Setting up the debugger client.","text":"<p>First, we copy the executable we want to debug from the debugger server (Windows or Linux) to the debugger client (Windows or Linux). We can then load this file into IDA, as usual. To setup remote debugging, we select the 'Process options...' menu item in the Debugger menu:</p> <p></p> <p>Specify the Application and Directory paths. Note that these file paths should be valid on the remote debugger server. Also do not forget to enter the host name or IP address of the debugger server: remote debugging will only be enabled if these settings are specified ! You also might have to open the TCP port in the remote machine firewall. Finally, we enter the password we chose for the remote IDA debugger server.</p>"},{"location":"user-guide/debugger/tutorials/remote_debugging/remote-debugging-with-ida-pro.html#starting-remote-debugging","title":"Starting remote debugging.","text":"<p>Both debugger server and debugger client are now ready to start a remote debugging session. In fact, you can now use all debugger related commands as you would with the local Windows PE debugger or local Linux debugger! For example,we can run the process until RIP reaches the application entry point, by jumping to this entry point then pressing the F4 key:</p> <p></p> <p>If we now directly terminate the process (by pressing CTRL-F2) and look at win64_remote's output (on the debugger server), we indeed properly observe it accepted then closed our network connection:</p> <pre><code>C:\\\\&gt; .\\win64_remote.exe -Pmypassword\nIDA Windows 64-bit remote debug server(MT) v9.0.30. Hex-Rays (c) 2004-2024\n2024-11-04 03:20:51 Listening on 0.0.0.0:23946 (my ip 172.20.156.1)...\n2024-11-04 03:29:26 [1] Accepting connection from 172.20.144.1...\n2024-11-04 03:37:56 [1] Closing connection from 172.20.144.1...\n</code></pre>"},{"location":"user-guide/debugger/tutorials/remote_debugging/remote-debugging-with-ida-pro.html#attaching-to-a-running-process","title":"Attaching to a running process.","text":"<p>Another interesting possibility is to attach to an already running process on the remote computer. If you click on the 'Attach to process...' command from the Debugger menu, IDA will display a listing of all remote running processes, you can then filter to choose the one you want to attach to (notepad.exe in this case):</p> <p></p> <p>Double clicking on a process from the list will automatically suspend the process and attach to it, allowing you to debug it without starting it manually.</p>"},{"location":"user-guide/debugger/tutorials/remote_debugging/remote-debugging-with-ida-pro.html#detaching-from-the-debugged-process","title":"Detaching from the debugged process.","text":"<p>Finally, if the debugger server is running Windows XP, Windows Server 2003 or Linux, you can also detach from a process you were currently debugging, simply by using the 'Detach from process' command in the Debugger menu:</p> <p></p> <p>On Windows, please note that IDA can also attach to Windows services running either locally or remotely. In particular, the 'Detach from process' command will be especially useful if you previously attached to a Windows service: it will allow you to stop the debugger without terminating a critical Windows service on the debugger server!</p>"},{"location":"user-guide/debugger/tutorials/trace_replayer/trace_replayer.html","title":"Trace Replayer and managing traces","text":"<p>Using Trace Replayer Debugger and Managing Traces in IDA</p> <p>Copyright 2014 Hex-Rays SA</p>"},{"location":"user-guide/debugger/tutorials/trace_replayer/trace_replayer.html#introduction","title":"Introduction","text":""},{"location":"user-guide/debugger/tutorials/trace_replayer/trace_replayer.html#quick-overview","title":"Quick Overview","text":"<p>The trace replayer is an IDA pseudo debugger plugin that appeared first in IDA 6.3. This plugin can replay execution traces recorded with any debugger backend in IDA, such as local Win32 or Linux debuggers, WinDbg, remote GDB debugger, etc...</p>"},{"location":"user-guide/debugger/tutorials/trace_replayer/trace_replayer.html#following-this-tutorial","title":"Following this tutorial","text":"<p>This tutorial was created using the Linux version of IDA and a Linux binary as target. However, it can be followed on any supported platform (MS Windows, Mac OS X and Linux) by setting up remote debugging. Please refer to the IDA online help for more information regarding remote debugging.</p>"},{"location":"user-guide/debugger/tutorials/trace_replayer/trace_replayer.html#supplied-files","title":"Supplied files","text":"<p>Among with the tutorial the following files are also provided at http://www.hex-rays.com/products/ida/support/tutorials/replayer/ida-replayer-tutorial.tar.gz</p> File name SHA1 Description intoverflow.c 6424d3100e3ab1dd3fceae53c7d925364cea75c5 Program's source code. intoverflow.elf 69a0889b7c09ec5c293702b3b50f55995a1a2daa Linux ELF32 program. no_args.trc 773837c2b212b4416c8ac0249859208fd30e2209 IDA binary trace file version 1 second_run.trc 4e0a5effa34f805cc50fe40bc0e19b78ad1bb7c4 IDA binary trace file version 1 crash.trc f0ee851b298d7709e327d8eee81657cf0beae69b IDA binary trace file version 1"},{"location":"user-guide/debugger/tutorials/trace_replayer/trace_replayer.html#replaying-and-managing-traces","title":"Replaying and managing traces","text":""},{"location":"user-guide/debugger/tutorials/trace_replayer/trace_replayer.html#recording-traces","title":"Recording traces","text":"<p>Before using the trace replayer plugin we will need to record an execution trace of a program. We will use the following toy vulnerable program as an example:</p> <p>#include \\ <p>#include \\ <p>#include \\ <p>int foo(char *arg, int size)</p> <p>{</p> <p>char *buf;</p> <p>if ( strlen(arg) &gt; size )</p> <p>{</p> <p>printf(\"Too big!\\n\");</p> <p>return 1;</p> <p>}</p> <p>buf = malloc(size);</p> <p>strcpy(buf, arg);</p> <p>printf(\"Buffer is %s\\n\", buf);</p> <p>free(buf);</p> <p>return 0;</p> <p>}</p> <p>int main(int argc, char **argv)</p> <p>{</p> <p>if ( argc != 3 )</p> <p>{</p> <p>printf(\"Invalid number of arguments!\\n\");</p> <p>return 2;</p> <p>}</p> <p>return foo(argv[1], atoi(argv[2]));</p> <p>}</p> <p>Please compile this sample program (in this example, we used GCC compiler for Linux) or use the supplied ELF binary, open the binary in IDA and wait until the initial analysis completes. When done, select a suitable debugger from the drop down list (\u201cLocal Linux debugger\u201d, or \u201cRemote Linux debugger\u201d if you're following this tutorial from another platform):</p> <p></p> <p>We have two ways of telling IDA to record a trace:</p> <ol> <li>Break on process entry point and manually enable tracing at this point.</li> <li>Or put a trace breakpoint at the very first instruction of the program.</li> </ol> <p>In the case we prefer the first approach we will need to click on the menu \u201cDebugger \u2192 Debugger Options\u201d and then mark the check box \u201cStop on process entry point\u201d as shown bellow:</p> <p></p> <p>After checking this option press OK and run the program pressing F9. When the entry point is reached, we can select from the menu \u201cDebugger \u2192 Tracing\u201d one of the following three options:</p> <ol> <li>Instruction tracing: All instructions executed will be recorded.</li> <li>Function tracing: Only function calls and returns will be recorded.</li> <li>Basic block tracing: Similar to instruction tracing but, instead of single stepping instruction by instruction, IDA will set temporary breakpoints in the end of every known basic block, as well as on function calls.</li> </ol> <p>For this example we will select \u201cInstruction tracing\u201d. Check this option and let the program continue by pressing F9. The program will resume execution and finish quickly. Now, we have a recorded trace! To see it, select \u201cDebugger \u2192 Tracing \u2192 Trace Window\u201d. A new tab will open with a content similar to the following:</p> <p></p> <p>As previously stated, there are two ways to record traces: enabling it manually, or using an \u201cEnable tracing\u201d breakpoint. To set such a breakpoint we will go to the program's entry point (Ctrl+E) and put a breakpoint (F2) in the very first instruction. Then right click on the new breakpoint and select \u201cEdit breakpoint\u201d. In the dialog check the option \u201cEnable tracing\u201d and then select the desired \u201cTracing type\u201d (for this example, we'll use \u201cInstructions\u201d):</p> <p></p> <p>Remove the \u201cStop on process entry point\u201d option we set in the prior example and press F9 to run the program.</p> <p>This way is more convenient than the first because the tracing is turned on automatically and does not need manual intervention.</p>"},{"location":"user-guide/debugger/tutorials/trace_replayer/trace_replayer.html#working-with-traces","title":"Working with traces","text":"<p>Now we have a new recorded trace, no matter which method we used. What can we do with it? First, we can check which instructions were executed, as they are highlighted in the disassembly, like in the screenshot bellow:</p> <p></p> <p>(the highlight color can be changed in \u201cDebugger \u2192 Tracing \u2192 Tracing Options\u201d)</p> <p>Highlighting makes it clear which instructions have been executed.</p> <p>We can also check what functions have been executed (instead of instructions) by opening the \u201cTrace Window\u201d via \u201cDebugger \u2192 Tracing \u2192 Trace Window\u201d, right clicking on the list and then selecting \u201cShow trace call graph\u201d:</p> <p></p> <p>Now let's inspect the register values in order to understand why the check at 0x0848566 doesn't pass. Please select \u201cDebugger \u2192 Switch debugger\u201d and in the dialog box click on the \u201cTrace replayer\u201d radio button:</p> <p></p> <p>Click OK and press F4 in the first instruction of the \u201cmain\u201d function.</p> <p>The trace replayer will suspend execution at the \u201cmain\u201d function and display the register values that were recorded when the program was executed:</p> <p></p> <p>We can single step by pressing F7, as usual. Let us keep pressing F7 until the \u201cjz\u201d instruction is reached:</p> <p></p> <p>The comparison \u201ccmp [ebp+arg_0], 3\u201d was not successful (ZF=0) so the check does not pass. We need to give to the program two arguments to pass this check and record a new trace.</p>"},{"location":"user-guide/debugger/tutorials/trace_replayer/trace_replayer.html#loading-an-overlay-and-viewing-differences-in-flow","title":"Loading an overlay and viewing differences in flow","text":"<p>Before doing another run, let's save the first trace to a file. Select \u201cDebugger \u2192 Tracing \u2192 Trace Window\u201d, right click in the middle of the newly opened tab, and select \u201cSave trace\u201d from the popup menu:</p> <p></p> <p>Then save the file:</p> <p></p> <p>You will also be offered a chance to give the trace a description:</p> <p></p> <p>Now let's record a new trace but this time we will pass two command line arguments to the program. Select \u201cDebugger \u2192 Process Options\u201d and set \u201cAAAA 4\u201d as the arguments:</p> <p></p> <p>Close the dialog, revert to the \u201cLocal Linux debugger\u201d, and press F9. A new trace will be recorded. If we check the \u201cmain\u201d function we will see that different instructions have been executed this time:</p> <p></p> <p>Let's check which instructions are different between the first and the second run.</p> <p>First, we will need to load the previous trace as \u201coverlay\u201d:</p> <p></p> <p>Select the trace we saved:</p> <p></p> <p>Note that we have now other options in the 'Overlay' submenu, now that there is an overlay present:</p> <p></p> <p>Now go back to the disassembly view and check how the disassembly code is highlighted in three different colors:</p> <p></p> <p>The code highlighted in yellow is the code executed in the current trace (the one listed in the \u201cTrace Window\u201d). The pink code was executed only in the overlay trace. And the code in purple is the code common to both traces. We can immediately see that there is some new code that have been executed, like the calls to atoi and foo.</p> <p>Let's go to the \u201cfoo\u201d function and see what happened here:</p> <p></p> <p>The code in yellow tells us that the check for the size at 0x800484FC passed and the calls to malloc, strcpy and printf were executed. Let's save this trace for later analysis and comparison with the future runs. As before, go to the trace window, right click on the list and select \u201cSave trace\u201d. Set the trace's description to 'Correct execution'.</p> <p>It's time to record another trace with different arguments to see what happens. For this new execution, we will longer command line arguments (eight \u201cA\u201d characters instead of four). Let's change the arguments in \u201cDebugger \u2192 Process Options\u201d, switch back to the \u201cLocal Linux debugger\u201d, and run it. We have a new trace. Let's compare it against the previously recorded one. As we did before, go to the \u201cTrace Window\u201d, right click on the list, select \u201cOverlay\u201d, then \u201cLoad overlay\u201d, and select the trace with description \u201cCorrect execution\u201d.</p> <p></p> <p>As we see, the code that alerts us the about a too big string was executed (it's highlighted in yellow). Let's save this recorded trace with the \u201cString too big\u201d description. Now we will record one more trace but this time we will use the number \u201c-1\u201d as the second command line argument.</p> <p>Change the arguments in \u201cDebugger \u2192 Process Options\u201d as shown bellow:</p> <p></p> <p>Then switch back again, to the \u201cLocal Linux debugger\u201d (or to \u201cRemote Linux debugger\u201d if needed) and run it by pressing F9. The process will crash somewhere in the call to strcpy:</p> <p></p> <p>Stop the debugger and save this trace (let's call it \u201cCrash\u201d). Then diff this trace against the \u201cCorrect execution\u201d trace.</p> <p>We will see the following in the disassembly view:</p> <p></p> <p>As we see, pretty much the same code as in the previous run was executed until the call to strcpy. It's time to replay this last execution and see what happened.</p>"},{"location":"user-guide/debugger/tutorials/trace_replayer/trace_replayer.html#diffing-traces","title":"Diffing traces","text":"<p>When both a \u201cmain trace\u201d and an \u201coverlay trace\u201d are present, the context menu item \u201cOverlay \u2192 Subtract overlay\u201d becomes available.</p> <p>This allows one to subtract the list of events (e.g., instructions) that are present in the overlay, from the main trace:</p> <p></p> <p>Will give the following results:</p> <p></p> <p>As you can see, many events that were present in both the overlay &amp; the main trace have been removed. Only those that were only present in the main trace remain.</p>"},{"location":"user-guide/debugger/tutorials/trace_replayer/trace_replayer.html#reverting-the-diff","title":"Reverting the diff","text":"<p>The diffing operation is reversible:</p> <p></p> <p>This will restore the main trace as it were, before the contents of the overlay were removed from it.</p>"},{"location":"user-guide/debugger/tutorials/trace_replayer/trace_replayer.html#replaying-traces","title":"Replaying traces","text":"<p>We know that the program is crashing somewhere in the call to strcpy but we don't know why the check at 0x080484FC passes since -1 is smaller than the size of the string (8 bytes). Let's put a breakpoint at the call to strlen at 0x080484F0, switch to the \u201cTrace replayer\u201d debugger, and \"run\" the program by pressing F9. Please note that we do not really run the program, we are merely replaying a previously recorded trace.</p> <p>The debugger will stop at the strlen call:</p> <p></p> <p>In the trace replayer we can use all usual debugging commands like \u201crun to cursor\u201d (F4), \u201csingle step\u201d (F7), or \u201cstep over\u201d (F8). Let's press F8 to step over the strlen call and check the result:</p> <p></p> <p>It returns 8 as expected. Now move to the address 0x080484FC and press F4 or right click on this address, select \u201cSet IP\u201d, and press F7 (we need to inform the replayer plugin that we changed the current execution instruction in order to refresh all the register values). The difference between \u201cRun to\u201d (F4) and \u201cSet IP\u201d is that \u201cRun to\u201d will replay all events happened until that point but \u201cSet IP\u201d will directly move to the nearest trace event happened at this address (if it's in the recorded trace, of course).</p> <p>Regardless of how we moved to this point IDA will display the following:</p> <p></p> <p>As we see, the jump was taken because CF was set to 1 in the previous instruction (\u201ccmp edx, eax\u201d). Let's step back to this instruction to see what values were compared. Select \u201cDebugger \u2192 Step back\u201d from the menu:</p> <p></p> <p>The flags are reset to 0 and we can see that EAX (0xFFFFFFFF) and EDX (8) are compared. Press F7 to step one instruction again and you will notice CF changes to 1. The instruction JBE performs an unsigned comparison between 8 and 0xFFFFFFFF and, as 8 &lt;= 0xFFFFFFFF, the check passes. We just discovered the cause of the bug.</p> <p>Let's continue analyzing it a bit more. Scroll down until the call to malloc at 0x08048517, right click, choose \u201cSet IP\u201d, and press F7 (or simply press F4). As we see, the argument given to malloc is 0xFFFFFFFF (4 GB).</p> <p>Press F8 to step over the function call:</p> <p></p> <p>Obviously, malloc can not allocate so much memory and returns NULL. However, the program does not check for this possibility and tries to copy the contents of the given buffer to the address 0, resulting in a crash.</p>"},{"location":"user-guide/debugger/tutorials/trace_replayer/trace_replayer.html#summary","title":"Summary","text":"<p>In this tutorial we showed you the basics of trace management and the trace replayer module in IDA. We hope you enjoy this new feature. Happy debugging!</p>"},{"location":"user-guide/debugger/tutorials/tracing/tracing.html","title":"Using IDA Pro's tracing features","text":"<p>Check the tutorial about tracing with IDA:</p> <p>{% file src=\"tracing.pdf\" %}</p>"},{"location":"user-guide/debugger/tutorials/win32local/win32local.html","title":"IDA Win32 Local Debugging","text":"<p>The IDA Debugger allows you to either start a new process (Run) or attach itself to an existing process (Attach)</p> <p></p> <p>Let's select \"Local Windows debugger\". What we get is a list of currently running processes to which we can attach with a simple click.</p> <p></p> <p>and here is the result once we are attached to the program.</p> <p></p>"},{"location":"user-guide/debugger/tutorials/win32tolinux/win32tolinux.html","title":"IDA Win32 to Linux Debugging","text":"<p>Connecting a Windows Debuging session to a Linux machine is essentially similar to a Windows to Windows connection. The Linux remote debugger server is started on the command line.</p> <p></p> <p>then connect to the Linux Machine by selecting the attach to remote Linux command. We can then select the process we want to debug and connect to it with a simple click.</p> <p></p> <p>we are now connected to the remote process running on the Linux machine.</p> <p></p>"},{"location":"user-guide/debugger/tutorials/win_debugger_hub/win_debugger_hub.html","title":"Windows Debugger Hub","text":"<p>Since version 4.3, IDA offers a PE Windows debugger in addition to its Windows disassembler. The Windows debugger in IDA combines the power of static disassembly to dynamic debugging to allow its users to debug unknown binaries at a level close to source code. A Linux version of the debugger is also available, there is some more information about it here here</p> <p>The Windows Debugger in IDA:</p> <ul> <li>is able to debug any file supported by the Windows DBG interface, including true 64 bits files. </li> <li>can benefit from all the features of the Windows Disassembler, including interactivity, scripting and plugins.</li> <li>offer local debugging of Windows executables.</li> <li>can connect to other Windows machines running our remote debugging server and debug Windows executables.</li> <li>can connect to our Linux remote debugging server and allows you to debug Linux executables from a familiar Windows environment. </li> </ul> <p>Below: the Windows Debugger working locally.</p> <p></p> <p>Below: the Windows Debugger about to debug a remote Linux binary. </p> <p></p> <p>A typical use of the remote Windows debugger would be the analysis of an hostile Linux binary or an hostile Windows binary on a safe and clean machine. The IDA Windows debugger brings unprecedented flexibility and security to the virus analyst. Another typical use of the remote Windows debugger would be Linux debugging in a comfortable, well known GUI. Yet another possibility offered by our Windows debugger is 64 bit development. 64 bit development is still in its infancy and the IDA 64 bit debugger server allows you to debug 64 bit applications from within a stable Windows 32 environment. </p> <p>Here are a few links to the IDA Windows Debugger on our site:</p> <ul> <li>multiple possible connections</li> <li>the debugger</li> <li>remote debugging</li> <li>tracing with the IDA Windows debugger.</li> <li>analysis of an obfuscated piece of hostile code</li> </ul>"},{"location":"user-guide/debugger/tutorials/windbg_debugger_primer/windbg_tut.html","title":"Debugging Windows Applications with IDA WinDbg Plugin","text":"<p>Quick overview:</p> <p>The Windbg debugger plugin is an IDA Pro debugger plugin that uses Microsoft's debugging engine (dbgeng) that is used by Windbg, Cdb or Kd.</p> <p>To get started, you need to install the latest Debugging Tools from Microsoft website: https://msdn.microsoft.com/en-us/windows/hardware/hh852365</p> <p>or from the Windows SDK / DDK package.</p> <p>Please make sure you should install the x86 version of the debugging tools which is used by both IDA Pro and IDA Pro 64. The x64 version will NOT work.</p> <p>After installing the debugging tools, make sure you select \u00ab Debugger / Switch Debugger \u00bb and select the WinDbg debugger.</p> <p>Also make sure you specify the correct settings in the \u201cDebugger specific options\u201d dialog:</p> <p></p> <ul> <li>User mode: Select this mode for user mode application debugging (default mode)</li> <li>Kernel mode: Select this mode to attach to a live kernel.</li> <li>Non Invasive debugging: Select this mode to attach to a process non-invasively</li> <li>Output flags: These flags tell the debugging engine which kind of output messages to display and which to omit</li> <li> <p>Kernel mode debugging with reconnect and initial break: Select this option when debugging a kernel and when the connection string contains 'reconnect'. This option will assure that the debugger breaks as soon as possible after a reconnect.</p> <p>To make these settings permanent, please edit the IDA\\cfg\\dbg_windbg.cfg file.</p> <p>**\\ To specify the debugging tools folde**r you may add to the PATH environment variable the location of Windbg.exe or edit %IDA%\\cfg\\ida.cfg and change the value of the DBGTOOLS key.</p> <p>After the debugger is properly configured, edit the process options and leave the connection string value empty because we intend to debug a local user-mode application.</p> </li> </ul> <p></p> <p>Now hit F9 to start debugging:</p> <p></p> <p>The Windbg plugin is very similar to IDA Pro's Win32 debugger plugin, nonetheless by using the former, one can benefit from the command line facilities and the extensions that ship with the debugging tools.</p> <p>For example, one can type \u201c!chain\u201d to see the registered Windbg extensions:</p> <p></p> <p>\u201c!gle\u201d is another command to get the last error value of a given Win32 API call.</p> <p></p> <p>Another benefit of using the Windbg debugger plugin is the use of symbolic information.</p> <p>Normally, if the debugging symbols path is not set, then the module window will only show the exported names. For example kernel32.dll displays 1359 names:</p> <p></p> <p>Let us configure a symbol source by adding this environment variable before running IDA:</p> <p>set _NT_SYMBOL_PATH=srv*C:\\Temp\\pdb*http://msdl.microsoft.com/download/symbols</p> <p>It is also possible to set the symbol path directly while debugging:</p> <p></p> <p>and then typing \u201c.reload /f\u201d to reload the symbols.</p> <p>Now we try again and notice that more symbol names are retrieved from kernel32.dll:</p> <p></p> <p>Now we have 5818 symbols instead!</p> <p>It is also possible to use the \u201cx\u201d command to quickly search for symbols:</p> <p></p> <p>(Looking for any symbol in any module that contains the word \u201ccontinue\u201d)</p>"},{"location":"user-guide/debugger/tutorials/windbg_debugger_primer/windbg_tut.html#debugging-a-remote-process","title":"Debugging a remote process","text":"<p>We have seen how to debug a local user mode program, now let us see how to debug a remote process.</p> <p>First let us assume that \u201cpcA\u201d is the target machine (where we will run the debugger server and the debugged program) and \u201cpcB\u201d is the machine where IDA Pro and the debugging tools are installed.</p> <p>To start a remote process:</p> <ul> <li>On \u201cpcA\u201d, type:</li> <li>dbgsrv -t tcp:port=5000</li> </ul> <p>(change the port number as needed)</p> <ul> <li>On \u201cpcB\u201d, setup IDA Pro and Windbg debugger plugin:</li> <li>\u201cApplication/Input file\u201d: these should contain a path to the debuggee residing in \u201cpcA\u201d</li> <li>Connection string: tcp:port=5000,server=pcA</li> </ul> <p>Now run the program and debug it remotely.</p> <p>To attach to a remote process, use the same steps to setup \u201cpcA\u201d and use the same connection string when attaching to the process.</p> <p>More about connection strings and different protocols (other than TCP/IP) can be found in \u201cdebugger.chm\u201d in the debugging tools folder.</p>"},{"location":"user-guide/debugger/tutorials/windbg_debugger_primer/windbg_tut.html#debugging-the-kernel-with-vmware","title":"Debugging the kernel with VMWare","text":"<p>We will now demonstrate how to debug the kernel through a virtual machine.</p> <p>In this example we will be using VMWare 6.5 and Windows XP SP3.</p> <p>Configuring the virtual machine:</p> <p>Run the VM and then edit \u201cc:\\boot.ini\u201d file and add one more entry (see in bold):</p> <p>[operating systems]</p> <p>multi(0)disk(0)rdisk(0)partition(1)\\WINDOWS=\"Microsoft Windows XP Professional\" /noexecute=optin /fastdetect multi(0)disk(0)rdisk(0)partition(1)\\WINDOWS=\"Local debug\" /noexecute=optin /fastdetect /debug /debugport=com1 /baudrate=115200</p> <p>For MS Windows Vista please see: http://msdn.microsoft.com/en-us/library/ms791527.aspxp</p> <p>Actually the last line is just a copy of the first line but we added the \u201c/debug\u201d switch and some configuration values.</p> <p>Now shutdown the virtual machine and edit its hardware settings and add a new serial port with option \u201cuse named pipes\u201d:</p> <p></p> <p>Press \u201cFinish\u201d and start the VM. At the boot prompt, select \u201cLocal debug\u201d from the boot menu:</p> <p></p> <p>Configuring Windbg debugger plugin:</p> <p>Now run IDA Pro and select Debugger / Attach / Windbg</p> <p></p> <p>Then configure it to use \u201cKernel mode\u201d debugging and use the following connection string:</p> <p>com:port=\\.\\pipe\\com_1,baud=115200,pipe</p> <p>It is possible to use the 'reconnect' keyword in the connection string:</p> <p>com:port=\\.\\pipe\\com_1,baud=115200,pipe,reconnect</p> <p>Also make sure the appropriate option is selected from the debugger specific options.</p> <p></p> <p>Please note that the connection string (in step 1) refers to the named pipe we set up in the previous steps.</p> <p>Finally, press OK to attach and start debugging.</p> <p></p> <p>When IDA attaches successfully, it will display something like this:</p> <p></p> <p>If you do not see named labels then try checking your debugging symbols settings.</p> <p>Note: In kernel mode IDA Pro will display one entry in the threads window for each processor.</p> <p>For example a two processor configuration yields:</p> <p></p> <p></p> <p>This screenshot shows how we are debugging the kernel and changing the disassembly listing (renaming stack variables, or using structure offsets):</p> <p></p> <p>At the end you can detach from the kernel and resume it or detach from the kernel and keep it suspended.</p> <p>To detach and resume, simply select the \u201cDebugger / Detach\u201d, however to detach and keep the kernel suspended select \u201cDebugger / Terminate Process\u201d.</p> <p>Debugging the kernel through kdsrv.exe</p> <p>In some cases, when debugging a 64bit kernel using a 1394 cable then 64bit drivers are needed, thus dbgeng (32bits) will not work. To workaround this problem we need to run the kernel debugger server from the x64 debugging tools folder and connect to it:</p> <ul> <li>Go to \u201cDebugging Tools (x64)\u201d installation</li> <li>Run kdsrv.exe (change the port number/transport appropriately):</li> <li>kdsrv -t tcp:port=6000</li> <li>Now run ida64 and specify the following connection string (change the transport value appropriately):</li> <li>kdsrv:server=@{tcp:port=6000,server=127.0.0.1},trans=@{com:port=\\.\\pipe\\com_3,baud=115200,pipe}</li> </ul>"},{"location":"user-guide/decompiler/decompiler.html","title":"Decompiler","text":""},{"location":"user-guide/decompiler/exception-handler.html","title":"Exception handler","text":"<p>Hex-Rays' support for exceptions in Microsoft Visual C++/x64 incorporates the C++ exception metadata for functions into their decompilation, and presents the results to the user via built-in constructs in the decompilation (<code>try</code>, <code>catch</code>, <code>__wind</code>, <code>__unwind</code>). When the results cannot be presented entirely with these constructs, they will be presented via helper calls in the decompilation.</p> <p>The documentation describes:</p> <ul> <li>Background behind C++ exception metadata. It is recommended that users read this first.</li> <li>Interactive operation via the GUI, configuration file, and keyboard shortcuts.</li> <li>A list of helper calls that may appear in the output.</li> <li>A note about the boundaries of <code>try</code> and <code>__unwind</code> regions.</li> <li>Miscellaneous notes about the plugin.</li> </ul> <p>TRY, CATCH, AND THROW</p> <p>The C++ language provides the <code>try</code> scoped construct in which the developer expects that an exception might occur. <code>try</code> blocks must be followed by one or more scoped <code>catch</code> constructs for catching exceptions that may occur within. <code>catch</code> blocks may use <code>...</code> to catch any exception. Alternatively, <code>catch</code> blocks may name the type of an exception, such as <code>std::bad_alloc</code>. <code>catch</code> blocks with named types may or may not also catch the exception object itself. For example, <code>catch(std::bad_alloc *v10)</code> and <code>catch(std::bad_alloc *)</code> are both valid. The former can access the exception object through variable <code>v10</code>, whereas the latter cannot access the exception object.</p> <p>C++ provides the <code>throw</code> keyword for throwing an exception, as in <code>std::bad_alloc ba; throw ba;</code>. This is represented in the output as (for example) <code>throw v10;</code>. C++ also allows code to rethrow the current exception via <code>throw;</code>. This is represented in the output as <code>throw;</code>.</p> <p>WIND AND UNWIND</p> <p>Exception metadata in C++ binaries is split into two categories: <code>try</code> and <code>catch</code> blocks, as discussed above, and so-called <code>wind</code> and <code>unwind</code> blocks. C++ does not have <code>wind</code> and <code>unwind</code> keywords, but the compiler creates these blocks implicitly. In most binaries, they outnumber <code>try</code> and <code>catch</code> blocks by about 20 to 1.</p> <p>Consider the following code, which may or may not throw an <code>int</code> as an exception at three places:</p> <pre><code>void may_throw() \n{\n  // Point -1\n  if ( rand() % 2 )\n    throw -1;\n\n  string s0 = \"0\";\n\n  // Point 0\n  if ( rand() % 2 )\n    throw 0;\n\n  string s1 = \"1\";\n\n  // Point 1\n  if ( rand() % 2 )\n    throw 1;\n\n  // Point 2\n  printf(\"%s %sn\",\n    s0.c_str(),\n    s1.c_str());\n\n  // Implicit\n  // destruction\n  s1.~string();\n  s0.~string();\n}\n</code></pre> <p>If an exception is thrown at point -1, the function exits early without executing any of its remaining code. As no objects have been created on the stack, nothing needs to be cleaned up before the function returns.</p> <p>If an exception is thrown at point 0, the function exits early as before. However, since <code>string s0</code> has been created on the stack, it needs to be destroyed before exiting the function. Similarly, if an exception is thrown at point 1, both <code>string s1</code> and <code>string s0</code> must be destroyed.</p> <p>These destructor calls would normally happen at the end of their enclosing scope, i.e. the bottom of the function, where the compiler inserts implicitly-generated destructor calls. However, since the function does not have any <code>try</code> blocks, none of the function's remaining code will execute after the exception is thrown. Therefore, the destructor calls at the bottom will not execute. If there were no other mechanism for destructing <code>s0</code> and/or <code>s1</code>, the result would be memory leaks or other state management issues involving those objects. Therefore, the C++ exception management runtime provides another mechanism to invoke their destructors: <code>wind</code> blocks and their corresponding <code>unwind</code> handlers.</p> <p><code>wind</code> blocks are effectively <code>try</code> blocks that are inserted invisibly by the compiler. They begin immediately after constructing some object, and end immediately before destructing that object. Their <code>unwind</code> blocks play the role of <code>catch</code> handlers, calling the destructor upon the object when exceptional control flow would otherwise cause the destructor call to be skipped.</p> <p>Microsoft Visual C++ effectively transforms the previous example as follows:</p> <pre><code>void may_throw_transformed() \n{\n  if ( rand() % 2 )\n    throw -1;\n\n  string s0 = \"0\";\n\n  // Implicit tryMaking C++ Exception Handling Smaller on x64\n  __wind {\n    if ( rand() % 2 )\n      throw 0;\n\n    string s1 = \"1\";\n\n    // Implicit try\n    __wind \n    {\n      if ( rand() % 2 )\n        throw 1;\n\n      printf(\"%s %sn\",\n        s0.c_str(),\n        s1.c_str());\n    }\n\n    // Implicit catch\n    __unwind\n    {\n      s1.~string();\n    }\n    s1.~string();\n  }\n\n  // Implicit catch\n  __unwind \n  {\n    s0.~string();\n  }\n  s0.~string();\n}\n</code></pre> <p><code>unwind</code> blocks always re-throw the current exception, unlike <code>catch</code> handlers, which may or may not re-throw it. Re-throwing the exception ensures that prior <code>wind</code> blocks will have a chance to execute. So, for example, if an exception is thrown at point 1, after the <code>unwind</code> handler destroys <code>string s1</code>, re-throwing the exception causes the unwind handler for point 0 to execute, thereby allowing it to destroy <code>string s0</code> before re-throwing the exception out of the function.</p> <p>STATE NUMBERS AND INSTRUCTION STATES</p> <p>As we have discussed, the primary components of Microsoft Visual C++ x64 exception metadata are <code>try</code> blocks, <code>catch</code> handlers, <code>wind</code> blocks, and <code>unwind</code> handlers. Generally speaking, these elements can be nested within one another. For example, in C++ code, it is legal for one <code>try</code> block to contain another, and a <code>catch</code> handler may contain <code>try</code> blocks of its own. The same is true for <code>wind</code> and <code>unwind</code> constructs: <code>wind</code> blocks may contain other <code>wind</code> blocks (as in the previous example) or <code>try</code> blocks, and <code>try</code> and <code>catch</code> blocks may contain <code>wind</code> blocks.</p> <p>Exceptions must be processed in a particular sequence: namely, the most nested handlers must be consulted first. For example, if a <code>try</code> block contains another <code>try</code> block, any exceptions occurring within the latter region must be processed by the innermost <code>catch</code> handlers first. Only if none of the inner <code>catch</code> handlers can handle the exception should the outer <code>try</code> block's catch handlers be consulted. Similarly, as in the previous example, <code>unwind</code> handlers must destruct their corresponding objects before passing control to any previous exception handlers (such as <code>string s1</code>'s <code>unwind</code> handler passing control to <code>string s0</code>'s <code>unwind</code> handler).</p> <p>Microsoft's solution to ensure that exceptions are processed in the proper sequence is simple. It assigns a \"state number\" to each exception-handling construct. Each exception state has a \"parent\" state number whose handler will be consulted if the current state's handler is unable to handle the exception. In the previous example, what we called \"point 0\" is assigned the state number 0, while \"point 1\" is assigned the state number 1. State 1 has a parent of 0. (State 0's parent is a dummy value, -1, that signifies that it has no parent.) Since <code>unwind</code> handlers always re-throw exceptions, if state 1's <code>unwind</code> handler is ever invoked, the exception handling machinery will always invoke state 0's <code>unwind</code> handler afterwards. Because state 0 has no parent, the exception machinery will re-throw the exception out of the current function. This same machinery ensures that the catch handlers for inner <code>try</code> blocks are consulted before outer <code>try</code> blocks.</p> <p>There is only one more piece to the puzzle: given that an exception could occur anywhere, how does the exception machinery know which exception handler should be consulted first? I.e., for every address within a function with C++ exception metadata, what is the current exception state? Microsoft C++/x64 binaries provide this information in the <code>IPtoStateMap</code> metadata tables, which is an array of address ranges and their corresponding state numbers.</p> <p>GUI OPERATION</p> <p>This support is fully automated and requires no user interaction. However, the user can customize the display of C++ exception metadata elements for the global database, as well as for individual functions.</p> <p>GLOBAL SETTINGS</p> <p>Under the <code>Edit -&gt; Other-&gt; C++ exception display settings</code> menu item, the user can edit the default settings to control which exception constructs are shown in the listing. These are saved persistently in the database (i.e., the user's choices are remembered after saving, closing, and re-opening), and can also be adjusted on a per-function basis (described later).</p> <p>The settings on the dialog are as follows:</p> <ul> <li>Default output mode:</li> </ul> <p>When the plugin is able to represent C++ exception constructs via nice constructs like <code>try</code>, <code>catch</code>, <code>__wind</code>, and <code>__unwind</code> in the listings, these are called \"structured\" exception states. The plugin is not always able to represent exception metadata nicely, and may instead be forced to represent the metadata via helper calls in the listing (which are called \"unstructured\" states). As these can be messy and distracting, users may prefer not to see them by default. Alternatively, the user may prefer to see no exception metadata whatsoever, not even the structured ones. This setting allows the user to specify which types of metadata will be shown in the listing. Show wind states. We discussed wind states and unwind handlers in the background material. Although these states can be very useful when reverse engineering C++ binaries (particularly when analyzing constructors), displaying them increases the amount of code in the listing, and sometimes the information they provide is more redundant than useful. Therefore, this checkbox allows the user to control whether they are shown by default. Inform user of hidden states. The two settings just discussed can cause unstructured and/or wind states to be omitted from the default output. If this checkbox is enabled, then the plugin will inform the user of these omissions via messages at the top of the listing, such as this message indicating that one unstructured wind state was omitted: <code>// Hidden C++ exception states: #wind_helpers=1</code></p> <p>There are three more elements on the settings dialog; most users should never have to use them. However, for completeness, we will describe them now.</p> <ul> <li>Warning behavior:</li> </ul> <p>When internal warnings occur, they will either be printed to the output window at the bottom, or shown as a pop-up warning message box depending on this setting. Reset per-function settings. The next section will discuss how the display settings described above can be customized on a per-function basis. This button allows the user to erase all such saved settings, such that all functions will use the global display settings the next time they are decompiled. Rebuild C++ metadata caches. Before the plugin can show C++ exception metadata in the output, it must pre-process the metadata across the whole binary. Doing so crucially relies upon the ability to recognize the <code>__CxxFrameHandler3</code> and <code>__CxxFrameHandler4</code> unwind handler functions when they are referenced by the binary's unwind metadata. If the plugin fails to recognize one of these functions, then it will be unable to display C++ exception metadata for any function that uses the unrecognized unwind handler(s).</p> <p>If the user suspects that a failure like this has taken place -- say, because they expect to see a <code>try</code>/<code>catch</code> in the output and it is missing, and they have confirmed that the output was not simply hidden due to the display settings above -- then this button may help them to diagnose and repair the issue. Pressing this button flushes the existing caches from the database and rebuilds them. It also prints output to tell the user which unwind handlers were recognized and which ones were not. The user can use these messages to confirm whether the function's corresponding unwind handler was unrecognized. If it was not, the user can rename the unwind handler function to something that contains one of the two aforementioned names, and then rebuild the caches again.</p> <p>Note that users should generally not need to use this button, as the plugin tries several methods to recognize the unwind handlers (such as FLIRT signatures, recognizing import names, and looking at the destination of \"thunk\" functions with a single <code>jmp</code> to a destination function). If the user sees any C++ exception metadata in the output, this almost always means that the recognition worked correctly. This button should only be used by experienced users as a last resort. Users are advised to save their database before pressing this button, and only proceed with the changes if renaming unwind handlers and rebuilding the cache addresses missing metadata in the output.</p> <p>CONFIGURATION</p> <p>The default options for the settings just described are controlled via the <code>%IDADIR%/cfg/eh34.cfg</code> configuration file. Editing this file will change the defaults for newly-created databases (but not affect existing databases).</p> <p>PER-FUNCTION SETTINGS</p> <p>As just discussed, the user can control which C++ exception metadata is displayed in the output via the global menu item. Users can also customize these settings on a per-function basis (say, by enabling display of wind states for selected functions only), and they will be saved persistently in the database.</p> <p>When a function has C++ exception metadata, one or more items will appear on Hex-Rays' right click menu. The most general one is \"C++ exception settings...\". Selecting this menu item will bring up a dialog that is similar to the global settings menu item with the following settings:</p> <ul> <li>Use global settings:</li> </ul> <p>If the user previously changed the settings for the function, but wishes that the function be shown via the global settings in the future, they can select this item and press \"OK\". This will delete the saved settings for the function, causing future decompilations to use the global settings. This function's output mode. This functions identically to \"Default output mode\" from the global settings dialog, but only affects the current function. Show wind states. Again, identical to the global settings dialog item.</p> <p>There is a button at the bottom, \"Edit global settings\", which is simply a shortcut to the same global settings dialog from the <code>Edit -&gt; Other -&gt; C++ exception display settings</code> menu item.</p> <p>The listing will automatically refresh if the user changes any settings.</p> <p>Additionally, there are four other menu items that may or may not appear, depending upon the metadata present and whether the settings caused any metadata to be hidden. These menu items are shortcuts to editing the corresponding fields in the per-function settings dialog just discussed. They are:</p> <ul> <li>Show unstructured C++ states:</li> </ul> <p>If the global or per-function default output setting was set to \"Structured only\", and the function had unstructured states, this menu item will appear. Clicking it will enable display of unstructured states for the function and refresh the decompilation. Hide unstructured C++ states. Similar to the above. Show wind states. If the global or per-function \"Show wind states\" setting was disabled, and the function had wind states, this menu item will appear. Clicking it will enable display of wind states for the function and refresh the decompilation. Hide wind states. Similar to the above.</p> <p>KEYBOARD SHORTCUTS</p> <p>The user can change (add, remove, or edit) the keyboard shortcuts for the per-function settings right-click menu items from the <code>Edit -&gt; Options -&gt; Shortcuts</code> dialog. The names of the corresponding actions are:</p> Title Name \"Show unstructured C++ states\" <code>eh34:enable_unstructured</code> \"Hide unstructured C++ states\" <code>eh34:disable_unstructured</code> \"Show wind states\" <code>eh34:enable_wind</code> \"Hide wind states\" <code>eh34:disable_wind</code> The global settings dialog <code>eh34:config_menu</code> <p>HELPER CALLS</p> <p>Hex-Rays' Microsoft C++ x64 exception support tries to details about exception state numbers as much as possible. However, compiler optimizations can cause binaries to diverge from the original source code. For example, inlined functions can produce <code>goto</code> statements in the decompilation despite there being none in the source. Optimizations can also cause C++ exception metadata to differ from the original code. As a result, it is not always possible to represent <code>try</code>, <code>catch</code>, <code>wind</code>, and <code>unwind</code> constructs as scoped regions that hide the low-level details.</p> <p>In these cases, Hex-Rays' Microsoft C++ x64 exception support will produce helper calls with informative names to indicate when exception states are entered and exited, and to ensure that the user can see the bodies of <code>catch</code> and <code>unwind</code> handlers in the output. The user can hover their mouse over those calls to see their descriptions. They are also catalogued below.</p> <p>The following helper calls are used when exception states have multiple entrypoints, or multiple exits:</p> Function name Description <code>__eh34_enter_wind_state(s1, s2)</code> switch state from parent state <code>s1</code> to child wind state <code>s2</code> <code>__eh34_enter_try_state(s1, s2)</code> switch state from parent state <code>s1</code> to child try state <code>s2</code> <code>__eh34_exit_wind_state(s1, s2)</code> switch state from child wind state <code>s1</code> to parent state <code>s2</code> <code>__eh34_exit_try_state(s1, s2)</code> switch state from child try state <code>s1</code> to parent state <code>s2</code> <p>The following helper calls are used when exception states had single entry and exit points, but could not be represented via <code>try</code> or <code>__wind</code> keywords:</p> Function name Description <code>__eh34_wind(s1, s2)</code> switch state from parent state <code>s1</code> to child state <code>s2</code>; a new c++ object that requires a dtr has been created <code>__eh34_try(s1, s2)</code> switch state from parent state <code>s1</code> to child state <code>s2</code>; mark beginning of a try block <p>The following helper calls are used to display <code>catch</code> handlers for exception states that could not be represented via the <code>catch</code> keyword:</p> Function name Description <code>__eh34_catch(s)</code> beginning of catch blocks at state <code>s</code>; <code>s</code> corresponds to the second argument of the matching try call (if present) <code>__eh34_catch_type(s, \"handler_address\")</code> a catch statement for the type described at <code>\"handler_address\"</code> <code>__eh34_catch_ellipsis(s)</code> catch all\" statement <p>The following helper calls should be removed, but if you see them, they signify the boundary of a <code>catch</code> handler:</p> Function name Description <code>__eh34_try_continuation(s, i, ea)</code> end of catch handler <code>i</code> for state <code>s</code>, returning to address <code>ea</code> <code>__eh34_caught_type(s, \"handler_address\")</code> a pairing call for <code>__eh34_catch_type</code> when catch handler has no continuation <code>__eh34_caught_ellipsis(s)</code> \"caught all\", paired with <code>__eh34_catch_ellipsis</code> when catch handler has no continuation <p>The following helper calls are used to display <code>unwind</code> handlers for exception states that could not be represented via the <code>__unwind</code> keyword:</p> Function name Description <code>__eh34_unwind(s)</code> destruct the c++ object created immediately before entering state <code>s</code>; <code>s</code> corresponds to the second argument of the matching wind call (if present) <p>The following helper calls are used to signify that an <code>unwind</code> handler has finished executing, and will transfer control to a parent exception state (or outside of the function):</p> Function name Description <code>__eh34_continue_unwinding(s1, s2)</code> after unwinding at child state <code>s1</code>, switch to parent state <code>s2</code> and perform its unwind or catch action <code>__eh34_propagate_exception_into_caller(s1, s2)</code> after unwinding at child state <code>s1</code>, switch to root state <code>s2</code>; this corresponds to the exception being propagated into the calling function <p>The following helper call is used when the exception metadata did not specify a function pointer for an <code>unwind</code> handler, which causes program termination:</p> Function name Description <code>__eh34_no_unwind_handler(s)</code> the state <code>s</code> did not have an unwind handler, which causes program termination in the event that an exception reaches it <p>The following helper calls are used to signify that Hex-Rays was unable to display an exception handler in the decompilation:</p> Function name Description <code>__eh34_unwind_handler_absent(s, ea)</code> could not inline unwind handler at <code>ea</code> for wind state <code>s</code> <code>__eh34_catch_handler_absent(s, i, ea)</code> could not inline i'th catch handler at <code>ea</code> for try state <code>s</code> <p>From Microsoft Visual Studio versions 2005 (toolchain version 8.0) to 2017 Service Pack 2 (version 14.12), the compiler emitted detailed metadata that precisely defined the boundaries of all exception regions within C++ functions. This made binary files large, and not all of the metadata was strictly necessary for the runtime library to handle C++ exceptions correctly</p> <p>Starting from MSVC 2017 Service Pack 3 (version 14.13), the compiler began applying optimizations to reduce the size of the C++ exception metadata. An official Microsoft blog entry entitled: \"Making C++ Exception Handling Smaller on x64\"</p> <p>As a result of these changes, the C++ exception metadata in MSVC 14.13+ binaries is no longer fully precise. Exception states are frequently reported as beginning physically after where the source code would indicate. In order to produce usable output, Hex-Rays employs mathematical optimization algorithms to reconstruct more detailed C++ exception metadata configurations that can be displayed in a nicer format in the decompilation. These algorithms improve the listings by producing more structured regions and fewer helper calls in the output, but they introduce further imprecision as to the true starting and ending locations of exception regions when compared to the source code. They are an integral part of Hex-Rays C++/x64 Windows exception metadata support and cannot be disabled.</p> <p>The takeaway is that, when processing MSVC 14.13+ binaries, Hex-Rays C++/x64 Windows exception support frequently produces <code>try</code> and <code>__unwind</code> blocks that begin and/or end earlier and/or later than what the source code would indicate, were it available. This has important consequences for vulnerability analysis.</p> <p>For example, given accurate exception boundary information, the destructor for a local object would ordinarily be situated after the end of that object's <code>__wind</code> and <code>__unwind</code> blocks, as in:</p> <pre><code>Object::Constructor(&amp;v14);\n__wind\n{\n  // ...\n}\n__unwind\n{\n  Object::Destructor(&amp;v14);\n}\n\n// HERE: destructor after __wind region\nObject::Destructor(&amp;v14);\n</code></pre> <p>Yet, due to the imprecise boundary information, Hex-Rays might display the destructor as being inside of the <code>__wind</code> block:</p> <pre><code>Object::Constructor(&amp;v14);\n__wind\n{\n  // ...\n  // HERE: destructor inside of __wind region\n  Object::Destructor(&amp;v14);\n}\n__unwind\n{\n  Object::Destructor(&amp;v14);\n}\n</code></pre> <p>The latter output might indicate that <code>v14</code>'s destructor would be called twice if its destructor were to throw an exception. However, this indication is simply the result of imprecise exception region boundary information. In short, users should be wary of diagnosing software bugs or security issues based upon the positioning of statements nearby the boundaries of <code>try</code> and <code>__wind</code> blocks. The example above indicates something that might appear to be a bug in the code -- a destructor being called twice -- but is in fact not one.</p> <p>These considerations primarily apply when analyzing C++ binaries compiled with MSVC 14.13 or greater. They do not apply as much to binaries produced by MSVC 14.12 or earlier, when the compiler emitted fully precise information about exception regions.</p> <p>Although Hex-Rays may improve its detection of exception region boundaries in the future, because modern binaries lack the ground truth of older binaries, the results will never be fully accurate. If the imprecision is unacceptable to you, we recommend permanently disabling C++ metadata display via the <code>eh34.cfg</code> file discussed previously.</p> <p>MISCELLANEOUS</p> <p>Hex-Rays' support for exceptions in Microsoft Visual C++/x64 only works after auto-analysis has been completed. Users can explore the database and decompile functions as usual, but no C++ exception metadata will be shown. Users are advised to refresh any decompilation windows after auto-analysis has completed.</p> <p>If users have enabled display of wind states, they may see empty <code>__wind</code> or <code>__unwind</code> constructs in the output. Usually, this does not indicate an error occurred; this usually means that the region of the code corresponding the <code>wind</code> state was very small or contained dead code, and Hex-Rays normal analysis and transformation made it empty.</p> <p>Starting in IDA 9.0, IDA's auto-analysis preprocesses C++ exception metadata differently than in previous versions. In particular, on MSVC/x64 binaries, <code>__unwind</code> and <code>catch</code> handlers are created as standalone functions, not as chunks of their parent function as in earlier versions. This is required to display the exception metadata correctly in the decompilation. For databases created with older versions, the plugin will still show the outline of the exception metadata, but the bodies of the <code>__unwind</code> and <code>catch</code> handlers will be displayed via the helper calls <code>__eh34_unwind_handler_absent</code> and <code>__eh34_catch_handler_absent</code>, respectively. The plugin will also print a warning at the top of the decompilation such as <code>Absent C++ exception handlers: # catch=1 (pre-9.0 IDB)</code> in these situations. Re-creating the IDB with a newer version will solve those issues, although users might still encounter absent handlers in new databases (rarely, and under different circumstances).</p>"},{"location":"user-guide/decompiler/goomba.html","title":"gooMBA","text":"<p>At Hex-Rays SA, we are constantly looking for ways to improve the usefulness of our state-of-the-art decompiler solution. We achieve this by monitoring for new trends in anti-reversing technology, keeping up with cutting-edge research, and brainstorming ways to innovate on existing solutions.</p> <p>Today we are excited to introduce a new Hex-Rays decompiler feature, gooMBA, which should greatly simplify the workflow of reverse-engineers working with obfuscated binaries, especially those using Mixed Boolean-Arithmetic (MBA) expressions. Our solution combines algebraic and program synthesis techniques with heuristics for best-in-class performance, integrates directly into the Hex-Rays decompiler, and provides a bridge to an SMT-solver to prove the correctness of simplifications.</p>"},{"location":"user-guide/decompiler/goomba.html#mba-obfuscation-overview","title":"MBA Obfuscation Overview","text":""},{"location":"user-guide/decompiler/goomba.html#what-is-mba","title":"What Is MBA?","text":"<p>A Mixed Boolean-Arithmetic (MBA) expression combines arithmetic (e.g. <code>addition</code> and <code>multiplication</code>) and boolean operations (e.g. bitwise <code>OR</code>, <code>AND</code>, <code>XOR</code>) into a single expression. These expressions are often made extremely complex in order to make it difficult for reverse-engineers to determine their true meaning.</p> <p>For instance, here is an example of an MBA obfuscation found in a decompilation listing. Note the combination of <code>bitshift</code>, <code>addition</code>, <code>subtraction</code>, <code>multiplication</code>, <code>XOR</code>, <code>OR</code>, and <code>comparison operators</code> within one expression.</p> <pre><code>v1 = 715827883LL * (char)((((unsigned __int64)(-424194301LL * (a1 &gt;&gt; 4)) &gt;&gt; 35)+(-424194301LL * (a1 &gt;&gt; 4) &lt; 0)) *  a1);\nv2 = (char)(((((((unsigned  __int64)(-424194301LL * (a1 &gt;&gt; 4)) &gt;&gt; 35) + (-424194301LL * (a1  &gt;&gt; 4) &lt; 0)) * a1 - 48 * ((v1 &gt;&gt; 35) + (v1  &lt; 0))) ^ 0x28) + 111) | 0x33);\nv3 = 818089009LL * (char)(((((((unsigned  __int64)(-424194301LL * (a1 &gt;&gt; 4)) &gt;&gt; 35) + (-424194301LL * (a1  &gt;&gt; 4) &lt; 0)) * a1 - 48 * ((v1 &gt;&gt; 35) + (v1  &lt; 0))) ^ 0x28) + 111) | 0x33);\nv4 = (4 * (v2 - 21 * ((v3 &gt;&gt; 34) + (v3  &gt;&gt; 63)))) &amp; 0xF4 | 8;\nreturn (v4 - ((v4 / 0x81) &amp; 0x7F | ((v4 /  0x81) &lt;&lt; 7))) ^ 0xE;\n</code></pre> <p>For reference, the above code always returns <code>0x89</code>.</p> <p>MBA is also used as a name for a semantics-preserving obfuscation technique, which replaces simple expressions found in the source program with much more complicated MBA expressions. MBA obfuscation is called semantics-preserving since it only changes the syntax of the expression, not the underlying semantics \u2014 the input/output behavior of the expression should remain the same before and after.</p>"},{"location":"user-guide/decompiler/goomba.html#why-is-mba-reversing-difficult","title":"Why is MBA Reversing Difficult?","text":"<p>A decompiler can be thought of as a massive simplification engine \u2014 it reduces the mental load of the reverse engineer by transforming a complex binary program into a vastly simplified higher-level readable format. It partially achieves this through equivalences, special pattern-matching rules derived from mathematical properties such as the commutativity, distributivity, and identity. For instance, the following simplification can be performed by applying the distributive property and identity property.</p> <pre><code> 2a + 3(a+0) = 5a\n</code></pre> <p>Both boolean functions and arithmetic functions on integers are very well studied, and there is an abundance of simplification techniques and algorithms developed for each. MBA obfuscators exploit the fact that many of these equivalences and techniques break down when the two function types are combined. For instance, we all know that integer multiplication distributes over addition, but note that the same does not hold over the bitwise <code>XOR</code>:</p> <pre><code> 3\u00b7(2 \u2295 1) = 3\u00b73 = 9\n</code></pre> <pre><code> (3 \u2295 2)\u00b7(3\u22951) = 1\u00b72 = 2\n</code></pre> <p>Advanced Computer Algebra Systems (CAS) such as Sage and Mathematica allow users to simplify arithmetic expressions, but their algorithms break down when we start introducing bitwise operations into our inputs.</p> <p>Furthermore, although Satisfiability Modulo Theories (SMT) solvers such as z3 do often support both arithmetic and boolean operations on computer integers, they do not perform simplification \u2014 at least not for any human definition of \"simplicity.\" Rather, their only goal is to prove or disprove the input formula; as a result, they are useful in proving a simplification correct, but not in deriving the simplification to begin with.</p>"},{"location":"user-guide/decompiler/goomba.html#mba-obfuscation-techniques","title":"MBA Obfuscation Techniques","text":"<p>The core idea behind MBA obfuscation is that a complex, but semantically equivalent, MBA expression can be substituted for simpler expressions in the source program. For instance, one technique that can be used for MBA generation is the repeated application of simple MBA identities, such as:</p> <pre><code>\nx+y=(x|y)+(x&amp;y)\n\nx+y=2(x|y)-(x\u2295y)\n\nx|y=(\u00acx|y)-\u00acx\n\nx-y=x+\u00acy+1\n</code></pre> <p>Many of these identities are available in the classic book Hacker\u2019s Delight, but there are an effectively unbounded number of them. For instance, Reichenwallner et al. easily generated 1,000 distinct MBA substitutions for <code>x+y</code> alone.</p> <p>There are also many more sophisticated techniques that can be used for MBA generation, such as applying invertible functions and point functions. The number of invertible functions in computer integers is similarly unbounded. By simply choosing and applying any invertible function followed by its inverse, then applying rewriting rules to mix up the order of operations, an MBA generator can create extremely complex expressions effortlessly.</p>"},{"location":"user-guide/decompiler/goomba.html#effects-of-mba-obfuscation","title":"Effects of MBA Obfuscation","text":"<p>Besides the obvious effect of making decompilation listings longer and more complex for humans to understand, there are a few other effects which this form of obfuscation can have on the binary analysis process.</p> <p>For instance, dataflow/taint analysis is a static analysis technique that can be used to automatically search for potentially exploitable parts of a program (such as an unsanitized dataflow from untrusted user input into a SQL query). MBA obfuscation can be used to complicate dataflow analysis, by introducing arbitrary unrelated variables into the MBA expression without modifying its semantics. It then becomes extremely difficult to deduce whether or not the newly introduced variable has an effect on the expression\u2019s final value.</p> <p>An extreme example of this false dataflow technique is known as opaque predicates, whose original expressions have no semantic data inflows (i.e. they are constant). In other words, they always evaluate to a constant, regardless of their (potentially many) inputs. These opaque predicates can then be used for branching, creating false connections in the control-flow graph in addition to the dataflow graph.</p>"},{"location":"user-guide/decompiler/goomba.html#prior-work","title":"Prior Work","text":"<p>Over the years, many algorithms have been developed to simplify MBA expressions. These include pattern matching, algebraic methods, program synthesis, and machine learning methods.</p>"},{"location":"user-guide/decompiler/goomba.html#pattern-matching","title":"Pattern Matching","text":"<p>Since one of the core techniques involved in MBA generation is the application of rewrite rules, it seems natural to simply match and apply the same rewrite rules in the reverse direction. Indeed, this is precisely what earlier tools such as SSPAM did.</p> <p>There are several issues with pattern matching methods. Firstly, there are a massive number of possible rewrite rules, and proprietary binary obfuscators are unlikely to reveal what rules they use. In addition, at any given moment an expression might contain multiple subexpressions that each match a pattern, and the order in which we perform these simplifications matters! Performing one simplification might prevent a more optimal simplification from appearing down the line. If we were to attempt every possible ordering of optimizations, our search space quickly becomes exponential. As a result, we considered pure pattern-matching methods to be infeasible for our purposes of simplifying complex MBA expressions.</p>"},{"location":"user-guide/decompiler/goomba.html#algebraic-methods","title":"Algebraic Methods","text":"<p>Arybo is an example of an MBA simplifier that relies entirely on algebraic methods. It splits both inputs and outputs into their individual bits and simplifies each bit of the output individually. It\u2019s clear that this method comes with some limitations. For a 64-bit expression, the program outputs 64 individual boolean functions, and it then becomes quite difficult for a human to combine these functions back into a single simplified expression. Notably, the built-in z3 bitvector simplifier also outputs a vector of boolean functions, since this representation is more useful for its main goal of proving whether or not a statement holds.</p> <p>Other algebraic algorithms for solving MBA expressions which do not split the expression into individual bits also exist. For instance, MBA-Blast and MBA-Solver use a transformation between n-bit MBA expressions and 1-bit boolean expressions. For linear MBAs (which we will describe in more detail later), this transformation is well-behaved, and a lookup table can trivially be used to simplify the corresponding boolean expression.</p> <p>SiMBA, another algorithm published by Denuvo researchers in 2022, uses a similar approach to MBA-Blast and MBA-Solver, but additionally makes the observation that the transformation to 1-bit boolean expressions is not necessary for correctness; rather, the authors prove that it is sufficient to simply limit the domains of all input variables to 0/1. As a result, their algorithm yields much better performance; however, it\u2019s important to note that the algorithm still relies on the algebraic structure of linear MBA expressions, and as a result will not work on all MBA expressions found in the wild.</p>"},{"location":"user-guide/decompiler/goomba.html#program-synthesis","title":"Program Synthesis","text":"<p>Program synthesis is the act of generating programs that provably fulfill some useful criteria. In the case of MBA-deobfuscation, our task is to generate simpler programs that are provably semantically equivalent to the provided obfuscated program. In short, two programs are considered semantically equivalent if they yield identical side effects and identical outputs on every possible set of inputs. For the MBA expressions we consider, the expressions have no side effects or branching, so we are just left with the requirement that the simplified expression must yield the same output for every possible set of inputs.</p> <p>One core observation made by synthesis-based tools such as Syntia, QSynthesis, and msynth is that for many real-world programs, the underlying semantics are relatively simple. After all, it is much more common to calculate the sum of two numbers <code>x+y</code>, than the result of say, <code>4529*(x&gt;&gt;(y^(11-~x)))</code>. Thus, for the most part, we only need to consider synthesizing relatively simple programs. To be clear, this is still a massive number of programs, but it at least makes the problem tractable.</p> <p>The main technique used by QSynth and msynth is an offline enumerate synthesis primitive guided by top-down breadth-first search. In simpler terms, these tools take advantage of precomputation, generating and storing a massive database of candidate expressions known as an oracle, searchable by their input/output behavior. Then, when asked to simplify a new expression, they analyze its input/output behavior and use it to perform a lookup in the oracle.</p> <p>Essentially, the input/output behavior of any expression is summarized by running the candidate expression with various inputs (some random, some specially chosen like <code>0</code> or <code>0xffffffff</code>), collecting the resulting outputs, and hashing them into a single number. We refer to this number as a fingerprint, and the oracle can be thought of as a multimap from fingerprints to expressions. The simplification is then performed by calculating the fingerprint of the expression to be simplified, then looking up the fingerprint in the oracle for simpler equivalent expressions.</p>"},{"location":"user-guide/decompiler/goomba.html#machine-learning","title":"Machine Learning","text":"<p>Tools such as Syntia and NeuReduce use machine learning and reinforcement learning techniques to search for semantically equivalent expressions on the spot. However, we found that Syntia\u2019s success rate was quite low \u2014 only around 15% on linear MBA expressions, and NeuReduce appeared to only have been evaluated on linear MBA expressions (on which it reported a 75% success rate), which are already solvable 100% of the time through algebraic approaches such as MBA-Blast and SiMBA.</p>"},{"location":"user-guide/decompiler/goomba.html#goals-for-goomba","title":"Goals for gooMBA","text":"<p>When designing gooMBA, we had the following goals in mind:</p> <ul> <li>Correctness \u2014 Obviously, a tool that outputs nonsense is useless, so we should strive to generate correct simplifications whenever feasible. When a true proof of correctness is infeasible, the tool should try to verify the results to a reasonable degree of certainty.</li> <li>Speed \u2014 The Hex-Rays decompiler is well-known in the industry for its speed. Likewise, the tool should strive for the highest performance possible. However, we are obviously willing to sacrifice a couple of seconds in machine-computation time if it means saving a human analyst hours of work.</li> <li>Integration \u2014 The decompiler plugin should be able to optionally disappear into the background. Ideally, the user should be able to forget that they are even analyzing an obfuscated program and focus only on the work at hand.</li> </ul>"},{"location":"user-guide/decompiler/goomba.html#our-approach","title":"Our Approach","text":"<p>Since there is no single way to generate MBA expressions, we decided to incorporate multiple deobfuscation algorithms into our final design and leave room for more in the future. Our tool, gooMBA, can be split into the following parts: microcode tree walking, simplification engine, SMT proofs of correctness, and heuristics.</p> <p>Below is a drawing of our overall approach:</p> <p></p> <p>Since we found the SMT stage to be the most time-consuming, we run several hundred random test cases on candidate simplifications before attempting a proof.</p>"},{"location":"user-guide/decompiler/goomba.html#microcode-tree-walking","title":"Microcode Tree Walking","text":"<p>Before we can attempt simplification, we must first find potential MBA-obfuscated expressions in the binary. The Hex-Rays decompiler converts binaries into an intermediate form known as microcode, and continuously propagates variable values downward until a certain complexity limit is reached. Since MBA-expressions can be extremely complex (but notably, not so complex that they hinder performance), we increase the complexity limit when the MBA deobfuscator is invoked in order to maximize the complexity of expressions we can analyze. We then perform a simple tree-search through all expressions found in the program, starting with the most complex top-level expressions, and falling through to simpler subexpressions if they fail to simplify.</p>"},{"location":"user-guide/decompiler/goomba.html#simplification-engine","title":"Simplification Engine","text":"<p>Our MBA simplification engine is split into three parts, each handling a subset of MBA expressions. We refer to these three parts as the Simple Linear Algorithm, Advanced Linear Algorithm, and the Synthesis Oracle Lookup.</p> <p>We can think of each one of these three parts as a self-contained module: the obfuscated expression goes in one end, and a set of candidate expressions (each simpler than the obfuscated expression) comes out of the other end. At this stage, these expressions are simply guesses, and may or may not be correct.</p> <p>One important thing to note is that all three of our subengines are considered black-box, i.e. they do not care about the syntactic characteristics of the expression being simplified, only its semantic properties \u2014 i.e. how the outputs change depending on the input values.</p> <p></p>"},{"location":"user-guide/decompiler/goomba.html#simple-linear-algorithm","title":"Simple Linear Algorithm","text":"<p>One of the fastest and easiest types of expressions we can simplify are those that reduce to a linear equation, i.e.</p> <p></p> <p>Note that constants fall under this category as well. We can simplify these easily by emulating the expression we are trying to simplify, first using zeroes for every input variable. This would tell us the value of <code>a0</code>. We can then emulate the instruction once again, this time using zeroes for every input variable except <code>x1</code>. Combined with the previously found value, this tells us the value of <code>a1</code>. We can repeat the process until we\u2019ve obtained all the necessary coefficients. Note that the algorithm can also efficiently detect when a variable needs to be <code>zero- or sign- extended</code>; we can simply try the value <code>-1</code> for each variable and see which of the <code>zero- or sign-extended</code> versions of the linear equation matches the output value. It can be shown in this case that both checks will succeed if and only if both sign- and zero-extension are semantically acceptable.</p>"},{"location":"user-guide/decompiler/goomba.html#advanced-linear-algorithm","title":"Advanced Linear Algorithm","text":"<p>Reichenwallner et al. showed that there is also a fast algorithm, namely SiMBA, to simplify linear MBA expressions, defined as those which can be written as a linear combination of bitwise expressions, i.e.</p> <p></p> <p>Where each <code>ei(x1,...,xn)</code>is a bitwise expression. For instance, <code>2*(x&amp;y)</code> is a linear MBA expression, but neither <code>(x &amp; 0x7)</code> nor <code>(x&gt;&gt;3)</code> are linear MBA expressions, since neither <code>(x &amp; 0x7)</code> nor <code>(x &gt;&gt; 3)</code> are bitwise or can be written as the linear combination of bitwise expressions.</p> <p>Essentially, the algorithm works by deriving an equivalent representation consisting of linear combinations of only bitwise conjunctions, e.g. <code>4 + 2*x + 3*x + 5*(x&amp;y)</code>. Without going into too much detail, we can recall that every boolean function has a single canonical full <code>DNF</code>form (i.e. it can be written as an <code>OR</code> of <code>ANDs</code> formula), which can then be easily translated into a linear combination of conjunctions. Therefore, every linear MBA expression can be written as a linear combination of conjunctions by simply applying the aforementioned transformation to each individual bitwise function, then combining terms.</p> <p>Now, this linear combination of <code>ANDs</code> can be easily solved using a similar technique we described in the previous section, with the difference being that we must evaluate every possible combination of <code>0/1</code> value inputs, not just the inputs containing <code>zero or one 1-values</code>. Without going into too much detail, the coefficients can then be solved through a system of 2n linear equations of 2n variables, where each variable in the linear system represents one of the conjunctions of original variables, and each equation represents a possible <code>0/1</code> assignment to the original variables. We improve upon the algorithm proposed by Reichenwallner et al. by making further observations on the structure of the coefficients in the system and applying the forward substitution technique, yielding a simpler and faster solver.</p> <p>Finally, Reichenwallner et al. apply an 8-step refinement procedure to find simpler representations, involving more bitwise operations than just conjunction. We found this refinement procedure reasonable and only applied a few tweaks in our implementation.</p>"},{"location":"user-guide/decompiler/goomba.html#synthesis-oracle-lookup","title":"Synthesis Oracle Lookup","text":"<p>The algebraic engines are great for deriving constants when the expression\u2019s semantics fulfill a certain structural quality, namely that they are equivalent to a linear combination of bitwise functions. However, we found that non-linear MBAs are also common in real-world binaries. In order to handle these cases, it is necessary to implement a more general algorithm that does not rely on algebraic properties of the input expression.</p> <p>QSynth (2020, David, et al.) and later msynth (2021, Blazytko, et al.) both rely on a precomputed oracle which contains an indexed list of expressions generated through an enumerative search procedure. These expressions are searchable by what we refer to as fingerprints, which can intuitively be understood as a numeric representation of a function\u2019s <code>I/O behavior</code>.</p> <p>In order to generate a function fingerprint, we begin by generating test cases, which are assignments of possible inputs to the function. For instance, if we had three variables, a possible test case would be <code>(x=100, y=0, z=-1)</code>. Then, we feed each one of these test cases into the function being analyzed; for instance, the expression <code>\"x - y + z\"</code> would yield the output value <code>99</code> for the previous test case. Finally, we collect all the outputs and hash them into a single number to get the fingerprint. Now we can look up the fingerprint in the oracle and find a function that is possibly semantically equivalent to the analyzed function.</p> <p>Note that two functions that are indeed semantically equivalent will always yield the same fingerprints (since they will give the same outputs on the test cases). Therefore, if our oracle is exhaustive enough, it should be possible to find equivalences for many MBA-obfuscated expressions. A large precomputed oracle which can be used with goomba is available here: https://hex-rays.com/products/ida/support/freefiles/goomba-oracle.7z</p> <p></p>"},{"location":"user-guide/decompiler/goomba.html#smt-proofs-of-correctness","title":"SMT Proofs of Correctness","text":"<p>In order to have full confidence in the correctness of our simplifications, we feed both the simplified and original expressions into a satisfiability modulo theories (SMT) solver. Without going into too much detail, we translate IDA\u2019s internal intermediate representation into the SMT language, then confirm that there is no value assignment that causes the two expressions to differ. (In other words, <code>a != b is UNSAT</code>.) If the proof succeeds, then we have full faith that the substitution can be performed without changing the semantics of the decompilation. We use the z3 theorem prover provided by Microsoft Research for this purpose.</p>"},{"location":"user-guide/decompiler/goomba.html#heuristics","title":"Heuristics","text":"<p>We found that invoking the SMT solver leads to unreliable performance, since the solver often times out or takes an unreasonable amount of time to prove equivalences. In order to avoid invoking the solver too often, we use heuristics at various points in our analysis. For instance, we detect whether an expression appears to be an MBA expression before trying to simplify it. In addition, every time before we invoke the SMT solver, we generate random test cases and emulate both the input and simplified expressions to ensure they return the same values. We found the latter heuristic to improve performance up to 1,000x in many cases.</p>"},{"location":"user-guide/decompiler/goomba.html#evaluation","title":"Evaluation","text":"<p>We evaluated gooMBA on the dataset of linear MBA-obfuscated expressions on MBA-Solver\u2019s GitHub repository, an assortment of real-world examples from VirusTotal that appeared to be MBA-obfuscated, and an MBA-obfuscated sample object file from Apple\u2019s FairPlay DRM solution. In terms of correctness, we find what we expect \u2014 gooMBA, being a combination of multiple algorithms, is able to cover more cases than each algorithm individually.</p> <p>In terms of performance, we find that gooMBA competes very favorably against state-of-the-art linear MBA solvers, and is able to simplify all of the 1,000 or so examples from MBA-Solver much faster than SiMBA. Note that the comparison is not strictly fair, since SiMBA accepts input expressions as a string, and gooMBA accepts them as decompilation IR; regardless, we claim that accepting decompilation IR leads to a superior user experience with less possibility for human error.</p> <p></p> <p>Compared to msynth, the difference is even more dramatic. On the mba_challenge file provided on msynth\u2019s GitHub repo, we measured the runtime to take around 1.87s per expression. In contrast, our equivalent algorithm took just 0.0047s to run, with the z3 proof taking 0.1s.</p>"},{"location":"user-guide/decompiler/goomba.html#future-work","title":"Future Work","text":"<p>We have presented gooMBA, a deobfuscator that integrates directly into the Hex-Rays decompiler in IDA Pro. This is a meaningful usability trait, since competing tools are typically standalone and require inputting the expression manually or interpreting obtuse outputs. However, this feature also presents some difficulties. For instance, we do not yet perform any use-def analysis or variable propagation beyond what\u2019s already performed by the decompiler. The plugin also currently operates in a purely non-interactive manner, and we believe that adding some interactivity (e.g. allowing the user to choose from a list of simplifications, runs proofs in the background, etc.) would greatly benefit usability.</p> <p>Some potential areas of improvement for gooMBA are: sign extensions are not handled uniformly across all simplification strategies, point function analysis is limited, the simplification oracle is limited by necessity, and use-def analysis can be strengthened to extract expressions spread across basic blocks.</p> <p>Finally, it\u2019s important to note that MBA obfuscation and deobfuscation are constantly evolving. We based our algorithm choices and implementations on the most promising research on the cutting-edge, but acknowledge that more effective solutions may appear in the future. For instance, though we found that machine learning techniques for MBA-solving have historically underperformed competing methods, machine learning seems like a good candidate for NP-hard problems such as MBA simplification, and we are watching this space for new solutions.</p>"},{"location":"user-guide/decompiler/goomba.html#references","title":"References","text":"<ol> <li>Blazytko, Tim, et al. \"Syntia: Synthesizing the semantics of obfuscated code.\" 26th USENIX Security Symposium (USENIX Security 17). 2017.</li> <li>Blazytko, Tim, et al. \"msynth.\" https://github.com/mrphrazer/msynth. 2021.</li> <li>David, Robin, Luigi Coniglio, and Mariano Ceccato. \"Qsynth-a program synthesis based approach for binary code deobfuscation.\" BAR 2020 Workshop. 2020.</li> <li>Feng, Weijie, et al. \"Neureduce: Reducing mixed boolean-arithmetic expressions by recurrent neural network.\" Findings of the Association for Computational Linguistics: EMNLP 2020. 2020.</li> <li>Liu, Binbin, et al. \"MBA-Blast: Unveiling and Simplifying Mixed Boolean-Arithmetic Obfuscation.\" 30th USENIX Security Symposium (USENIX Security 21). 2021.</li> <li>Quarkslab. \"SSPAM: Symbolic Simplification with PAttern Matching.\" https://github.com/quarkslab/sspam. 2016.</li> <li>Quarkslab. \"Arybo.\" https://github.com/quarkslab/arybo. 2016.</li> <li>Reichenwallner, Benjamin, and Peter Meerwald-Stadler. \"Efficient Deobfuscation of Linear Mixed Boolean-Arithmetic Expressions.\" Proceedings of the 2022 ACM Workshop on Research on offensive and defensive techniques in the context of Man At The End (MATE) attacks. 2022.</li> <li>Xu, Dongpeng, et al. \"Boosting SMT solver performance on mixed-bitwise-arithmetic expressions.\" Proceedings of the 42nd ACM SIGPLAN International Conference on Programming Language Design and Implementation. 2021.</li> </ol>"},{"location":"user-guide/decompiler/introduction-to-decompilation-vs-disassembly.html","title":"Introduction to Decompilation vs. Disassembly","text":"<p>A decompiler represents executable binary files in a readable form. More precisely, it transforms binary code into text that software developers can read and modify. The software security industry relies on this transformation to analyze and validate programs. The analysis is performed on the binary code because the source code (the text form of the software) traditionally is not available, because it is considered a commercial secret.</p> <p>Programs to transform binary code into text form have always existed. Simple one-to-one mapping of processor instruction codes into instruction mnemonics is performed by disassemblers. Many disassemblers are available on the market, both free and commercial. The most powerful disassembler is our own IDA Pro. It can handle binary code for a huge number of processors and has open architecture that allows developers to write add-on analytic modules.</p> <p>Decompilers are different from disassemblers in one very important aspect. While both generate human readable text, decompilers generate much higher level text which is more concise and much easier to read.</p> <p>Compared to low level assembly language, high level language representation has several advantages:</p> <ul> <li>It is consise.</li> <li>It is structured.</li> <li>It doesn't require developers to know the assembly language.</li> <li>It recognizes and converts low level idioms into high level notions.</li> <li>It is less confusing and therefore easier to understand.</li> <li>It is less repetitive and less distracting.</li> <li>It uses data flow analysis.</li> </ul> <p>Let's consider these points in detail.</p> <p>Usually the decompiler's output is five to ten times shorter than the disassembler's output. For example, a typical modern program contains from 400KB to 5MB of binary code. The disassembler's output for such a program will include around 5-100MB of text, which can take anything from several weeks to several months to analyze completely. Analysts cannot spend this much time on a single program for economic reasons.</p> <p>The decompiler's output for a typical program will be from 400KB to 10MB. Although this is still a big volume to read and understand (about the size of a thick book), the time needed for analysis time is divided by 10 or more.</p> <p>The second big difference is that the decompiler output is structured. Instead of a linear flow of instructions where each line is similar to all the others, the text is indented to make the program logic explicit. Control flow constructs such as conditional statements, loops, and switches are marked with the appropriate keywords.</p> <p>The decompiler's output is easier to understand than the disassembler's output because it is high level. To be able to use a disassembler, an analyst must know the target processor's assembly language. Mainstream programmers do not use assembly languages for everyday tasks, but virtually everyone uses high level languages today. Decompilers remove the gap between the typical programming languages and the output language. More analysts can use a decompiler than a disassembler.</p> <p>Decompilers convert assembly level idioms into high-level abstractions. Some idioms can be quite long and time consuming to analyze. The following one line code</p> <p><code>x = y / 2;</code></p> <p>can be transformed by the compiler into a series of 20-30 processor instructions. It takes at least 15- 30 seconds for an experienced analyst to recognize the pattern and mentally replace it with the original line. If the code includes many such idioms, an analyst is forced to take notes and mark each pattern with its short representation. All this slows down the analysis tremendously. Decompilers remove this burden from the analysts.</p> <p>The amount of assembler instructions to analyze is huge. They look very similar to each other and their patterns are very repetitive. Reading disassembler output is nothing like reading a captivating story. In a compiler generated program 95% of the code will be really boring to read and analyze. It is extremely easy for an analyst to confuse two similar looking snippets of code, and simply lose his way in the output. These two factors (the size and the boring nature of the text) lead to the following phenomenon: binary programs are never fully analyzed. Analysts try to locate suspicious parts by using some heuristics and some automation tools. Exceptions happen when the program is extremely small or an analyst devotes a disproportionally huge amount of time to the analysis. Decompilers alleviate both problems: their output is shorter and less repetitive. The output still contains some repetition, but it is manageable by a human being. Besides, this repetition can be addressed by automating the analysis.</p> <p>Repetitive patterns in the binary code call for a solution. One obvious solution is to employ the computer to find patterns and somehow reduce them into something shorter and easier for human analysts to grasp. Some disassemblers (including IDA Pro) provide a means to automate analysis. However, the number of available analytical modules stays low, so repetitive code continues to be a problem. The main reason is that recognizing binary patterns is a surprisingly difficult task. Any \"simple\" action, including basic arithmetic operations such as addition and subtraction, can be represented in an endless number of ways in binary form. The compiler might use the addition operator for subtraction and vice versa. It can store constant numbers somewhere in its memory and load them when needed. It can use the fact that, after some operations, the register value can be proven to be a known constant, and just use the register without reinitializing it. The diversity of methods used explains the small number of available analytical modules.</p> <p>The situation is different with a decompiler. Automation becomes much easier because the decompiler provides the analyst with high level notions. Many patterns are automatically recognized and replaced with abstract notions. The remaining patterns can be detected easily because of the formalisms the decompiler introduces. For example, the notions of function parameters and calling conventions are strictly formalized. Decompilers make it extremely easy to find the parameters of any function call, even if those parameters are initialized far away from the call instruction. With a disassembler, this is a daunting task, which requires handling each case individually.</p> <p>Decompilers, in contrast with disassemblers, perform extensive data flow analysis on the input. This means that questions such as, \"Where is the variable initialized?\"\" and, \"Is this variable used?\" can be answered immediately, without doing any extensive search over the function. Analysts routinely pose and answer these questions, and having the answers immediately increases their productivity.</p>"},{"location":"user-guide/decompiler/introduction-to-decompilation-vs-disassembly.html#side-by-side-comparisons-of-disassembly-and-decompilation","title":"Side-by-side comparisons of disassembly and decompilation","text":"<p>Below you will find side-by-side comparisons of disassembly and decompilation outputs. The following examples are available:</p> <p>The following examples are displayed on this page:</p> <ol> <li>Division by two</li> <li>Simple enough?</li> <li>Where's my variable?</li> <li>Arithmetics is not a rocket science</li> <li>Sample window procedure</li> <li>Short-circuit evaluation</li> <li>Inlined string operations</li> </ol>"},{"location":"user-guide/decompiler/introduction-to-decompilation-vs-disassembly.html#division-by-two","title":"Division by two","text":"<p>Just note the difference in size! While the disassemble output requires you not only to know that the compilers generate such convoluted code for signed divisions and modulo operations, but you will also have to spend your time recognizing the patterns. Needless to say, the decompiler makes things really simple.</p> <p>{% tabs %}</p> <pre><code>; =============== S U B R O U T I N E =======================================\n; int __cdecl sub_4061C0(char *Str, char *Dest)\nsub_4061C0      proc near               ; CODE XREF: sub_4062F0+15p\n                                        ; sub_4063D4+21p ...\nStr             = dword ptr  4\nDest            = dword ptr  8\n                push    esi\n                push    offset aSmtp_   ; \"smtp.\"\n                push    [esp+8+Dest]    ; Dest\n                call    _strcpy\n                mov     esi, [esp+0Ch+Str]\n                push    esi             ; Str\n                call    _strlen\n                add     esp, 0Ch\n                xor     ecx, ecx\n                test    eax, eax\n                jle     short loc_4061ED\nloc_4061E2:                             ; CODE XREF: sub_4061C0+2Bj\n                cmp     byte ptr [ecx+esi], 40h\n                jz      short loc_4061ED\n                inc     ecx\n                cmp     ecx, eax\n                jl      short loc_4061E2\nloc_4061ED:                             ; CODE XREF: sub_4061C0+20j\n                                        ; sub_4061C0+26j\n                dec     eax\n                cmp     ecx, eax\n                jl      short loc_4061F6\n                xor     eax, eax\n                pop     esi\n                retn\n; ---------------------------------------------------------------------------\nloc_4061F6:                             ; CODE XREF: sub_4061C0+30j\n                lea     eax, [ecx+esi+1]\n                push    eax             ; Source\n                push    [esp+8+Dest]    ; Dest\n                call    _strcat\n                pop     ecx\n                pop     ecx\n                push    1\n                pop     eax\n                pop     esi\n                retn\nsub_4061C0      endp\n</code></pre> <p>{% endtab %}</p> <p>{% tab title=\"Pseudocode\" %}</p> <pre><code>signed int __cdecl sub_4061C0(char *Str, char *Dest)\n{\n  int len; // eax@1\n  int i; // ecx@1\n  char *str2; // esi@1\n  signed int result; // eax@5\n  strcpy(Dest, \"smtp.\");\n  str2 = Str;\n  len = strlen(Str);\n  for ( i = 0; i &lt; len; ++i )\n  {\n    if ( str2[i] == 64 )\n      break;\n  }\n  if ( i &lt; len - 1 )\n  {\n    strcat(Dest, &amp;str2[i + 1]);\n    result = 1;\n  }\n  else\n  {\n    result = 0;\n  }\n  return result;\n}\n\n</code></pre> <p>{% endtab %}</p>"},{"location":"user-guide/decompiler/introduction-to-decompilation-vs-disassembly.html#simple-enough","title":"Simple enough?","text":"<p>Questions like</p> <ul> <li>What are the possible return values of the function?</li> <li>Does the function use any strings?</li> <li>What does the function do?</li> </ul> <p>can be answered almost instantaneously looking at the decompiler output. Needless to say that it looks better because I renamed the local variables. In the disassembler, registers are renamed very rarely because it hides the register use and can lead to confusion.</p> <p>{% tabs %}</p> <pre><code>; =============== S U B R O U T I N E =======================================\n; int __cdecl sub_4061C0(char *Str, char *Dest)\nsub_4061C0      proc near               ; CODE XREF: sub_4062F0+15p\n                                        ; sub_4063D4+21p ...\nStr             = dword ptr  4\nDest            = dword ptr  8\n                push    esi\n                push    offset aSmtp_   ; \"smtp.\"\n                push    [esp+8+Dest]    ; Dest\n                call    _strcpy\n                mov     esi, [esp+0Ch+Str]\n                push    esi             ; Str\n                call    _strlen\n                add     esp, 0Ch\n                xor     ecx, ecx\n                test    eax, eax\n                jle     short loc_4061ED\nloc_4061E2:                             ; CODE XREF: sub_4061C0+2Bj\n                cmp     byte ptr [ecx+esi], 40h\n                jz      short loc_4061ED\n                inc     ecx\n                cmp     ecx, eax\n                jl      short loc_4061E2\nloc_4061ED:                             ; CODE XREF: sub_4061C0+20j\n                                        ; sub_4061C0+26j\n                dec     eax\n                cmp     ecx, eax\n                jl      short loc_4061F6\n                xor     eax, eax\n                pop     esi\n                retn\n; ---------------------------------------------------------------------------\nloc_4061F6:                             ; CODE XREF: sub_4061C0+30j\n                lea     eax, [ecx+esi+1]\n                push    eax             ; Source\n                push    [esp+8+Dest]    ; Dest\n                call    _strcat\n                pop     ecx\n                pop     ecx\n                push    1\n                pop     eax\n                pop     esi\n                retn\nsub_4061C0      endp\n</code></pre> <p>{% endtab %}</p> <p>{% tab title=\"Pseudocode\" %}</p> <pre><code>signed int __cdecl sub_4061C0(char *Str, char *Dest)\n{\n  int len; // eax@1\n  int i; // ecx@1\n  char *str2; // esi@1\n  signed int result; // eax@5\n  strcpy(Dest, \"smtp.\");\n  str2 = Str;\n  len = strlen(Str);\n  for ( i = 0; i &lt; len; ++i )\n  {\n    if ( str2[i] == 64 )\n      break;\n  }\n  if ( i &lt; len - 1 )\n  {\n    strcat(Dest, &amp;str2[i + 1]);\n    result = 1;\n  }\n  else\n  {\n    result = 0;\n  }\n  return result;\n}\n</code></pre> <p>{% endtab %}</p>"},{"location":"user-guide/decompiler/introduction-to-decompilation-vs-disassembly.html#wheres-my-variable","title":"Where's my variable?","text":"<p>IDA highlights the current identifier. This feature turns out to be much more useful with high level output. In this sample, I tried to trace how the retrieved function pointer is used by the function. In the disassembly output, many wrong eax occurrences are highlighted while the decompiler did exactly what I wanted.</p> <p>{% tabs %} {% tab title=\"Assembler code\" %} </p> <p>{% tab title=\"Pseudocode\" %}  {% endtab %}</p> <p>{% tabs %}</p> <pre><code>; =============== S U B R O U T I N E =======================================\n; int __cdecl myfunc(wchar_t *Str, int)\nmyfunc          proc near               ; CODE XREF: sub_4060+76p\n                                        ; .text:42E4p\nStr             = dword ptr  4\narg_4           = dword ptr  8\n                mov     eax, dword_1001F608\n                cmp     eax, 0FFFFFFFFh\n                jnz     short loc_10003AB6\n                push    offset aGetsystemwindo ; \"GetSystemWindowsDirectoryW\"\n                push    offset aKernel32_dll ; \"KERNEL32.DLL\"\n                call    ds:GetModuleHandleW\n                push    eax             ; hModule\n                call    ds:GetProcAddress\n                mov     dword_1001F608, eax\nloc_10003AB6:                           ; CODE XREF: myfunc+8j\n                test    eax, eax\n                push    esi\n                mov     esi, [esp+4+arg_4]\n                push    edi\n                mov     edi, [esp+8+Str]\n                push    esi\n                push    edi\n                jz      short loc_10003ACA\n                call    eax ; dword_1001F608\n                jmp     short loc_10003AD0\n; ---------------------------------------------------------------------------\nloc_10003ACA:                           ; CODE XREF: myfunc+34j\n                call    ds:GetWindowsDirectoryW\nloc_10003AD0:                           ; CODE XREF: myfunc+38j\n                sub     esi, eax\n                cmp     esi, 5\n                jnb     short loc_10003ADD\n                pop     edi\n                add     eax, 5\n                pop     esi\n                retn\n; ---------------------------------------------------------------------------\nloc_10003ADD:                           ; CODE XREF: myfunc+45j\n                push    offset aInf_0   ; \"\\\\inf\"\n                push    edi             ; Dest\n                call    _wcscat\n                push    edi             ; Str\n                call    _wcslen\n                add     esp, 0Ch\n                pop     edi\n                pop     esi\n                retn\nmyfunc          endp\n</code></pre> <p>{% endtab %}</p> <p>{% tab title=\"Pseudocode\" %}</p> <pre><code>size_t __cdecl myfunc(wchar_t *buf, int bufsize)\n{\n  int (__stdcall *func)(_DWORD, _DWORD); // eax@1\n  wchar_t *buf2; // edi@3\n  int bufsize; // esi@3\n  UINT dirlen; // eax@4\n  size_t outlen; // eax@7\n  HMODULE h; // eax@2\n  func = g_fptr;\n  if ( g_fptr == (int (__stdcall *)(_DWORD, _DWORD))-1 )\n  {\n    h = GetModuleHandleW(L\"KERNEL32.DLL\");\n    func = (int (__stdcall *)(_DWORD, _DWORD))\n                GetProcAddress(h, \"GetSystemWindowsDirectoryW\");\n    g_fptr = func;\n  }\n  bufsize = bufsize;\n  buf2 = buf;\n  if ( func )\n    dirlen = func(buf, bufsize);\n  else\n    dirlen = GetWindowsDirectoryW(buf, bufsize);\n  if ( bufsize - dirlen &gt;= 5 )\n  {\n    wcscat(buf2, L\"\\\\inf\");\n    outlen = wcslen(buf2);\n  }\n  else\n  {\n    outlen = dirlen + 5;\n  }\n  return outlen;\n}\n\n\n</code></pre> <p>{% endtab %}</p>"},{"location":"user-guide/decompiler/introduction-to-decompilation-vs-disassembly.html#arithmetics-is-not-a-rocket-science","title":"Arithmetics is not a rocket science","text":"<p>Arithmetics is not a rocket science but it is always better if someone handles it for you. You have more important things to focus on.</p> <p>{% tabs %}</p> <pre><code>; =============== S U B R O U T I N E =======================================\n; Attributes: bp-based frame\n; sgell(__int64, __int64)\n                public @sgell$qjj\n@sgell$qjj      proc near\narg_0           = dword ptr  8\narg_4           = dword ptr  0Ch\narg_8           = dword ptr  10h\narg_C           = dword ptr  14h\n                push    ebp\n                mov     ebp, esp\n                mov     eax, [ebp+arg_0]\n                mov     edx, [ebp+arg_4]\n                cmp     edx, [ebp+arg_C]\n                jnz     short loc_10226\n                cmp     eax, [ebp+arg_8]\n                setnb   al\n                jmp     short loc_10229\n; ---------------------------------------------------------------------------\nloc_10226:                          ; CODE XREF: sgell(__int64,__int64)+Cj\n                setnl   al\nloc_10229:                          ; CODE XREF: sgell(__int64,__int64)+14j\n                and     eax, 1\n                pop     ebp\n                retn\n@sgell$qjj      endp\n</code></pre> <p>{% endtab %}</p> <p>{% tab title=\"Pseudocode\" %}</p> <pre><code>bool __cdecl sgell(__int64 a1, __int64 a2)\n{\n  return a1 &gt;= a2;\n}\n</code></pre> <p>{% endtab %}</p>"},{"location":"user-guide/decompiler/introduction-to-decompilation-vs-disassembly.html#sample-window-procedure","title":"Sample window procedure","text":"<p>The decompiler recognized a switch statement and nicely represented the window procedure. Without this little help the user would have to calculate the message numbers herself. Nothing particularly difficult, just time consuming and boring. What if she makes a mistake?...</p> <p>{% tabs %}</p> <pre><code>; =============== S U B R O U T I N E =======================================\nwndproc         proc near               ; DATA XREF: sub_4010E0+21o\nPaint           = tagPAINTSTRUCT ptr -0A4h\nBuffer          = byte ptr -64h\nhWnd            = dword ptr  4\nMsg             = dword ptr  8\nwParam          = dword ptr  0Ch\nlParam          = dword ptr  10h\n                mov     ecx, hInstance\n                sub     esp, 0A4h\n                lea     eax, [esp+0A4h+Buffer]\n                push    64h             ; nBufferMax\n                push    eax             ; lpBuffer\n                push    6Ah             ; uID\n                push    ecx             ; hInstance\n                call    ds:LoadStringA\n                mov     ecx, [esp+0A4h+Msg]\n                mov     eax, ecx\n                sub     eax, 2\n                jz      loc_4013E8\n                sub     eax, 0Dh\n                jz      loc_4013B2\n                sub     eax, 102h\n                jz      short loc_401336\n                mov     edx, [esp+0A4h+lParam]\n                mov     eax, [esp+0A4h+wParam]\n                push    edx             ; lParam\n                push    eax             ; wParam\n                push    ecx             ; Msg\n                mov     ecx, [esp+0B0h+hWnd]\n                push    ecx             ; hWnd\n                call    ds:DefWindowProcA\n                add     esp, 0A4h\n                retn    10h\n; ---------------------------------------------------------------------------\nloc_401336:                             ; CODE XREF: wndproc+3Cj\n                mov     ecx, [esp+0A4h+wParam]\n                mov     eax, ecx\n                and     eax, 0FFFFh\n                sub     eax, 68h\n                jz      short loc_40138A\n                dec     eax\n                jz      short loc_401371\n                mov     edx, [esp+0A4h+lParam]\n                mov     eax, [esp+0A4h+hWnd]\n                push    edx             ; lParam\n                push    ecx             ; wParam\n                push    111h            ; Msg\n                push    eax             ; hWnd\n                call    ds:DefWindowProcA\n                add     esp, 0A4h\n                retn    10h\n; ---------------------------------------------------------------------------\nloc_401371:                             ; CODE XREF: wndproc+7Aj\n                mov     ecx, [esp+0A4h+hWnd]\n                push    ecx             ; hWnd\n                call    ds:DestroyWindow\n                xor     eax, eax\n                add     esp, 0A4h\n                retn    10h\n; ---------------------------------------------------------------------------\nloc_40138A:                             ; CODE XREF: wndproc+77j\n                mov     edx, [esp+0A4h+hWnd]\n                mov     eax, hInstance\n                push    0               ; dwInitParam\n                push    offset DialogFunc ; lpDialogFunc\n                push    edx             ; hWndParent\n                push    67h             ; lpTemplateName\n                push    eax             ; hInstance\n                call    ds:DialogBoxParamA\n                xor     eax, eax\n                add     esp, 0A4h\n                retn    10h\n; ---------------------------------------------------------------------------\nloc_4013B2:                             ; CODE XREF: wndproc+31j\n                push    esi\n                mov     esi, [esp+0A8h+hWnd]\n                lea     ecx, [esp+0A8h+Paint]\n                push    ecx             ; lpPaint\n                push    esi             ; hWnd\n                call    ds:BeginPaint\n                push    eax             ; HDC\n                push    esi             ; hWnd\n                call    my_paint\n                add     esp, 8\n                lea     edx, [esp+0A8h+Paint]\n                push    edx             ; lpPaint\n                push    esi             ; hWnd\n                call    ds:EndPaint\n                pop     esi\n                xor     eax, eax\n                add     esp, 0A4h\n                retn    10h\n; ---------------------------------------------------------------------------\nloc_4013E8:                             ; CODE XREF: wndproc+28j\n                push    0               ; nExitCode\n                call    ds:PostQuitMessage\n                xor     eax, eax\n                add     esp, 0A4h\n                retn    10h\nwndproc         endp\n</code></pre> <p>{% endtab %}</p> <p>{% tab title=\"Pseudocode\" %}</p> <pre><code>\nLRESULT __stdcall wndproc(HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam)\n{\n  LRESULT result; // eax@4\n  HWND h; // esi@10\n  HDC dc; // eax@10\n  CHAR Buffer; // [sp+40h] [bp-64h]@1\n  struct tagPAINTSTRUCT Paint; // [sp+0h] [bp-A4h]@10\n  LoadStringA(hInstance, 0x6Au, &amp;Buffer, 100);\n  switch ( Msg )\n  {\n    case 2u:\n      PostQuitMessage(0);\n      result = 0;\n      break;\n    case 15u:\n      h = hWnd;\n      dc = BeginPaint(hWnd, &amp;Paint);\n      my_paint(h, dc);\n      EndPaint(h, &amp;Paint);\n      result = 0;\n      break;\n    case 273u:\n      if ( (_WORD)wParam == 104 )\n      {\n        DialogBoxParamA(hInstance, (LPCSTR)0x67, hWnd, DialogFunc, 0);\n        result = 0;\n      }\n      else\n      {\n        if ( (_WORD)wParam == 105 )\n        {\n          DestroyWindow(hWnd);\n          result = 0;\n        }\n        else\n        {\n          result = DefWindowProcA(hWnd, 0x111u, wParam, lParam);\n        }\n      }\n      break;\n    default:\n      result = DefWindowProcA(hWnd, Msg, wParam, lParam);\n      break;\n  }\n  return result;\n}\n</code></pre> <p>{% endtab %}</p>"},{"location":"user-guide/decompiler/introduction-to-decompilation-vs-disassembly.html#short-circuit-evaluation","title":"Short-circuit evaluation","text":"<p>This is an excerpt from a big function to illustrate short-circuit evaluation. Complex things happen in long functions and it is very handy to have the decompiler to represent things in a human way. Please note how the code that was scattered over the address space is concisely displayed in two <code>if</code> statements.</p> <p>{% tabs %}</p> <pre><code>loc_804BCC7:                            ; CODE XREF: sub_804BB10+A42j\n                mov     [esp+28h+var_24], offset aUnzip ; \"unzip\"\n                xor     eax, eax\n                test    esi, esi\n                setnz   al\n                mov     edx, 1\n                mov     ds:dword_804FBAC, edx\n                lea     eax, [eax+eax+1]\n                mov     ds:dword_804F780, eax\n                mov     eax, ds:dword_804FFD4\n                mov     [esp+28h+var_28], eax\n                call    _strstr\n                test    eax, eax\n                jz      loc_804C4F1\nloc_804BCFF:                            ; CODE XREF: sub_804BB10+9F8j\n                mov     eax, 2\n                mov     ds:dword_804FBAC, eax\nloc_804BD09:                            ; CODE XREF: sub_804BB10+9FEj\n                mov     [esp+28h+var_24], offset aZ2cat ; \"z2cat\"\n                mov     eax, ds:dword_804FFD4\n                mov     [esp+28h+var_28], eax\n                call    _strstr\n                test    eax, eax\n                jz      loc_804C495\nloc_804BD26:                            ; CODE XREF: sub_804BB10+99Cj\n                                        ; sub_804BB10+9B9j ...\n                mov     eax, 2\n                mov     ds:dword_804FBAC, eax\n                xor     eax, eax\n                test    esi, esi\n                setnz   al\n                inc     eax\n                mov     ds:dword_804F780, eax\n  .............................. SKIP ............................\nloc_804C495:                            ; CODE XREF: sub_804BB10+210j\n                mov     [esp+28h+var_24], offset aZ2cat_0 ; \"Z2CAT\"\n                mov     eax, ds:dword_804FFD4\n                mov     [esp+28h+var_28], eax\n                call    _strstr\n                test    eax, eax\n                jnz     loc_804BD26\n                mov     [esp+28h+var_24], offset aZcat ; \"zcat\"\n                mov     eax, ds:dword_804FFD4\n                mov     [esp+28h+var_28], eax\n                call    _strstr\n                test    eax, eax\n                jnz     loc_804BD26\n                mov     [esp+28h+var_24], offset aZcat_0 ; \"ZCAT\"\n                mov     eax, ds:dword_804FFD4\n                mov     [esp+28h+var_28], eax\n                call    _strstr\n                test    eax, eax\n                jnz     loc_804BD26\n                jmp     loc_804BD3D\n; ---------------------------------------------------------------------------\nloc_804C4F1:                            ; CODE XREF: sub_804BB10+1E9j\n                mov     [esp+28h+var_24], offset aUnzip_0 ; \"UNZIP\"\n                mov     eax, ds:dword_804FFD4\n                mov     [esp+28h+var_28], eax\n                call    _strstr\n                test    eax, eax\n                jnz     loc_804BCFF\n                jmp     loc_804BD09\n</code></pre> <p>{% endtab %}</p> <p>{% tab title=\"Pseudocode\" %}</p> <pre><code>dword_804F780 = 2 * (v9 != 0) + 1;\n  if ( strstr(dword_804FFD4, \"unzip\") || strstr(dword_804FFD4, \"UNZIP\") )\n    dword_804FBAC = 2;\n  if ( strstr(dword_804FFD4, \"z2cat\")\n    || strstr(dword_804FFD4, \"Z2CAT\")\n    || strstr(dword_804FFD4, \"zcat\")\n    || strstr(dword_804FFD4, \"ZCAT\") )\n  {\n    dword_804FBAC = 2;\n    dword_804F780 = (v9 != 0) + 1;\n  }\n</code></pre> <p>{% endtab %}</p>"},{"location":"user-guide/decompiler/introduction-to-decompilation-vs-disassembly.html#inlined-string-operations","title":"Inlined string operations","text":"<p>The decompiler tries to recognize frequently inlined string functions such as strcmp, strchr, strlen, etc. In this code snippet, calls to the <code>strlen</code> function has been recognized.</p> <p>{% tabs %}</p> <pre><code> mov     eax, [esp+argc]\n                sub     esp, 8\n                push    ebx\n                push    ebp\n                push    esi\n                lea     ecx, ds:0Ch[eax*4]\n                push    edi\n                push    ecx             ; unsigned int\n                call    ??2@YAPAXI@Z    ; operator new(uint)\n                mov     edx, [esp+1Ch+argv]\n                mov     ebp, eax\n                or      ecx, 0FFFFFFFFh\n                xor     eax, eax\n                mov     esi, [edx]\n                add     esp, 4\n                mov     edi, esi\n                repne scasb\n                not     ecx\n                dec     ecx\n                cmp     ecx, 4\n                jl      short loc_401064\n                cmp     byte ptr [ecx+esi-4], '.'\n                jnz     short loc_401064\n                mov     al, [ecx+esi-3]\n                cmp     al, 'e'\n                jz      short loc_401047\n                cmp     al, 'E'\n                jnz     short loc_401064\nloc_401047:                             ; CODE XREF: _main+41j\n                mov     al, [ecx+esi-2]\n                cmp     al, 'x'\n                jz      short loc_401053\n                cmp     al, 'X'\n                jnz     short loc_401064\nloc_401053:                             ; CODE XREF: _main+4Dj\n                mov     al, [ecx+esi-1]\n                cmp     al, 'e'\n                jz      short loc_40105F\n                cmp     al, 'E'\n                jnz     short loc_401064\nloc_40105F:                             ; CODE XREF: _main+59j\n                mov     byte ptr [ecx+esi-4], 0\nloc_401064:                             ; CODE XREF: _main+32j _main+39j ... \n                mov     edi, esi\n                or      ecx, 0FFFFFFFFh\n                xor     eax, eax\n                repne scasb\n                not     ecx\n                add     ecx, 3\n                push    ecx             ; unsigned int\n                call    ??2@YAPAXI@Z    ; operator new(uint)\n                mov     edx, eax\n</code></pre> <p>{% endtab %}</p>"},{"location":"user-guide/decompiler/decompiler-manual/index.html","title":"Hex-Rays Decompiler - User Manual","text":""},{"location":"user-guide/decompiler/decompiler-manual/index.html#table-of-contents","title":"Table of contents","text":"<ul> <li>Prerequisites</li> <li>Installation</li> <li>Quick primer</li> <li>Interactive operation</li> <li>Batch operation</li> <li>Failures and troubleshooting</li> <li>FAQ</li> <li>Tips and tricks</li> <li>Configuration</li> <li>Limitations</li> <li>SDK reference</li> <li>Third-party plugins</li> <li>Legal info</li> </ul>"},{"location":"user-guide/decompiler/decompiler-manual/batch.html","title":"Batch operation","text":"<p>The decompiler supports the batch mode operation with the text and GUI versions of IDA. All you need is to specify the -Ohexrays switch in the command line. The format of this switch is:</p> <pre><code>-Ohexrays:-option1:-option2:outfile:func1:func2\\...\n</code></pre> <p>The valid options are:</p> <ul> <li>-new decompile only if output file does not exist</li> <li>-nosave do not save the database (idb) file after decompilation</li> <li>-errs send problematic databases to hex-rays.com</li> <li>-lumina use Lumina server</li> <li>-mail=my@mail.com your email (meaningful if -errs option is used)</li> </ul> <p>The output file name can be prepended with + to append to it. If the specified file extension is invalid, .c will be used.</p> <p>The functions to decompile can be specified by their addresses or names. The ALL keyword means all non-library functions. For example:</p> <pre><code>idat -Ohexrays:-errs:-mail=john@mail.com:outfile:ALL -A input\n</code></pre> <p>will decompile all nonlibrary functions to outfile.c. In the case of an error, the .idb file will be sent to hex-rays.com. The -A switch is necessary to avoid the initial dialog boxes.</p>"},{"location":"user-guide/decompiler/decompiler-manual/cmd_adddel_rettype.html","title":"Add/delete function return type","text":"<p>Hotkey: Ctrl-Shift-R</p> <p>This command removes the return type from the function prototype. It is applied to the prototype of the current function.</p> <p>It is available anywhere in the pseudocode window, regardless where exactly the cursor is positioned. This command is not visible in the context sensitive popup menu.</p> <p>If applied to a function without the return type, it will add the previously removed return type to the function prototype.</p> <p>This command is available starting from v7.5.</p> <p>See also: interactive operation, Del function argument.</p>"},{"location":"user-guide/decompiler/decompiler-manual/cmd_block_cmts.html","title":"Edit block comment","text":"<p>Hotkey: Ins</p> <p>This command edits the block comment for the current line. The entered comment will be displayed before the current line.</p> <p>Please note that due to the highly dynamic nature of the output, the decompiler uses a rather complex coordinate system to attach comments. Some output lines will not have a coordinate in this system. You cannot edit comments for these lines. Also, some lines have the same coordinate. In this case, the comment will be attached to the first line with the internal coordinate. We will try to overcome this limitation in the future but it might take some time and currently we do not have a clear idea how to improve the existing coordinate system.</p> <p>Each time the output text changes the decompiler will rearrange the entered comments so they are displayed close to their original locations. However, if the output changes too much, the decompiler could fail to display some comments. Such comments are called \"orphan comments\". All orphan comments are printed at the very end of the output text.</p> <p>If applied to the function declaration line, this command edits the function comment. This comment is shared with IDA: it is the same as the function comment in IDA.</p> <p>You can cut and paste them to the correct locations or you can delete them with the \"Delete orphan comments\" command using the right-click menu.</p> <p>See also: Edit indented comment | Interactive operation</p>"},{"location":"user-guide/decompiler/decompiler-manual/cmd_collapse.html","title":"Collapse/uncollapse item","text":"<p>This command collapses the selected multiline C statement into one line. It can be applied to if, while, for, switch, do keywords. The collapsed item will be replaced by its keyword and \"...\"</p> <p>It can also be applied to the local variable declarations. This can be useful if there are too many variables and they make the output too long. All variable declarations will be replaced by just one line:</p> <pre><code>        // [COLLAPSED LOCAL DECLARATIONS. PRESS KEYPAD CTRL-\"+\" TO EXPAND]\n</code></pre> <p>See also: interactive operation</p>"},{"location":"user-guide/decompiler/decompiler-manual/cmd_comments.html","title":"Edit indented comment","text":"<p>Hotkey: /</p> <p>This command edits the indented comment for the current line or the current variable. It can be applied to the local variable definition area (at the top of the output) and to the function statement area (at the bottom of the output).</p> <p>If applied to the local variable definition area, this command edits the comment for the current local variable. Otherwise the comment for the current line will be edited.</p> <p>Please note that due to the highly dynamic nature of the output, the decompiler uses a rather complex coordinate system to attach comments. Some output lines will not have a coordinate in this system. You cannot edit comments for these lines. We will try to overcome this limitation in the future but it might take some time and currently we do not have a clear idea how to improve the existing coordinate system.</p> <p>Each time the output text changes the decompiler will rearrange the entered comments so they are displayed close to their original locations. However, if the output changes too much, the decompiler could fail to display some comments. Such comments are called \"orphan comments\". All orphan comments are printed at the very end of the output text.</p> <p>You can cut and paste them to the correct locations or you can delete them with the \"Delete orphan comments\" command using the right-click menu.</p> <p>The starting line position for indented comments can be configured by the user. Please check the COMMENT_INDENT parameter in the configuration file.</p> <p>See also: Edit block comment | Interactive operation</p>"},{"location":"user-guide/decompiler/decompiler-manual/cmd_copy.html","title":"Copy to assembly","text":"<p>This command copies the pseudocode text to the disassembly window. It is available from the popup right-click menu.</p> <p>Please note that only \"meaningful\" lines are copied. Lines containing curly braces, else/do keywords will be omitted.</p> <p>The copied text is represented as anterior comments in the disassembly. Feel free edit them the way you want. The copied text is static and will not change if the pseudocode text changes.</p> <p>See also: interactive operation</p>"},{"location":"user-guide/decompiler/decompiler-manual/cmd_delarg.html","title":"Del function argument","text":"<p>Hotkey: Shift-Del</p> <p>This command removes an argument or the return type from a function prototype. It can be applied to the prototype of the current function as well as to any called function.</p> <p>It is available only when the cursor is on a function argument or on the return type. As a result of this command, the function prototype is modified: the selected argument is removed from the argument list. If necessary, the calling convention is replaced by a new one.</p> <p>Please note that other register arguments do not change their locations. This logic ensures that a stray argument in the argument list can be deleted with a keypress.</p> <p>When applied to the function return type it will convert it to \"void\".</p> <p>This command is available starting from v7.5.</p> <p>See also: interactive operation, Add/delete function return type.</p>"},{"location":"user-guide/decompiler/decompiler-manual/cmd_force_call_type.html","title":"Force call type","text":"<p>In some cases, especially for indirect calls, the decompiler cannot correctly detect call arguments. For a call like</p> <pre><code>        push something\n        mov  eax, [ecx]\n        call [eax+8]\n</code></pre> <p>it is very difficult to determine where are the input arguments. For example, it is unclear if ECX is used by the call or not.</p> <p>However, the number of arguments and their types can become available at later stages of decompilation. For example, the decompiler may determine that ECX points to a class with a table of virtual functions. If the user specifies the vtable layout, the output may become similar to</p> <pre><code>        ((int (*__stdcall)(DWORD))ptr-vftable-somefunc)(v1);\n</code></pre> <p>If the user declares somefunc as a pointer to a function like this:</p> <pre><code>        int __thiscall (*somefunc)(myclass *obj, int arg);\n</code></pre> <p>then the code is incorrect. The decompiler detected only one argument and missed the one in ECX.</p> <p>The 'force call type' command instructs the decompiler not to perform the call argument analysis but just use the type of the call object. For the above example, the call will be transformed into something like</p> <pre><code>        ptr-vftable-somefunc(obj, v1);  // obj is in ECX\n</code></pre> <p>In other words, this command copies the call type from the call object to the call instruction. The call object may be any expression, the only requirement is that it must be a pointer to a function.</p> <p>There is a more general command Set call type that allows the user to set any type for a call instruction.</p> <p>NOTE: Behind the scenes the 'force call' command copies the desired type to the operand of the call instruction. To revert the effects of 'force call' or to fine tune the forced type please use the Edit, Operand type, Set operand type in the disassembly view while staying on the call instruction.</p> <p>See also: interactive operation</p>"},{"location":"user-guide/decompiler/decompiler-manual/cmd_hide.html","title":"Hide/unhide C statements","text":"<p>Hotkeys</p> <p>Keypad -</p> <p>Hide current statement</p> <p>Keypad +</p> <p>Unhide current statement</p> <p>This command collapses the current statement into one line. It can be applied to multiline statements (if, while, for, do, switch, blocks).</p> <p>The hidden item can be uncollapsed using the unhide command.</p> <p>See also: interactive operation</p>"},{"location":"user-guide/decompiler/decompiler-manual/cmd_hide_casts.html","title":"Show/hide casts","text":"<p>Hotkey: \\</p> <p>This command hides all cast operators from the output listing. Please note that the output may become more difficult to understand or even lose its meaning without cast operators. However, since in some cases it is desirable to temporarily hide them, we provide the end user with this command.</p> <p>The initial display of cast operators can be configured by the user. Please check the HO_DISPLAY_CASTS bit in the HEXOPTIONS parameter in the configuration file.</p> <p>See also: interactive operation</p>"},{"location":"user-guide/decompiler/decompiler-manual/cmd_html.html","title":"Generate HTML file","text":"<p>This command generates an HTML file with the pseudocode of the current function. It is available from the popup menu if the mouse is clicked on the very first line of the pseudocode text.</p> <p>This command also works on the selected area. The user can select the area that will be saved into HTML file. This is useful if only a small code snippet is needed to be saved instead of the entire function body.</p> <p>See also: interactive operation</p>"},{"location":"user-guide/decompiler/decompiler-manual/cmd_jump_global_xref.html","title":"Jump to cross reference globally","text":"<p>This command decompiles all non-trivial functions in the database and looks for xrefs in them. Library and thunk functions are skipped. The decompilation results are cached in memory, so only the first invocation of this command is slow.</p> <p>Cross references to the current item are looked up in the decompilation results. A list of such xrefs is formed and displayed on the screen. Currently the following item types are supported:</p> <ul> <li>a structure field</li> <li>a enumeration member (symbolic constant)</li> </ul> <p>This action is also available (only by hotkey) in the local types view.</p> <p>See also: interactive operation</p>"},{"location":"user-guide/decompiler/decompiler-manual/cmd_jump_paren.html","title":"Jump to paired paren","text":"<p>This command jumps to the matching parenthesis. It is available only when the cursor is positioned on a parenthesis, bracket, or curly brace.</p> <p>The default hotkey is '%'.</p> <p>See also: interactive operation</p>"},{"location":"user-guide/decompiler/decompiler-manual/cmd_jump_xref.html","title":"Jump to cross reference","text":"<p>This command opens the standard dialog box with the cross references to the current item. The user may select a cross reference and jump to it. If the cross-reference address belongs to a function, it will be decompiled. Otherwise, IDA will switch to the disassembly view.</p> <p>For local variables, the following cross reference types are defined:</p> <pre><code>  r  Read\n  w  Write\n  rw Read/Write\n  o  Reference\n</code></pre> <p>It is also possible to jump to structure fields. All local references to a field of a structure type will be displayed.</p> <p>If the item under the cursor is a label, a list of all references to the label will be displayed.</p> <p>Finally, xrefs to statment types are possible too. For example, a list of all return statements of the current function can be obtained by pressing X on a return statment. All statements with keywords are supported.</p> <p>See also: interactive operation</p>"},{"location":"user-guide/decompiler/decompiler-manual/cmd_map_lvar.html","title":"Map to another variable","text":"<p>Hotkey: =</p> <p>This command allows the user to replace all occurrences of a variable by another variable. The decompiler will propose a list of variables that may replace the current variable. The list will include all variables that have exactly the same type as the current variable. Variables that are assigned to/from the current variable will be included too.</p> <p>Please note that the decompiler does not verify the mapping. A wrong mapping may render the decompiler output incorrect.</p> <p>The function arguments and the return value cannot be mapped to other variables. However, other variable can be mapped to them.</p> <p>A mapping can be undone by right clicking on the target variable and using the 'unmap variable' command.</p> <p>See also: interactive operation</p>"},{"location":"user-guide/decompiler/decompiler-manual/cmd_mark.html","title":"Mark/unmark as decompiled","text":"<p>This command marks the current function as decompiled. It is a convenient way to track decompiled functions. Feel free to use it any way you want.</p> <p>Marking a function as decompiled will change its background color to the value specified by the MARK_BGCOLOR parameter in the configuration file. The background color will be used in the pseudocode window, in the disassembly listing, and in the function list.</p> <p>See also: interactive operation</p>"},{"location":"user-guide/decompiler/decompiler-manual/cmd_new_struct.html","title":"Create new struct type","text":"<p>Hotkey: none</p> <p>This convenience command allows the user to convert the current local variable from a non-pointer type to a pointer to a newly created structure type. It is available from the context menu if the current variable is used a pointer in the pseudocode.</p> <p>The decompiler scans the pseudocode for all references to the variable and tries to deduce the type of the pointed object. Then the deduced type is displayed on the screen and the user may modify it to his taste before accepting it. When the user clicks OK, the new type is created and the type of the variable is set as a pointer to the newly created type.</p> <p>In simple cases (for example, when the variable is used as a simple character pointer), the decompiler does not display any dialog box but directly changes the variable type. In such cases, no new type will be created.</p> <p>This is just a convenience command. Please use the set type command in order to specify arbitrary variable types.</p> <p>This command is available only when the decompiler is used with recent IDA versions.</p> <p>See also: interactive operation</p>"},{"location":"user-guide/decompiler/decompiler-manual/cmd_numform.html","title":"Set number representation","text":"<p>Hotkeys:</p> <ul> <li>H - toggle between hexadecimal and decimal representations</li> <li>R - switch to character constant representation</li> <li>M - switch to enumeration (symbolic constant) representation</li> <li>_ - invert sign</li> <li>T - apply struct offset</li> </ul> <p>This command allows the user to specify the desired form of a numeric constant. Please note that some constants have a fixed form and cannot be modified. This mainly includes constants generated by the decompiler on the fly.</p> <p>The decompiler ties the number format information to the instruction that generated the constant. The instruction address and the operand number are used for that. If a constant, which was generated by a single instruction, is used in many different locations in the pseudocode, all these locations will be modified at once.</p> <p>Using the 'invert sign' negates the constant and resets the enum/char flag if it was set.</p> <p>When this command is applied the first time to a negative constant, the output will seemingly stay the same. However, the list of symbolic constants available to the M hotkey changes. For example, if the constant is '-2', then before inverting the sign the symbolic constants corresponding to '-2' are available. After inverting the sign the symbolic constants corresponding to '2' are available.</p> <p>The T hotkey applies the structure offset to the number. For positive numbers, it usually converts the number into offsetof() macro. For negative numbers, it usually converts the whole (var-num) expression into the CONTAINING_RECORD macro. By the way, the decompiler tries to use other hints to detect this macro. It checks if the number corresponds to a structure offset in the disassembly listing. For example, an expression like</p> <pre><code>        v1 = (structype *)((char *)v2 - num);\n</code></pre> <p>can be converted into</p> <pre><code>        v1 = CONTAINING_RECORD(v2, structype, fieldname);\n</code></pre> <p>where structype * is the type of v1 and offsetof(structype, fieldname) == num. Please note that v2 must be declared as a pointer to the corresponding structure field, otherwise the conversion may fail.</p> <p>See also:</p> <ul> <li>interactive operation</li> <li>offsetof() and container_of() macros</li> </ul>"},{"location":"user-guide/decompiler/decompiler-manual/cmd_rename.html","title":"Rename","text":"<p>Hotkey: N</p> <p>The rename command renames the current item. It can be applied to the following things:</p> <ul> <li>Function</li> <li>Local variable</li> <li>Global item (function or data)</li> <li>Structure field</li> <li>Statement label</li> </ul> <p>Normally the item under the cursor will be renamed. If the command is applied to the very first line of the output text and the decompiler cannot determine the item under the cursor, the current function will be renamed.</p> <p>See also: interactive operation</p>"},{"location":"user-guide/decompiler/decompiler-manual/cmd_reset_ptr.html","title":"Reset pointer type","text":"<p>Hotkey: none</p> <p>This command resets the type of the current local variable from a pointer type to an integer type. This is just a convenience command. Please use the set type command in order to specify arbitrary variable types.</p> <p>See also: interactive operation</p>"},{"location":"user-guide/decompiler/decompiler-manual/cmd_select_union_field.html","title":"Select union field","text":"<p>Hotkey: Alt-Y</p> <p>This command allows the user to select the desired union field. In the presence of unions, the decompiler cannot always detect the correct union field.</p> <p>The decompiler tries to reuse the union selection information from the disassembly listing. If there is no information in the disassembly listing, the decompiler uses an heuristic rule to choose the most probable union field based on the field types. However, it may easily fail in the presence of multiple union fields with the same type or when there is no information how the union field is used.</p> <p>If both the above methods of selecting the union field fail, then this command can be used to specify the desired field. It is especially useful for analyzing device drivers (I/O request packets are represented with a long union), or COM+ code that uses VARIANT data types.</p> <p>See also: interactive operation</p>"},{"location":"user-guide/decompiler/decompiler-manual/cmd_set_call_type.html","title":"Set call type","text":"<p>In some cases, especially for indirect calls, the decompiler cannot correctly detect call arguments. The 'Set call type' command sets the type of the function call at the current item without changing the prototype of the called function itself. So there is a difference between 'Set call type' and Set type commands. Let us assume that there is a call</p> <pre><code>        v1 = off_5C6E4(a1);\n</code></pre> <p>and that the decompiler erroneously detected one argument whereas four arguments actually are present. If the user sets the new call type as</p> <pre><code>        int (*)(int, int, int, int)\n</code></pre> <p>then the call will be transformed into</p> <pre><code>        v1 = ((int (__cdecl *)(int, int, int, int))off_5C6E4)(a1, a2, a3, a4);\n</code></pre> <p>and the type of off_5C6E4 will remain unchanged. Note that in this case the user can revert the call to the previous state using the Force call type command.</p> <p>The Set type command will have a different effect:</p> <pre><code>        v1 = off_5C6E4(a1, a2, a3, a4);\n</code></pre> <p>It sets the new type for off_5C6E4 that will cause changes to all places where off_5C6E4 is called, including the current call.</p> <p>This command also can be used to specify the __noreturn attribute of a call.</p> <p>NOTE: Behind the scenes the 'Set call type' command, like Force call type, copies the entered type to the operand of the call instruction. Actually it is a shortcut to Edit, Operand type, Set operand type in the disassembly view while staying on the call instruction.</p> <p>See also: interactive operation</p>"},{"location":"user-guide/decompiler/decompiler-manual/cmd_settype.html","title":"Set type","text":"<p>Hotkey: Y</p> <p>The SetType command sets the type of the current item. It can be applied to the following things:</p> <ul> <li>Function</li> <li>Local variable</li> <li>Global item (function or data)</li> </ul> <p>If the command is applied to the very first line of the output text, the decompiler will try to detect the current function argument. If the cursor is on an argument declaration, then the argument type will be modified. Otherwise, the current function type will be modified.</p> <p>In all other cases the item under the cursor will be modified.</p> <p>When modifying the prototype of the current function you may add or remove function arguments, change the return type, and change the calling convention. If you see that the decompiler wrongly created too many function arguments, you can remove them.</p> <p>The item type must be specified as a C type declaration. All types defined in the loaded type libraries, all structures in the local types window, all enum definitions in the local types window can be used.</p> <p>This is a very powerful command. It can change the output dramatically. Use it to remove cast operations from the output and to make it more readable. In some cases, you will need to define structure types in the local types window and only after that use them in the pseudocode window.</p> <p>NOTE: since the arguments of indirect calls are collected before defining variables, specifying the type of the function pointer may not be enough. Please read this for more info.</p> <p>Since variables and function types are essential, the decompiler uses colors to display them. By default, definite types (set by the user, for example) are displayed in blue while guessed types are displayed in gray. Please note that the guessed types may change if the circumstances change. For example, if the prototype of a called function is changed, the variable that holds its return value may change automatically, unless its type was set by the user.</p> <p>This command does not rename the operated item, even if you specify the name in the declaration. Please use the rename command for that.</p> <p>See also: interactive operation</p>"},{"location":"user-guide/decompiler/decompiler-manual/cmd_split.html","title":"Split/unsplit expression","text":"<p>Hotkeys</p> <p>None</p> <p>Split current expression</p> <p>None</p> <p>Unsplit current expression</p> <p>This command splits the current expression into multiple expressions. It is available only for int16, int32, or int64 assignments or expressions which were combiled by the decompiler (e.g. 64bit comparison on 32bit platform). Splitting an assignment breaks it into two assignments: one for the low part and one for the high part. Other expressions can be splitted into more than two expressions.</p> <p>This command is useful if the decompiler erroneously combines multiple unrelated expressions into one. In some cases the types of the new variables should be explicitly specified to get a nice listing. For example:</p> <pre><code>        __int64 v0;\n        v0 = 0ui64;\n</code></pre> <p>can be split into two assignments:</p> <pre><code>        __int32 v0;\n        __int32 v1;\n        v0 = 0;\n        v1 = 0;\n</code></pre> <p>by right clicking on the 64-bit assignment operation (the '=' sign) and selecting the 'Split' command.</p> <p>The split expression can be unsplit using the unsplit command. Unsplitting removes all effects of the previous Split commands.</p> <p>See also: interactive operation</p>"},{"location":"user-guide/decompiler/decompiler-manual/cmd_split_lvar.html","title":"Split variable","text":"<p>Hotkey: Shift-S</p> <p>Sometimes a stack slot is used for two completely different purposes during the lifetime of a function. While for the unaliased part of the stack frame the decompiler can usually sort things out, it cannot do much for the aliased part of the stack frame. For the aliased part, it will create just one variable even if the corresponding stack slot is used for multiple different purposes. It happens so because the decompiler cannot prove that the variable is used for a different purpose, starting from a certain point.</p> <p>The split variable command is designed to solve exactly this problem.</p> <p>This command allows the user to force the decompiler to allocate a new variable starting from the current point. If the current expression is a local variable, all its subsequent occurrences will be replaced by a new variable up to the end of the function or the next split variable at the same stack slot. If the cursor does not point to a local variable, the decompiler will ask the user about the variable to replace.</p> <p>In the current statement, only the write accesses to the variable will be replaced. In the subsequent statements, all occurrences of the variable will be replaced. We need this logic to handle the following situation:</p> <pre><code>        func(var, &amp;var);\n</code></pre> <p>where only the second occurrence of the variable should be replaced. Please note that in some cases it makes sense to click on the beginning of the line with the function call, rather than on the variable itself.</p> <p>Please note that in the presence of loops in the control flow graph it is possible that even the occurrences before the current expression will be replaced by the new variable. If this is not desired, the user should split the variable somewhere else.</p> <p>The very first and the very last occurrences of a variable cannot be used to split the variable because it is not useful.</p> <p>The decompiler does not verify the validity of the new variable. A wrong variable allocation point may render the decompiler output incorrect.</p> <p>Currently, only aliasable stack variables can be split.</p> <p>A split variable can be deleted by right clicking on it and selecting 'Unsplit variable'.</p> <p>See also: interactive operation</p>"},{"location":"user-guide/decompiler/decompiler-manual/cmd_struct_ptr.html","title":"Convert to struct *","text":"<p>Hotkey: none</p> <p>This convenience command allows the user to specify a pointer to structure type in a quick and efficient manner. The list of the local structure types will be displayed. The type of the current variable will be set as a pointer to the selected structure type.</p> <p>This is just a convenience command. Please use the set type command in order to specify arbitrary variable types.</p> <p>This command is available only when the decompiler is used with recent IDA versions.</p> <p>See also: interactive operation</p>"},{"location":"user-guide/decompiler/decompiler-manual/cmd_variadic.html","title":"Add/del variadic arguments","text":"<p>Hotkeys</p> <p>Numpad+</p> <p>Add variadic argument</p> <p>Numpad-</p> <p>Delete variadic argument</p> <p>This command adds or removes an argument of a variadic call. It is impossible to detect the correct number of variadic arguments in all cases, and this command can be used to fix wrongly detected arguments. It is available only when the cursor is located on a call to a variadic function (like printf). The decompiler automatically detects the argument locations, the user can only increase or decrease their number.</p> <p>This command is useful if the decompiler determines the number of arguments incorrectly. For example:</p> <pre><code>        printf(\"This is a test call: %d\\n\");\n</code></pre> <p>apparently lacks an argument. Pressing Numpad+ modifies it:</p> <pre><code>        printf(\"This is a test call: %d\\n\", v1);\n</code></pre> <p>If too many arguments are added to a variadic call, decompilation may fail. Three methods to correct this situation exist:</p> <ul> <li>undo the last action (hotkey Ctrl-Z)</li> <li>position the cursor on the wrongly modified call and press Numpad-</li> <li>or use Edit, Other, Reset decompiler information to reset the forced varidic argument counts.</li> </ul> <p>See also: interactive operation</p>"},{"location":"user-guide/decompiler/decompiler-manual/config.html","title":"Configuration","text":"<p>The decompiler has a configuration file. It is installed into the 'cfg' subdirectory of the IDA installation. The configuration file is named 'hexrays.cfg'. It is a simple text file, which can be edited to your taste. Currently the following keywords are defined:</p>"},{"location":"user-guide/decompiler/decompiler-manual/config.html#loctype_bgcolor","title":"LOCTYPE_BGCOLOR","text":"<p>Background color of local type declarations. Currently this color is not used.\\ Default: default background of the disassembly view</p>"},{"location":"user-guide/decompiler/decompiler-manual/config.html#vardecl_bgcolor","title":"VARDECL_BGCOLOR","text":"<p>Background color of local variable declarations. It is specified as a hexadecimal number 0xBBGGRR where BB is the blue component, GG is the green component, and RR is the red component. Color -1 means the default background color (usually white).\\ Default: default background of the disassembly view</p>"},{"location":"user-guide/decompiler/decompiler-manual/config.html#funcbody_bgcolor","title":"FUNCBODY_BGCOLOR","text":"<p>Background color of the function body. It is specified the same way as VARDECL_BGCOLOR.\\ Default: default background of the disassembly view</p>"},{"location":"user-guide/decompiler/decompiler-manual/config.html#mark_bgcolor","title":"MARK_BGCOLOR","text":"<p>Background color of the function if it is marked as decompiled. It is specified the same way as VARDECL_BGCOLOR.\\ Default: very light green</p>"},{"location":"user-guide/decompiler/decompiler-manual/config.html#block_indent","title":"BLOCK_INDENT","text":"<p>Number of spaces to use for block indentations.\\ Default: 2</p>"},{"location":"user-guide/decompiler/decompiler-manual/config.html#comment_indent","title":"COMMENT_INDENT","text":"<p>The position to start indented comments.\\ Default: 48</p>"},{"location":"user-guide/decompiler/decompiler-manual/config.html#right_margin","title":"RIGHT_MARGIN","text":"<p>As soon as the line length approaches this value, the decompiler will try to split it. However, it some cases the line may be longer.\\ Default: 120</p>"},{"location":"user-guide/decompiler/decompiler-manual/config.html#max_ncommas","title":"MAX_NCOMMAS","text":"<p>In order to keep the expressions relatively simple, the decompiler limits the number of comma operators in an expression. If there are too many of them, the decompiler will add a goto statement and replace the expression with a block statement. For example, instead of</p> <pre><code>   if ( cond || (x=*p,y=func(),x+y0) )\n     body;\n</code></pre> <p>we may end up with:</p> <pre><code>   if ( cond )\n     goto LABEL;\n   x = *p;\n   y = func();\n   if ( x + y  0 )\n LABEL:\n     body;\n</code></pre> <p>\\ Default: 8</p>"},{"location":"user-guide/decompiler/decompiler-manual/config.html#default_radix","title":"DEFAULT_RADIX","text":"<p>Specifies the default radix for numeric constants. Possible values: 0, 10, 16. Zero means \"decimal for signed, hex for unsigned\".\\ Default: 0</p>"},{"location":"user-guide/decompiler/decompiler-manual/config.html#max_funcsize","title":"MAX_FUNCSIZE","text":"<p>Specifies the maximal decompilable function size, in KBs. Only reachable basic blocks are taken into consideration.\\ Default: 64</p>"},{"location":"user-guide/decompiler/decompiler-manual/config.html#hexoptions","title":"HEXOPTIONS","text":"<p>Combination of various analysis and display options:</p>"},{"location":"user-guide/decompiler/decompiler-manual/config.html#ho_jumpout_helpers","title":"HO_JUMPOUT_HELPERS","text":"<p>If enabled, the decompiler will handle out-of-function jumps by generating a call to the JUMPOUT() function. If disables, such functions will not be decompiled.\\ Default: enabled</p>"},{"location":"user-guide/decompiler/decompiler-manual/config.html#ho_display_casts","title":"HO_DISPLAY_CASTS","text":"<p>If enabled, the decompiler will display cast operators in the output listing.\\ Default: enabled</p>"},{"location":"user-guide/decompiler/decompiler-manual/config.html#ho_hide_unordered","title":"HO_HIDE_UNORDERED","text":"<p>If enabled, the decompiler will hide unordered floating point comparisons. If this option is turned off, unordered comparisons will be displayed as calls to a helper function: __UNORDERED__(a, b)\\ Default: enabled</p>"},{"location":"user-guide/decompiler/decompiler-manual/config.html#ho_sse_intrinsics","title":"HO_SSE_INTRINSICS","text":"<p>If enabled, the decompiler will generate intrinsic functions for SSE instructions that use XMM/MMX registers. If this option is turned off, these instructions will be displayed using inline assembly.\\ Default: enabled</p>"},{"location":"user-guide/decompiler/decompiler-manual/config.html#ho_ignore_overlaps","title":"HO_IGNORE_OVERLAPS","text":"<p>If enabled, the decompiler will produce output even if the local variable allocation has failed. In this case the output may be wrong and will contain some overlapped variables.\\ Default: enabled</p>"},{"location":"user-guide/decompiler/decompiler-manual/config.html#ho_fast_structural","title":"HO_FAST_STRUCTURAL","text":"<p>If enabled, fast structural analysis will be used. It generates less number of nested if-statements but may occasionally produce some unnecessary gotos. It is much faster on huge functions.</p>"},{"location":"user-guide/decompiler/decompiler-manual/config.html#ho_const_strings","title":"HO_CONST_STRINGS","text":"<p>Only print string literals if they reside in read-only memory (e.g. .rodata segment). When off, all strings are printed as literals. You can override decompiler's decision by adding 'const' or 'volatile' to the string variable's type declaration.</p>"},{"location":"user-guide/decompiler/decompiler-manual/config.html#ho_signbit_checks","title":"HO_SIGNBIT_CHECKS","text":"<p>Convert signed comparisons of unsigned variables with zero into bit checks.\\ Before:</p> <pre><code>   (signed int)x &lt; 0\n</code></pre> <p>After:</p> <pre><code>   (x &amp; 0x80000000) != 0\n</code></pre> <p>For signed variables, perform the opposite conversion.</p>"},{"location":"user-guide/decompiler/decompiler-manual/config.html#ho_unmerge_tails","title":"HO_UNMERGE_TAILS","text":"<p>Reverse effects of branch tail optimizations: reduce number of gotos by duplicating code</p>"},{"location":"user-guide/decompiler/decompiler-manual/config.html#ho_keep_curlies","title":"HO_KEEP_CURLIES","text":"<p>Keep curly braces for single-statement blocks</p>"},{"location":"user-guide/decompiler/decompiler-manual/config.html#ho_del_addr_cmps","title":"HO_DEL_ADDR_CMPS","text":"<p>Optimize away address comparisons.\\ Example:</p> <pre><code>   &amp;a &lt; &amp;b\n\n</code></pre> <p>will be replaced by 0 or 1.\\ This optimization works only for non-relocatable files.</p>"},{"location":"user-guide/decompiler/decompiler-manual/config.html#ho_show_cstr_casts","title":"HO_SHOW_CSTR_CASTS","text":"<p>Print casts from string literals to pointers to char/uchar. For example:</p> <pre><code>   (unsigned __int8 *)\"Hello\"\n\n</code></pre>"},{"location":"user-guide/decompiler/decompiler-manual/config.html#ho_esc_closes_view","title":"HO_ESC_CLOSES_VIEW","text":"<p>Pressing Esc closes the pseudocode view</p>"},{"location":"user-guide/decompiler/decompiler-manual/config.html#ho_spoil_flagregs","title":"HO_SPOIL_FLAGREGS","text":"<p>Assume all functions spoil flag registers ZF,CF,SF,OF,PF (including functions with explicitly specified spoiled lists)</p>"},{"location":"user-guide/decompiler/decompiler-manual/config.html#ho_keep_indirect_reads","title":"HO_KEEP_INDIRECT_READS**","text":"<p>Keep all indirect memory reads (even with unused results) so as not to lose possible invalid address access</p>"},{"location":"user-guide/decompiler/decompiler-manual/config.html#ho_keep_eh_code","title":"HO_KEEP_EH_CODE","text":"<p>Keep exception related code (e.g. calls to _Unwind_SjLj_Register)</p>"},{"location":"user-guide/decompiler/decompiler-manual/config.html#ho_show_pac_insns","title":"HO_SHOW_PAC_INSNS","text":"<p>Translate ARMv8.3 Pointer Authentication instructions into intrinsic function calls (otherwise ignore all PAC instructions)</p>"},{"location":"user-guide/decompiler/decompiler-manual/config.html#ho_keep_potential_div0","title":"HO_KEEP_POTENTIAL_DIV0","text":"<p>Preserve potential divisions by zero (if not set, all unused divisions will be deleted)</p>"},{"location":"user-guide/decompiler/decompiler-manual/config.html#ho_mips_addsub_trap","title":"HO_MIPS_ADDSUB_TRAP","text":"<p>Generate the integer overflow trap call for 'add', 'sub', 'neg' insns</p>"},{"location":"user-guide/decompiler/decompiler-manual/config.html#ho_mips_ign_div0_trap","title":"HO_MIPS_IGN_DIV0_TRAP","text":"<p>Ignore the division by zero trap generated by the compiler (only for MIPS)</p>"},{"location":"user-guide/decompiler/decompiler-manual/config.html#ho_honest_readflags","title":"HO_HONEST_READFLAGS","text":"<p>Consider __readflags as depending on cpu flags default: off, because the result is correct but awfully unreadable</p>"},{"location":"user-guide/decompiler/decompiler-manual/config.html#ho_non_fatal_interr","title":"HO_NON_FATAL_INTERR","text":"<p>Permit decompilation after an internal error (normally the decompiler does not permit new decompilations after an internal error in the current session)</p>"},{"location":"user-guide/decompiler/decompiler-manual/config.html#ho_single_line_proto","title":"HO_SINGLE_LINE_PROTO","text":"<p>Never use multiline function declarations, even for functions with a long argument list</p>"},{"location":"user-guide/decompiler/decompiler-manual/config.html#ho_decompile_libfuncs","title":"HO_DECOMPILE_LIBFUNCS","text":"<p>Decompile library functions too (in batch mode)</p>"},{"location":"user-guide/decompiler/decompiler-manual/config.html#ho_prop_volatile_ldx","title":"HO_PROP_VOLATILE_LDX","text":"<p>Propagate ldx instructions without checking for volatile memory access</p>"},{"location":"user-guide/decompiler/decompiler-manual/config.html#warnings","title":"WARNINGS","text":"<p>Specifies the warning messages that should be displayed after decompilation. Please refer to hexrays.cfg file for the details.\\ Default: all warnings are on</p>"},{"location":"user-guide/decompiler/decompiler-manual/config.html#cmpfuncs","title":"CMPFUNCS","text":"<p>Specified list of function names that are considered \"strcmp-like\". For them the decompiler will prefer to use comparison against zero like</p> <pre><code>    strcmp(a, b) == 0\n\n</code></pre> <p>as a condition. Underscores, j_ prefixes and _NN suffixes will be ignored when comparing function names</p>"},{"location":"user-guide/decompiler/decompiler-manual/config.html#msvc-control-flow-guard-names","title":"MSVC Control Flow Guard names","text":""},{"location":"user-guide/decompiler/decompiler-manual/config.html#cfguard_check","title":"CFGUARD_CHECK","text":"<p>Name of Control Flow Guard check function. Calls of this function will not be included into the pseudocode.\\ Default: \"guard_check_icall_fptr\"</p>"},{"location":"user-guide/decompiler/decompiler-manual/config.html#cfguard_dispatch","title":"CFGUARD_DISPATCH","text":"<p>Name of Control Flow Guard dispatch function. Each call of this function will be replaced by 'call rax' instruction when generating pseudocode.\\ Default: \"guard_dispatch_icall_fptr\"</p>"},{"location":"user-guide/decompiler/decompiler-manual/failures.html","title":"Failures and troubleshooting","text":"<p>The following failure categories exist:</p> <ol> <li>a crash or access violation</li> <li>internal consistency check failure (interr)</li> <li>graceful failure to decompile a function</li> <li>incorrect output text</li> <li>inefficient/unclear/suboptimal output text</li> </ol> <p>The current focus is on producing a correct output for any correct function. The decompiler should not crash, fail, or produce incorrect output for a valid input. Please file a bugreport if this happens.</p> <p>The decompiler has an extensive set of internal checks and assertions. For example, it does not produce code which dereferences a \"void*\" pointer. On the other hand, the produced code is not supposed to be compilable and many compilers will complain about it. This is a deliberate choice of not making the output 100% compilable because the goal is not to recompile the code but to let humans analyze it faster.</p> <p>The decompiler uses some C++ constructs in the output text. Their use is restricted to constructs which cannot be represented in C (the most notable example is passing structures to functions by value).</p>"},{"location":"user-guide/decompiler/decompiler-manual/failures.html#internal-errors","title":"Internal errors","text":"<p>When the decompiler detects an internal inconsistency, it displays a message box with the error code. It also proposes you to send the database to the hex-rays.com server:</p> <p></p> <p>It is really difficult (almost impossible) to reproduce bugs without a sample database, so please send it to the server. To facilitate things, the decompiler saves its internal state to the database, which is really handy if the error occurs after hours and hours of decompilation.</p> <p>It is impossible to decompile anything after an internal error. Please reload the database, or better, restart IDA.</p>"},{"location":"user-guide/decompiler/decompiler-manual/failures.html#graceful-failures","title":"Graceful failures","text":"<p>When the decompiler gracefully fails on a function, it will display one of the following messages. In general, there is no need to file a bugreport about a failure except if you see that the error message should not be displayed.</p> <ul> <li>cannot convert to microcode</li> <li>not enough memory</li> <li>invalid basic block</li> <li>positive sp value has been found</li> <li>prolog analysis failed</li> <li>switch analysis failed</li> <li>exception analysis failed</li> <li>stack frame is too big</li> <li>local variable allocation failed</li> <li>16-bit functions are not supported</li> <li>call analysis failed</li> <li>function frame is wrong</li> <li>undefined or illegal type</li> <li>inconsistent database information</li> <li>wrong basic type sizes in compiler settings</li> <li>redecompilation has been required</li> <li>could not compute fpu stack states</li> <li>max recursion depth reached during lvar allocation</li> <li>variables would overlap</li> <li>partially initialized variable</li> <li>too complex function</li> <li>no license available</li> <li>only 32-bit functions can be decompiled for the current database</li> <li>only 64-bit functions can be decompiled for the current database</li> <li>already decompiling a function</li> <li>far memory model is supported only for pc</li> <li>special segments cannot be decompiled</li> <li>too big function</li> <li>bad input ranges</li> <li>current architecture is not supported</li> <li>bad instruction in the delay slot</li> </ul> <p>Please read the Troubleshooting section about the possible actions.</p>"},{"location":"user-guide/decompiler/decompiler-manual/failures.html#cannot-convert-to-microcode","title":"cannot convert to microcode","text":"<p>This error means that the decompiler could not translate an instruction at the specified address into microcode. Please check the instruction and its length. If it looks like a regular instruction used in the compiler generated code and its length is correct, file a bugreport.</p>"},{"location":"user-guide/decompiler/decompiler-manual/failures.html#not-enough-memory","title":"not enough memory","text":"<p>The error message is self-explanatory. While it should not happen very often, it still can be seen on functions with huge stacks. No need to report this bug. Hopefully the next version will handle functions with huge stack more efficiently.</p> <p>Please restart IDA after this error message.</p>"},{"location":"user-guide/decompiler/decompiler-manual/failures.html#invalid-basic-block","title":"invalid basic block","text":"<p>This error means that at the specified address there is a basic block, which does not end properly. For example, it jumps out of the function, ends with a non-instruction, or simply contains garbage. If you can, try to correct the situation by modifying the function boundaries, creating instructions, or playing with function tails. Usually this error happens with malformed functions.</p> <p>If the error happens because of a call, which does not return, marking the called function as \"noret\" will help. If the call is indirect, adding a cross reference to a \"noret\" function will help too.</p> <p>If this error occurs on a database created by an old version of IDA, try to reanalyze the program before decompiling it. In general, it is better to use the latest version of IDA to create the databases for decompilation.</p> <p>Unrecognized table jumps may lead to this failure too.</p>"},{"location":"user-guide/decompiler/decompiler-manual/failures.html#positive-sp-value-has-been-found","title":"positive sp value has been found","text":"<p>The stack pointer at the specified address is higher than the initial stack pointer. Functions behaving so strangely cannot be decompiled. If you see that the stack pointer values are incorrect, modify them with the Alt-K (Edit, Functions, Change stack pointer) command in IDA.</p>"},{"location":"user-guide/decompiler/decompiler-manual/failures.html#prolog-analysis-failed","title":"prolog analysis failed","text":"<p>Analysis of the function prolog has failed. Currently there is not much you can do but you will not see this error very often. The decompiler will try to produce code with prolog instructions rather than stopping because of this failure.</p>"},{"location":"user-guide/decompiler/decompiler-manual/failures.html#switch-analysis-failed","title":"switch analysis failed","text":"<p>The switch idiom (an indirect jump) at the specified address could not be analyzed. You may specify the switch idiom manually using Edit, Other, Specify switch idiom.</p> <p>If this error occurs on a database created by an old version of IDA, try to delete the offending instruction and recreate it. Doing so will reanalyze it and might fix the error because newer versions of IDA handle switches much better than older versions.</p>"},{"location":"user-guide/decompiler/decompiler-manual/failures.html#exception-analysis-failed","title":"exception analysis failed","text":"<p>This error message should not occur because the current version will happily decompile any function and just ignore any exception handlers and related code.</p>"},{"location":"user-guide/decompiler/decompiler-manual/failures.html#stack-frame-is-too-big","title":"stack frame is too big","text":"<p>Since the stack analysis requires lots of memory, the decompiler will refuse to handle any function with the unaliased stack bigger than 1 MB.</p>"},{"location":"user-guide/decompiler/decompiler-manual/failures.html#local-variable-allocation-failed","title":"local variable allocation failed","text":"<p>This error message means that the decompiler could not allocate local variables with the registers and stack locations. You will see this error message only if you have enabled HO_IGNORE_OVERLAPS in the configuration file. If overlapped variables are allowed in the output, they are displayed in red.</p> <p>Please check the prototypes of all involved functions, including the current one. Variables types and definitions may cause this error too.</p> <p>Updating the function stack frame and creating correct stack variables too may help solve the problem.</p> <p>If you got this error after some manipulations with the function type or variable types, you may reset the information about the current function (Edit, Other, Reset decompiler information) and start afresh.</p>"},{"location":"user-guide/decompiler/decompiler-manual/failures.html#16-bit-functions-are-not-supported","title":"16-bit functions are not supported","text":"<p>The message text says it all. While the decompiler itself can be fine tuned to decompile 16-bit code, this is not a priority.</p>"},{"location":"user-guide/decompiler/decompiler-manual/failures.html#call-analysis-failed","title":"call analysis failed","text":"<p>This is the most painful error message but it is also something you can do something about. In short, this message means that the decompiler could not determine the calling convention and the call parameters. If this is a direct non-variadic call, you can fix it by specifying the callee type: just jump to the callee and hit Y to specify the type. For variadic functions too it is a good idea to specify the type, but the call analysis could still fail because the decompiler has to find out the actual number of arguments in the call. We would recommend to start by checking the stack pointer in the whole function. Get rid of any incorrect stack pointer values. Second, check the types of all called functions. If the type of a called function is wrong, it can interfere with other calls and lead to a failure. Here is a small example:</p> <pre><code>          push eax\n          push edx\n          push eax\n          call  f1\n          call  f2\n</code></pre> <p>If f1 is defined as a __stdcall function of 3 arguments, and f2 is a function of 1 argument, the call analysis will fail because we need in total 4 arguments and only 3 arguments are pushed onto the stack.</p> <p>If the error occurs on an indirect call, please specify the operand type of the call instruction. Also, adding an xref to a function of the desired type from the call instruction will work. The decompiler will use the type of the referenced function.</p> <p>If all input types are correct and the stack pointer values are correct but the decompiler still fails, please file a bugreport.</p>"},{"location":"user-guide/decompiler/decompiler-manual/failures.html#function-frame-is-wrong","title":"function frame is wrong","text":"<p>This is a rare error message. It means that something is wrong with the function stack frame. The most probable cause is that the return address area is missing in the frame or the function farness (far/near) does not match it.</p>"},{"location":"user-guide/decompiler/decompiler-manual/failures.html#undefined-or-illegal-type","title":"undefined or illegal type","text":"<p>This error can occur if a reference to a named type (a typedef) is made but the type is undefined. The most common case is when a type library (like vc6win.til) is unloaded. This may invalidate all references to all types defined in it.</p> <p>This error also occurs when a type definition is illegal or incorrect. To fix an undefined ordinal type, open the local types windows (Shift-F1) and redefine the missing type.</p>"},{"location":"user-guide/decompiler/decompiler-manual/failures.html#inconsistent-database-information","title":"inconsistent database information","text":"<p>Currently this error means that the function chunk information is incorrect. Try to redefine (delete and recreate) the function.</p>"},{"location":"user-guide/decompiler/decompiler-manual/failures.html#wrong-basic-type-sizes-in-compiler-settings","title":"wrong basic type sizes in compiler settings","text":"<p>Some basic type sizes are incorrect. The decompiler requires that</p> <ul> <li>sizeof(int) == 4</li> <li>sizeof(enum) == 4</li> </ul> <p>Please check the type sizes in the Options, Compiler dialog box and modify them if they are incorrect.</p> <p>Also ensure that the correct memory model is selected: \"near data, near code\".</p> <p>Finally, the pointer size must be:</p> <p>for 32-bit applications use \"near 32bit, far 48bit\"</p> <p>for 64-bit applications use \"64bit\".</p>"},{"location":"user-guide/decompiler/decompiler-manual/failures.html#redecompilation-has-been-required","title":"redecompilation has been required","text":"<p>This is an internal error code and should not be visible to the end user. If it still gets displayed, please file a bugreport.</p>"},{"location":"user-guide/decompiler/decompiler-manual/failures.html#could-not-compute-fpu-stack-states","title":"could not compute fpu stack states","text":"<p>The decompiler failed to trace the FPU stack pointer. Please check the called function types, this is the only thing available for the moment. We will introduce workarounds and corrective commands in the future. For more information about floating point support, please follow this link.</p>"},{"location":"user-guide/decompiler/decompiler-manual/failures.html#max-recursion-depth-reached-during-lvar-allocation","title":"max recursion depth reached during lvar allocation","text":"<p>Please file a bugreport, normally this error message should not be displayed.</p>"},{"location":"user-guide/decompiler/decompiler-manual/failures.html#variables-would-overlap","title":"variables would overlap","text":"<p>This is a variant of the variable allocation failure error. You will see this error message only if you have enabled HO_IGNORE_OVERLAPS in the configuration file. If overlapped variables are allowed in the output, they are displayed in red.</p>"},{"location":"user-guide/decompiler/decompiler-manual/failures.html#partially-initialized-variable","title":"partially initialized variable","text":"<p>A partially initialized variable has been detected. Wrong stack trace can induce this error, please check the stack pointer.</p>"},{"location":"user-guide/decompiler/decompiler-manual/failures.html#too-complex-function","title":"too complex function","text":"<p>The function is too big or too complex. Unfortunately there is nothing the user can do to avoid this error.</p>"},{"location":"user-guide/decompiler/decompiler-manual/failures.html#no-license-available","title":"no license available","text":"<p>IDA could not locate your decompiler license.</p>"},{"location":"user-guide/decompiler/decompiler-manual/failures.html#only-32-bit-functions-can-be-decompiled-for-the-current-database","title":"only 32-bit functions can be decompiled for the current database","text":"<p>This error message will not currently be displayed.</p>"},{"location":"user-guide/decompiler/decompiler-manual/failures.html#only-64-bit-functions-can-be-decompiled-for-the-current-database","title":"only 64-bit functions can be decompiled for the current database","text":"<p>IDA64 can currently decompile only 64-bit functions. To decompile 32-bit functions please use IDA32.</p>"},{"location":"user-guide/decompiler/decompiler-manual/failures.html#already-decompiling-a-function","title":"already decompiling a function","text":"<p>An attempt to decompile a function while decompiling another function has been detected. Currently only one function can be decompiled at once.</p>"},{"location":"user-guide/decompiler/decompiler-manual/failures.html#far-memory-model-is-supported-only-for-pc","title":"far memory model is supported only for pc","text":"<p>Please check the data and code memory models in the Options, Compiler dialog. If necessary, reset them to 'near' models.</p>"},{"location":"user-guide/decompiler/decompiler-manual/failures.html#special-segments-cannot-be-decompiled","title":"special segments cannot be decompiled","text":"<p>The current function belongs to a special segment (e.g. \"extern\" segment). Such segments do not contain any real code, they contain just pointers to imported functions. The function body is located in some other dynamic library. Therefore, there is nothing that we could decompile.</p>"},{"location":"user-guide/decompiler/decompiler-manual/failures.html#too-big-function","title":"too big function","text":"<p>The current function is bigger than the maximal permitted size. The maximal permitted size is specified by the MAX_FUNCSIZE configuration parameter.</p>"},{"location":"user-guide/decompiler/decompiler-manual/failures.html#bad-input-ranges","title":"bad input ranges","text":"<p>The specified input ranges are wrong. The range vector cannot be empty. The first entry must point to an instruction. Ranges may not overlap. Ranges may not start or end in the middle of an item.</p>"},{"location":"user-guide/decompiler/decompiler-manual/failures.html#current-architecture-is-not-supported","title":"current architecture is not supported","text":"<p>The current processor bitness, endianness, or ABI settings in the compiler options are not acceptable. See the current ABI limitations here.</p>"},{"location":"user-guide/decompiler/decompiler-manual/failures.html#bad-instruction-in-the-delay-slot","title":"bad instruction in the delay slot","text":"<p>Branches and jumps are not allowed in a delay slot. Such instructions signal an exception and cannot be decompiled.</p>"},{"location":"user-guide/decompiler/decompiler-manual/failures.html#troubleshooting","title":"Troubleshooting","text":"<p>When the decompiler fails, please check the following things:</p> <ul> <li>the function boundaries. There should not be any wild branches jumping out of function to nowhere. The function should end properly, with a return instruction or a jump to the beginning of another function. If it ends after a call to a non-returning function, the callee must be marked as a non-returning function.</li> <li>the stack pointer values. Use the Options, General, Stack pointer command to display them in a column just after the addresses in the disassembly view. If the stack pointer value is incorrect at any location of the function, the decompilation may fail. To correct the stack pointer values, use the Edit, Functions, Change stack pointer command.</li> <li>the stack variables. Open the stack frame window with the Edit, Functions, Stack variables... command and verify that the definitions make sense. In some cases creating a big array or a structure variable may help.</li> <li>the function type. The calling convention, the numbers and the types of the arguments must be correct. If the function type is not specified, the decompiler will try to deduce it. In some rare cases, it will fail. If the function expects its input in non-standard registers or returns the result in a non-standard register, you will have to inform the decompiler about it. Currently it makes a good guess about the non-standard input locations but cannot handle non-standard return locations.</li> <li>the types of the called functions and referenced data items. A wrong type can wreak havoc very easily. Use the F hotkey to display the type of the current item in the message window. For functions, position the cursor on the beginning and hit F. If the type is incorrect, modify it with Edit, Functions, Set function type (the hotkey is Y). This command works not only for functions but also for data and structure members.</li> <li>If a type refers to an undefined type, the decompilation might fail.</li> <li>use a database created by the latest version of IDA.</li> </ul> <p>In some cases the output may contain variables in red. It means that local variable allocation has failed. Please read the page about overlapped variables for the possible corrective methods.</p> <p>The future versions will have more corrective commands but we have to understand what commands we need.</p>"},{"location":"user-guide/decompiler/decompiler-manual/failures.html#bugreports","title":"Bugreports","text":"<p>To be useful, the bugreport must contain enough information to reproduce the bug. The send database command is the preferred way of sending bugreports because it saves all relevant information to the database. Some bugs are impossible to reproduce without this command.</p> <p>The database is sent in the compressed form to save the bandwidth. An SSL connection is used for the transfer.</p> <p>If your database/input file is confidential and you cannot send it, try to find a similar file to illustrate the problem. Thank you.</p> <p>We handle your databases confidentially (as always in the past).</p>"},{"location":"user-guide/decompiler/decompiler-manual/faq.html","title":"FAQ","text":"<p>Currently the list is very short but it will grow with time.</p> <ul> <li>The output is excessively short for the input function...</li> <li>The following code &lt;...\\ does not look correct. Can this be fixed?</li> <li>I loaded an old database and the decompiler failed on every single function!</li> <li>The decompiler failed on a function. Should I file a bugreport?</li> <li>The decompiler output is not optimal. Can it be improved?</li> <li>Floating point instructions are displayed as assembly statements. Why?</li> <li>SSE instructions are displayed as assembly statements. Why?</li> </ul>"},{"location":"user-guide/decompiler/decompiler-manual/faq.html#the-output-is-excessively-short-for-the-input-function","title":"The output is excessively short for the input function...","text":"<p>The output is excessively short for the input function. Some code which was present in the assembly form is not visible in the output.</p> <p>This can happen if the decompiler decided that the result of these computations is not used (so-called dead code). The dead code is not included in the output.</p> <p>One very common case of this is a function that returns the result in an unusual register, e.g. ECX. Please explicitly specify the function type and tell IDA the exact location of the return value. For example:</p> <pre><code>int __usercall myfunc&lt;ecx&gt;(void);\n</code></pre> <p>Read IDA help about the user defined calling conventions for more info.</p> <p>Another quite common case is a function whose type has been guessed incorrectly by IDA or the decompiler. For example, if the guessed type is</p> <pre><code>int func(void);\n</code></pre> <p>but the correct function type is</p> <pre><code>int func(int x, int y, int z);\n</code></pre> <p>then all computations of the function arguments will be removed from the output. The remedy is very simple: tell IDA the correct function type and the argument computations will appear in the output.</p> <p>In general, if the input information (function types) is incorrect, the output will be incorrect too. So please check them!</p>"},{"location":"user-guide/decompiler/decompiler-manual/faq.html#the-following-code-does-not-look-correct-can-this-be-fixed","title":"The following code [...] does not look correct. Can this be fixed?","text":"<p>The following code</p> <pre><code>DllUnregisterServer proc near\n\n   CommandLine     = byte ptr -274h\n   hObject         = _PROCESS_INFORMATION ptr -6Ch\n\n                   xor     ebx, ebx\n                   mov     [ebp+CommandLine], bl\n</code></pre> <p>is being translated into:</p> <pre><code>   char CommandLine; // [sp+0h] [bp-274h]@1\n\n   CommandLine = 0;\n</code></pre> <p>This does not look correct. Can this be fixed?</p> <p>This happens because the decompiler does not perform the type recovery. To correct the output, modify the definition of CommandLine in IDA. For that, open the stack frame (Edit, Functions, Open stack frame), locate CommandLine and set its type to be an array (Edit, Functions, Set function type). The end result will be:</p> <pre><code>CommandLine[0] = 0;\n</code></pre>"},{"location":"user-guide/decompiler/decompiler-manual/faq.html#i-loaded-an-old-database-and-the-decompiler-failed-on-every-single-function","title":"I loaded an old database and the decompiler failed on every single function!**","text":"<p>Old databases do not contain some essential information. If you want to decompile them, first let IDA reanalyze the database (right click on the lower left corner of the main window and select Reanalyze). You will also need to recreate indirect (table) jump instructions, otherwise the switch idioms will not be recognized and decompilation of the functions containing them will fail.</p>"},{"location":"user-guide/decompiler/decompiler-manual/faq.html#the-decompiler-failed-on-a-function-should-i-file-a-bugreport","title":"The decompiler failed on a function. Should I file a bugreport?","text":"<p>In general, there is no need to file a bugreport if the decompiler gracefully fails. A failure is not necessarily a bug. Please read the graceful failures section to learn how to proceed.</p>"},{"location":"user-guide/decompiler/decompiler-manual/faq.html#the-decompiler-output-is-not-optimal-can-it-be-improved","title":"The decompiler output is not optimal. Can it be improved?","text":"<p>Sure, it can be improved. However, given that many decompilation subproblems are still open, even simple things can take enormous time. Meanwhile we recommend you to use a text editor to modify the pseudocode.</p>"},{"location":"user-guide/decompiler/decompiler-manual/faq.html#floating-point-instructions-are-displayed-as-assembly-statements-why","title":"Floating point instructions are displayed as assembly statements. Why?","text":"<p>Please read this page.</p>"},{"location":"user-guide/decompiler/decompiler-manual/faq.html#sse-instructions-are-displayed-as-assembly-statements-why","title":"SSE instructions are displayed as assembly statements. Why?","text":"<p>Please read this page.</p>"},{"location":"user-guide/decompiler/decompiler-manual/fpu.html","title":"Floating point support","text":"<p>The current release of the x86 decompiler supports floating point instructions. While everything works automatically, the following points are worth noting:</p> <ul> <li>IDA v5.5 or higher is required for floating point support. Earlier versions do not have the required functionality and the decompiler represents fpu instructions using inline assembler statements.</li> <li>The decompiler knows about all floating point types, including: float, double, long double, and _TBYTE. We introduced _TBYTE because sizeof(long double) is often different from sizeof(tbyte). While the size of long double can be configured (it is implicitly set to a reasonable value when the compiler is set), the size of tbyte is always equal to 10 bytes.</li> <li>Casts from integers types to floating point types and vice versa are always displayed in the listing, even if the output has the same meaning without them.</li> <li>The decompiler performs fpu stack analysis, which is similar to the simplex method performed by IDA. If it fails, the decompiler represents fpu instructions using inline assembler statements. In this case the decompiler adds one more prefix column to the disassembly listing, next to the stack pointer values. This column shows the calculated state of the fpu stack and may help to determine where exactly the fpu stack tracing went wrong.</li> <li>The decompiler ignores all manipulations with the floating point control word. In practice this means that it may miss an unusual rounding mode. We will address this issue in the future, as soon as we find a robust method to handle it.</li> <li>SSE floating point instructions are represented by intrinsic functions. Scalar SSE instructions are however directly mapped to floating point operations in pseudocode.</li> <li>Feel free to report all anomalies and problems with floating point support using the Send database command. This will help us to improve the decompiler and make it more robust. Thank you!</li> </ul> <p>See also: Failures and troubleshooting</p>"},{"location":"user-guide/decompiler/decompiler-manual/interactive.html","title":"Interactive operation","text":"<p>The decompiler adds the following commands to the menus:</p> <ul> <li>View, Open subviews, Pseudocode</li> <li>Jump, Jump to pseudocode</li> <li>File, Produce file, Create C file</li> <li>Edit, Comment, Add pseudocode comments</li> <li>Edit, Comment, Delete pseudocode comments</li> <li>Edit, Other, Toggle skippable instructions</li> <li>Edit, Other, Reset decompiler information</li> <li>Edit, Other, Decompile as call</li> <li>Help, Send database</li> <li>Help, Extract function</li> </ul>"},{"location":"user-guide/decompiler/decompiler-manual/interactive.html#view-open-subviews-pseudocode-hotkey-f5","title":"View, Open subviews, Pseudocode (hotkey F5)","text":"<p>This command decompiles the current function. If the decompilation is successful, it opens a new window titled \"Pseudocode\" and places the generated C text in this window.</p> <p>The following commands can be used in the pseudocode window:</p> <ul> <li>Rename</li> <li>Set type</li> <li>Set number representation</li> <li>Edit indented comment</li> <li>Edit block comment</li> <li>Hide/unhide statements</li> <li>Split/unsplit expression</li> <li>Force call type</li> <li>Set call type</li> <li>Add/del variadic arguments</li> <li>Del function argument</li> <li>Add/delete function return type</li> <li>Jump to cross reference</li> <li>Jump to cross reference globally</li> <li>Generate HTML file</li> <li>Mark/unmark as decompiled</li> <li>Copy to assembly</li> <li>Show/hide casts</li> </ul> <p>If the current item is a local variable, additional items may appear in the context menu:</p> <ul> <li>Reset pointer type</li> <li>Convert to struct *</li> <li>Create new struct type</li> <li>Map to another variable</li> <li>Unmap variable(s)</li> <li>Split variable</li> <li>Unsplit variable</li> </ul> <p>If the current item is a union field, an additional item may appear in the context menu:</p> <ul> <li>Select union field</li> </ul> <p>If the current item is a parenthesis, bracket, or a curly brace, the following hotkey is available:</p> <ul> <li>Jump to paired paren</li> </ul> <p>The user can also select text and copy it to the clipboard with the Ctrl-C combination.</p> <p>If the current item is C statement keyword, an additional item may appear in the context menu:</p> <ul> <li>Collapse/uncollapse item</li> </ul> <p>The user can also select text and copy it to the clipboard with the Ctrl-C combination.</p> <p>Pressing Enter on a function name will decompile it. Pressing Esc will return to the previously decompiled function. If there is no previously decompiled function, the pseudocode window will be closed.</p> <p>Ctrl-Enter or Ctrl-double click on a function name will open a new pseudocode window for it.</p> <p>Pressing F5 while staying in a pseudocode window will refresh its contents. Please note that the decompiler never refreshes pseudocode by itself because it can take really long.</p> <p>The user can use the mouse right click or keyboard hotkeys to access the commands. Please check the command descriptions for the details.</p>"},{"location":"user-guide/decompiler/decompiler-manual/interactive.html#jump-jump-to-pseudocode-hotkey-tab","title":"Jump, Jump to pseudocode (hotkey Tab)","text":"<p>This command toggles between the disassembly view and pseudocode view. If there is no pseudocode window, a new window will be created.</p> <p>Pressing Tab while staying in the pseudocode window will switch to the disassembly window. The Tab key can be used to toggle pseudocode and disassembly views.</p> <p>See above the Open pseudocode command for more details.</p>"},{"location":"user-guide/decompiler/decompiler-manual/interactive.html#file-produce-file-create-c-file-hotkey-ctrl-f5","title":"File, Produce file, Create C file (hotkey Ctrl-F5)","text":"<p>This command decompiles the selected functions or the whole application. It will ask for the name of the output .c file.</p> <p>If there is a selected area in the disassembly view, only the selected functions will be decompiled. Otherwise, the whole application will be decompiled.</p> <p>When the whole application is decompiled, the following rules apply:</p> <ul> <li>the order of decompilation is determined by the decompiler. It will start with the leaf functions and will proceed in the postnumbering order in the call graph. This order makes sure that when we decompile a function, we will have all information about the called functions. Obviously, for recursive functions some information will be still missing.</li> <li>the library (light blue) functions will not be decompiled. By the way, this is a handy feature to exclude functions from the output.</li> <li>A decompilation failure will not stop the analysis but the internal errors will. The decompiler generates #error directives for failed functions.</li> </ul>"},{"location":"user-guide/decompiler/decompiler-manual/interactive.html#edit-comments-add-pseudocode-comments","title":"Edit, Comments, Add pseudocode comments","text":"<p>This command decompiles the current function and copies the pseudocode to the disassembly listing in the form of anterior comments. If the current function already has a pseudocode window, its contents are used instead of decompiling the function anew.</p> <p>This menu item performs exactly the same actions as the Copy to assembly command.</p>"},{"location":"user-guide/decompiler/decompiler-manual/interactive.html#edit-comments-delete-pseudocode-comments","title":"Edit, Comments, Delete pseudocode comments","text":"<p>This command deletes all anterior comments created by the previous command. Its name is a slight misnomer because it does not verify the comment origin. In fact, all anterior comments within the current function are deleted.</p>"},{"location":"user-guide/decompiler/decompiler-manual/interactive.html#edit-other-toggle-skippable-instructions","title":"Edit, Other, Toggle skippable instructions","text":"<p>This command marks/unmarks instructions to be skipped by the decompiler. It is useful if some prolog/epilog instructions were missed by IDA. If such instructions were not detected and marked, the decompilation may fail (most frequently the call analysis will fail).</p> <p>The decompiler skips the prolog, epilog, and switch instructions. It relies on IDA to mark these instructions. Sometimes IDA fails to mark them, and this command can be used to correct the situation.</p> <p>If the command is applied to marked instructions, it will unmark them.</p> <p>By default, the skipped instructions are not visualized. To make them visible, edit the IDA.CFG file and uncomment the following lines:</p> <pre><code> PROLOG_COLOR = 0xE0E0E0            // grey\n EPILOG_COLOR = 0xE0FFE0            // light green\n SWITCH_COLOR = 0xE0E0FF            // pink\n</code></pre>"},{"location":"user-guide/decompiler/decompiler-manual/interactive.html#edit-other-reset-decompiler-information","title":"Edit, Other, Reset decompiler information","text":"<p>This command deletes decompiler information.</p> <p>It can delete information about global objects (functions, static data, structure/enum types) and/or information local to the current function.</p> <p>Use this command if you inadvertently made some change that made decompilation impossible.</p> <p>It can also be used to reset other information types used by the decompiler. For example, the forced variadic arguments or split expression can be reset.</p>"},{"location":"user-guide/decompiler/decompiler-manual/interactive.html#edit-other-decompile-as-call","title":"Edit, Other, Decompile as call","text":"<p>This commands configures a function call the current instruction should be replaced by in the pseudocode output.</p> <p>Special names can be used to access operands of the current instructions: __OP1, __OP2, ... for first, second, etc. operands. Each function argument having a name like that will be replaced in the call by the value of the corresponding operand of the instruction. Also if the function name has this format, a call to the location pointed by the corresponding operand will be generated. Other arguments and the return value will be placed into locations derived from the function prototype according to the current compiler, calling convention, argument and return types. You can use IDA-specific __usercall calling convention to specify arbitrary locations independently of platform and argument/return types (read IDA help pages about the user defined calling conventions for more info).</p> <p>Examples</p> <ul> <li>We could ask to replace the following instruction:\\   <code>out 2b, ax</code>\\   by specifying the following prototype:\\   <code>void OUT(unsigned int8 __OP1, int16 __OP2)</code>\\   which would lead to the following decompiler output:\\   <code>OUT(0x2b, v1);</code>\\   where v1 is mapped to ax.</li> <li>The following prototype: <code>int __usercall syscall@&lt;R0;&gt;(int code@&lt;R12;&gt;, void *a1@&lt;R0;&gt;, void *a2@&lt;R1;&gt;)</code>\\   applied to the second instruction in the following piece of code:\\   <code>mov r12, #0x148</code>\\   <code>svc 0x801</code>\\   will generate the following pseudocode:\\   <code>v3 = syscall(328, v1, v2);</code>\\   where v1, v2, v3 are mapped to R0, R1, R2 respectively.</li> </ul>"},{"location":"user-guide/decompiler/decompiler-manual/interactive.html#help-send-database","title":"Help, Send database","text":"<p>This command packs and sends the current database to our server. The user can specify his/her email and add notes about the error. This is the preferred way of filing bugreports because it is virtually impossible to do anything without a database. The database will also contain the internal state of the decompiler, which is necessary to reproduce the bug.</p> <p>The database is sent in the compressed form to save the bandwidth. An encrypted connection (SSL) is used for the transfer.</p>"},{"location":"user-guide/decompiler/decompiler-manual/interactive.html#help-extract-function","title":"Help, Extract function","text":"<p>This command deletes all code and data from the current idb extract the current function. It can be used to reduce the database size before sending a bug report. Please note that deleting information from the database may make the bug irreproducible, so please verify it after applying this command.</p>"},{"location":"user-guide/decompiler/decompiler-manual/intrinsics.html","title":"Support for intrinsic functions","text":"<p>The current release of the decompiler supports instrinsic functions. The instructions that cannot be directly mapped to high level languages very often can be represented by special intrinsic functions. All Microsoft and Intel simple instrinsic functions up to SSE4a are supported, with some exceptions. While everything works automatically, the following points are worth noting:</p> <ul> <li>SSE intrinsic functions require IDA v5.6 or higher. Older versions of IDA do not have the necessary functionality and register definitions.</li> <li>Some intrinsic functions work with XMM constant values (16 bytes long). Modern compiler do not accept 16-byte constants yet but the decompiler may generate them when needed.</li> <li>Sometimes it is better to represent SSE code using inline assembly rather than with intrinsic functions. If the decompiler detects SSE instructions in the current function, it adds a one more item to the popup menu. This item allows the user to enable or disable SSE intrinsic functions for the whole database. This setting is remembered in the database. It can also be modified in the configuration file for new databases.</li> <li>The decompiler knows about all MMX/XMM built-in types. If the current database does not define these types, they are automatically added to the local types as soon as a SSE instruction is decompiled.</li> <li>Scalar SSE instructions are never converted to intrinsic functions. Instead, they are directly mapped to floating point operations. This usually produces much better output, especially for Mac OS X binaries.</li> <li>The scalar SSE instructions that cannot be mapped into simple floating point operations (like sqrtss) are mapped into simple functions from math.h.</li> <li>The decompiler uses intrinsic function names as defined by Microsoft and Intel.</li> <li>The decompiler does not track the state of the x87 and mmx registers. It is assumed that the compiler generated code correctly handles transitions between x87 and mmx registers.</li> <li>Some intrinsic functions are not supported because of their prototype. For example, the __cpuid(int a[4], int b) function is not handled because it requires an array of 4 integers. We assume that most cpuid instructions will be used without any arrays, so adding such an intrinsic function will obscure things rather than to make the code more readable.</li> <li>Feel free to report all anomalies and problems with intrinsic functions using the Send database command. This will help us to improve the decompiler and make it more robust. Thank you!</li> </ul> <p>See also: Failures and troubleshooting</p>"},{"location":"user-guide/decompiler/decompiler-manual/legal-info.html","title":"Legal info","text":""},{"location":"user-guide/decompiler/decompiler-manual/legal.html","title":"Legal info","text":"<p>The Hex-Rays Decompiler, hereafter described as \\\"the software\\\" are licensed, not sold, to you by Hex-Rays SA pursuant to the terms and conditions of this Agreement. Hex-Rays SA reserves any right not expressly granted to you. You own the media on which the software is delivered but Hex-Rays SA retains ownership of all copies of the software itself. The software is protected by copyright law. You may install and use a copy of the software on your computer, up to the permitted number of computers. The software may not be shared with other users or installed on third party computers. You may not install the software on the server for use by multiple users. </p>"},{"location":"user-guide/decompiler/decompiler-manual/legal.html#restrictions","title":"Restrictions","text":"<p>You may not distribute copies of the software to another party or electronically transfer the software from one computer to another if one computer belongs to another party. You may not modify, adapt, translate, rent, lease, resell, distribute, or create derivative works based upon the software or any part thereof. </p>"},{"location":"user-guide/decompiler/decompiler-manual/legal.html#limited-warranty-and-disclaimers","title":"Limited Warranty and Disclaimers","text":"<p>The software is provided \\\"as is\\\" without warranty of any kind. Hex-Rays SA expressly disclaims all implied warranties, included but not limited to the implied warranties of merchantability and fitness for a particular purpose. Hex-Rays SA does not guarantee the software or any accompanying materials in terms of their correctness, accuracy, reliability, or otherwise. The entire risk as to the results and performance of the software and written materials is assumed by you. </p>"},{"location":"user-guide/decompiler/decompiler-manual/legal.html#complete-statement-of-warranty","title":"Complete Statement of Warranty","text":"<p>The limited warranty provided in preceding paragraphs are the only warranties of any kind made by Hex-Rays SA on this product. No oral or written information or advice given by Hex-Rays SA, its dealers, distributors, agents or employees shall create a warranty or in any way increase the scope of this warranty, and you may not rely on any such information or advice. This warranty gives you specific legal rights. You may have other rights, which vary from country to country.</p>"},{"location":"user-guide/decompiler/decompiler-manual/legal.html#limitation-of-liability","title":"Limitation of Liability.","text":"<p>In no event will Hex-Rays SA or its employees be liable to you for any consequential, incidental, or indirect damages arising out of the use or the inability to use the software or accompanying written material. This includes damages for loss of business profits, business interruption and loss of business information. The liability of Hex-Rays SA for actual damages for any cause whatsoever is limited to the money paid for the software that caused the damages. </p>"},{"location":"user-guide/decompiler/decompiler-manual/legal.html#termination","title":"Termination","text":"<p>This license is effective until terminated. It will terminate immediately without notice if you fail to comply with any of its provisions. Upon termination, you must destroy the software and all copies thereof. You may terminate this license at any time by destroying the software and all copies thereof. </p>"},{"location":"user-guide/decompiler/decompiler-manual/legal.html#disputes","title":"Disputes","text":"<p>Disputes related to this agreement will be dealt with in the district court of Li\u00e8ge, Belgium.</p>"},{"location":"user-guide/decompiler/decompiler-manual/limit.html","title":"Limitations","text":"<p>The decompiler comes in 9 different flavors:</p> <ul> <li>x86 decompiler (32-bit code)</li> <li>x64 decompiler (64-bit code)</li> <li>ARM decompiler (32-bit code)</li> <li>ARM64 decompiler (64-bit code)</li> <li>PowerPC decompiler (32-bit code)</li> <li>PowerPC64 decompiler (64-bit code)</li> <li>MIPS decompiler (O32 and N32 ABI)</li> <li>MIPS64 decompiler (N64 ABI)</li> <li>ARC Decompiler (32-bit code)</li> </ul> <p>Currently the decompiler can handle compiler generated code. Manually crafted code may be decompiled too but the results are usually worse than for compiler code. Support for other processors will eventually be added (no deadlines are available, sorry).</p> <p>Below are the most important limitations of our decompilers (all processors):</p> <ul> <li>exception handling is not supported</li> <li>type recovery is not performed</li> <li>global program analysis is not performed</li> </ul> <p>Limitations specific to x86:</p> <ul> <li>only 32-bit code can be analyzed with ida32</li> </ul> <p>Limitations specific to x64:</p> <ul> <li>only 64-bit code can be analyzed with ida64</li> </ul> <p>Limitations specific to ARM32:</p> <ul> <li>only 32-bit code can be analyzed with ida32</li> <li>hard-float abi is not supported</li> </ul> <p>Limitations specific to ARM64:</p> <ul> <li>only 64-bit code can be analyzed with ida64</li> </ul> <p>Limitations specific to PPC:</p> <ul> <li>only 32-bit code can be analyzed with ida32</li> <li>Vector/DFP/VSX/SPE instructions are not supported</li> </ul> <p>Limitations specific to MIPS:</p> <ul> <li>only 32-bit code can be analyzed</li> <li>only O32 and N32 ABI are supported</li> <li>only 32-bit FPR in O32 and 64-bit FPR in N32 are supported</li> </ul> <p>Limitations specific to MIPS64:</p> <ul> <li>only 64-bit code can be analyzed</li> <li>only N64 ABI is supported</li> <li>only 64-bit FPR are supported</li> </ul> <p>Limitations specific to ARC:</p> <ul> <li>only 32-bit code can be analyzed with ida32</li> </ul>"},{"location":"user-guide/decompiler/decompiler-manual/overvars.html","title":"Overlapped variables","text":"<p>In some cases the decompiler cannot produce nice output because the variable allocation fails. It happens because the input contains overlapped variables (or the decompiler mistakenly lumps together memory reads and writes). Overlapped variables are displayed in red so they conspicuously visible. Let us consider some typical situations.</p>"},{"location":"user-guide/decompiler/decompiler-manual/overvars.html#there-are-readwrite-accesses-that-involve-two-or-more-variables","title":"There are read/write accesses that involve two or more variables","text":"<p>For example, consider the following output:</p> <pre><code>  __int64 v1; // qax@2 OVERLAPPED\n  int v2; // ecx@2 OVERLAPPED\n  __int64 result; // qax@4\n\n  if ( *(_BYTE *)(a1 + 5) &amp; 1 )\n  {\n    HIDWORD(v1) = *(_DWORD *)(a1 + 7);\n    v2 = *(_DWORD *)(a1 + 11);\n  }\n  else\n  {\n    HIDWORD(v1) = 0;\n    v2 = 0;\n  }\n  v1 = *(__int64 *)((char *)&amp;v1 + 4); // ODD ASSIGNMENT!\n</code></pre> <p>The last assignment to v1 reads beyond v1 boundaries. In fact, it also reads v2. See the assembly code:</p> <pre><code>test    byte ptr [eax+5], 1\n                 jz      short loc_409521\n                 mov     edx, [eax+7]\n                 mov     ecx, [eax+0Bh]\n                 jmp     short loc_409525\n\nloc_409521:\n                 xor     edx, edx\n                 xor     ecx, ecx\n\nloc_409525:\n                 mov     eax, edx\n                 mov     edx, ecx\n</code></pre> <p>Unfortunately, the decompiler cannot handle this case and reports overlapped variables.</p>"},{"location":"user-guide/decompiler/decompiler-manual/overvars.html#there-is-an-array-function-argument","title":"There is an array function argument","text":"<p>Arrays cannot be passed to functions by value, so this will lead to a warning. Just get rid of such an array (embed it into a structure type, for example)</p>"},{"location":"user-guide/decompiler/decompiler-manual/overvars.html#there-are-too-many-function-arguments","title":"There are too many function arguments","text":"<p>The decompiler can handle up to 64 function arguments. It is very unlikely to encounter a function with a bigger number of arguments. If so, just embed some of them into a structure passed by value.</p> <p>The corrective actions include:</p> <ul> <li>Check the stack variables and fix them if necessary. A wrongly variable can easily lead to a lvar allocation failure.</li> <li>Define a big structure that covers the entire stack frame or part of it. Such a big variable will essentially turn off variables lumping (if you are familiar with compiler jargon, the decompiler builds a web of lvars during lvar allocation and some web elements become too big, this is why variable allocation fails). Instead, all references will be done using the structure fields.</li> <li>Check the function argument area of the stack frame and fix any wrong variables. For example, this area should not containt any arrays (arrays cannot be passed by value in C). It is ok to pass structures by value, the decompiler accepts it.</li> </ul>"},{"location":"user-guide/decompiler/decompiler-manual/prereq.html","title":"Prerequisites","text":"<p>The decompiler requires the latest version of IDA. While it may work with older versions (we try to ensure compatibility with a couple of previous versions), the best results are obtained with the latest version: first, IDA analyses files better; second, the decompiler can use additional available functionality.</p> <p>The decompiler runs on MS Windows, Linux, and Mac OS X. It can decompile programs for other operating systems, provided they have been built using GCC/Clang/Visual Studio/Borland compilers.</p> <p>IDA loads appropriate decompilers depending on the input file. If it cannot find any decompiler for the current input file, no decompilers will be loaded at all.</p> <p>The GUI version of IDA is required for the interactive operation. For the text mode version, only the batch operation is supported.</p>"},{"location":"user-guide/decompiler/decompiler-manual/primer.html","title":"Quick primer","text":"<p>Let's start with a very short and simple function:</p> <p></p> <p>We decompile it with View, Open subviews, Pseudocode (hotkey F5):</p> <p></p> <p>While the generated C code makes sense, it is not pretty. There are many cast operations cluttering the text. The reason is that the decompiler does not perform the type recovery yet. Apparently, the a1 argument points to a structure but the decompiler missed it. Let us add some type information to the database and see what happens. For that we will open the Local Types window (Shift-F1) and add a new structure type:</p> <p></p> <p>After that, we switch back to the pseudocode window and specify the type of a1. We can do it by positioning the cursor on any occurrence of a1 and pressing Y:</p> <p></p> <p>When we press Enter, the decompilation output becomes much better:</p> <p></p> <p>But there is some room for improvement. We could rename the structure fields and specify their types. For example, field_6B1 seems to be used as a counter and field_6B5 is obviously a function pointer. We can do all this without switching windows now. Only the initial structure definition required the Local Types window[^1]. Here is how we specify the type of the function pointer field:</p> <p></p> <p>The final result looks like this:</p> <p></p> <p>Please note that there are no cast operations in the text and overall it looks much better than the initial version.</p> <p>[^1]: This is not completely true. In fact, we could enter the full structure definition in the type dialog box, but it is difficult because the input field consists of a single line. We could also define new types with the File, Load file, Parse C header file command.</p>"},{"location":"user-guide/decompiler/decompiler-manual/sdk-reference.html","title":"SDK reference","text":""},{"location":"user-guide/decompiler/decompiler-manual/table-of-contents.html","title":"Table of Contents","text":""},{"location":"user-guide/decompiler/decompiler-manual/third-party-plugins.html","title":"Third party plugins","text":""},{"location":"user-guide/decompiler/decompiler-manual/third_party.html","title":"Third party plugins","text":"<p>Below is the list of noteworthy public third-party plugins for the decompiler.</p> <ul> <li> <p>HexRaysCodeXplorer by Aleksandr Matrosov and Eugene Rodionov</p> <p>Hex-Rays Decompiler plugin for better code navigation Here is the features list for first release:</p> <ul> <li>navigation through virtual function calls in Hex-Rays Decompiler window;</li> <li>automatic type reconstruction for C++ constructor object;</li> <li>useful interface for working with objects &amp; classes;</li> <li>List of IDA plugins</li> </ul> <p>A simple list of various IDA and Decompiler plugins * More to come...</p> </li> </ul> <p>Happy analysis!</p>"},{"location":"user-guide/decompiler/decompiler-manual/tips-and-tricks.html","title":"Tips and tricks","text":""},{"location":"user-guide/decompiler/decompiler-manual/tricks.html","title":"Tips and tricks","text":"<p>First of all, read the troubleshooting page. It explains how to deal with most decompilation problems. Below is a mix of other useful information that did not fit into any other page:</p> <ul> <li>Volatile memory</li> <li>Constant memory</li> <li>FPU considerations</li> <li>Intrinsic functions</li> <li>Overlapped variables</li> <li>CONTAINING_RECORD macro</li> <li>Indirect calls</li> <li>more to come...</li> </ul>"},{"location":"user-guide/decompiler/decompiler-manual/tricks.html#volatile-memory","title":"Volatile memory","text":"<p>Sometimes the decompiler can be overly aggressive and optimize references to volatile memory completely away. A typical situation like the following:</p> <pre><code>                 device_ready    DCD ? ; VOLATILE!\n\n                                 MOV     R0, =device_ready\n                                 LDR     R1, [R0]\n                 LOOP:\n                                 LDR     R2, [R0]\n                                 SUB     R2, R1\n                                 BEQ     LOOP\n\n</code></pre> <p>can be decompiled into</p> <pre><code>                 while ( 1 )\n                   ;\n\n</code></pre> <p>because the decompiler assumes that a variable cannot change its value by itself and it can prove that r0 continues to point to the same location during the loop.</p> <p>To prevent such optimization, we need to mark the variable as volatile. Currently the decompiler considers memory to be volatile if it belongs to a segment with one of the following names: IO, IOPORTS, PORTS, VOLATILE. The character case is not important.</p>"},{"location":"user-guide/decompiler/decompiler-manual/tricks.html#constant-memory","title":"Constant memory","text":"<p>Sometimes the decompiler does not optimize the code enough because it assumes that variables may change their values. For example, the following code:</p> <pre><code>                   LDR     R1, =off_45934\n                   MOV     R2, #0\n                   ADD     R3, SP, #0x14+var_C\n                   LDR     R1, [R1]\n                   LDR     R1, [R1]        ; int\n                   BL      _IOServiceOpen\n\n</code></pre> <p>can be decompiled into</p> <pre><code>                 IOServiceOpen(r0_1, *off_45934, 0)\n\n</code></pre> <p>but this code is much better:</p> <pre><code>                 IOServiceOpen(r0_1, mach_task_self, 0)\n\n</code></pre> <p>because</p> <pre><code>                 off_45934 DCD _mach_task_self\n\n</code></pre> <p>is a pointer that resides in constant memory and will never change its value.</p> <p>The decompiler considers memory to be constant if one of the following conditions hold:</p> <ol> <li>the segment has access permissions defined but the write permission is not in the list (to change the segment permissions use the \"Edit, Segments, Edit Segment\" menu item or the set_segm_attr built-in function)</li> <li>the segment type is CODE</li> <li> <p>the segment name is one of the following (the list may change in the future): .text, .rdata, .got, .got.plt, .rodata, __text, __const, __const_coal, __cstring, __cfstring, __literal4, __literal8, __pointers, __nl_symbol_ptr, __la_symbol_ptr, __objc_catlist, __objc_classlist, __objc_classname, __objc_classrefs, __objc_const, __objc_data, __objc_imageinfo, __objc_ivar, __objc_methname, __objc_methtype, __objc_protolist, __objc_protorefs, __objc_selrefs, __objc_superrefs, __message_refs, __cls_refs, __inst_meth, __cat_inst_meth, __cat_cls_meth, __OBJC_RO</p> <p>The decompiler tries to completely get rid of references to the following segments and replace them by constants: .got, .got.plt, __pointers, __nl_symbol_ptr, __la_symbol_ptr, __objc_ivar, __message_refs, __cls_refs</p> </li> </ol> <p>It is possible to override the constness of an individual item by specifying its type with the volatile or const modifiers.</p>"},{"location":"user-guide/decompiler/decompiler-manual/tricks.html#containing_record-macro","title":"CONTAINING_RECORD macro","text":"<p>The decompiler knows about the CONTAINING_RECORD macro and tries to use it in the output. However, in most cases it is impossible to create this macro automatically, because the information about the containing record is not available. The decompiler uses three sources of information to determine if CONTAINING_RECORD should be used:</p> <ol> <li> <p>If there is an assignment like this:</p> <p>```             v1 = (structype )((char )v2 - num);</p> <p>```</p> <p>it can be converted into</p> <p>```             v1 = CONTAINING_RECORD(v2, structype, fieldname);</p> <p>```</p> <p>by simply confirming the types of v1 and v2.\\ NOTE: the variables types must be specified explicitly. Even if the types are displayed as correct, the user should press Y followed by Enter to confirm the variable type.</p> <ol> <li>Struct offsets applied to numbers in the disassembly listing are used as a hint to create CONTAINING_RECORD. For example, applying structure offset to 0x41C in</li> </ol> <p>```             sub     eax, 41Ch</p> <p>```</p> <p>will have the same effect as in the previous point. Please note that it makes sense to confirm the variable types as explained earlier.</p> <ol> <li>Struct offsets applied to numbers in the decompiler output. For example, applying _DEVICE_INFO structure offset to -131 in the following code:</li> </ol> <p>```             deviceInfo = (_DEVICE_INFO )((char )&amp;thisEntry[-131] - 4);</p> <p>```</p> <p>will convert it to:</p> <p>```             deviceInfo = CONTAINING_RECORD(thisEntry, _DEVICE_INFO, ListEntry);</p> <p>```</p> <p>Please note that it makes sense to confirm the variable types as explained earlier.</p> </li> </ol> <p>In most cases the CONTAING_RECORD macro can be replaced by a shorter and nicer expression if a shifted pointer used. In this case it is enough to declare the pointer as a shifted pointer and the decompiler will transform all expressions where it is used.</p>"},{"location":"user-guide/decompiler/decompiler-manual/tricks.html#indirect-calls","title":"Indirect calls","text":"<p>Since the arguments of indirect calls are collected before defining variables, specifying the type of the variable that holds the function pointer may not be enough. The user have to specify the function type using other methods in this case. The following methods exist (in the order of preference):</p> <ol> <li> <p>For indirect calls of this form:</p> <p>```             call ds:funcptr</p> <p>```</p> <p>If funcptr is initialized statically and points to a valid function, just ensure a correct function prototype. The decompiler will use it. 2.  For indirect calls of this form:</p> <p>```             call [reg+offset]</p> <p>```</p> <p>If reg points to a structure with a member that is a function pointer, just convert the operand into a structure offset (hotkey T):</p> <p>```             call [reg+mystruct.funcptr]</p> <p>```</p> <p>and ensure that the type of mystruct::funcptr is a pointer to a function of the desired type. 3. Specify the type of the called function using Edit, Operand type, Set operand type. If the first two methods cannot be applied, this is the recommended method. The operand type has the highest priority, it is always used if present. 4. If the address of the called function is known, use Edit, Plugins, Change the callee address (hotkey Alt-F11). The decompiler will use the type of the specified callee. This method is available only for x86. For other processors adding a code cross reference from the call instruction to the callee will help.</p> </li> </ol>"},{"location":"user-guide/decompiler/introduction-to-decompilation-vs-disassembly/comparisons-of-arm-disassembly-and-decompilation.html","title":"Comparisons of ARM disassembly and decompilation","text":"<p>Here are some side-by-side comparisons of disassembly and decompiler for ARM. Please maximize the window too see both columns simultaneously.</p> <p>The following examples are displayed on this page:</p> <ol> <li>Simple case</li> <li>64-bit arithmetics</li> <li>Conditional instructions</li> <li>Conditional instructions - 2</li> <li>Complex instructions</li> <li>Compiler helper functions</li> <li>Immediate constants</li> <li>Position independent code</li> </ol>"},{"location":"user-guide/decompiler/introduction-to-decompilation-vs-disassembly/comparisons-of-arm-disassembly-and-decompilation.html#simple-case","title":"Simple case","text":"<p>Let's start with a very simple function. It accepts a pointer to a structure and zeroes out its first three fields. While the function logic is obvious by just looking at the decompiler output, the assembly listing has too much noise and requires studying it.</p> <p>The decompiler saves your time and allows you to concentrate on more exciting aspects of reverse engineering.</p> <p>{% tabs %}</p> <pre><code>; struct_result *__fastcall sub_210DC(struct_result *result)                 \n\n var_10          = -0x10                                                      \n var_4           = -4                                                         \n\n                 MOV     R12, SP                                              \n                 STMFD   SP!, {R0}                                            \n                 STMFD   SP!, {R12,LR}                                        \n                 SUB     SP, SP, #4                                           \n                 LDR     R2, [SP,#0x10+var_4]\n                 MOV     R3, #0\n                 STR     R3, [R2]\n                 LDR     R3, [SP,#0x10+var_4]\n                 ADD     R2, R3, #4\n                 MOV     R3, #0\n                 STR     R3, [R2]\n                 LDR     R3, [SP,#0x10+var_4]\n                 ADD     R2, R3, #8\n                 MOV     R3, #0\n                 STR     R3, [R2]\n                 LDR     R3, [SP,#0x10+var_4]\n                 STR     R3, [SP,#0x10+var_10]\n                 LDR     R0, [SP,#0x10+var_10]\n                 ADD     SP, SP, #4\n                 LDMFD   SP, {SP,LR}\n                 BX      LR\n ; End of function sub_210DC\n</code></pre> <p>{% endtab %}</p> <p>{% tab title=\"Pseudocode\" %}</p> <pre><code>struct_result *__fastcall sub_210DC(struct_result *result)\n{\n  result-&gt;dword0 = 0;\n  result-&gt;dword4 = 0;\n  result-&gt;dword8 = 0;\n  return result;\n}\n</code></pre> <p>{% endtab %}</p>"},{"location":"user-guide/decompiler/introduction-to-decompilation-vs-disassembly/comparisons-of-arm-disassembly-and-decompilation.html#64-bit-arithmetics","title":"64-bit arithmetics","text":"<p>Sorry for a long code snippet, ARM code tends to be longer compared to x86 code. This makes our comparison even more impressive: look at how concise is the decompiler output!</p> <p>{% tabs %}</p> <pre><code> ; bool __cdecl uh_gt_uc()                                                    \n                 EXPORT _uh_gt_uc__YA_NXZ                                     \n _uh_gt_uc__YA_NXZ                       ; DATA XREF: .pdata:$T7452o          \n\n var_2C          = -0x2C                                                      \n var_28          = -0x28                                                      \n var_24          = -0x24                                                      \n var_20          = -0x20                                                      \n var_1C          = -0x1C                                                      \n var_18          = -0x18                                                      \n var_14          = -0x14                                                      \n var_10          = -0x10                                                      \n var_C           = -0xC                                                       \n var_8           = -8                                                         \n var_4           = -4                                                         \n\n                 STR     LR, [SP,#var_4]! ; $M7441                            \n                                         ; $LN8@uh_gt_uc                      \n                 SUB     SP, SP, #0x28                                        \n\n $M7449\n                 BL      uh\n                 STR     R1, [SP,#0x2C+var_24]\n                 STR     R0, [SP,#0x2C+var_28]\n                 BL      uc\n                 STRB    R0, [SP,#0x2C+var_20]\n                 LDRB    R3, [SP,#0x2C+var_20]\n                 STR     R3, [SP,#0x2C+var_1C]\n                 LDR     R1, [SP,#0x2C+var_1C]\n                 LDR     R3, [SP,#0x2C+var_1C]\n                 MOV     R2, R3,ASR#31\n                 LDR     R3, [SP,#0x2C+var_28]\n                 STR     R3, [SP,#0x2C+var_18]\n                 LDR     R3, [SP,#0x2C+var_24]\n                 STR     R3, [SP,#0x2C+var_14]\n                 LDR     R3, [SP,#0x2C+var_18]\n                 STR     R3, [SP,#0x2C+var_10]\n                 STR     R1, [SP,#0x2C+var_C]\n                 LDR     R3, [SP,#0x2C+var_14]\n                 CMP     R3, R2\n                 BCC     $LN3_8\n\n loc_6AC\n                 BHI     $LN5_0\n\n loc_6B0\n                 LDR     R2, [SP,#0x2C+var_10]\n                 LDR     R3, [SP,#0x2C+var_C]\n                 CMP     R2, R3\n                 BLS     $LN3_8\n\n $LN5_0\n                 MOV     R3, #1\n                 STR     R3, [SP,#0x2C+var_8]\n                 B       $LN4_8\n ; ---------------------------------------------------------------------------\n\n $LN3_8\n                                         ; uh_gt_uc(void)+68j\n                 MOV     R3, #0\n                 STR     R3, [SP,#0x2C+var_8]\n\n $LN4_8\n                 LDR     R3, [SP,#0x2C+var_8]\n                 AND     R3, R3, #0xFF\n                 STRB    R3, [SP,#0x2C+var_2C]\n                 LDRB    R0, [SP,#0x2C+var_2C]\n                 ADD     SP, SP, #0x28\n                 LDR     PC, [SP+4+var_4],#4\n ; End of function uh_gt_uc(void)\n</code></pre> <p>{% endtab %}</p> <p>{% tab title=\"Pseudocode\" %}</p> <pre><code>bool __fastcall uh_gt_uc()\n{\n  unsigned __int64 v0; // ST04_8@1\n\n  v0 = uh();\n  return v0 &gt; uc();\n}\n</code></pre> <p>{% endtab %}</p>"},{"location":"user-guide/decompiler/introduction-to-decompilation-vs-disassembly/comparisons-of-arm-disassembly-and-decompilation.html#conditional-instructions","title":"Conditional instructions","text":"<p>The ARM processor has conditional instructions that can shorten the code but require high attention from the reader. The case above is very simple, just note that there is a pair of instructions: <code>MOVNE</code> and <code>LDREQSH</code>. Only one of them will be executed at once. This is how simple <code>if-then-else</code> looks in ARM.</p> <p>The pseudocode shows it much better and does not require any explanations.</p> <p>A quiz question: did you notice that <code>MOVNE</code> loads zero to <code>R0</code>? (because I didn't:)</p> <p>Also note that in the disassembly listing we see <code>var_8</code> but the location really used is <code>var_A</code>, which corresponds to <code>v4</code>.</p> <p>{% tabs %}</p> <pre><code>; int __cdecl ReadShort(void *, unsigned __int32 offset, int whence)         \n ReadShort                                                                    \n\n whence          = -0x18                                                      \n var_A           = -0xA                                                       \n var_8           = -8                                                         \n\n                 STMFD   SP!, {R4,LR}                                         \n                 SUB     SP, SP, #0x10   ; whence                             \n                 MOV     R4, #0\n                 ADD     R3, SP, #0x18+var_8\n                 STRH    R4, [R3,#-2]!\n                 STR     R2, [SP,#0x18+whence] ; whence\n                 MOV     R2, R3          ; buffer\n                 MOV     R3, #2          ; len\n                 BL      ReadData\n                 CMP     R0, R4\n                 MOVNE   R0, R4\n                 LDREQSH R0, [SP,#0x18+var_A]\n                 ADD     SP, SP, #0x10\n                 LDMFD   SP!, {R4,PC}\n ; End of function ReadShort\n</code></pre> <p>{% endtab %}</p> <p>{% tab title=\"Pseudocode\" %}</p> <pre><code>int __cdecl ReadShort(void *a1, unsigned __int32 offset, int whence)\n{\n  int result; // r0@2\n  __int16 v4; // [sp+Eh] [bp-Ah]@1\n\n  v4 = 0;\n  if ( ReadData(a1, offset, &amp;v4, 2u, whence) )\n    result = 0;\n  else\n    result = v4;\n  return result;\n}\n\n</code></pre> <p>{% endtab %}</p>"},{"location":"user-guide/decompiler/introduction-to-decompilation-vs-disassembly/comparisons-of-arm-disassembly-and-decompilation.html#conditional-instructions-2","title":"Conditional instructions - 2","text":"<p>Look, the decompiler output is longer! This is a rare case when the pseudocode is longer than the disassembly listing, but it is a for a good cause: to keep it readable. There are so many conditional instructions here, it is very easy to misunderstand the dependencies. For example, did you notice that the first <code>MOVEQ</code> may use the condition codes set by <code>CMP</code>? The subtle detail is that CMPNE may be skipped and the condition codes set by <code>CMP</code> may reach <code>MOVEQ</code>s.</p> <p>The decompiler represented it perfectly well. I renamed some variables and set their types, but this was an easy task.</p> <p>{% tabs %}</p> <pre><code>; signed int __fastcall get_next_byte(entry_t *entry)\n get_next_byte                           ; DATA XREF: sub_3BC+30o\n                                         ;\n                 LDR     R2, [R0,#4]\n                 CMP     R2, #0\n                 LDRNE   R3, [R0]\n                 LDRNEB  R1, [R3],#1\n                 CMPNE   R1, #0\n                 MOVEQ   R1, #1\n                 STREQ   R1, [R0,#0xC]\n                 MOVEQ   R0, 0xFFFFFFFF\n                 MOVEQ   PC, LR\n                 SUB     R2, R2, #1\n                 STR     R2, [R0,#4]\n                 STR     R3, [R0]\n                 MOV     R0, R1\n                 RET\n ; End of function get_next_byte\n</code></pre> <p>{% endtab %}</p> <p>{% tab title=\"Pseudocode\" %}</p> <pre><code>signed int __fastcall get_next_byte(entry_t *entry)\n{\n  signed int chr; // r1@0\n  unsigned __int8 *ptr; // r3@0\n  int count; // r2@1\n  char done; // zf@1\n  signed int result; // r0@4\n\n  count = entry-&gt;count;\n  done = count == 0;\n  if ( count )\n  {\n    ptr = entry-&gt;ptr + 1;\n    chr = *entry-&gt;ptr;\n    done = chr == 0;\n  }\n  if ( done )\n  {\n    entry-&gt;done = 1;\n    result = -1;\n  }\n  else\n  {\n    entry-&gt;count = count - 1;\n    entry-&gt;ptr = ptr;\n    result = chr;\n  }\n  return result;\n}\n</code></pre> <p>{% endtab %}</p>"},{"location":"user-guide/decompiler/introduction-to-decompilation-vs-disassembly/comparisons-of-arm-disassembly-and-decompilation.html#complex-instructions","title":"Complex instructions","text":"<p>Conditional instructions are just part of the story. ARM is also famous for having a plethora of data movement instructions. They come with a set of possible suffixes that subtly change the meaning of the instruction. Take <code>STMCSIA</code>, for example. It is a <code>STM</code> instruction, but then you have to remember that <code>CS</code> means \"carry set\" and <code>IA</code> means \"increment after\".</p> <p>In short, the disassembly listing is like Chinese. The pseudocode is longer but requires much less time to understand.</p> <p>{% tabs %}</p> <pre><code>; void __fastcall sub_2A38(list_t *ptr, unsigned int a2)\n sub_2A38                                ; CODE XREF: sub_5C8+48p\n                                         ; sub_648+5Cp ...\n                 MOV     R2, #0\n                 STMFD   SP!, {LR}                                            \n                 MOV     R3, R2\n                 MOV     R12, R2\n                 MOV     LR, R2\n                 SUBS    R1, R1, #0x20\n\n loc_2A50                                ; CODE XREF: sub_2A38+24j\n                 STMCSIA R0!, {R2,R3,R12,LR}\n                 STMCSIA R0!, {R2,R3,R12,LR}\n                 SUBCSS  R1, R1, #0x20\n                 BCS     loc_2A50\n                 MOVS    R1, R1,LSL#28\n                 STMCSIA R0!, {R2,R3,R12,LR}\n                 STMMIIA R0!, {R2,R3}\n                 LDMFD   SP!, {LR}\n                 MOVS    R1, R1,LSL#2\n                 STRCS   R2, [R0],#4\n                 MOVEQ   PC, LR\n                 STRMIH  R2, [R0],#2\n                 TST     R1, #0x40000000\n                 STRNEB  R2, [R0],#1\n                 RET\n ; End of function sub_2A38\n</code></pre> <p>{% endtab %}</p> <p>{% tab title=\"Pseudocode\" %}</p> <pre><code>void __fastcall sub_2A38(list_t *ptr, unsigned int a2)\n{\n  char copybig; // cf@1\n  unsigned int size; // r1@1\n  list_t *v4; // r0@3\n  int remains; // r1@4\n  int final; // r1@8\n\n  copybig = a2 &gt;= 0x20;\n  size = a2 - 32;\n  do\n  {\n    if ( !copybig )\n      break;\n    ptr-&gt;dword0 = 0;\n    ptr-&gt;dword4 = 0;\n    ptr-&gt;dword8 = 0;\n    ptr-&gt;dwordC = 0;\n    v4 = ptr + 1;\n    v4-&gt;dword0 = 0;\n    v4-&gt;dword4 = 0;\n    v4-&gt;dword8 = 0;\n    v4-&gt;dwordC = 0;\n    ptr = v4 + 1;\n    copybig = size &gt;= 0x20;\n    size -= 32;\n  }\n  while ( copybig );\n  remains = size &lt;&lt; 28;\n  if ( copybig )\n  {\n    ptr-&gt;dword0 = 0;\n    ptr-&gt;dword4 = 0;\n    ptr-&gt;dword8 = 0;\n    ptr-&gt;dwordC = 0;\n    ++ptr;\n  }\n  if ( remains &lt; 0 )\n  {\n    ptr-&gt;dword0 = 0;\n    ptr-&gt;dword4 = 0;\n    ptr = (list_t *)((char *)ptr + 8);\n  }\n  final = 4 * remains;\n  if ( copybig )\n  {\n    ptr-&gt;dword0 = 0;\n    ptr = (list_t *)((char *)ptr + 4);\n  }\n  if ( final )\n  {\n    if ( final &lt; 0 )\n    {\n      LOWORD(ptr-&gt;dword0) = 0;\n      ptr = (list_t *)((char *)ptr + 2);\n    }\n    if ( final &amp; 0x40000000 )\n      LOBYTE(ptr-&gt;dword0) = 0;\n  }\n}\n\n</code></pre> <p>{% endtab %}</p>"},{"location":"user-guide/decompiler/introduction-to-decompilation-vs-disassembly/comparisons-of-arm-disassembly-and-decompilation.html#compiler-helper-functions","title":"Compiler helper functions","text":"<p>Sorry for another long code snippet. Just wanted to show you that the decompiler can handle compiler helper functions (like <code>__divdi3</code>) and handles 64-bit arithmetic quite well.</p> <p>{% tabs %}</p> <pre><code>EXPORT op_two64                                              \n     op_two64                                ; CODE XREF: refer_all+31Cp          \n                                             ; main+78p                           \n\n     anonymous_1     = -0x28                                                      \n     var_20          = -0x20                                                      \n     anonymous_0     = -0x18                                                      \n     var_10          = -0x10                                                      \n     arg_0           =  4                                                         \n\n 000                 MOV     R12, SP                                              \n 000                 STMFD   SP!, {R4,R11,R12,LR,PC}                              \n 014                 SUB     R11, R12, #4                                         \n 014                 SUB     SP, SP, #0x18                                        \n 02C                 SUB     R4, R11, #-var_10\n 02C                 STMDB   R4, {R0,R1}\n 02C                 MOV     R1, 0xFFFFFFF0\n 02C                 SUB     R12, R11, #-var_10\n 02C                 ADD     R1, R12, R1\n 02C                 STMIA   R1, {R2,R3}\n 02C                 LDR     R3, [R11,#arg_0]\n 02C                 CMP     R3, #1\n 02C                 BNE     loc_9C44\n 02C                 MOV     R3, 0xFFFFFFF0\n 02C                 SUB     R0, R11, #-var_10\n 02C                 ADD     R3, R0, R3\n 02C                 SUB     R4, R11, #-var_10\n 02C                 LDMDB   R4, {R1,R2}\n 02C                 LDMIA   R3, {R3,R4}\n 02C                 ADDS    R3, R3, R1\n 02C                 ADC     R4, R4, R2\n 02C                 SUB     R12, R11, #-var_20\n 02C                 STMDB   R12, {R3,R4}\n 02C                 B       loc_9D04\n     ; ---------------------------------------------------------------------------\n\n     loc_9C44                                ; CODE XREF: op_two64+30j\n 02C                 LDR     R3, [R11,#arg_0]\n 02C                 CMP     R3, #2\n 02C                 BNE     loc_9C7C\n 02C                 MOV     R3, 0xFFFFFFF0\n 02C                 SUB     R0, R11, #-var_10\n 02C                 ADD     R3, R0, R3\n 02C                 SUB     R4, R11, #-var_10\n 02C                 LDMDB   R4, {R1,R2}\n 02C                 LDMIA   R3, {R3,R4}\n 02C                 SUBS    R3, R1, R3\n 02C                 SBC     R4, R2, R4\n 02C                 SUB     R12, R11, #-var_20\n 02C                 STMDB   R12, {R3,R4}\n 02C                 B       loc_9D04\n     ; ---------------------------------------------------------------------------\n\n     loc_9C7C                                ; CODE XREF: op_two64+68j\n 02C                 LDR     R3, [R11,#arg_0]\n 02C                 CMP     R3, #3\n 02C                 BNE     loc_9CB8\n 02C                 MOV     R3, 0xFFFFFFF0\n 02C                 SUB     R0, R11, #-var_10\n 02C                 ADD     R3, R0, R3\n 02C                 SUB     R2, R11, #-var_10\n 02C                 LDMDB   R2, {R0,R1}\n 02C                 LDMIA   R3, {R2,R3}\n 02C                 BL      __muldi3\n 02C                 MOV     R4, R1\n 02C                 MOV     R3, R0\n 02C                 SUB     R12, R11, #-var_20\n 02C                 STMDB   R12, {R3,R4}\n 02C                 B       loc_9D04\n     ; ---------------------------------------------------------------------------\n\n     loc_9CB8                                ; CODE XREF: op_two64+A0j\n 02C                 LDR     R3, [R11,#arg_0]\n 02C                 CMP     R3, #4\n 02C                 BNE     loc_9CF4\n 02C                 MOV     R3, 0xFFFFFFF0\n 02C                 SUB     R0, R11, #-var_10\n 02C                 ADD     R3, R0, R3\n 02C                 SUB     R2, R11, #-var_10\n 02C                 LDMDB   R2, {R0,R1}\n 02C                 LDMIA   R3, {R2,R3}\n 02C                 BL      __divdi3\n 02C                 MOV     R4, R1\n 02C                 MOV     R3, R0\n 02C                 SUB     R12, R11, #-var_20\n 02C                 STMDB   R12, {R3,R4}\n 02C                 B       loc_9D04\n     ; ---------------------------------------------------------------------------\n\n     loc_9CF4                                ; CODE XREF: op_two64+DCj\n 02C                 MOV     R3, 0xFFFFFFFF\n 02C                 MOV     R2, 0xFFFFFFFF\n 02C                 SUB     R4, R11, #-var_20\n 02C                 STMDB   R4, {R2,R3}\n\n     loc_9D04                                ; CODE XREF: op_two64+5Cj\n                                             ; op_two64+94j ...\n 02C                 SUB     R12, R11, #-var_20\n 02C                 LDMDB   R12, {R0,R1}\n 02C                 SUB     SP, R11, #0x10\n 014                 LDMFD   SP, {R4,R11,SP,PC}\n     ; End of function op_two64\n</code></pre> <p>{% endtab %}</p> <p>{% tab title=\"Pseudocode\" %}</p> <pre><code>signed __int64 __fastcall op_two64(signed __int64 a1, signed __int64 a2, int a3)\n{\n  signed __int64 v4; // [sp+0h] [bp-28h]@2\n\n  switch ( a3 )\n  {\n    case 1:\n      v4 = a2 + a1;\n      break;\n    case 2:\n      v4 = a1 - a2;\n      break;\n    case 3:\n      v4 = a1 * a2;\n      break;\n    case 4:\n      v4 = a1 / a2;\n      break;\n    default:\n      v4 = -1LL;\n      break;\n  }\n  return v4;\n}\n</code></pre> <p>{% endtab %}</p>"},{"location":"user-guide/decompiler/introduction-to-decompilation-vs-disassembly/comparisons-of-arm-disassembly-and-decompilation.html#immediate-constants","title":"Immediate constants","text":"<p>Since ARM instructions cannot have big immediate constants, sometimes they are loaded with two instructions. There are many <code>0xFA</code> (250 decimal) constants in the disassembly listing, but all of them are shifted to the left by 2 before use. The decompiler saves you from these petty details.</p> <p>Also a side: the decompiler can handle ARM mode as well as Thumb mode instructions. It just does not care about the instruction encoding because it is already handled by IDA.</p> <p>{% tabs %}</p> <pre><code>loc_110D6                               ; CODE XREF: sub_10E38+43Cj\n                                         ; sub_10E38+442j ...\n                 LDR     R1, =(tmin_ptr - 0x1CDB8)\n                 LDR     R2, =(tmax_ptr - 0x1CDB8)\n                 LDR     R0, =(aRttMinAvgMaxMd - 0x1CDB8)\n                 LDR     R6, [R7,R1]\n                 LDR     R5, [R7,R2]\n                 MOVS    R3, #0xFA\n                 LDR     R4, [R6]\n                 LSLS    R1, R3, #2\n                 LDR     R6, [R5]\n                 ADDS    R5, R7, R0      ; \"rtt min/avg/max/mdev = %ld.%03ld/%lu.%0\"...\n                 MOVS    R0, R4\n                 BLX     __aeabi_idiv\n                 MOV     R8, R0\n                 MOVS    R0, R4\n                 MOVS    R4, #0xFA\n                 LSLS    R1, R4, #2\n                 BLX     __aeabi_idivmod\n                 LDR     R3, =0\n                 LDR     R2, =0x3E8\n                 MOVS    R4, R1\n                 LDR     R0, [SP,#0x78+var_40]\n                 LDR     R1, [SP,#0x78+var_40+4]\n                 BLX     __aeabi_ldivmod\n                 LDR     R3, =0\n                 LDR     R2, =0x3E8\n                 STR     R0, [SP,#0x78+var_50]\n                 STR     R1, [SP,#0x78+var_4C]\n                 LDR     R0, [SP,#0x78+var_40]\n                 LDR     R1, [SP,#0x78+var_40+4]\n                 BLX     __aeabi_ldivmod\n                 MOVS    R1, #0xFA\n                 MOVS    R0, R6\n                 LSLS    R1, R1, #2\n                 STR     R2, [SP,#0x78+var_78]\n                 BLX     __aeabi_idiv\n                 STR     R0, [SP,#0x78+var_74]\n                 MOVS    R0, R6\n                 MOVS    R6, #0xFA\n                 LSLS    R1, R6, #2\n                 BLX     __aeabi_idivmod\n                 MOVS    R2, #0xFA\n                 STR     R1, [SP,#0x78+var_70]\n                 LDR     R0, [SP,#0x78+var_38]\n                 LSLS    R1, R2, #2\n                 BLX     __aeabi_idiv\n                 MOVS    R3, #0xFA\n                 STR     R0, [SP,#0x78+var_6C]\n                 LSLS    R1, R3, #2\n                 LDR     R0, [SP,#0x78+var_38]\n                 BLX     __aeabi_idivmod\n                 MOVS    R0, R5          ; format\n                 STR     R1, [SP,#0x78+var_68]\n                 MOVS    R2, R4\n                 MOV     R1, R8\n                 LDR     R3, [SP,#0x78+var_50]\n                 BLX     printf\n</code></pre> <p>{% endtab %}</p> <p>{% tab title=\"Pseudocode\" %}</p> <pre><code> printf(\n      \"rtt min/avg/max/mdev = %ld.%03ld/%lu.%03ld/%ld.%03ld/%ld.%03ld ms\",\n      tmin / 1000,\n      tmin % 1000,\n      v27 / 1000,\n      v27 % 1000,\n      tmax / 1000,\n      tmax % 1000,\n      v28 / 1000,\n      v28 % 1000);\n\n</code></pre> <p>{% endtab %}</p>"},{"location":"user-guide/decompiler/introduction-to-decompilation-vs-disassembly/comparisons-of-arm-disassembly-and-decompilation.html#position-independent-code","title":"Position independent code","text":"<p>In some case the disassembly listing can be misleading, especially with PIC (position independent code). While the address of a constant string is loaded into <code>R12</code>, the code does not care about it. It is just how variable addresses are calculated in PIC-code (it is .got-someoffset). Such calculations are very frequent in shared objects and unfortunately IDA cannot handle all of them. But the decompiler did a great job of tracing <code>R12</code>.</p> <p>{% tabs %}</p> <pre><code>sub_65768                               ; DATA XREF: .data:007E37A4o         \n\n var_18          = -0x18                                                      \n var_14          = -0x14                                                      \n var_10          = -0x10                                                      \n arg_0           =  0                                                         \n\n                 PUSH    {LR}                                                 \n                 LDR.W   R12, =aResponsetype ; \"responseType\"\n                 SUB     SP, SP, #0x14                                        \n                 ADR.W   LR, loc_65774\n\n loc_65774                               ; DATA XREF: sub_65768+8o\n                 ADD     R12, LR\n                 LDR.W   LR, [SP,#0x18+arg_0]\n                 STR.W   LR, [SP,#0x18+var_18]\n                 MOV.W   LR, #0x10\n                 STR.W   LR, [SP,#0x18+var_14]\n                 LDR.W   LR, =0xFFF0883C\n                 ADD     R12, LR\n                 STR.W   R12, [SP,#0x18+var_10]\n                 BL      sub_65378\n                 ADD     SP, SP, #0x14\n                 POP     {PC}\n ; End of function sub_65768\n</code></pre> <p>{% endtab %}</p> <p>{% tab title=\"Pseudocode\" %}</p> <pre><code>int __fastcall sub_65768(int a1, int a2, int a3, int a4, int a5)\n{\n  return sub_65378(a1, a2, a3, a4, a5, 16, (int)myarray);\n}\n</code></pre> <p>{% endtab %}</p>"},{"location":"user-guide/decompiler/introduction-to-decompilation-vs-disassembly/comparisons-of-mips-disassembly-and-decompilation.html","title":"Comparisons of MIPS disassembly and decompilation","text":"<p>Here are some side-by-side comparisons of disassembly and decompiler for MIPS. Please maximize the window too see both columns simultaneously.</p> <p>The following examples are displayed on this page:</p> <ol> <li>Simple code</li> <li>64-bit comparison</li> <li>Magic divisions</li> <li>Hard cases with delay slots</li> <li>Little-endian MIPS</li> <li>MicroMIPS</li> <li>Floating-point operations</li> <li>Compiler helpers</li> </ol>"},{"location":"user-guide/decompiler/introduction-to-decompilation-vs-disassembly/comparisons-of-mips-disassembly-and-decompilation.html#simple-code","title":"Simple code","text":"<p>This is a very simple code to decompile and the output is perfect. The only minor obstacle are references through the global offset table but both IDA and the Decompiler handle them well. Please note the difference in the number of lines to read on the left and on the right.</p> <p>{% tabs %}</p> <pre><code># void __fastcall free_argv(int argc, char **argv)\n                .globl _Z9free_argviPPc  # weak\n_Z9free_argviPPc:                        # CODE XREF: test_expand_argv(void)+264\u2191p\n                                         # test_expand_argv(void)+51C\u2191p ...\n\nvar_10          = -0x10\nvar_4           = -4\nvar_s0          =  0\nvar_s4          =  4\narg_0           =  8\narg_4           =  0xC\n\n # __unwind {\n                addiu   $sp, -0x28\n                sw      $ra, 0x20+var_s4($sp)\n                sw      $fp, 0x20+var_s0($sp)\n                move    $fp, $sp\n                la      $gp, _GLOBAL_OFFSET_TABLE_+0x7FF0\n                sw      $gp, 0x20+var_10($sp)\n                sw      $a0, 0x20+arg_0($fp)\n                sw      $a1, 0x20+arg_4($fp)\n                lw      $v0, 0x20+arg_4($fp)\n                beqz    $v0, loc_17778\n                nop\n                sw      $zero, 0x20+var_4($fp)\n\nloc_1770C:                               # CODE XREF: free_argv(int,char **)+80\u2193j\n                lw      $v1, 0x20+var_4($fp)\n                lw      $v0, 0x20+arg_0($fp)\n                slt     $v0, $v1, $v0\n                beqz    $v0, loc_17760\n                nop\n                lw      $v0, 0x20+var_4($fp)\n                sll     $v0, 2\n                lw      $v1, 0x20+arg_4($fp)\n                addu    $v0, $v1, $v0\n                lw      $v0, 0($v0)\n                move    $a0, $v0\n                lw      $v0, (qfree_ptr-0x7FF0 - _GLOBAL_OFFSET_TABLE_)($gp)\n                move    $t9, $v0\n                jalr    $t9 ; qfree\n                nop\n                lw      $gp, 0x20+var_10($fp)\n                lw      $v0, 0x20+var_4($fp)\n                addiu   $v0, 1\n                sw      $v0, 0x20+var_4($fp)\n                b       loc_1770C\n                nop\n # ---------------------------------------------------------------------------\n\nloc_17760:                               # CODE XREF: free_argv(int,char **)+40\u2191j\n                lw      $a0, 0x20+arg_4($fp)\n                lw      $v0, (qfree_ptr-0x7FF0 - _GLOBAL_OFFSET_TABLE_)($gp)\n                move    $t9, $v0\n                jalr    $t9 ; qfree\n                nop\n                lw      $gp, 0x20+var_10($fp)\n\nloc_17778:                               # CODE XREF: free_argv(int,char **)+28\u2191j\n                nop\n                move    $sp, $fp\n                lw      $ra, 0x20+var_s4($sp)\n                lw      $fp, 0x20+var_s0($sp)\n                addiu   $sp, 0x28\n                jr      $ra\n                nop\n # } // starts at 176D8\n</code></pre> <p>{% endtab %}</p> <p>{% tab title=\"Pseudocode\" %}</p> <pre><code>void __fastcall free_argv(int argc, char **argv)\n{\n  int i; // [sp+1Ch] [+1Ch]\n\n  if ( argv )\n  {\n    for ( i = 0; i &lt; argc; ++i )\n      qfree(argv[i]);\n    qfree(argv);\n  }\n}\n</code></pre> <p>{% endtab %}</p>"},{"location":"user-guide/decompiler/introduction-to-decompilation-vs-disassembly/comparisons-of-mips-disassembly-and-decompilation.html#64-bit-comparison","title":"64-bit comparison","text":"<p>Sorry for another long assembler listing. It shows that for MIPS, as for other platforms, the decompiler can recognize 64-bit operations and collapse them into very readable constructs.</p> <p>{% tabs %}</p> <pre><code># =============== S U B R O U T I N E =======================================\n\n# Attributes: bp-based frame fpd=0x18\n\n# _DWORD uh_eq_s(void)\n                .globl _Z7uh_eq_sv\n_Z7uh_eq_sv:                             # DATA XREF: .eh_frame:000478E4\u2193o\n\nvar_s0          =  0\nvar_s4          =  4\nvar_s8          =  8\nvar_sC          =  0xC\nvar_s10         =  0x10\nvar_s14         =  0x14\nvar_s18         =  0x18\nvar_s1C         =  0x1C\n\n # __unwind {\n                addiu   $sp, -0x38\n                 sw      $ra, 0x18+var_s1C($sp)\n                 sw      $fp, 0x18+var_s18($sp)\n                 sw      $s5, 0x18+var_s14($sp)\n                 sw      $s4, 0x18+var_s10($sp)\n                 sw      $s3, 0x18+var_sC($sp)\n                 sw      $s2, 0x18+var_s8($sp)\n                 sw      $s1, 0x18+var_s4($sp)\n                 sw      $s0, 0x18+var_s0($sp)\n                 move    $fp, $sp\n                 jal     uh\n                 nop\n                 move    $s5, $v1\n                 move    $s4, $v0\n                 jal     s\n                 nop\n                 move    $s3, $v0\n                 sra     $v0, 31\n                 move    $s2, $v0\n                 xor     $s0, $s4, $s2\n                 xor     $s1, $s5, $s3\n                 or      $v0, $s0, $s1\n                 sltiu   $v0, 1\n                 andi    $v0, 0xFF\n                 move    $sp, $fp\n                 lw      $ra, 0x18+var_s1C($sp)\n                 lw      $fp, 0x18+var_s18($sp)\n                 lw      $s5, 0x18+var_s14($sp)\n                 lw      $s4, 0x18+var_s10($sp)\n                 lw      $s3, 0x18+var_sC($sp)\n                 lw      $s2, 0x18+var_s8($sp)\n                 lw      $s1, 0x18+var_s4($sp)\n                 lw      $s0, 0x18+var_s0($sp)\n                 addiu   $sp, 0x38\n                 jr      $ra\n                 nop\n  # } // starts at 25C\n</code></pre> <p>{% endtab %}</p> <p>{% tab title=\"Pseudocode\" %}</p> <pre><code>bool uh_eq_s(void)\n{\n  unsigned __int64 v0; // $v1\n\n  v0 = uh();\n  return v0 == s();\n}\n</code></pre> <p>{% endtab %}</p>"},{"location":"user-guide/decompiler/introduction-to-decompilation-vs-disassembly/comparisons-of-mips-disassembly-and-decompilation.html#magic-divisions","title":"Magic divisions","text":"<p>We recognize magic divisions for MIPS the same way as for other processors. Note that this listing has a non-trivial delay slot.</p> <p>{% tabs %}</p> <pre><code>.globl smod199\n smod199:                                 # DATA XREF: .eh_frame:0000875C\u2193o\n # __unwind {\n                 lui     $v1, 0x5254\n                 sra     $v0, $a0, 31\n                 li      $v1, 0x5254E78F\n                 mult    $a0, $v1\n                 mfhi    $v1\n                 sra     $v1, 6\n                 subu    $v1, $v0\n                 li      $v0, 0xC7\n                 mul     $a1, $v1, $v0\n                 jr      $ra\n                 subu    $v0, $a0, $a1\n  # } // starts at 4F2C\n</code></pre> <p>{% endtab %}</p> <p>{% tab title=\"Pseudocode\" %}</p> <pre><code>int __fastcall smod199(int a1)\n{\n  return a1 % 199;\n}\n\n</code></pre> <p>{% endtab %}</p>"},{"location":"user-guide/decompiler/introduction-to-decompilation-vs-disassembly/comparisons-of-mips-disassembly-and-decompilation.html#hard-cases-with-delay-slots","title":"Hard cases with delay slots","text":"<p>The previous example was a piece of cake. This one shows a tougher nut to crack: there is a jump to a delay slot. A decent decompiler must handle these cases too and produce a correct output without misleading the user. This is what we do. (We spent quite long time inventing and testing various scenarios with delay slots).</p> <p>{% tabs %}</p> <pre><code>branch_to_b_dslot:                       # CODE XREF: branch_to_bal_dslot+14\u2193p\n                                         # DATA XREF: branch_likely_cond_move+10\u2193o\n                move    $t2, $a0\n                addiu   $t3, $t2, -0x18\n                bltz    $t3, l1\n                li      $a0, 1\n                sllv    $a0, $t3\n                b       l2\n\nl1:                                      # CODE XREF: branch_to_b_dslot+8\u2191j\n                li      $t4, 0xFFFFFFC0\n                li      $t3, 0x18\n                subu    $t3, $t2\n                srav    $a0, $t3\n\nl2:                                      # CODE XREF: branch_to_b_dslot+14\u2191j\n                jr      $ra\n                addu    $v0, $a0, $t4\n # End of function branch_to_b_dslot\n</code></pre> <p>{% endtab %}</p> <p>{% tab title=\"Pseudocode\" %}</p> <pre><code>int __fastcall branch_to_b_dslot(int a1)\n{\n  int v1; // $a0\n\n  if ( a1 - 24 &lt; 0 )\n    v1 = 1 &gt;&gt; (24 - a1);\n  else\n    v1 = 1 &lt;&lt; (a1 - 24);\n  return v1 - 64;\n}\n</code></pre> <p>{% endtab %}</p>"},{"location":"user-guide/decompiler/introduction-to-decompilation-vs-disassembly/comparisons-of-mips-disassembly-and-decompilation.html#little-endian-mips","title":"Little-endian MIPS","text":"<p>We support both big-endian and little-endian code. Usually they look the same but there may be subtle differences in the assembler. The decompiler keeps track of the bits involved and produces human-readable code.</p> <p>{% tabs %}</p> <pre><code>.globl upd_d2\nupd_d2:\n                lwl     $v0, 5($a0)\n                lwr     $v0, 2($a0)\n                addiu   $v0, $v0, 1\n                swl     $v0, 5($a0)\n                swr     $v0, 2($a0)\n                jr      $ra\n                lb      $v0, 0($a0)\n # End of function upd_d2\n</code></pre> <p>{% endtab %}</p> <p>{% tab title=\"Big-endian\" %}</p> <pre><code> .globl upd_d2\nupd_d2:\n                lwl     $v0, 2($a0)\n                lwr     $v0, 5($a0)\n                addiu   $v0, $v0, 1\n                swl     $v0, 2($a0)\n                swr     $v0, 5($a0)\n                jr      $ra\n                lb      $v0, 0($a0)\n # End of function upd_d2\n</code></pre> <p>{% endtab %}</p> <p>{% tab title=\"Pseudocode\" %}</p> <pre><code>int __fastcall upd_d2(char *a1)\n{\n  ++*(_DWORD *)(a1 + 2);\n  return *a1;\n}\n\n</code></pre> <p>{% endtab %}</p>"},{"location":"user-guide/decompiler/introduction-to-decompilation-vs-disassembly/comparisons-of-mips-disassembly-and-decompilation.html#micromips","title":"MicroMIPS","text":"<p>MicroMIPS, as you have probably guessed, is supported too, with its special instructions and quirks.</p> <p>{% tabs %}</p> <pre><code> lwm16_sp:\n\n var_10          = -0x10\n\n                 addiu   $sp, -0x10\n                 swm     $ra,$s0-$s2, 0x10+var_10($sp)\n                 move    $s0, $a0\n                 move    $s1, $a1\n                 move    $s2, $a2\n                 addu    $s0, $s1\n                 addu    $v0, $s0, $s2\n                 lwm     $ra,$s0-$s2, 0x10+var_10($sp)\n                 jraddiusp 0x10\n</code></pre> <p>{% endtab %}</p> <p>{% tab title=\"Pseudocode\" %}</p> <pre><code>__int64 __fastcall lwm16_sp(int a1, int a2, int a3)\n{\n  return a1 + a2 + a3;\n}\n</code></pre> <p>{% endtab %}</p>"},{"location":"user-guide/decompiler/introduction-to-decompilation-vs-disassembly/comparisons-of-mips-disassembly-and-decompilation.html#floating-point-operations","title":"Floating-point operations","text":"<p>The MIPS processor contains a number of complex floating point instructions, which perform several operations at once. It is not easy to decipher the meaning of the assembler code but the pseudocode is the simplest possible.</p> <p>{% tabs %}</p> <pre><code>x2y2m1f:\n                lui     $v0, %hi(dbl_50)\n                ldc1    $f1, dbl_50\n                sub.d   $f0, $f12, $f1\n                add.d   $f1, $f12, $f1\n                mul.d   $f0, $f1\n                jr      $ra\n                madd.d  $f0, $f13, $f0, $f12\n</code></pre> <p>{% endtab %}</p> <p>{% tab title=\"Pseudocode\" %}</p> <pre><code>double __fastcall x2y2m1f(double a1, double a2)\n{\n  return a2 * ((a1 - 1.0) * (a1 + 1.0)) + a1;\n}\n</code></pre> <p>{% endtab %}</p>"},{"location":"user-guide/decompiler/introduction-to-decompilation-vs-disassembly/comparisons-of-mips-disassembly-and-decompilation.html#compiler-helpers","title":"Compiler helpers","text":"<p>A compiler sometime uses helpers; our decompiler knows the meaning of the many helpers and uses it to simplify code.</p> <p>{% tabs %}</p> <pre><code>mod4:\n\nvar_C           = -0xC\nvar_s0          =  0\n\n                lui     $gp, %hi(_GLOBAL_OFFSET_TABLE_+0x7FF0)\n                addiu   $sp, -0x20\n                la      $gp, _GLOBAL_OFFSET_TABLE_+0x7FF0\n                li      $a3, 5\n                sw      $ra, 0x1C+var_s0($sp)\n                sw      $gp, 0x1C+var_C($sp)\n                lw      $t9, (__moddi3_ptr-0x7FF0 - _GLOBAL_OFFSET_TABLE_)($gp)\n                jalr    $t9 ; __moddi3\n                move    $a2, $zero\n                lw      $ra, 0x1C+var_s0($sp)\n                jr      $ra\n                addiu   $sp, 0x20\n\n\n</code></pre> <p>{% endtab %}</p> <p>{% tab title=\"Pseudocode\" %}</p> <pre><code>__int64 __fastcall mod4(__int64 a1)\n{\n  return a1 % 5;\n}\n</code></pre> <p>{% endtab %}</p>"},{"location":"user-guide/decompiler/introduction-to-decompilation-vs-disassembly/comparisons-of-powerpc-disassembly-and-decompilation.html","title":"Comparisons of PowerPC disassembly and decompilation","text":"<p>Here are some side-by-side comparisons of disassembly and decompiler for PowerPC. Please maximize the window too see both columns simultaneously.</p> <p>The following examples are displayed on this page:</p> <ol> <li>Simple code</li> <li>Linear execution</li> <li>64-bit comparison</li> <li>System calls</li> <li>Compiler helpers</li> <li>Floating point arithmetic</li> <li>Magic multiplication/division operations</li> <li>VLE code</li> <li>Interactive decompiler</li> </ol>"},{"location":"user-guide/decompiler/introduction-to-decompilation-vs-disassembly/comparisons-of-powerpc-disassembly-and-decompilation.html#simple-code","title":"Simple code","text":"<p>This simple function calculates the sum of the squares of the first N natural numbers. While the function logic is obvious by just looking at the decompiler output, the assembly listing has too much noise and requires studying it. The decompiler saves your time and allows you to concentrate on more exciting aspects of reverse engineering.</p> <p>{% tabs %}</p> <pre><code>f:\n .set back_chain, -0x20\n .set var_4, -4\n                stw       r31, var_4(r1)\n                stwu      r1, back_chain(r1)\n                mr        r31, r1\n                stw       r3, 0x14(r31)\n                mr        r4, r3\n                cmpwi     r3, 0\n                stw       r4, 8(r31)\n                bgt       loc_30\n                b         loc_24\n loc_24:\n                li        r3, 0\n                stw       r3, 0x18(r31)\n                b         loc_88\n loc_30:\n                li        r3, 0\n                stw       r3, 0x10(r31)\n                stw       r3, 0xC(r31)\n                b         loc_40\n loc_40:\n                lwz       r3, 0x14(r31)\n                lwz       r4, 0xC(r31)\n                cmpw      r4, r3\n                bge       loc_7C\n                b         loc_54\n loc_54:\n                lwz       r3, 0xC(r31)\n                mullw     r3, r3, r3\n                lwz       r4, 0x10(r31)\n                add       r3, r4, r3\n                stw       r3, 0x10(r31)\n                b         loc_6C\n loc_6C:\n                lwz       r3, 0xC(r31)\n                addi      r3, r3, 1\n                stw       r3, 0xC(r31)\n                b         loc_40\n loc_7C:\n                lwz       r3, 0x10(r31)\n                stw       r3, 0x18(r31)\n                b         loc_88\n loc_88:\n                lwz       r3, 0x18(r31)\n                addi      r1, r1, 0x20\n                lwz       r31, var_4(r1)\n                blr\n # End of       function f\n</code></pre> <p>{% endtab %}</p> <p>{% tab title=\"Pseudocode\" %}</p> <pre><code>int __fastcall f(int a1)\n{\n  int i; // [sp+Ch] [-14h]@3\n  int v3; // [sp+10h] [-10h]@3\n\n  if ( a1 )\n      return 0;\n  v3 = 0;\n  for ( i = 0; i &lt; a1; ++i )\n    v3 += i * i;\n  return v3;\n}\n</code></pre> <p>{% endtab %}</p>"},{"location":"user-guide/decompiler/introduction-to-decompilation-vs-disassembly/comparisons-of-powerpc-disassembly-and-decompilation.html#linear-execution","title":"Linear execution","text":"<p>The PowerPC processor has a number of instructions which can be used to avoid branches (for example cntlzw). The decompiler restores the conditional logic and makes code easier to understand.</p> <p>{% tabs %}</p> <pre><code># _DWORD c_eq_s(void)\n.globl _Z6c_eq_sv\n_Z6c_eq_sv:\n\n.set back_chain, -0x10\n.set var_8, -8\n.set var_4, -4\n.set sender_lr, 4\n\n                stwu      r1, back_chain(r1)\n                mflr      r0\n                stw       r0, 0x10+sender_lr(r1)\n                stw       r30, 0x10+var_8(r1)\n                stw       r31, 0x10+var_4(r1)\n                mr        r31, r1\n                bl        c\n                mr        r9, r3\n                extsh     r30, r9\n                bl        s\n                mr        r9, r3\n                xor       r9, r30, r9\n                cntlzw    r9, r9\n                srwi      r9, r9, 5\n                clrlwi    r9, r9, 24\n                mr        r3, r9\n                addi      r11, r31, 0x10\n                lwz       r0, 4(r11)\n                mtlr      r0\n                lwz       r30, -8(r11)\n                lwz       r31, -4(r11)\n                mr        r1, r11\n                blr\n# End of        function c_eq_s(void)\n</code></pre> <p>{% endtab %}</p> <p>{% tab title=\"Pseudocode\" %}</p> <pre><code>bool c_eq_s(void)\n{\n  int v0; // r30@1\n\n  v0 = c();\n  return v0 == s();\n}\n</code></pre> <p>{% endtab %}</p>"},{"location":"user-guide/decompiler/introduction-to-decompilation-vs-disassembly/comparisons-of-powerpc-disassembly-and-decompilation.html#64-bit-comparison","title":"64-bit comparison","text":"<p>64-bit comparison usually involves several compare and branch instructions which do not improve the code readability.</p> <p>{% tabs %}</p> <pre><code>.globl i_ge_uh\ni_ge_uh:\n\n.set back_chain, -0x10\n.set var_4, -4\n\n                stwu      r1, back_chain(r1)\n                stw       r31, 0x10+var_4(r1)\n                mr        r31, r1\n                lis       r9, i@ha\n                lwz       r9, i@l(r9)\n                mr        r8, r9\n                srawi     r9, r9, 0x1F\n                mr        r7, r9\n                lis       r9, uh@ha\n                addi      r9, r9, uh@l\n                lwz       r10, (uh+4 - uh)(r9)\n                lwz       r9, 0(r9)\n                cmplw     cr7, r9, r7\n                bgt       cr7, loc_7028\n                cmplw     cr7, r9, r7\n                bne       cr7, loc_7020\n                cmplw     cr7, r10, r8\n                bgt       cr7, loc_7028\nloc_7020:\n                li        r9, 1\n                b         loc_702C\nloc_7028:\n                li        r9, 2\nloc_702C:\n                mr        r3, r9\n                addi      r11, r31, 0x10\n                lwz       r31, -4(r11)\n                mr        r1, r11\n                blr\n# End of      function i_ge_uh\n</code></pre> <p>{% endtab %}</p> <p>{% tab title=\"Pseudocode\" %}</p> <pre><code>signed int i_ge_uh()\n{\n  signed int v0; // r9@2 7029 TYPED\n\n  if ( uh unsigned __int64)i )\n      v0 = 1;\n  else\n      v0 = 2;\n  return v0;\n}\n\n</code></pre> <p>{% endtab %}</p>"},{"location":"user-guide/decompiler/introduction-to-decompilation-vs-disassembly/comparisons-of-powerpc-disassembly-and-decompilation.html#system-calls","title":"System calls","text":"<p>System call is always mysterious, but decompiler helps you with its name and arguments.</p> <p>{% tabs %}</p> <pre><code> mr        r3, r26 # set\n                bl .sigfillset\n                li        r0, 0xAE\n                li        r3, 2\n                mr        r4, r26\n                mr        r5, r29\n                li        r6, 8\n                sc\n                mfcr      r0\n                lwz       r5, (off_F9A704C - dword_F9A7130)(r30) # sub_F9920A4 # start_routine\n                mr        r4, r31 # attr\n                mr        r6, r28 # arg\n                addi      r3, r1, 0x180+var_54 # newthread\n                bl .pthread_create\n                li        r0, 0xAE\n                mr        r26, r3\n                mr        r4, r29\n                li        r3, 2\n                li        r5, 0\n                li        r6, 8\n                sc\n                mfcr      r0\n                mr        r3, r31 # attr\n                bl .pthread_attr_destroy\n</code></pre> <p>{% endtab %}</p> <p>{% tab title=\"Pseudocode\" %}</p> <pre><code>...\nsigset_t v36; // [sp+8h] [-178h]@47 F992C04 TYPED\nsigset_t v37; // [sp+88h] [-F8h]@47 F992BEC TYPED\npthread_attr_t v38; // [sp+108h] [-78h]@47 F992BC4 TYPED\n__int16 v39; // [sp+12Ch] [-54h]@47 F992C1C\n...\n\n_sigfillset(&amp;v37);\nv29 = linux_syscall(__NR_rt_sigprocmask, 2, &amp;v37, &amp;v36);\nv30 = _pthread_create((pthread_t *)&amp;v39, &amp;v38, (void *(*)(void *))0x93C10018, v11);\nv31 = linux_syscall(__NR_rt_sigprocmask, 2, &amp;v36, 0);\n_pthread_attr_destroy(&amp;v38);\n</code></pre> <p>{% endtab %}</p>"},{"location":"user-guide/decompiler/introduction-to-decompilation-vs-disassembly/comparisons-of-powerpc-disassembly-and-decompilation.html#compiler-helpers","title":"Compiler helpers","text":"<p>Compiler sometime uses helpers and decompiler knows the meaning of the many helpers and uses it to simplify code.</p> <p>{% tabs %}</p> <pre><code>.globl lldiv # weak\nlldiv:\n\n.set back_chain, -0x30\n.set var_18, -0x18\n.set var_14, -0x14\n.set var_10, -0x10\n.set var_C, -0xC\n.set var_8, -8\n.set var_4, -4\n.set sender_lr, 4\n\n                stwu      r1, back_chain(r1)\n                mflr      r0\n                stw       r28, 0x30+var_10(r1)\n                mr        r28, r5\n                stw       r29, 0x30+var_C(r1)\n                mr        r29, r6\n                stw       r31, 0x30+var_4(r1)\n                mr        r5, r7\n                mr        r31, r3\n                mr        r6, r8\n                mr        r3, r28\n                mr        r4, r29\n                stw       r0, 0x30+sender_lr(r1)\n                stw       r26, 0x30+var_18(r1)\n                mr        r26, r7\n                stw       r27, 0x30+var_14(r1)\n                mr        r27, r8\n                stw       r30, 0x30+var_8(r1)\n                bl        __divdi3\n                stw       r3, 0(r31)\n                mr        r5, r26\n                stw       r4, 4(r31)\n                mr        r6, r27\n                mr        r3, r28\n                mr        r4, r29\n                bl        __moddi3\n                lwz       r0, 0x30+sender_lr(r1)\n                stw       r3, 8(r31)\n                mr        r3, r31\n                stw       r4, 0xC(r31)\n                mtlr      r0\n                lwz       r26, 0x30+var_18(r1)\n                lwz       r27, 0x30+var_14(r1)\n                lwz       r28, 0x30+var_10(r1)\n                lwz       r29, 0x30+var_C(r1)\n                lwz       r30, 0x30+var_8(r1)\n                lwz       r31, 0x30+var_4(r1)\n                addi      r1, r1, 0x30\n                blr\n# End of     function lldiv\n\n</code></pre> <p>{% endtab %}</p> <p>{% tab title=\"Pseudocode\" %}</p> <pre><code>__int64 *__fastcall lldiv(__int64 *result, int a2, __int64 a3, __int64 a4)\n{\n    *result = a3 / a4;\n    result[1] = a3 % a4;\n    return result;\n}\n</code></pre> <p>{% endtab %}</p>"},{"location":"user-guide/decompiler/introduction-to-decompilation-vs-disassembly/comparisons-of-powerpc-disassembly-and-decompilation.html#floating-point-arithmetic","title":"Floating point arithmetic","text":"<p>The PowerPC processor contains a number of complex floating point instructions which perform several operations at once. It is not easy to recover an expression from the assembler code but not for the decompiler.</p> <p>{% tabs %}</p> <pre><code>                .globl _x2y2m1f\n_x2y2m1f:\n                lis  r9, unk_20@ha\n                lfs  f0, unk_20@l(r9)\n                fsub     f12, f1, f0\n                fadd     f0, f1, f0\n                fmul     f0, f12, f0\n                fmadd    f1, f1, f2, f0\n                blr\n# End of    function _x2y2m1f\n</code></pre> <p>{% endtab %}</p> <p>{% tab title=\"Pseudocode\" %}</p> <pre><code>double __fastcall x2y2m1f(double a1, double a2)\n{\n    return a1 * ((a1 - 1.0) * (a1 + 1.0)) + a2;\n}\n</code></pre> <p>{% endtab %}</p>"},{"location":"user-guide/decompiler/introduction-to-decompilation-vs-disassembly/comparisons-of-powerpc-disassembly-and-decompilation.html#magic-multiplicationdivision-operations","title":"Magic multiplication/division operations","text":"<p>Compilers can decompose a multiplication/division instruction into a sequence of cheaper instructions (additions, shifts, etc). This example demonstrates how the decompiler recognizes them and coagulates back to the original operation.</p> <p>{% tabs %}</p> <pre><code># __int64 __fastcall int_u_mod_10()\n                .globl int_u_mod_10\nint_u_mod_10:\n\n.set back_chain, -0x20\n.set var_C, -0xC\n.set var_8, -8\n.set var_4, -4\n.set sender_lr, 4\n\n                stwu      r1, back_chain(r1)\n                mflr      r0\n                stw       r0, 0x20+sender_lr(r1)\n                stw       r29, 0x20+var_C(r1)\n                stw       r30, 0x20+var_8(r1)\n                stw       r31, 0x20+var_4(r1)\n                mr        r31, r1\n                bl        u\n                mr        r10, r3\n                lis       r9, -0x3334\n                ori       r9, r9, 0xCCCD # 0xCCCCCCCD\n                mulhwu    r9, r10, r9\n                srwi      r9, r9, 3\n                mulli     r9, r9, 0xA\n                subf      r9, r9, r10\n                mr        r30, r9\n                li        r29, 0\n                mr        r9, r29\n                mr        r10, r30\n                mr        r3, r9\n                mr        r4, r10\n                addi      r11, r31, 0x20\n                lwz       r0, 4(r11)\n                mtlr      r0\n                lwz       r29, -0xC(r11)\n                lwz       r30, -8(r11)\n                lwz       r31, -4(r11)\n                mr        r1, r11\n                blr\n# End of      function int_u_mod_10\n\n</code></pre> <p>{% endtab %}</p> <p>{% tab title=\"Pseudocode\" %}</p> <pre><code>__int64 __fastcall int_u_mod_10()\n{\n    return u() % 0xAu;\n}\n</code></pre> <p>{% endtab %}</p>"},{"location":"user-guide/decompiler/introduction-to-decompilation-vs-disassembly/comparisons-of-powerpc-disassembly-and-decompilation.html#vle-code","title":"VLE code","text":"<p>This example demonstrates that the decompiler can handle VLE code without problems.</p> <p>{% tabs %}</p> <pre><code>sub_498E:\n                se_mr     r6, r3\n                se_mr     r7, r4\n                se_add    r7, r6\n                se_subi   r7, 1\n                se_li     r5, 0\n                se_b      loc_49A2\n# ---------------------------------------------------------------------------\nloc_499A:\n                se_lbz    r4, 0(r6)\n                se_add    r5, r4\n                se_extzh  r5\n                se_addi   r6, 1\nloc_49A2:\n                se_cmpl   r6, r7\n                se_ble    loc_499A\n                se_mr     r7, r5\n                se_mr     r3, r7\n                se_blr\n# End of function sub_498E\n</code></pre> <p>{% endtab %}</p> <p>{% tab title=\"Pseudocode\" %}</p> <pre><code>int __fastcall sub_498E(unsigned __int8 *a1, int a2)\n{\n  unsigned __int8 *v2; // r6@1 498F TYPED\n  int v3; // r5@1 4997\n\n  v2 = a1;\n  v3 = 0;\n  while ( v2 a1[a2 - 1] )\n    v3 = (unsigned __int16)(v3 + *v2++);\n  return v3;\n}\n\n</code></pre> <p>{% endtab %}</p>"},{"location":"user-guide/decompiler/introduction-to-decompilation-vs-disassembly/comparisons-of-powerpc-disassembly-and-decompilation.html#interactive-decompiler","title":"Interactive decompiler","text":"<p>The pseudocode is not something static because the decompiler is interactive the same way as IDA. You can change variable types and names, change function prototypes, add comments and more. The example above presents the result after these modifications.</p> <p>Surely the result is not ideal, and there is a lot of room for improvement, but we hope that you got the idea.</p> <p>And you can compare the result with the original: http://lxr.free-electrons.com/source/fs/fat/namei_msdos.c#L224</p> <p>{% tabs %}</p> <pre><code># int __fastcall msdos_add_entry(struct inode *_dir, const unsigned __int8 *name, int is_dir, int is_hid,\nint cluster, struct timespec *_ts, struct fat_slot_info *_sinfo)\nmsdos_add_entry:\n\n.set back_chain, -0x50\n.set de, -0x48\n.set date, -0x28\n.set time, -0x26\n.set var_14, -0x14\n.set sender_lr, 4\n\n                mflr      r0\n                stw       r0, sender_lr(r1)\n                bl        _mcount\n                stwu      r1, back_chain(r1)\n                mflr      r0\n                stmw      r27, 0x50+var_14(r1)\n                stw       r0, 0x50+sender_lr(r1)\n                subfic    r5, r5, 0\n                mr.       r30, r6\n                lwz       r0, 0(r4)\n                subfe     r10, r10, r10\n                mr        r31, r3\n                lwz       r11, 4(r4)\n                lwz       r3, 0x1C(r3)\n                clrrwi    r10, r10, 4\n                mr        r29, r7\n                lhz       r5, 8(r4)\n                addi      r10, r10, 0x20\n                mr        r28, r8\n                lbz       r6, 0xA(r4)\n                mr        r27, r9\n                lwz       r3, 0x2B8(r3)\n                stw       r0, 0x50+de(r1)\n                stw       r11, 0x50+de.name+4(r1)\n                sth       r5, 0x50+de.name+8(r1)\n                stb       r6, 0x50+de.name+0xA(r1)\n                stb       r10, 0x50+de.attr(r1)\n                beq       loc_728\n                ori       r10, r10, 2\n                li        r9, 0\n                li        r7, 0\n                addi      r6, r1, 0x50+date\n                stb       r10, 0x50+de.attr(r1)\n                addi      r5, r1, 0x50+time\n                mr        r4, r8\n                stb       r9, 0x50+de.lcase(r1)\n                bl        fat_time_unix2fat\n                lhz       r9, 0x50+time(r1)\n                li        r10, 0\n                sth       r10, 0x50+de.adate(r1)\n                sth       r9, 0x50+de.time(r1)\n                lhz       r9, 0x50+date(r1)\n                sth       r10, 0x50+de.cdate(r1)\n                sth       r10, 0x50+de.ctime(r1)\n                stb       r10, 0x50+de.ctime_cs(r1)\n                sth       r9, 0x50+de.date(r1)\nloc_698:\n                addi      r10, r1, 0x50+de.start\n                srawi     r9, r29, 0x10\n                sthbrx    r29, r0, r10\n                addi      r10, r1, 0x50+de.starthi\n                mr        r6, r27\n                sthbrx    r9, r0, r10\n                li        r5, 1\n                li        r9, 0\n                addi      r4, r1, 0x50+de\n                mr        r3, r31\n                stw       r9, 0x50+de.size(r1)\n                bl        fat_add_entries\n                mr.       r30, r3\n                bne       loc_710\n                lwz       r10, 0(r28)\n                lwz       r11, 4(r28)\n                stw       r10, 0x48(r31)\n                stw       r10, 0x50(r31)\n                stw       r11, 0x4C(r31)\n                stw       r11, 0x54(r31)\n                lwz       r9, 0x1C(r31)\n                lwz       r9, 0x34(r9)\n                andi.     r10, r9, 0x90\n                bne       loc_704\n                lwz       r9, 0xC(r31)\n                andi.     r10, r9, 0x41\n                beq       loc_768\nloc_704:\n                mr        r3, r31       # struct inode *\n                li        r30, 0\n                bl        fat_sync_inode\nloc_710:\n                mr        r3, r30\n                lwz       r0, 0x50+sender_lr(r1)\n                lmw       r27, 0x50+var_14(r1)\n                addi      r1, r1, 0x50\n                mtlr      r0\n                blr\n# ---------------------------------------------------------------------------\nloc_728:\n                li        r7, 0\n                addi      r6, r1, 0x50+date\n                stb       r30, 0x50+de.lcase(r1)\n                addi      r5, r1, 0x50+time\n                mr        r4, r8\n                bl        fat_time_unix2fat\n                li        r9, 0\n                sth       r30, 0x50+de.adate(r1)\n                stb       r9, 0x50+de.ctime_cs(r1)\n                lhz       r9, 0x50+time(r1)\n                sth       r30, 0x50+de.cdate(r1)\n                sth       r9, 0x50+de.time(r1)\n                lhz       r9, 0x50+date(r1)\n                sth       r30, 0x50+de.ctime(r1)\n                sth       r9, 0x50+de.date(r1)\n                b         loc_698\n# ---------------------------------------------------------------------------\nloc_768:\n                mr        r3, r31       # struct inode *\n                li        r4, 7\n                bl        __mark_inode_dirty\n                mr        r3, r3\n                lwz       r0, 0x50+sender_lr(r1)\n                lmw       r27, 0x50+var_14(r1)\n                addi      r1, r1, 0x50\n                mtlr      r0\n                blr\n# End of       function msdos_add_entry\n</code></pre> <p>{% endtab %}</p> <p>{% tab title=\"Pseudocode\" %}</p> <pre><code>int __fastcall msdos_add_entry(struct inode *dir, const unsigned __int8 *name, int is_dir, int is_hid,\n                               int cluster, struct timespec *ts, struct fat_slot_info *sinfo)\n{\n  __int16 zero; // r30@1 601\n  bool not_hidden; // cr34@1 601 TYPED\n  int v10; // r11@1 611\n  signed int v11; // r10@1 619 TYPED\n  __int16 v13; // r5@1 621\n  __u8 node_attrs; // r10@1 625 TYPED\n  __u8 v16; // r6@1 62D TYPED\n  struct msdos_sb_info *sbi; // r3@1 635 TYPED\n  int err; // r30@3 6C9 TYPED\n  __time_t sec; // r10@4 6D1 TYPED\n  __syscall_slong_t nsec; // r11@4 6D5 TYPED\n  struct msdos_dir_entry de; // [sp+8h] [-48h]@1 639 TYPED\n  __le16 date; // [sp+28h] [-28h]@2 670 TYPED\n  __le16 time; // [sp+2Ah] [-26h]@2 670 TYPED\n\n  zero = is_hid;\n  not_hidden = is_hid == 0;\n  v10 = *((_DWORD *)name + 1);\n  v11 = (unsigned int)is_dir &lt;= 0 ? 0 : -16;\n  v13 = *((_WORD *)name + 4);\n  node_attrs = v11 + ATTR_ARCH;                 // ATTR_ARCH or ATTR_DIR\n  v16 = name[10];\n  sbi = (struct msdos_sb_info *)dir-&gt;i_sb-&gt;s_fs_info;\n  *(_DWORD *)&amp;de.name[0] = *(_DWORD *)name;     // memcpy(&amp;de.name[0], name, 12);\n  *(_DWORD *)&amp;de.name[4] = v10;                 // ...\n  *(_WORD *)&amp;de.name[8] = v13;                  // ...\n  de.name[10] = v16;\n  de.attr = node_attrs;\n  if ( not_hidden )\n  {\n    de.lcase = zero;                            // = 0\n    fat_time_unix2fat(sbi, ts, &amp;time, &amp;date, 0);\n    de.adate = zero;\n    de.ctime_cs = 0;\n    de.cdate = zero;\n    de.time = time;\n    de.ctime = zero;\n    de.date = date;\n  }\n  else\n  {\n    de.attr = node_attrs | ATTR_HIDDEN;\n    de.lcase = 0;\n    fat_time_unix2fat(sbi, ts, &amp;time, &amp;date, 0);\n    de.adate = 0;\n    de.time = time;\n    de.cdate = 0;\n    de.ctime = 0;\n    de.ctime_cs = 0;\n    de.date = date;\n  }\n  de.start = _byteswap_ushort(cluster);\n  de.starthi = _byteswap_ushort(HIWORD(cluster));\n  de.size = 0;\n  err = fat_add_entries(dir, &amp;de, 1, sinfo);\n  if ( err )\n    return err;\n  sec = ts-&gt;tv_sec;\n  nsec = ts-&gt;tv_nsec;\n  dir-&gt;i_mtime.tv_sec = ts-&gt;tv_sec;\n  dir-&gt;i_ctime.tv_sec = sec;\n  dir-&gt;i_mtime.tv_nsec = nsec;\n  dir-&gt;i_ctime.tv_nsec = nsec;\n  if ( dir-&gt;i_sb-&gt;s_flags &amp; (MS_DIRSYNC|MS_SYNCHRONOUS) || dir-&gt;i_flags &amp; (S_DIRSYNC|S_SYNC) )\n  {\n    err = 0;\n    fat_sync_inode(dir);\n    return err;\n  }\n  _mark_inode_dirty(dir);\n  return 0;\n}\n\n</code></pre> <p>{% endtab %}</p>"},{"location":"user-guide/decompiler/introduction-to-decompilation-vs-disassembly/hex-rays-v7.2-vs-v7.1-decompiler-comparison-page.html","title":"Hex-Rays v7.2 vs. v7.1 Decompiler Comparison Page","text":"<p>Below you will find side-by-side comparisons of v7.1 and v7.2 decompilations. Please maximize the window too see both columns simultaneously.</p> <p>The following examples are displayed on this page:</p> <ol> <li>Magic divisions in 64-bit code</li> <li>More aggressive 'if' to 'boolean' folding</li> <li>Better type of 'this' argument</li> <li>Improved union field selection</li> <li>Improved recognition of 'for' loops</li> <li>Added support for shifted pointers</li> <li>Better recognition of inlined standard functions</li> <li>Improved application of pre-increment and pre-decrement</li> <li>Added support for RRX addressing mode in ARM</li> <li>Improved constant propagation in global memory</li> <li>Added support for Objective C blocks</li> <li>Improved recognition of 64-bit comparisons</li> <li>Merged common code in 'if' branches</li> <li>Added forced stack variables</li> <li>Added support for virtual calls</li> </ol> <p>NOTE: these are just some selected examples that can be illustrated as side-by-side differences. There are many other improvements and new features that are not mentioned on this page.</p>"},{"location":"user-guide/decompiler/introduction-to-decompilation-vs-disassembly/hex-rays-v7.2-vs-v7.1-decompiler-comparison-page.html#magic-divisions-in-64-bit-code","title":"Magic divisions in 64-bit code","text":"<p>In the past the Decompiler was able to recognize magic divisions in 32-bit code. We now support magic divisions in 64-bit code too.</p> <p>{% tabs %}</p> <pre><code>return 21600 * (t / 21600);\n</code></pre> <p>{% endtab %}</p> <p>{% tab title=\"PSEUDOCODE V7.1\" %}</p> <pre><code>  return 21600\n       * (((signed __int64)((unsigned __int128)(1749024623285053783LL\n         * (signed __int128)t) &gt;&gt; 64) &gt;&gt; 11) - (t &gt;&gt; 63));\n</code></pre> <p>{% endtab %}</p>"},{"location":"user-guide/decompiler/introduction-to-decompilation-vs-disassembly/hex-rays-v7.2-vs-v7.1-decompiler-comparison-page.html#more-aggressive-if-to-boolean-folding","title":"More aggressive 'if' to 'boolean' folding","text":"<p>More aggressive folding of if_one_else_zero constructs; the output is much shorter and easier to grasp.</p> <p>{% tabs %}</p> <pre><code>return a1 &lt;&lt; 28 != 0 &amp;&amp; (a1 &amp; (unsigned __int8)(a1 - 1)) == 0;\n</code></pre> <p>{% endtab %}</p> <p>{% tab title=\"PSEUDOCODE V7.1\" %}</p> <pre><code>  v1 = 1;\n  v2 = 1;\n  if ( !(a1 &lt;&lt; 28) )\n    v2 = 0;\n  if ( !((unsigned __int8)a1 &amp; (unsigned __int8)(a1 - 1)) )\n    v1 = 0;\n  return v2 &amp;&amp; !v1;\n</code></pre> <p>{% endtab %}</p>"},{"location":"user-guide/decompiler/introduction-to-decompilation-vs-disassembly/hex-rays-v7.2-vs-v7.1-decompiler-comparison-page.html#better-type-of-this-argument","title":"Better type of 'this' argument","text":"<p>The decompiler tries to guess the type of the first argument of a constructor. This leads to improved listing.</p> <p>{% tabs %}</p> <pre><code>XImage *__fastcall XImage::setHotSpot(XImage *this, int a2, int a3)\n{\n  LOWORD(this-&gt;height) = a2;\n  HIWORD(this-&gt;height) = a3;\n  return this;\n}\n</code></pre> <p>{% endtab %}</p> <p>{% tab title=\"PSEUDOCODE V7.1\" %}</p> <pre><code>int __fastcall XImage::setHotSpot(int this, int a2, int a3)\n{\n  *(_WORD *)(this + 4) = a2;\n  *(_WORD *)(this + 6) = a3;\n  return this;\n}\n</code></pre> <p>{% endtab %}</p>"},{"location":"user-guide/decompiler/introduction-to-decompilation-vs-disassembly/hex-rays-v7.2-vs-v7.1-decompiler-comparison-page.html#improved-union-field-selection","title":"Improved union field selection","text":"<p>The decompiler has a better algorithm to find the correct union field. This reduces the number of casts in the output.</p> <p>{% tabs %}</p> <pre><code>float __fastcall ret4f(__n128 a1)\n{\n  return a1.n128_f32[2];\n}\n</code></pre> <p>{% endtab %}</p> <p>{% tab title=\"PSEUDOCODE V7.1\" %}</p> <pre><code>float __fastcall ret4f(__n128 a1)\n{\n  return *(float *)&amp;a1.n128_u32[2];\n}\n</code></pre> <p>{% endtab %}</p>"},{"location":"user-guide/decompiler/introduction-to-decompilation-vs-disassembly/hex-rays-v7.2-vs-v7.1-decompiler-comparison-page.html#improved-recognition-of-for-loops","title":"Improved recognition of 'for' loops","text":"<p>We improved recognition of 'for' loops, they are shorter and much easier to understand.</p> <p>{% tabs %}</p> <pre><code>  for ( i = 0; i &lt; 16; ++i )\n  {\n    printf(\"%x\", *(unsigned __int8 *)(i + v2) &gt;&gt; 4);\n    printf(\"%x\", *(_BYTE *)(i + v2) &amp; 0xF);\n  }\n</code></pre> <p>{% endtab %}</p> <p>{% tab title=\"PSEUDOCODE V7.1\" %}</p> <pre><code>v3 = 0;\ndo\n{\n  printf(\"%x\", (unsigned int)*(unsigned __int8 *)(v3 + v2) &gt;&gt; 4);\n  printf(\"%x\", *(_BYTE *)(v3++ + v2) &amp; 0xF);\n}\nwhile ( v3 &lt; 16 );\n</code></pre> <p>{% endtab %}</p>"},{"location":"user-guide/decompiler/introduction-to-decompilation-vs-disassembly/hex-rays-v7.2-vs-v7.1-decompiler-comparison-page.html#added-support-for-shifted-pointers","title":"Added support for shifted pointers","text":"<p>Please note that the code on the left is completely illegible; the assembler code is probably easier to work with in this case.\\ However, the code on the right is very neat.\\ JFYI, below is the class hierarchy for this example:</p> <pre><code>struct __cppobj B1\n{\n  B1_vtbl *__vftable /*VFT*/;\n  char d1[4];\n};\nstruct __cppobj B2\n{\n  B2_vtbl *__vftable /*VFT*/;\n  char d2[4];\n};\nstruct __cppobj A : B1, B2\n{\n  char d3[4];\n};\n\n</code></pre> <p>Also please note that the source code had</p> <pre><code>A::a2(A *this)\n</code></pre> <p>but at the assembler level we have</p> <pre><code>A::a2(B2 *this)\n</code></pre> <p>Visual Studio plays such tricks.</p> <p>{% tabs %}</p> <pre><code>int __thiscall A::a2(B2 *__shifted(A,8) this)\n{\n  printf(\"A::a2 %p\\n\", ADJ(this));\n  printf(\"A::d2 %p\\n\", ADJ(this)-&gt;d2);\n  return ADJ(this)-&gt;d3[0];\n}\n</code></pre> <p>{% endtab %}</p> <p>{% tab title=\"PSEUDOCODE V7.1\" %}</p> <pre><code>int __thiscall A::a2(B2 *this)\n{\n  B2 *v1; // ST08_4\n\n  v1 = this;\n  printf(\"A::a2 %p\\n\", this - 1);\n  printf(\"A::d2 %p\\n\", (char *)v1 + 4);\n  return *((char *)v1 + 8);\n}\n</code></pre> <p>{% endtab %}</p>"},{"location":"user-guide/decompiler/introduction-to-decompilation-vs-disassembly/hex-rays-v7.2-vs-v7.1-decompiler-comparison-page.html#better-recognition-of-inlined-standard-functions","title":"Better recognition of inlined standard functions","text":"<p>Yes, the code on the left and on the right do the same. We prefer the right side, very much.</p> <p>{% tabs %}</p> <pre><code>if ( !memcmp(i + 10, \"AMIBIOSC\", 8u) )\n      return i + 10;\n</code></pre> <p>{% endtab %}</p> <p>{% tab title=\"PSEUDOCODE V7.1\" %}</p> <pre><code>    v2 = 0;\n    v3 = 1;\n    v4 = i + 10;\n    v5 = \"AMIBIOSC\";\n    v6 = 8;\n    do\n    {\n      if ( !v6 )\n        break;\n      v2 = *v4 &lt; (const unsigned __int8)*v5;\n      v3 = *v4++ == *v5++;\n      --v6;\n    }\n    while ( v3 );\n    if ( (!v2 &amp;&amp; !v3) == v2 )\n      return i + 10;\n\n</code></pre> <p>{% endtab %}</p>"},{"location":"user-guide/decompiler/introduction-to-decompilation-vs-disassembly/hex-rays-v7.2-vs-v7.1-decompiler-comparison-page.html#improved-application-of-pre-increment-and-pre-decrement","title":"Improved application of pre-increment and pre-decrement","text":"<p>Minor stuff, one would say, and we'd completely agree. However, these minor details make reading the output a pleasure.</p> <p>{% tabs %}</p> <pre><code>    v5 = *++v4;\n    result = --a4;\n</code></pre> <p>{% endtab %}</p> <p>{% tab title=\"PSEUDOCODE V7.1\" %}</p> <pre><code>    v5 = (v4++)[1];\n    result = a4-- - 1;\n</code></pre> <p>{% endtab %}</p>"},{"location":"user-guide/decompiler/introduction-to-decompilation-vs-disassembly/hex-rays-v7.2-vs-v7.1-decompiler-comparison-page.html#added-support-for-rrx-addressing-mode-in-arm","title":"Added support for RRX addressing mode in ARM","text":"<p>This is a rare addressing mode that is nevertheless used by compilers. Now we support it nicely.</p> <p>{% tabs %}</p> <pre><code>__int64 __fastcall sar64(__int64 a1)\n{\n  return a1 &gt;&gt; 1;\n}\n</code></pre> <p>{% endtab %}</p> <p>{% tab title=\"PSEUDOCODE V7.1\" %}</p> <pre><code>__int64 __fastcall sar64(__int64 a1)\n{\n  __int64 result; // r0\n\n  SHIDWORD(a1) &gt;&gt;= 1;\n  __asm { MOV     R0, R0,RRX }\n  return result;\n}\n</code></pre> <p>{% endtab %}</p>"},{"location":"user-guide/decompiler/introduction-to-decompilation-vs-disassembly/hex-rays-v7.2-vs-v7.1-decompiler-comparison-page.html#improved-constant-propagation-in-global-memory","title":"Improved constant propagation in global memory","text":"<p>The new decompiler managed to disentangle the obfuscation code and convert it into a nice strcpy()</p> <p>{% tabs %}</p> <pre><code>strcpy((char *)&amp;dword_1005DF9A, \"basic_string\");\n</code></pre> <p>{% endtab %}</p> <p>{% tab title=\"PSEUDOCODE V7.1\" %}</p> <pre><code>  dword_1005DF9A = 0xADB0A3A3;\n  dword_1005DF9E = 0xBCB499A6;\n  dword_1005DFA2 = 0xABA5A3BB;\n  LOBYTE(dword_1005DF9A) = 'b';\n  BYTE1(dword_1005DF9A) ^= 0xC2u;\n  HIWORD(dword_1005DF9A) = 'is';\n  LOBYTE(dword_1005DF9E) = 'c';\n  BYTE1(dword_1005DF9E) ^= 0xC6u;\n  HIWORD(dword_1005DF9E) = 'ts';\n  LOBYTE(dword_1005DFA2) = 'r';\n  BYTE1(dword_1005DFA2) ^= 0xCAu;\n  HIWORD(dword_1005DFA2) = 'gn';\n  byte_1005DFA6 = 0;\n</code></pre> <p>{% endtab %}</p>"},{"location":"user-guide/decompiler/introduction-to-decompilation-vs-disassembly/hex-rays-v7.2-vs-v7.1-decompiler-comparison-page.html#added-support-for-objective-c-blocks","title":"Added support for Objective C blocks","text":"<p>The new version knows about ObjC blocks and can represent them correctly in the output. See <code>Edit, Other, Objective-C</code> submenu in IDA, it contains the necessary actions to analyze the blocks.</p> <p>{% tabs %}</p> <pre><code>__int64 __fastcall sub_181450634(__int64 a1, __int64 a2, __int64 a3)\n{\n  Block_layout_18145064C blk; // [xsp+0h] [xbp-30h]\n\n  blk.isa = _NSConcreteStackBlock;\n  *(_QWORD *)&amp;blk.flags = 0x42000000LL;\n  blk.invoke = sub_181450694;\n  blk.descriptor = (Block_descriptor_1 *)&amp;unk_1B0668958;\n  blk.lvar1 = *(_QWORD *)(a1 + 32);\n  blk.lvar2 = a3;\n  return sub_18144BD0C(a2, &amp;blk);\n}\n</code></pre> <p>{% endtab %}</p> <p>{% tab title=\"PSEUDOCODE V7.1\" %}</p> <pre><code>__int64 __fastcall sub_181450634(__int64 a1, __int64 a2, __int64 a3)\n{\n  void *(*v4)[32]; // [xsp+0h] [xbp-30h]\n  __int64 v5; // [xsp+8h] [xbp-28h]\n  __int64 (__fastcall *v6)(); // [xsp+10h] [xbp-20h]\n  void *v7; // [xsp+18h] [xbp-18h]\n  __int64 v8; // [xsp+20h] [xbp-10h]\n  __int64 v9; // [xsp+28h] [xbp-8h]\n\n  v4 = _NSConcreteStackBlock;\n  v5 = 1107296256LL;\n  v6 = sub_181450694;\n  v7 = &amp;unk_1B0668958;\n  v8 = *(_QWORD *)(a1 + 32);\n  v9 = a3;\n  return sub_18144BD0C(a2, &amp;v4);\n}\n</code></pre> <p>{% endtab %}</p>"},{"location":"user-guide/decompiler/introduction-to-decompilation-vs-disassembly/hex-rays-v7.2-vs-v7.1-decompiler-comparison-page.html#improved-recognition-of-64-bit-comparisons","title":"Improved recognition of 64-bit comparisons","text":"<p>We continue to improve recognition of 64-bit arithmetics. While it is impossible to handle all cases, we do not give up.</p> <p>{% tabs %}</p> <pre><code>  gettimeofday(&amp;tv, 0);\n  v0 = 90 * (v3 / 1000 + 1000LL * *(_QWORD *)&amp;tv);\n  if ( v0 &lt; 0xFFFFFFFFFFFFFFFFLL )\n    stamp = 90 * (v3 / 1000 + 1000LL * *(_QWORD *)&amp;tv);\n</code></pre> <p>{% endtab %}</p> <p>{% tab title=\"PSEUDOCODE V7.1\" %}</p> <pre><code>  gettimeofday(&amp;tv, 0);\n  v0 = 1000LL * (unsigned int)tv.tv_usec;\n  HIDWORD(v0) = (unsigned __int64)(1000LL * *(_QWORD *)&amp;tv) &gt;&gt; 32;\n  v1 = 90LL * (unsigned int)(v4 / 1000 + v0);\n  HIDWORD(v1) = (unsigned __int64)(90 * (v4 / 1000 + v0)) &gt;&gt; 32;\n  if ( HIDWORD(v1) &lt; 0xFFFFFFFF || -1 == HIDWORD(v1) &amp;&amp; (unsigned int)stamp &gt; (unsigned int)v1 )\n    stamp = v1;\n</code></pre> <p>{% endtab %}</p>"},{"location":"user-guide/decompiler/introduction-to-decompilation-vs-disassembly/hex-rays-v7.2-vs-v7.1-decompiler-comparison-page.html#merged-common-code-in-if-branches","title":"Merged common code in 'if' branches","text":"<p>Yet another optimization rule that lifts common code from 'if' branches. We made it even more aggressive.</p> <p>{% tabs %}</p> <pre><code>    mywcscpy();\n    if ( a3 &lt; 0 )\n      v4 = -a3;\n</code></pre> <p>{% endtab %}</p> <p>{% tab title=\"PSEUDOCODE V7.1\" %}</p> <pre><code>    if ( a3 &gt;= 0 )\n    {\n      mywcscpy();\n    }\n    else\n    {\n      mywcscpy();\n      v4 = -a3;\n    }\n</code></pre> <p>{% endtab %}</p>"},{"location":"user-guide/decompiler/introduction-to-decompilation-vs-disassembly/hex-rays-v7.2-vs-v7.1-decompiler-comparison-page.html#added-forced-stack-variables","title":"Added forced stack variables","text":"<p>Sometimes compilers reuse the same stack slot for different purposes. Many our users asked us to add a feature to handle this situation. The new decompiler addresses this issue by adding a command to force creation of a new variable at the specified point. Currently we support only aliasable stack variables because this is the most common case.</p> <p>In the sample above the slot of the <code>p_data_format</code> variable is reused. Initially it holds a pointer to an integer (data_format) and then it holds a simple integer (errcode). Previous versions of the decompiler could not handle this situation nicely and the output would necessarily have casts and quite difficult to read. The two different uses of the slot would be represented just by one variable. You can see it in the left listing.</p> <p>The new version produces clean code and displays two variables. Naturally it happens after applying the <code>force new variable</code> command.</p> <p>{% tabs %}</p> <pre><code>    data_format = *p_data_format;\n    if ( *p_data_format &lt; 0 || data_format &gt; 13 )\n    {\n      errcode = 2;\n      SetError(&amp;this-&gt;status, &amp;errcode, \"format not one of accepted types\");\n    }\n</code></pre> <p>{% endtab %}</p> <p>{% tab title=\"PSEUDOCODE V7.1\" %}</p> <pre><code>    data_format = *p_data_format;\n    if ( *p_data_format &lt; 0 || data_format &gt; 13 )\n    {\n      p_data_format = (int *)2;\n      SetError(&amp;this-&gt;status, (errcode_t *)&amp;p_data_format, \"format not one of accepted types\");\n    }\n</code></pre> <p>{% endtab %}</p>"},{"location":"user-guide/decompiler/introduction-to-decompilation-vs-disassembly/hex-rays-v7.2-vs-v7.1-decompiler-comparison-page.html#added-support-for-virtual-calls","title":"Added support for virtual calls","text":"<p>Well, these listings require no comments, the new version apparently wins!</p> <p>{% tabs %}</p> <pre><code>void __cdecl test3(D7 *a1)\n{\n  a1-&gt;f1(&amp;a1-&gt;A1);\n  a1-&gt;f2(&amp;a1-&gt;D3);\n  a1-&gt;f3(&amp;a1-&gt;D5);\n  a1-&gt;f4(&amp;a1-&gt;A4);\n  a1-&gt;f5(a1);\n  a1-&gt;f6(a1);\n  a1-&gt;g0(&amp;a1-&gt;D5);\n  a1-&gt;g5(&amp;a1-&gt;D5);\n  a1-&gt;g7(a1);\n  if ( a1 )\n    a1-&gt;~D7(a1);\n}\n</code></pre> <p>{% endtab %}</p> <p>{% tab title=\"PSEUDOCODE V7.1\" %}</p> <pre><code>void __cdecl test3(D7 *a1)\n{\n  (**((void (__cdecl ***)(char *))a1 + 12))((char *)a1 + 48);\n  (*(void (__cdecl **)(char *))(*((_DWORD *)a1 + 10) + 12))((char *)a1 + 40);\n  (**((void (__cdecl ***)(char *))a1 + 6))((char *)a1 + 24);\n  (**((void (__cdecl ***)(char *))a1 + 26))((char *)a1 + 104);\n  (**(void (__cdecl ***)(D7 *))a1)(a1);\n  (*(void (__cdecl **)(D7 *))(*(_DWORD *)a1 + 12))(a1);\n  (*(void (__cdecl **)(char *))(*((_DWORD *)a1 + 6) + 4))((char *)a1 + 24);\n  (*(void (__cdecl **)(char *))(*((_DWORD *)a1 + 6) + 16))((char *)a1 + 24);\n  (*(void (__cdecl **)(D7 *))(*(_DWORD *)a1 + 16))(a1);\n  if ( a1 )\n    (*(void (__cdecl **)(D7 *))(*(_DWORD *)a1 + 8))(a1);\n}\n\n</code></pre> <p>{% endtab %}</p>"},{"location":"user-guide/decompiler/introduction-to-decompilation-vs-disassembly/hex-rays-v7.3-vs-v7.2-decompiler-comparison-page.html","title":"Hex-Rays v7.3 vs. v7.2 Decompiler Comparison Page","text":"<p>Below you will find side-by-side comparisons of v7.2 and v7.3 decompilations. Please maximize the window too see both columns simultaneously.</p> <p>The following examples are displayed on this page:</p> <ol> <li>More hexadecimal numbers in the output</li> <li>Support for variable size structures</li> <li>UTF-32 strings are printed inline</li> <li>Better argument detection for printf</li> <li>Better argument detection for scanf</li> <li>Resolved TEB references</li> <li>Better automatic selection of union fields</li> <li>Yet one more example of union fields</li> <li>Improved support for EABI helpers</li> <li>Improved local variable allocation</li> <li>Better recognizition of string references</li> <li>Better handling of structures returned by value</li> <li>More while loops</li> <li>Shorter code</li> <li>Improved recognition of magic divisions</li> <li>Less gotos</li> <li>Division may generate an exception</li> <li>Order of variadic arguments</li> <li>Improved division recognition</li> </ol> <p>NOTE: these are just some selected examples that can be illustrated as side-by-side differences. There are many other improvements and new features that are not mentioned on this page. We just got tired selecting them. Some of the improvements that did not do to this page:</p> <ul> <li>objc-related improvements</li> <li>value range analysis can eliminate more useless code</li> <li>better resolving of got-relative memory references</li> <li>too big shift amounts are converted to lower values (e.g. 33-&gt;1)</li> <li>more for-loops</li> <li>better handling of fragemented variables</li> <li>many other things...</li> </ul>"},{"location":"user-guide/decompiler/introduction-to-decompilation-vs-disassembly/hex-rays-v7.3-vs-v7.2-decompiler-comparison-page.html#more-hexadecimal-numbers-in-the-output","title":"More hexadecimal numbers in the output","text":"<p>When a constant looks nicer as a hexadecimal number, we print it as a hexadecimal number by default. Naturally, beauty is in the eye of the beholder, but the new beahavior will produce more readable code, and less frequently you will fell compelled to change the number representation. By the way, this tiny change is just one of numerious improvements that we keep adding in each release. Most of them go literally unnoticed. It is just this time we decided to talk about them</p> <p>{% tabs %}</p> <pre><code>bool __fastcall ge_100000001(__int64 a1)\n{\n  return a1 &gt;= 0x100000001LL;\n}\n</code></pre> <p>{% endtab %}</p> <p>{% tab title=\"PSEUDOCODE V7.2\" %}</p> <pre><code>bool __fastcall ge_100000001(__int64 a1)\n{\n  return a1 &gt;= 4294967297LL;\n}\n\n</code></pre> <p>{% endtab %}</p>"},{"location":"user-guide/decompiler/introduction-to-decompilation-vs-disassembly/hex-rays-v7.3-vs-v7.2-decompiler-comparison-page.html#support-for-variable-size-structures","title":"Support for variable size structures","text":"<p>EfiBootRecord points to a structure that has RecordExtents[0] as the last member. Such structures are considered as variable size structures in C/C++. Now we handle them nicely.</p> <p>{% tabs %}</p> <pre><code>BlockNumber = EfiBootRecord-&gt;RecordExtents[ExtentIndex64].BlockNumber;\nBlockCount = EfiBootRecord-&gt;RecordExtents[ExtentIndex64].BlockCount;\n\n</code></pre> <p>{% endtab %}</p> <p>{% tab title=\"PSEUDOCODE V7.2\" %}</p> <pre><code>BlockNumber = *(UINT64 *)((char *)&amp;EfiBootRecord[1].BlockHeader.Checksum + ExtentIndex64);\nBlockCount = *(UINT64 *)((char *)&amp;EfiBootRecord[1].BlockHeader.ObjectOid + ExtentIndex64);\n\n</code></pre> <p>{% endtab %}</p>"},{"location":"user-guide/decompiler/introduction-to-decompilation-vs-disassembly/hex-rays-v7.3-vs-v7.2-decompiler-comparison-page.html#utf-32-strings-are-printed-inline","title":"UTF-32 strings are printed inline","text":"<p>We were printing UTF-8 and other string types, UTF-32 was not supported yet. Now we print it with the 'U' prefix.</p> <p>{% tabs %}</p> <pre><code>v3 = std::operator&lt;&lt;&lt;std::char_traits&lt;char&gt;&gt;(&amp;std::cout, U\"This is U\\\"Hello\\\"\n</code></pre> <p>{% endtab %}</p> <p>{% tab title=\"PSEUDOCODE V7.2\" %}</p> <pre><code>    .rodata:0000000000000120  text \"UTF-32LE\", 'This is U\"Hello\"',0\n    ...\n    v10 = std::ostream::operator&lt;&lt;(v9, aThisIsUHello_0);\n\n</code></pre> <p>{% endtab %}</p>"},{"location":"user-guide/decompiler/introduction-to-decompilation-vs-disassembly/hex-rays-v7.3-vs-v7.2-decompiler-comparison-page.html#better-argument-detection-for-printf","title":"Better argument detection for printf","text":"<p>The difference between these outputs is subtle but pleasant. The new version managed to determine the variable types based on the printf format string. While the old version ended up with <code>int a2, int a3</code>, the new version correctly determined them as one <code>__int64 a2</code>.</p> <p>{% tabs %}</p> <pre><code>int __fastcall ididi(int a1, __int64 a2, int a3, __int64 a4, int a5)\n{\n  int varg_r0; // [sp+28h] [bp-10h]\n  __int64 varg_r2; // [sp+30h] [bp-8h]\n\n  varg_r0 = a1;\n  varg_r2 = a2;\n  my_print(\"d=%I64d\\n\", a2);\n  my_print(\"d1=%I64d\\n\", a4);\n  my_print(\"%d-%I64d-%d-%I64d-%d\\n\", varg_r0, varg_r2, a3, a4, a5);\n  return 0;\n}\n</code></pre> <p>{% endtab %}</p> <p>{% tab title=\"PSEUDOCODE V7.2\" %}</p> <pre><code>int __fastcall ididi(int a1, int a2, __int64 a3, int a4, __int64 a5, int a6)\n{\n  int v6; // r1\n  char v8; // [sp+4h] [bp-34h]\n  int varg_r0; // [sp+28h] [bp-10h]\n  __int64 varg_r2; // [sp+30h] [bp-8h]\n\n  varg_r0 = a1;\n  varg_r2 = a3;\n  my_print(\"d=%I64d\\n\", a2, a3);\n  my_print(\"d1=%I64d\\n\", v6, a5);\n  my_print(\"%d-%I64d-%d-%I64d-%d\\n\", varg_r0, varg_r2, a4, v8, a5, a6);\n  return 0;\n}\n</code></pre> <p>{% endtab %}</p>"},{"location":"user-guide/decompiler/introduction-to-decompilation-vs-disassembly/hex-rays-v7.3-vs-v7.2-decompiler-comparison-page.html#better-argument-detection-for-scanf","title":"Better argument detection for scanf","text":"<p>A similar logic works for scanf-like functions. Please note that the old version was misdetecting the number of arguments. It was possible to correct the misdetected arguments using the Numpad-Minus hotkey but it is always better when there is less routine work on your shoulders, right?</p> <p>{% tabs %}</p> <pre><code>scanf(\"8: %d%i %x%o %s%s %C%c\", &amp;v12, &amp;v7, &amp;v3, &amp;v4, &amp;v2, &amp;v9, &amp;v8, &amp;v13);\nscanf(\"8:   %[ a-z]%c %2c%c %2c%2c %[ a-z]%c\", &amp;v12, &amp;v7, &amp;v3, &amp;v4, &amp;v2, &amp;v9, &amp;v8, &amp;v13);\n\n</code></pre> <p>{% endtab %}</p> <p>{% tab title=\"PSEUDOCODE V7.2\" %}</p> <pre><code>  scanf(\"8: %d%i %x%o %s%s %C%c\", &amp;v12, &amp;v7, &amp;v3, &amp;v4, &amp;v2, &amp;v9, &amp;v8, &amp;v13, &amp;v10, &amp;v0, &amp;v6, &amp;v5, &amp;v1, &amp;v11);\n  scanf(\n    \"8:   %[ a-z]%c %2c%c %2c%2c %[ a-z]%c\",\n    &amp;v12,\n    &amp;v7,\n    &amp;v3,\n    &amp;v4,\n    &amp;v2,\n    &amp;v9,\n    &amp;v8,\n    &amp;v13,\n    &amp;v10,\n    &amp;v0,\n    &amp;v6,\n    &amp;v5,\n    &amp;v1,\n    &amp;v11);\n\n</code></pre> <p>{% endtab %}</p>"},{"location":"user-guide/decompiler/introduction-to-decompilation-vs-disassembly/hex-rays-v7.3-vs-v7.2-decompiler-comparison-page.html#resolved-teb-references","title":"Resolved TEB references","text":"<p>While seasoned reversers know what is located at <code>fs:0</code>, it is still better to have it spelled out. Besides, the type of <code>v15</code> is automatically detected as <code>struct _EXCEPTION_REGISTRATION_RECORD *</code>.</p> <p>{% tabs %}</p> <pre><code>v15 = NtCurrentTeb()-&gt;NtTib.ExceptionList;\n</code></pre> <p>{% endtab %}</p> <p>{% tab title=\"PSEUDOCODE V7.2\" %}</p> <pre><code>v15 = __readfsdword(0);\n</code></pre> <p>{% endtab %}</p>"},{"location":"user-guide/decompiler/introduction-to-decompilation-vs-disassembly/hex-rays-v7.3-vs-v7.2-decompiler-comparison-page.html#better-automatic-selection-of-union-fields","title":"Better automatic selection of union fields","text":"<p>Again, the user can specify the union field that should be used in the output (the hotkey is <code>Alt-Y</code>) but there are situations when it can be automatically determined based on the access type and size. The above example illustrates this point. JFYI, the type of <code>entry</code> is:</p> <pre><code>union __XmStringEntryRec\n{\n  _XmStringEmptyHeader empty;\n  _XmStringOptSegHdrRec single;\n  _XmStringUnoptSegHdrRec unopt_single;\n  _XmStringArraySegHdrRec multiple;\n};\nstruct __XmStringEmptyHeader\n{\n  unsigned __int32 type : 2;\n};\nstruct __XmStringOptSegHdrRec\n{\n  unsigned __int32 type : 2;\n  unsigned __int32 text_type : 2;\n  unsigned __int32 tag_index : 3;\n  unsigned __int32 rend_begin : 1;\n  unsigned __int8 byte_count;\n  unsigned __int32 rend_end : 1;\n  unsigned __int32 rend_index : 4;\n  unsigned __int32 str_dir : 2;\n  unsigned __int32 flipped : 1;\n  unsigned __int32 tabs_before : 3;\n  unsigned __int32 permanent : 1;\n  unsigned __int32 soft_line_break : 1;\n  unsigned __int32 immediate : 1;\n  unsigned __int32 pad : 2;\n};\n</code></pre> <p>While we can not handle bitfields yet, their presence does not prevent using other, regular fields, of the structure.</p> <p>{% tabs %}</p> <pre><code>if ( entry-&gt;single.byte_count )\n</code></pre> <p>{% endtab %}</p> <p>{% tab title=\"PSEUDOCODE V7.2\" %}</p> <pre><code>if ( *((_BYTE *)&amp;entry-&gt;empty + 1) )\n</code></pre> <p>{% endtab %}</p>"},{"location":"user-guide/decompiler/introduction-to-decompilation-vs-disassembly/hex-rays-v7.3-vs-v7.2-decompiler-comparison-page.html#yet-one-more-example-of-union-fields","title":"Yet one more example of union fields","text":"<p>I could not resist the temptation to include one more example of automatic union selection. How beautiful the code on the right is!</p> <p>{% tabs %}</p> <pre><code>void __fastcall h_generic_calc_Perm32x8(V256 *res, V256 *argL, V256 *argR)\n{\n  res-&gt;w32[0] = argL-&gt;w32[argR-&gt;w32[0] &amp; 7];\n  res-&gt;w32[1] = argL-&gt;w32[argR-&gt;w32[1] &amp; 7];\n  res-&gt;w32[2] = argL-&gt;w32[argR-&gt;w32[2] &amp; 7];\n  res-&gt;w32[3] = argL-&gt;w32[argR-&gt;w32[3] &amp; 7];\n  res-&gt;w32[4] = argL-&gt;w32[argR-&gt;w32[4] &amp; 7];\n  res-&gt;w32[5] = argL-&gt;w32[argR-&gt;w32[5] &amp; 7];\n  res-&gt;w32[6] = argL-&gt;w32[argR-&gt;w32[6] &amp; 7];\n  res-&gt;w32[7] = argL-&gt;w32[argR-&gt;w32[7] &amp; 7];\n}\n</code></pre> <p>{% endtab %}</p> <p>{% tab title=\"PSEUDOCODE V7.2\" %}</p> <pre><code>void __fastcall h_generic_calc_Perm32x8(V256 *res, V256 *argL, V256 *argR)\n{\n  LODWORD(res-&gt;w64[0]) = *((_DWORD *)argL-&gt;w64 + (argR-&gt;w64[0] &amp; 7));\n  HIDWORD(res-&gt;w64[0]) = *((_DWORD *)argL-&gt;w64 + (HIDWORD(argR-&gt;w64[0]) &amp; 7));\n  LODWORD(res-&gt;w64[1]) = *((_DWORD *)argL-&gt;w64 + (argR-&gt;w64[1] &amp; 7));\n  HIDWORD(res-&gt;w64[1]) = *((_DWORD *)argL-&gt;w64 + (HIDWORD(argR-&gt;w64[1]) &amp; 7));\n  LODWORD(res-&gt;w64[2]) = *((_DWORD *)argL-&gt;w64 + (argR-&gt;w64[2] &amp; 7));\n  HIDWORD(res-&gt;w64[2]) = *((_DWORD *)argL-&gt;w64 + (HIDWORD(argR-&gt;w64[2]) &amp; 7));\n  LODWORD(res-&gt;w64[3]) = *((_DWORD *)argL-&gt;w64 + (argR-&gt;w64[3] &amp; 7));\n  HIDWORD(res-&gt;w64[3]) = *((_DWORD *)argL-&gt;w64 + (HIDWORD(argR-&gt;w64[3]) &amp; 7));\n}\n\n</code></pre> <p>{% endtab %}</p>"},{"location":"user-guide/decompiler/introduction-to-decompilation-vs-disassembly/hex-rays-v7.3-vs-v7.2-decompiler-comparison-page.html#improved-support-for-eabi-helpers","title":"Improved support for EABI helpers","text":"<p>No comments needed, we hope. The new decompiler managed to fold constant expressions after replacing EABI helpers with corresponding operators.</p> <p>{% tabs %}</p> <pre><code>int __cdecl main(int argc, const char **argv, const char **envp)\n{\n  printf(\"r = %d == 42\\n\", 42);\n  printf(\"r = %lld == 42\\n\", 42LL);\n  printf(\"ABORT %d\\n\", 0x40000001);\n  return 0;\n}\n</code></pre> <p>{% endtab %}</p> <p>{% tab title=\"PSEUDOCODE V7.2\" %}</p> <pre><code>void __fastcall h_generic_calc_Perm32x8(V256 *res, V256 *argL, V256 *argR)\n{\n  LODWORD(res-&gt;w64[0]) = *((_DWORD *)argL-&gt;w64 + (argR-&gt;w64[0] &amp; 7));\n  HIDWORD(res-&gt;w64[0]) = *((_DWORD *)argL-&gt;w64 + (HIDWORD(argR-&gt;w64[0]) &amp; 7));\n  LODWORD(res-&gt;w64[1]) = *((_DWORD *)argL-&gt;w64 + (argR-&gt;w64[1] &amp; 7));\n  HIDWORD(res-&gt;w64[1]) = *((_DWORD *)argL-&gt;w64 + (HIDWORD(argR-&gt;w64[1]) &amp; 7));\n  LODWORD(res-&gt;w64[2]) = *((_DWORD *)argL-&gt;w64 + (argR-&gt;w64[2] &amp; 7));\n  HIDWORD(res-&gt;w64[2]) = *((_DWORD *)argL-&gt;w64 + (HIDWORD(argR-&gt;w64[2]) &amp; 7));\n  LODWORD(res-&gt;w64[3]) = *((_DWORD *)argL-&gt;w64 + (argR-&gt;w64[3] &amp; 7));\n  HIDWORD(res-&gt;w64[3]) = *((_DWORD *)argL-&gt;w64 + (HIDWORD(argR-&gt;w64[3]) &amp; 7));\n}\n</code></pre> <p>{% endtab %}</p>"},{"location":"user-guide/decompiler/introduction-to-decompilation-vs-disassembly/hex-rays-v7.3-vs-v7.2-decompiler-comparison-page.html#improved-local-variable-allocation","title":"Improved local variable allocation","text":"<p>Now it works better especially in complex cases.</p> <p>{% tabs %}</p> <pre><code>tbd\n</code></pre> <p>{% endtab %}</p> <p>{% tab title=\"PSEUDOCODE V7.2\" %}</p> <pre><code>int __cdecl main(int argc, const char **argv, const char **envp)\n{\n  int v3; // r0\n  int v4; // r0\n  int v5; // r0\n  int v6; // r0\n  int v7; // r0\n  __int64 v8; // r0\n  int v9; // r2\n  __int64 v11; // [sp+0h] [bp-14h]\n  int v12; // [sp+Ch] [bp-8h]\n  int v13; // [sp+Ch] [bp-8h]\n\n  v3 = _mulvsi3(7, 6, envp);\n  v4 = _negvsi2(v3);\n  v5 = _addvsi3(v4, 101);\n  v12 = _subvsi3(v5, 17);\n  printf(\"r = %d == 42\\n\", v12);\n  v11 = _mulvdi3(7, 0, 6, 0);\n  v6 = _negvdi2(v12, v12 &gt;&gt; 31);\n  v7 = _addvdi3(v6, v6 &gt;&gt; 31, 101, 0);\n  v8 = _subvdi3(v7, v7 &gt;&gt; 31, 17, 0);\n  printf(\"r = %lld == 42\\n\", HIDWORD(v8), v11);\n  v13 = _mulvsi3(0x7FFFFFFF, 0x3FFFFFFF, v9);\n  printf(\"ABORT %d\\n\", v13);\n  return 0;\n}\n\n</code></pre> <p>{% endtab %}</p>"},{"location":"user-guide/decompiler/introduction-to-decompilation-vs-disassembly/hex-rays-v7.3-vs-v7.2-decompiler-comparison-page.html#better-recognizition-of-string-references","title":"Better recognizition of string references","text":"<p>In this case too, the user could set the prototype of <code>sub_1135FC</code> as accepting a <code>char *</code> and this would be enough to reveal string references in the output, but the new decompiler can do it automatically.</p> <p>{% tabs %}</p> <pre><code>  sub_1135FC(-266663568, \"This is a long long long string\");\n  if ( v2 &gt; 0x48u )\n  {\n    sub_108998(\"Another str\");\n\n</code></pre> <p>{% endtab %}</p> <p>{% tab title=\"PSEUDOCODE V7.2\" %}</p> <pre><code>  sub_1135FC(-266663568, 89351520);\n  if ( v2 &gt; 0x48u )\n  {\n    sub_108998(89351556);\n</code></pre> <p>{% endtab %}</p>"},{"location":"user-guide/decompiler/introduction-to-decompilation-vs-disassembly/hex-rays-v7.3-vs-v7.2-decompiler-comparison-page.html#better-handling-of-structures-returned-by-value","title":"Better handling of structures returned by value","text":"<p>The code on the left had a very awkward sequence to copy a structure. The code on the right eliminates it as unnecessary and useless.</p> <p>{% tabs %}</p> <pre><code>  _BYTE v1[12]; // rax\n  ...\n  return *(mystruct *)v1;\n}\n</code></pre> <p>{% endtab %}</p> <p>{% tab title=\"PSEUDOCODE V7.2\" %}</p> <pre><code>  _BYTE v1[12]; // ax\n  mystruct result; // 0:ax.11\n\n  ...\n  *(_QWORD *)result.ca1 = *(_QWORD *)v1;\n  result.s1 = *(_WORD *)&amp;v1[8];\n  result.c1 = v1[10];\n  return result;\n}\n</code></pre> <p>{% endtab %}</p>"},{"location":"user-guide/decompiler/introduction-to-decompilation-vs-disassembly/hex-rays-v7.3-vs-v7.2-decompiler-comparison-page.html#more-while-loops","title":"More while loops","text":"<p>Do you care about this improvement? Probably you do not care because the difference is tiny. However, in additon to be simpler, the code on the right eliminated a temporary variable, <code>v5</code>. A tiny improvement, but an improvement it is.</p> <p>{% tabs %}</p> <pre><code>while ( *++v4 )\n    ;\n</code></pre> <p>{% endtab %}</p> <p>{% tab title=\"PSEUDOCODE V7.2\" %}</p> <pre><code>do\n    v5 = *++v4;\n  while ( v5 );\n</code></pre> <p>{% endtab %}</p>"},{"location":"user-guide/decompiler/introduction-to-decompilation-vs-disassembly/hex-rays-v7.3-vs-v7.2-decompiler-comparison-page.html#shorter-code","title":"Shorter code","text":"<p>Another tiny improvement made the output considerably shorter. We like it!</p> <p>{% tabs %}</p> <pre><code>unsigned __int8 *__fastcall otp_memset(unsigned __int8 *pDest, unsigned __int8 val, int size)\n{\n  unsigned __int8 *i; // r3\n\n  for ( i = pDest; (unsigned int)size-- &gt;= 1; ++i )\n    *i = val;\n  return pDest;\n}\n</code></pre> <p>{% endtab %}</p> <p>{% tab title=\"PSEUDOCODE V7.2\" %}</p> <pre><code>unsigned __int8 *__fastcall otp_memset(unsigned __int8 *pDest, unsigned __int8 val, int size)\n{\n  unsigned __int8 *i; // r3\n  _BOOL1 v4; // cf\n\n  for ( i = pDest; ; ++i )\n  {\n    v4 = (unsigned int)size-- &gt;= 1;\n    if ( !v4 )\n      break;\n    *i = val;\n  }\n  return pDest;\n}\n}\n\n</code></pre> <p>{% endtab %}</p>"},{"location":"user-guide/decompiler/introduction-to-decompilation-vs-disassembly/hex-rays-v7.3-vs-v7.2-decompiler-comparison-page.html#improved-recognition-of-magic-divisions","title":"Improved recognition of magic divisions","text":"<p>This is a very special case: a division that uses the <code>rcr</code> instruction. Our microcode does not have the opcode for it but we implemented the logic to handle some special cases, just so you do not waste your time trying to decipher the meaning of convoluted code (yes, <code>rcr</code> means code that is difficult to understand).</p> <p>{% tabs %}</p> <pre><code>unsigned __int64 __fastcall konst_mod251_shr3(unsigned __int64 a1)\n{\n  return (a1 &gt;&gt; 3) % 0xFB;\n}\n</code></pre> <p>{% endtab %}</p> <p>{% tab title=\"PSEUDOCODE V7.2\" %}</p> <pre><code>__int64 __fastcall konst_mod251_shr3(unsigned __int64 a1)\n{\n  unsigned __int64 v1; // rcx\n\n  v1 = a1 &gt;&gt; 3;\n  _RDX = v1 + ((v1 * (unsigned __int128)0x5197F7D73404147ui64) &gt;&gt; 64);\n  __asm { rcr     rdx, 1 }\n  return v1 - 251 * (_RDX &gt;&gt; 7);\n}\n\n</code></pre> <p>{% endtab %}</p>"},{"location":"user-guide/decompiler/introduction-to-decompilation-vs-disassembly/hex-rays-v7.3-vs-v7.2-decompiler-comparison-page.html#less-gotos","title":"Less gotos","text":"<p>Well, we can not say that we produce less gotos in all cases, but there is some improvement for sure. Second, note that the return type got improved too: now it is immediately visible that the function returns a boolean (0/1) value.</p> <p>{% tabs %}</p> <pre><code>_BOOL8 __fastcall sub_0(__int64 a1, int *a2)\n{\n  int v2; // eax\n  int v3; // eax\n  int v4; // eax\n\n  v2 = *a2;\n  if ( *a2 &gt; 522 )\n  {\n    v4 = v2 - 4143;\n    return !v4 || v4 == 40950;\n  }\n  if ( v2 != 522 )\n  {\n    v3 = v2 - 71;\n    if ( v3 )\n    {\n      if ( (unsigned int)(v3 - 205) &gt;= 2 )\n        return 0;\n    }\n  }\n  return 1;\n}\n</code></pre> <p>{% endtab %}</p> <p>{% tab title=\"PSEUDOCODE V7.2\" %}</p> <pre><code>__int64 __fastcall sub_0(__int64 a1, int *a2)\n{\n  int v2; // eax\n  int v3; // eax\n  int v4; // eax\n\n  v2 = *a2;\n  if ( *a2 &gt; 522 )\n  {\n    v4 = v2 - 4143;\n    if ( !v4 || v4 == 40950 )\n      goto LABEL_8;\nLABEL_9:\n    return 0;\n  }\n  if ( v2 != 522 )\n  {\n    v3 = v2 - 71;\n    if ( v3 )\n    {\n      if ( (unsigned int)(v3 - 205) &gt;= 2 )\n        goto LABEL_9;\n    }\n  }\nLABEL_8:\n  return 1;\n}\n</code></pre> <p>{% endtab %}</p>"},{"location":"user-guide/decompiler/introduction-to-decompilation-vs-disassembly/hex-rays-v7.3-vs-v7.2-decompiler-comparison-page.html#division-may-generate-an-exception","title":"Division may generate an exception","text":"<p>What a surprise, the code on the right is longer and more complex! Indeed, it is so, and it is because now the decompiler is more careful with the division instructions. They potentially may generate the zero division exception and completely hiding them from the output may be misleading. If you prefer the old behaviour, turn off the division preserving in the configuration file.</p> <p>{% tabs %}</p> <pre><code>__int64 __fastcall sub_4008C0(int a1)\n{\n  int v1; // ecx\n  int v2; // edx\n  int v4; // [rsp+0h] [rbp-4h]\n\n  v1 = 2;\n  if ( a1 &gt; 2 )\n  {\n    do\n    {\n      nanosleep(&amp;rmtp, &amp;rqtp);\n      v2 = a1 % v1++;\n      v4 = 1 / v2;\n    }\n    while ( v1 != a1 );\n  }\n  return 0LL;\n}\n</code></pre> <p>{% endtab %}</p> <p>{% tab title=\"PSEUDOCODE V7.2\" %}</p> <pre><code>__int64 __fastcall sub_4008C0(int a1)\n{\n  int v1; // ecx\n\n  v1 = 2;\n  if ( a1 &gt; 2 )\n  {\n    do\n    {\n      nanosleep(&amp;rmtp, &amp;rqtp);\n      ++v1;\n    }\n    while ( v1 != a1 );\n  }\n  return 0LL;\n}\n</code></pre> <p>{% endtab %}</p>"},{"location":"user-guide/decompiler/introduction-to-decompilation-vs-disassembly/hex-rays-v7.3-vs-v7.2-decompiler-comparison-page.html#order-of-variadic-arguments","title":"Order of variadic arguments","text":"<p>Do you notice the difference? If not, here is a hint: the order of arguments of <code>sub_88</code> is different. The code on the right is more correct because the the format specifiers match the variable types. For example, <code>%f</code> matches <code>float a</code>. At the first sight the code on the left looks completely wrong but (surprise!) it works correctly on x64 machines. It is so because floating point and integer arguments are passed at different locations, so the relative order of floating/integer arguments in the call does not matter much. Nevertheless, the code on the right causes less confusion.</p> <p>{% tabs %}</p> <pre><code>int __cdecl func1(const float a, int b, void *c)\n{\n  return sub_88(\"%f, %d, %p\\n\", a, (unsigned int)b, c);\n}\n</code></pre> <p>{% endtab %}</p> <p>{% tab title=\"PSEUDOCODE V7.2\" %}</p> <pre><code>int __cdecl func1(const float a, int b, void *c)\n{\n  return sub_88(\"%f, %d, %p\\n\", (unsigned int)b, c, a);\n}\n</code></pre> <p>{% endtab %}</p>"},{"location":"user-guide/decompiler/introduction-to-decompilation-vs-disassembly/hex-rays-v7.3-vs-v7.2-decompiler-comparison-page.html#improved-division-recognition","title":"Improved division recognition","text":"<p>This is a never ending battle, but we advance!</p> <p>{% tabs %}</p> <pre><code>int int_h_mod_m32ui64(void)\n{\n  return h() % 32;\n}\n</code></pre> <p>{% endtab %}</p> <p>{% tab title=\"PSEUDOCODE V7.2\" %}</p> <pre><code>int int_h_mod_m32ui64(void)\n{\n  __int64 v0; // r10\n\n  v0 = h();\n  return (abs64(v0) &amp; 0x1F ^ (SHIDWORD(v0) &gt;&gt; 31)) - (SHIDWORD(v0) &gt;&gt; 31);\n}\n</code></pre> <p>{% endtab %}</p>"},{"location":"user-guide/decompiler/introduction-to-decompilation-vs-disassembly/hex-rays-v7.4-vs-v7.3-decompiler-comparison-page.html","title":"Hex-Rays v7.4 vs. v7.3 Decompiler Comparison Page","text":"<p>Here are some side-by-side comparisons of decompilations for v7.3 and v7.4. Please maximize the window too see both columns simultaneously.</p> <p>The following examples are displayed on this page:</p> <ol> <li>Better array detection</li> <li>Support for more floating-point helpers</li> <li>Automatic variable mapping</li> <li>Automatic symbolic names</li> <li>Simplified C++ names</li> <li>Improved handling of 64-bit arithmetics</li> <li>Better detection of 64-bit decrements</li> <li>More meaningful variable names</li> </ol>"},{"location":"user-guide/decompiler/introduction-to-decompilation-vs-disassembly/hex-rays-v7.4-vs-v7.3-decompiler-comparison-page.html#better-array-detection","title":"Better array detection","text":"<p>The text produced by v7.3 is not quite correct because the array at [ebp-128] was not recognized. Overall determining the array is a tough task but we can handle simple cases automatically now.</p> <p>{% tabs %}</p> <pre><code>_BYTE v7[256]; // [sp+0h] [bp-128h]\n  __int64 v8; // [sp+120h] [bp-8h]\n\n  v8 = a2;\n  v4 = a2;\n  memcpy(v7, &amp;v8, sizeof(v7));\n  memcpy(a1, v7, 0x100u);\n\n</code></pre> <p>{% endtab %}</p> <p>{% tab title=\"Pseudocode v7.3\" %}</p> <pre><code>_QWORD *v5; // r4\nint v7; // [sp+0h] [bp-128h]\n__int64 v8; // [sp+120h] [bp-8h]\n\n  v8 = a2;\n  v4 = a2;\n  v5 = a1;\n  memcpy(&amp;v7, &amp;v8, 0x100u);\n  memcpy(v5, &amp;v7, 0x100u);\n</code></pre> <p>{% endtab %}</p>"},{"location":"user-guide/decompiler/introduction-to-decompilation-vs-disassembly/hex-rays-v7.4-vs-v7.3-decompiler-comparison-page.html#support-for-more-floating-point-helpers","title":"Support for more floating-point helpers","text":"<p>On the left there is a mysterious call to _extendsfdf2. In fact this is a compiler helper function that just converts a single precision floating point value into a double precision value. However, we do not want to see this call as is. It is much better to translate it into the code that looks more like C. Besides, there is a special treatment for printf-like functions.</p> <p>{% tabs %}</p> <pre><code>void __cdecl printf_float(float a)\n{\n  printf(\"%f\\n\", a);\n}\n\n</code></pre> <p>{% endtab %}</p> <p>{% tab title=\"Pseudocode v7.3\" %}</p> <pre><code>void __cdecl printf_float(float a)\n{\n  double v1; // r0\n\n  v1 = COERCE_DOUBLE(_extendsfdf2(LODWORD(a)));\n  printf(\"%f\\n\", v1);\n}\n</code></pre> <p>{% endtab %}</p>"},{"location":"user-guide/decompiler/introduction-to-decompilation-vs-disassembly/hex-rays-v7.4-vs-v7.3-decompiler-comparison-page.html#automatic-variable-mapping","title":"Automatic variable mapping","text":"<p>In some cases we can easily prove that one variable can be mapped into another. The new version automatically creates a variable mapping in such cases. This makes the output shorter and easier to read. Needless to say that the user can revert the mapping if necessary.</p> <p>{% tabs %}</p> <pre><code>__int64 sprintf_s(\n        char *__ptr64 const _Buffer,\n        const unsigned __int64 _BufferCount,\n        const char *__ptr64 const _Format,\n        ...)\n{\n  unsigned __int64 *v6; // x0\n  __int64 result; // x0\n  va_list va; // [xsp+38h] [xbp+38h]\n\n  va_start(va, _Format);\n  v6 = _local_stdio_printf_options();\n  return _stdio_common_vsprintf_s(*v6, _Buffer, _BufferCount, _Format, 0i64,\n                                  (char *__ptr64)va);\n}\n</code></pre> <p>{% endtab %}</p> <p>{% tab title=\"Pseudocode v7.3\" %}</p> <pre><code>__int64 sprintf_s(\n        char *__ptr64 const _Buffer,\n        const unsigned __int64 _BufferCount,\n        const char *__ptr64 const _Format,\n        ...)\n{\n  char *v3; // x21\n  unsigned __int64 v4; // x20\n  const char *v5; // x19\n  unsigned __int64 *v6; // x0\n  __int64 result; // x0\n  va_list va; // [xsp+38h] [xbp+38h]\n\n  va_start(va, _Format);\n  v3 = _Buffer;\n  v4 = _BufferCount;\n  v5 = _Format;\n  v6 = _local_stdio_printf_options();\n  return _stdio_common_vsprintf_s(*v6, v3, v4, v5, 0i64, (char *__ptr64)va);\n}\n\n</code></pre> <p>{% endtab %}</p>"},{"location":"user-guide/decompiler/introduction-to-decompilation-vs-disassembly/hex-rays-v7.4-vs-v7.3-decompiler-comparison-page.html#automatic-symbolic-names","title":"Automatic symbolic names","text":"<p>The new version automatically applies symbolic constants when necessary. Less manual work.</p> <p>{% tabs %}</p> <pre><code>  if ( operation == ReadKeyNames )\n    return BaseDllReadVariableNames(v1, v2);\n  if ( operation != ReadSection )\n  {\n    if ( operation == WriteKeyValue || operation == DeleteKey )\n      return BaseDllWriteVariableValue(v1, v2, 0, 0);\n    if ( operation == WriteSection || operation == DeleteSection )\n      return BaseDllWriteApplicationVariables(v1, v2);\n</code></pre> <p>{% endtab %}</p> <p>{% tab title=\"Pseudocode v7.3\" %}</p> <pre><code>if ( operation == 4 )\n    return BaseDllReadVariableNames(v1, v2);\n  if ( operation != 6 )\n  {\n    if ( operation == 2 || operation == 3 )\n      return BaseDllWriteVariableValue(v1, v2, 0, 0);\n    if ( operation == 7 || operation == 8 )\n      return BaseDllWriteApplicationVariables(v1, v2);\n</code></pre> <p>{% endtab %}</p>"},{"location":"user-guide/decompiler/introduction-to-decompilation-vs-disassembly/hex-rays-v7.4-vs-v7.3-decompiler-comparison-page.html#simplified-c-names","title":"Simplified C++ names","text":"<p>This is not the longest C++ function name one may encounter but just compare the left and right sides. In fact the right side could even fit into one line easily, we just kept it multiline to be consistent. By the way, all names in IDA benefit from this simplification, not only the ones displayed by the decompiler. And it is configurable!</p> <p>{% tabs %}</p> <pre><code>std::string *\n__fastcall\nstd::_System_error::_Makestr(\n  std::string *result,\n  std::error_code _Errcode,\n  std::string _Message)\n</code></pre> <p>{% endtab %}</p> <p>{% tab title=\"Pseudocode v7.3\" %}</p> <pre><code>std::basic_string&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt; &gt; *\n__fastcall\nstd::_System_error::_Makestr(\n  std::basic_string&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt; &gt; *result,\n  std::error_code _Errcode,\n  std::basic_string&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt; &gt; _Message)\n</code></pre> <p>{% endtab %}</p>"},{"location":"user-guide/decompiler/introduction-to-decompilation-vs-disassembly/hex-rays-v7.4-vs-v7.3-decompiler-comparison-page.html#improved-handling-of-64-bit-arithmetics","title":"Improved handling of 64-bit arithmetics","text":"<p>The battle is long but we do not give up. More 64-bit patterns are recognized now.</p> <p>{% tabs %}</p> <pre><code>return h() % 1024;\n</code></pre> <p>{% endtab %}</p> <p>{% tab title=\"Pseudocode v7.3\" %}</p> <pre><code>v0 = h();\nreturn (__int16)((((v0 ^ (SHIDWORD(v0) &gt;&gt; 31)) - (SHIDWORD(v0) &gt;&gt; 31)) &amp; 0x3FF ^ (SHIDWORD(v0) &gt;&gt; 31))\n                 - (SHIDWORD(v0) &gt;&gt; 31));\n</code></pre> <p>{% endtab %}</p>"},{"location":"user-guide/decompiler/introduction-to-decompilation-vs-disassembly/hex-rays-v7.4-vs-v7.3-decompiler-comparison-page.html#better-detection-of-64-bit-decrements","title":"Better detection of 64-bit decrements","text":"<p>Yet another example of 64-bit arithmetics. The code on the left is correct but not useful at all. It can and should be converted into the simple equivalent text on the right.</p> <p>{% tabs %}</p> <pre><code>return a1 - 1;\n</code></pre> <p>{% endtab %}</p> <p>{% tab title=\"Pseudocode v7.3\" %}</p> <pre><code>v1 = a1 + 0xFFFFFFFFLL;\n  HIDWORD(v1) = ((unsigned __int64)(a1 + 0xFFFFFFFFLL) &gt;&gt; 32) - 1;\n</code></pre> <p>{% endtab %}</p>"},{"location":"user-guide/decompiler/introduction-to-decompilation-vs-disassembly/hex-rays-v7.4-vs-v7.3-decompiler-comparison-page.html#more-meaningful-variable-names","title":"More meaningful variable names","text":"<p>Currently we support only GetProcAddress but we are sure that we will expand this feature in the future.\\</p> <p>{% tabs %}</p> <pre><code>MessageBoxA_0 = (int (__stdcall *)(HWND, LPCSTR, LPCSTR, UINT))\n                    GetProcAddress(v4, \"MessageBoxA\");\n    if ( !MessageBoxA_0 )\n      return 0;\n    GetActiveWindow = (HWND (__stdcall *)())GetProcAddress(v5, \"GetActiveWindow\");\n    GetLastActivePopup = (HWND (__stdcall *)(HWND))GetProcAddress(v5, \"GetLastActivePopup\");\n  }\n  if ( GetActiveWindow )\n  {\n    v3 = GetActiveWindow();\n    if ( v3 )\n    {\n      if ( GetLastActivePopup )\n        v3 = GetLastActivePopup(v3);\n    }\n  }\n  return MessageBoxA_0(v3, a1, a2, a3);\n\n</code></pre> <p>{% endtab %}</p> <p>{% tab title=\"Pseudocode v7.3\" %}</p> <pre><code>    dword_12313BA8 = (int (__stdcall *)(_DWORD, _DWORD, _DWORD, _DWORD))\n                     GetProcAddress(v4, \"MessageBoxA\");\n    if ( !dword_12313BA8 )\n      return 0;\n    dword_12313BAC = GetProcAddress(v5, \"GetActiveWindow\");\n    dword_12313BB0 = (int (__stdcall *)(_DWORD))GetProcAddress(v5, \"GetLastActivePopup\");\n  }\n  if ( dword_12313BAC )\n  {\n    v3 = dword_12313BAC();\n    if ( v3 )\n    {\n      if ( dword_12313BB0 )\n        v3 = dword_12313BB0(v3);\n    }\n  }\n  return dword_12313BA8(v3, a1, a2, a3);\n</code></pre> <p>{% endtab %}</p>"},{"location":"user-guide/disassembler/background-analysis.html","title":"Background Analysis","text":"<p>IDA can analyze a program when it is not occupied performing an action you prompted. You disassemble a program together with IDA, but your requests have priority.</p> <p>The state of background analysis is shown on the upper right-hand corner of the screen.</p> <p>You can disable autoanalysis, but in this case some functions of IDA will produce strange results (e.g. if you try to convert data into instructions, IDA will NOT trace all the threads of control flow and the data will be converted into instructions only on the screen...)</p> <p>See also analysis options.</p>"},{"location":"user-guide/disassembler/bitfields-tutorial.html","title":"Bitfields Tutorial","text":"<p>In this tutorial, you will learn how to enhance disassembly output by using bitfields.</p> <p>Suppose the source code looked like this:</p> <pre><code>\n// 'flags' parameter is combination of the following bits:\n// (don't use OOF_SIGNMASK and OOF_WIDTHMASK, they are for the kernel)\n\n#define OOF_SIGNMASK    0x0003      // sign output:\n#define   OOFS_IFSIGN   0x0000      //   output sign if needed\n#define   OOFS_NOSIGN   0x0001      //   should not out sign     ()\n#define   OOFS_NEEDSIGN 0x0002      //   always out sign         (+-)\n#define OOF_SIGNED      0x0004      // output as signed if \n\n\nint m65_opflags(const op_t &amp;x)\n{\n  switch ( x.type )\n  {\n    case o_displ:\n      return OOF_ADDR|OOFS_NOSIGN|OOFW_16;\n    case o_near:\n    case o_mem:\n      return OOF_ADDR|OOF_NUMBER|OOFS_NOSIGN|OOFW_16|OOF_ZSTROFF;\n    default:\n      return 0;\n  }\n}\n</code></pre> <p>We have a disassembly that looks like this:</p> <p></p> <p>Let\u2019s improve it by using bitfields. </p> <ol> <li>We first define a bitfield type by going to the Local types window (menu Open subviews -&gt; Local types). We press Ins to add a new enum and make it a bitfield. The name given to the bitfield does not matter much.</li> </ol> <p></p> <p>Note that Bitmask has been checked. Click OK.</p> <ol> <li>Then we edit the enum and update it using the C syntax tab as shown in the screenshot below.</li> </ol> <p></p> <p>Click OK.</p> <p>The first bitfield mask is 3 (or 2 bits). The name of the mask is not used by IDA, it is intended as a memory helper. The enum definition becomes:</p> <p></p> <ol> <li>We finally switch to the disassembly window. Through the Edit -&gt; Operand types -&gt; Enum member menu (or by pressing M on the second operand at addresses 0x130003E39 and 0x130003E40) we select the enum type we just defined and get this result\u2026</li> </ol> <p></p> <p>That\u2019s all folks!</p>"},{"location":"user-guide/disassembler/bitfields.html","title":"Bitfields","text":"<p>There is a special kind of enums: bitfields. A bitfield is an enum divided into bit groups. When you define a new symbolic constant in a bitfield, you need to specify the group to which the constant will belong to. By default, IDA proposes groups containing one bit each. If a group is not defined yet, it is automatically created when the first constant in the group is defined. For example:</p> <pre><code>        name    CONST1\n        value   0x1\n        mask    0x1\n</code></pre> <p>will define a constant named CONST1 with value 1 and will create a group containing only one bit. Another example. Let's consider the following definitions:</p> <pre><code> #define OOF_SIGNMASK    0x0003\n #define   OOFS_IFSIGN   0x0000\n #define   OOFS_NOSIGN   0x0001\n #define   OOFS_NEEDSIGN 0x0002\n #define OOF_SIGNED      0x0004\n #define OOF_NUMBER      0x0008\n #define OOF_WIDTHMASK   0x0030\n #define   OOFW_IMM      0x0000\n #define   OOFW_16       0x0010\n #define   OOFW_32       0x0020\n #define   OOFW_8        0x0030\n #define OOF_ADDR        0x0040\n #define OOF_OUTER       0x0080\n #define OOF_ZSTROFF     0x0100\n</code></pre> <p>How do we describe this?</p> <pre><code>   name           value    mask   maskname\n\n   OOFS_IFSIGN   0x0000   0x0003 OOF_SIGNMASK\n   OOFS_NOSIGN   0x0001   0x0003 OOF_SIGNMASK\n   OOFS_NEEDSIGN 0x0002   0x0003 OOF_SIGNMASK\n OOF_SIGNED      0x0004   0x0004\n OOF_NUMBER      0x0008   0x0008\n   OOFW_IMM      0x0000   0x0030 OOF_WIDTHMASK\n   OOFW_16       0x0010   0x0030 OOF_WIDTHMASK\n   OOFW_32       0x0020   0x0030 OOF_WIDTHMASK\n   OOFW_8        0x0030   0x0030 OOF_WIDTHMASK\n OOF_ADDR        0x0040   0x0040\n OOF_OUTER       0x0080   0x0080\n OOF_ZSTROFF     0x0100   0x0100\n</code></pre> <p>If a mask consists of more than one bit, it can have a name and a comment. A mask name can be set when a constant with the mask is being defined. IDA will display the mask names in a different color.</p> <p>In order to use a bitfield in the program, just convert an instruction operand to enum. IDA will display the operand like this:</p> <pre><code>        mov     ax, 70h\n</code></pre> <p>will be replaced by</p> <pre><code>        mov     ax, OOFS_IFSIGN or OOFW_8 or OOF_ADDR\n</code></pre>"},{"location":"user-guide/disassembler/data-structure.html","title":"Data types, operands and constructs","text":"<p>Data and operands available in the disassembly aren\u2019t always interpreted in the most suitable way: IDA\u2019s interactivity allows you to change their type and representation. It even makes high level languages like constructs possible. </p> <p>Have a look at our data structure tutorial.</p> <p>{% file src=\"datastruct-tutorial/datastruct.pdf\" %} Download Data Structure tutorial</p>"},{"location":"user-guide/disassembler/disassembler.html","title":"Disassembler","text":""},{"location":"user-guide/disassembler/disassembly-gallery.html","title":"Disassembly Gallery","text":""},{"location":"user-guide/disassembler/graph-view.html","title":"Graph view","text":"<p>In the graph view, the current function is represented as a collection of nodes linked together with edges. Nodes represent basic blocks and edges represent code cross-references between them.</p> <p>Only code items are visible in the graph view, data items are hidden. To display them, switch to text mode by pressing Space. The graph view is available for the instructions belonging to functions. IDA automatically switches to text mode if the current item cannot be displayed in graph mode. It also displays a warning, which we recommend to hide away as soon as you become familiar with the concept.</p> <p>The Space key can be used to toggle between the graph and text views.</p> <p>Please select one of the following topic to learn more about graphs:</p> <ul> <li>The current node</li> <li>Selections in graphs</li> <li>Customizing graph layout</li> <li>Zooming graphs</li> <li>Scrolling graphs</li> <li>Graph node groups</li> <li>Graph overview window</li> <li>Graph colors</li> <li>Graph options</li> <li>Various graph hints</li> </ul>"},{"location":"user-guide/disassembler/graph-view.html#the-current-node","title":"The current node","text":"<p>There are two concepts: the current node and the selected nodes. The node with the keyboard cursor is considered as the current node. If the user clicks on the graph background, the keyboard cursor will disappear and there will be no current node. In the absence of the current node, IDA uses the last valid address for the user commands (like rename and similar commands). For example, if the user invokes the 'rename' command by pressing N and if there is no current node, IDA will still display the 'rename' dialog box for the last valid address.</p> <p>Clicking on the node title will make the clicked node the current one. The keyboard cursor will be moved to the clicked node. Any selection of the disassembly text will be cancelled upon switching the current node.</p> <p>The default color for the title of the current node is dark gray.</p> <p>In addition to the obvious method of clicking with the mouse left-button to select the current node, IDA supports many other methods:</p> <pre><code> - Clicking with the mouse wheel selects the clicked node and centers\n   the clicked point in the window\n - Keyboard arrows can be used to move from one node to another. When\n   the keyboard cursor reaches the node border and the user presses\n   the arrow once more, IDA finds a node in the specified direction\n   and makes it the current.\n - The Ctrl-Up key displays the list of nodes referring to the current\n   node and allows jumping to them. The Ctrl-Down key does the same\n   with the referenced nodes.\n - Pressing '5' on the keypad positions the keyboard cursor at\n   the window center\n - Left-click on an edge makes one of its ends (source or destination)\n   the current node. The node farthest from the click point is selected\n - Ctrl-click on an edge jumps to its destination\n - Alt-click on an edge jumps to its source\n</code></pre> <p>Clicking with the mouse on the node text (disassembly listing) has the usual meaning: IDA will move the keyboard cursor to the clicked location. It is also possible to select the disassembly listing within one node.</p>"},{"location":"user-guide/disassembler/graph-view.html#selections-in-graphs","title":"Selections in graphs","text":"<p>Many graph operations are applied to the selected nodes. The current node is considered to be part of the node selection for all operations.</p> <p>The graph nodes can be selected using the mouse. To select many nodes at once, press and hold the Ctrl key during the mouse operation. The Alt key removes nodes from the current selection.</p> <p>Internally, IDA keeps track of the selected nodes and edge layout points. Edge layout points are the points where edges are bent. If the current selection is moved in the graph, the selected edge layout points are moved too.</p> <p>The default color for the title of the selected nodes is light gray. Other node titles are displayed with white color.</p> <p>See also proximity view.</p>"},{"location":"user-guide/disassembler/graph-view.html#customizing-graph-layout","title":"Customizing graph layout","text":"<p>Each node has a title bar with title buttons. The title bar can be used to displace the node. Displacing nodes or edges creates a custom layout. The custom layouts are automatically saved in the database. If there is a custom layout for the function, IDA never destroys it without your explicit permission. This behavior has its drawbacks: when the nodes are resized (because of added comments, for example), the old layout will be retained and the nodes could overlap. In this case, the user can ask IDA to redo the layout or manually move the overlapping nodes. To avoid displacing nodes inadvertently, turn on the lock graph layout option.</p> <p>The user can also click on the edge layout points (edge bending points) and drag them. If two edge layout points are too close, one of them will be deleted. To create new edge layout points, use Shift-DoubleClick on the edge.</p>"},{"location":"user-guide/disassembler/graph-view.html#zooming-graphs","title":"Zooming graphs","text":"<p>The graph can be zoomed in and out. There are several ways of zooming the graph:</p> <pre><code> - Use Ctrl-Wheel. The current mouse position will be the zoom center\n   point (i.e. this point will not move during the zoom operation)\n - Use the predefined 'Zoom 100%' and 'Fit window' commands. They are\n   available from the right-click menu or by their shortcuts: '1' and\n   'W' respectively. The current mouse position is the zoom center\n   point for the 'zoom 100%' command.\n - Use Ctrl-KeypadPlus or Ctrl-KeypadMinus keys. The current keyboard\n   cursor is the zoom center for these commands.\n - Use Ctrl-Shift-drag. This lets you draw a rectangle to which IDA\n   will zoom.\n</code></pre> <p>There are two options linked to the graph zooming:</p> <pre><code> - Auto fit graph to window: will fit the current graph to the window\n   size. Default: off\n - Fit window max zoom level 100%: the 'fit window' command does not\n   use zoom levels higher than 100%. Default: on\n</code></pre> <p>The zoom level is never greater than 1000% and less than 1%. IDA remembers the current zoom level for each location in the navigation history.</p> <p>See also proximity view.</p>"},{"location":"user-guide/disassembler/graph-view.html#scrolling-graphs","title":"Scrolling graphs","text":"<p>The user can pan (shift) the graph by clicking with the left mouse button on the graph background and dragging it. In the rare case when there is no graph background visible on the screen, the Shift-click can be used to move the graph. This can happen on very high zoom levels, when the current node occupies the whole window.</p> <p>The mouse wheel scrolls the graph vertically. If the Alt key is pressed, it will scroll the graph horizontally.</p> <p>The Page Up and Page Down keys scroll the graph vertically. The keyboard arrows can scroll the graph if they reach the node border and cannot jump to another node in the specified direction.</p> <p>Scrolling the graph does not change the keyboard cursor position. As soon as the graph is refreshed on the screen, IDA will scroll the graph so that the keyboard cursor becomes visible.</p> <p>See also proximity view.</p>"},{"location":"user-guide/disassembler/graph-view.html#graph-node-groups","title":"Graph node groups","text":"<p>Any number of nodes can be collapsed into a single synthetic node. Such a synthetic node contains a user-provided text instead of normal disassembly listing. The 'group' command is available from the right-click menu if there are selected nodes.</p> <p>Even a single node can be used to create a group. This feature can be used to collapse huge nodes into something manageable or to hide a group that consists of one node.</p> <p>After creating a group, IDA automatically refreshes the graph layout. If a custom layout was present, it is not applied to the reduced graph. However, the existing custom layout is not destroyed and will be re-used as soon as the user switches to the full graph by deleting the group or uncollapsing it.</p> <p>The node groups can be nested: synthetic nodes can be used to create other groups. This feature allows reducing the graph into a single node. Each node can belong to only one group at a time.</p> <p>Groups can be uncollapsed to display the original node content. The node frames of the current uncollapsed group (the one with the mouse pointer) are displayed with a special color. The default group frame color is yellow. This way, the existing uncollapsed groups can be visualized by hovering the mouse over the graph nodes.</p> <p>There are also commands to collapse and uncollapse all groups in the graph. They are available from the right click menu.</p> <p>To edit the contents of synthetic nodes, use the 'set node text' button on the node title. The 'rename' command can be used too.</p> <p>IDA automatically remembers the graph groups and their state for each function.</p>"},{"location":"user-guide/disassembler/graph-view.html#graph-overview-window","title":"Graph overview window","text":"<p>IDA has a small graph overview window. It displays the whole graph in the zoom out form and gives the user an idea about which part of the graph is visualized on the main window.</p> <p>Clicking on the graph overview window visualizes different parts of the graph in the main window. It is also possible to click and drag the focus frame - the main window will be refreshed accordingly.</p> <p>The graph overview window is visible only in the graph view node. As soon as another non-modal window gets focus, the graph overview is closed. It automatically opens when a graph view is activated.</p> <p>The graph overview is displayed by default. To hide it, right click on the main toolbar background and select Navigation, Graph overview menu item.</p> <p>The graph overview window can be resized to accommodate really huge graphs.</p>"},{"location":"user-guide/disassembler/graph-view.html#graph-colors","title":"Graph colors","text":"<p>Graph edges can have several colors. In graph view:</p> <pre><code> - Blue: a normal edge\n - Green: if the jump is taken (its condition is satisfied)\n - Red: if the jump is not taken\n - Blinking: when in the debugger, the edge that will be followed blinks\n</code></pre> <p>And, in proximity view:</p> <pre><code> - Blue: Code cross-reference edge\n - Gray: Data cross-reference edge\n</code></pre> <p>IDA highlights the current mouse items. If the mouse is hovered over an edge, it is highlighted. If the mouse is hovered over a node, all adjacent edges are highlighted. To turn off the highlighting, specify the 'current edge' color as an undefined custom color.</p> <p>The 'highlighted edge' and 'foreign node' colors are not used yet.</p> <p>See also proximity view.</p>"},{"location":"user-guide/disassembler/graph-view.html#graph-options","title":"Graph options","text":"<p>Use graph view by default</p> <pre><code>        IDA switches to graph mode for each 'jump' command.\n</code></pre> <p>Enable graph animation</p> <pre><code>        Animate the graph layout, movement, and group collapsing/uncollapsing.\n        While animation takes time, it gives the user some idea what's going on.\n</code></pre> <p>Draw node shadows</p> <pre><code>        Display shadows for each graph node. Shadows are not displayed\n        for really huge or ridiculously small nodes.\n</code></pre> <p>Auto fit graph into window</p> <pre><code>        Zoom the graph so that it occupies the whole window.\n</code></pre> <p>Fit window max zoom level 100%</p> <pre><code>        The 'fit window' command maximal zoom level is 100%.\n</code></pre> <p>Re-layout graph if nodes overlap</p> <pre><code>        IDA recomputes the graph layout if a node overlap is detected.\n        The presence of a custom layout (if the user has displaced\n        some graph nodes) effectively turns off this option.\n</code></pre> <p>Re-layout graph upon screen refresh</p> <pre><code>        IDA recomputes the graph layout at each screen refresh.\n        Turning this option off accelerates IDA but then\n        a manual layout might be required after some operations.\n</code></pre> <p>Truncate at the right margin</p> <pre><code>        All nodes at truncated at the right margin. The right margin\n        is specified in the Options, General, Disassembly tab.\n        This option narrows the graph but hides some information\n        by truncating long lines.\n</code></pre> <p>Lock graph layout</p> <pre><code>        Locks the graph layout by ignoring attempts to displace\n        nodes. This prevents the creation of custom layouts that might lead\n        to ugly graph layouts when nodes change their sizes.\n</code></pre> <p>PROXIMITY VIEW</p> <p>Show data references</p> <pre><code>        Show data cross-referenced items in proximity view.\n</code></pre> <p>Hide library functions</p> <pre><code>        Do not show data or code cross-references to library functions,\n        only show cross-referenced local functions.\n</code></pre> <p>Unlimited children recursion</p> <pre><code>        Recurse until there are no more callees (children) of the currently\n        selected central node and all of his children.\n</code></pre> <p>Recurse into library functions</p> <pre><code>        Displays children data or code cross-references from library\n        functions.\n</code></pre> <p>Max parents recursion</p> <pre><code>        Maximum recursion level for displaying parents of the currently\n        selected central node. The value '0' disables parents recursion.\n</code></pre> <p>Max children recursion</p> <pre><code>        Maximum recursion level for displaying children of the currently\n        selected central node. The value '0' means no maximum recursion\n        level.\n</code></pre> <p>Max nodes per level</p> <pre><code>        Maximum number of nodes to show per level of children and parents.\n</code></pre> <p>See also: right margin</p>"},{"location":"user-guide/disassembler/graph-view.html#various-graph-hints","title":"Various graph hints","text":"<ol> <li>The following actions can improve the speed of graph drawing:</li> </ol> <pre><code> - Turn off animation\n - Turn off node shadows\n - Specify identical top and bottom background colors\n - Turn off 'relayout' options (might lead to stale graph contents)\n - Turn off the graph overview window\n</code></pre> <ol> <li> Printing the graph: the 'print' command is available at the graph toolbar. The graph toolbar is visible by default but if you have saved a custom desktop configuration in the past, it will not be visible. To set it on, check the View, Toolbars, Graph view menu item.</li> <li> Working with huge graphs: do not forget about the node groups and use them to make the graph simpler.</li> </ol>"},{"location":"user-guide/disassembler/graphing_tutorial.html","title":"Graphing with IDA","text":"<p>IDA Pro has a tightly integrated disassembly view that is graph-based, giving a control flow view to the disassembly as opposed to the standard text-style disassembly output. Different colored arrows are used to distinguish the various types of flows. You can also zoom in or out of the graph for greater clarity. For complicated graphs, you can use the Graph Overview window which can provide you with overall awareness of the area that you are viewing in the graph.</p> <p>Graphing also gives you the ability to rearrange, group, and collapse blocks in the graph. As only one function can be viewed in each individual graph, you can create other disassembly graphs for other functions, so that you can view two or more at the same time. </p> <p>Here\u2019s an overview of the Graph features:</p> <p>{% file src=\"graphing-tutorial/graphs.pdf\" %} Download Graphing tutorial</p>"},{"location":"user-guide/disassembler/interactivity.html","title":"Interactivity","text":""},{"location":"user-guide/disassembler/interactivity.html#main-idea","title":"Main Idea","text":"<p>IDA is an interactive disassembler, which means that the user takes active participation in the disassembly process. IDA is not an automatic analyzer of programs. IDA will give you hints about suspicious instructions, unsolved problems etc. It is your job to inform IDA how to proceed.</p> <p>If you are using IDA for the very first time, here are some commands that you will find very useful: - convert to instruction : the hotkey is C - convert to data : the hotkey is D </p> <p>All the changes that you made are saved to disk. When you run IDA again, all the information on the file being disassembled is read from the disk, so that you can resume your work.</p> <p>For other commands please refer to the menu system and the help.</p>"},{"location":"user-guide/disassembler/navigation.html","title":"Navigation","text":""},{"location":"user-guide/disassembler/packed-executables.html","title":"Using IDA to deal with packed executables","text":"<p>Many malware authors attempt to obfuscate or protect their program by packing them. In these tutorials, we show how IDA can be made to handle such program.</p> <ul> <li>Learn how to tackle a difficult executable from the normal user interface. </li> <li>Learn how to use the \u201cuniversal\u201d PE unpacker plug-in (PDF) included in IDA 4.9</li> </ul> <p>{% file src=\"packed-executables/unpacking.pdf\" %} Download a tutorial about PE unpacker plugin</p>"},{"location":"user-guide/disassembler/proximity-view.html","title":"Proximity view","text":"<p>Starting from IDA v6.2, the callgraph of a program can be displayed in a graph form.</p> <p>In the proximity view, the current address, the callers and the callees are represented as a collection of nodes linked together with edges. Nodes represent functions and data references (global variables, strings, etc..) and edges represent code or data cross-references between them.</p> <p>To open the proximity view press the '-' key to zoom out and switch to the callgraph of the address under cursor.</p> <p>Only the address names (function names or data labels) are displayed in the proximity view, but not the disassembly, nonetheless, hovering the mouse over a node will display brief disassembly listing in a resizable hint window. To see the complete disassembly listing switch to text or graph mode by pressing '+' or Space respectively.</p> <p>When disassembling new files, IDA will display a dialog offering to switch to proximity view when applicable. It is possible to turn off this dialog and not show it again.</p> <p>In the proximity view there are 3 types of nodes: Function nodes, data nodes and auxiliar nodes. Function nodes are rectangular and they have a toolbar. Those nodes are used to display the callers or callees of the current central node (or any of his parents or children). Data nodes are rectangular nodes (without a toolbar) and they are used to display the data references (global variables, strings, etc...) to/from the current central node or any of his parents and children.</p> <p>Please select one of the following topic to learn more about graphs:</p> <ul> <li>Selections in graphs</li> <li>Zooming graphs</li> <li>Scrolling graphs</li> <li>Graph overview window</li> <li>Graph colors</li> <li>Graph options</li> </ul>"},{"location":"user-guide/disassembler/structures-tutorial.html","title":"Structures Tutorial","text":"<p>You can use IDA to interactively define and manipulate structures in the disassembly.</p>"},{"location":"user-guide/disassembler/structures-tutorial.html#sample-program","title":"Sample program","text":"<p>Consider this simple sample C program:</p> <pre><code>#include &lt;stdio.h&gt;\n\nstruct client {\n  char code;\n  long id;\n  char name[32];\n  client *next;\n};\n\nvoid print_clients(client *ptr) {\n  while ( ptr != NULL ) {\n    printf(\"ID: %4ld Name: %-32s\\n\",ptr-&gt;id,ptr-&gt;name);\n    ptr = ptr-&gt;next;\n  }\n}\n\n</code></pre>"},{"location":"user-guide/disassembler/structures-tutorial.html#standard-disassembly","title":"Standard disassembly","text":"<p>Here is the disassembly with no structures defined, as IDA automatically generates it:</p> <pre><code>.text:0000000180011690 ; void __fastcall print_clients(client *ptr)\n.text:0000000180011690 ?print_clients@@YAXPEAUclient@@@Z proc near\n.text:0000000180011690                                         ; CODE XREF: print_clients(client *)\u2191j\n.text:0000000180011690                                         ; DATA XREF: .pdata:000000018001E800\u2193o\n.text:0000000180011690\n.text:0000000180011690 ptr             = qword ptr  10h\n.text:0000000180011690\n.text:0000000180011690                 mov     [rsp-8+ptr], rcx\n.text:0000000180011695                 push    rbp\n.text:0000000180011696                 push    rdi\n.text:0000000180011697                 sub     rsp, 0E8h\n.text:000000018001169E                 lea     rbp, [rsp+20h]\n.text:00000001800116A3                 lea     rcx, __57CB66E6_entry@cpp ; JMC_flag\n.text:00000001800116AA                 call    j___CheckForDebuggerJustMyCode\n.text:00000001800116AA\n.text:00000001800116AF\n.text:00000001800116AF loc_1800116AF:                          ; CODE XREF: print_clients(client *)+5F\u2193j\n.text:00000001800116AF                 cmp     [rbp+0D0h+ptr], 0\n.text:00000001800116B7                 jz      short loc_1800116F1\n.text:00000001800116B7\n.text:00000001800116B9                 mov     rax, [rbp+0D0h+ptr]\n.text:00000001800116C0                 add     rax, 8\n.text:00000001800116C4                 mov     r8, rax\n.text:00000001800116C7                 mov     rax, [rbp+0D0h+ptr]\n.text:00000001800116CE                 mov     edx, [rax+4]\n.text:00000001800116D1                 lea     rcx, _Format    ; \"ID: %4ld Name: %-32s\\n\"\n.text:00000001800116D8                 call    j_printf\n.text:00000001800116D8\n.text:00000001800116DD                 mov     rax, [rbp+0D0h+ptr]\n.text:00000001800116E4                 mov     rax, [rax+28h]\n.text:00000001800116E8                 mov     [rbp+0D0h+ptr], rax\n.text:00000001800116EF                 jmp     short loc_1800116AF\n.text:00000001800116EF\n.text:00000001800116F1 ; ---------------------------------------------------------------------------\n.text:00000001800116F1\n.text:00000001800116F1 loc_1800116F1:                          ; CODE XREF: print_clients(client *)+27\u2191j\n.text:00000001800116F1                 lea     rsp, [rbp+0C8h]\n.text:00000001800116F8                 pop     rdi\n.text:00000001800116F9                 pop     rbp\n.text:00000001800116FA                 retn\n.text:00000001800116FA\n.text:00000001800116FA ?print_clients@@YAXPEAUclient@@@Z endp\n\n</code></pre>"},{"location":"user-guide/disassembler/structures-tutorial.html#defining-structures","title":"Defining structures","text":"<p>In order to use meaningful names instead of numbers, we open the local types window and press insert to define a new structure type. Structure members can be added with the D key for data and the A key for ASCII strings or by editing the structure (Alt-E) and adding members using the \"C syntax\" of the \"Edit type\" dialog box. When the first method is used, when we add new structure members, IDA automatically names them. You can change any member\u2019s name by pressing N.</p> <pre><code>struct client\n{\n  char code;\n  int id;\n  char name[32];\n  client *next;\n};\n\n</code></pre>"},{"location":"user-guide/disassembler/structures-tutorial.html#improved-disassembly","title":"Improved disassembly","text":"<p>Finally, the defined structure type can be used to specify the type of an instruction operand. (menu Edit|Operand types|Struct offset).</p> <pre><code>.text:0000000180011690 ; void __fastcall print_clients(client *ptr)\n.text:0000000180011690 ?print_clients@@YAXPEAUclient@@@Z proc near\n.text:0000000180011690                                         ; CODE XREF: print_clients(client *)\u2191j\n.text:0000000180011690                                         ; DATA XREF: .pdata:000000018001E800\u2193o\n.text:0000000180011690\n.text:0000000180011690 ptr             = qword ptr  10h\n.text:0000000180011690\n.text:0000000180011690                 mov     [rsp-8+ptr], rcx\n.text:0000000180011695                 push    rbp\n.text:0000000180011696                 push    rdi\n.text:0000000180011697                 sub     rsp, 0E8h\n.text:000000018001169E                 lea     rbp, [rsp+20h]\n.text:00000001800116A3                 lea     rcx, __57CB66E6_entry@cpp ; JMC_flag\n.text:00000001800116AA                 call    j___CheckForDebuggerJustMyCode\n.text:00000001800116AA\n.text:00000001800116AF\n.text:00000001800116AF loc_1800116AF:                          ; CODE XREF: print_clients(client *)+5F\u2193j\n.text:00000001800116AF                 cmp     [rbp+0D0h+ptr], 0\n.text:00000001800116B7                 jz      short loc_1800116F1\n.text:00000001800116B7\n.text:00000001800116B9                 mov     rax, [rbp+0D0h+ptr]\n.text:00000001800116C0                 add     rax, 8\n.text:00000001800116C4                 mov     r8, rax\n.text:00000001800116C7                 mov     rax, [rbp+0D0h+ptr]\n.text:00000001800116CE                 mov     edx, [rax+client.id]\n.text:00000001800116D1                 lea     rcx, _Format    ; \"ID: %4ld Name: %-32s\\n\"\n.text:00000001800116D8                 call    j_printf\n.text:00000001800116D8\n.text:00000001800116DD                 mov     rax, [rbp+0D0h+ptr]\n.text:00000001800116E4                 mov     rax, [rax+client.next]\n.text:00000001800116E8                 mov     [rbp+0D0h+ptr], rax\n.text:00000001800116EF                 jmp     short loc_1800116AF\n.text:00000001800116EF\n.text:00000001800116F1 ; ---------------------------------------------------------------------------\n.text:00000001800116F1\n.text:00000001800116F1 loc_1800116F1:                          ; CODE XREF: print_clients(client *)+27\u2191j\n.text:00000001800116F1                 lea     rsp, [rbp+0C8h]\n.text:00000001800116F8                 pop     rdi\n.text:00000001800116F9                 pop     rbp\n.text:00000001800116FA                 retn\n.text:00000001800116FA\n.text:00000001800116FA ?print_clients@@YAXPEAUclient@@@Z endp\n</code></pre>"},{"location":"user-guide/disassembler/supported-file-formats.html","title":"Supported file formats","text":"<p>IDA Pro can disassemble all popular file formats. The list contains some, but not all, of the file types handled by IDA Pro.</p> <ul> <li>MS DOS</li> <li>EXE File</li> <li>MS DOS COM File</li> <li>MS DOS Driver</li> <li>New Executable (NE)</li> <li>Linear Executable (LX)</li> <li>Linear Executable (LE)</li> <li>Portable Executable (PE) (x86, x64, ARM, etc)</li> <li>Windows CE PE (ARM, SH-3, SH-4, MIPS)</li> <li>Mach-O for OS X and iOS (x86, x64, ARM and PPC)</li> <li>Dalvik Executable (DEX)</li> <li>EPOC (Symbian OS executable)</li> <li>Windows Crash Dump (DMP)</li> <li>XBOX Executable (XBE)</li> <li>Intel Hex Object File</li> <li>MOS Technology Hex Object File</li> <li>Netware Loadable Module (NLM)</li> <li>Common Object File Format (COFF)</li> <li>Binary File</li> <li>Object Module Format (OMF)</li> <li>OMF library</li> <li>S-record format</li> <li>ZIP archive</li> <li>JAR archive</li> <li>Executable and Linkable Format (ELF)</li> <li>Watcom DOS32 Extender (W32RUN)</li> <li>Linux a.out (AOUT)</li> <li>PalmPilot program file</li> <li>AIX ar library (AIAFF)</li> <li>PEF (Mac OS or Be OS executable)</li> <li>QNX 16 and 32-bits</li> <li>Nintendo (N64)</li> <li>SNES ROM file (SMC)</li> <li>Motorola DSP56000 .LOD</li> <li>Sony Playstation PSX executable files,</li> <li>object (psyq) files</li> <li>library (psyq) files</li> </ul> <p>Check out the list of supported processors and screenshots of many processor disassemblies in the gallery.</p>"},{"location":"user-guide/disassembler/supported-processors.html","title":"IDA supported processors","text":"<p>The list of supported processor/OS/file format combinations is so large that it is not easy to enumerate it. Please look at our gallery which contains disassembly samples across a wide number of processors.</p>"},{"location":"user-guide/disassembler/supported-processors.html#ida-pro-supported-processors","title":"IDA Pro supported processors","text":"<p>IIDA Pro supports the processors listed below. The source code of some processor modules is available in our free SDK.</p> IDA Pro supported processors  * web assembly (WASM) * AMD K6-2 3D-Now! extensions * 32-bit ARM Architecture versions from v3 to v8 including Thumb, Thumb-2, DSP instructions and NEON Advanced SIMD instructions.   * ARMv4 / ARMv4T: ARM7 cores (ARM7TDMI / ARM710T / ARM720T / ARM740T), ARM9 cores (ARM9TDMI / ARM920T / ARM922T / ARM940T)   * ARMv5 / ARMv5TE / ARMv5TEJ: ARM9 cores (ARM946E-S/ ARM966E-S/ ARM968E-S/ ARM926EJ-S/ ARM996HS), ARM10E (ARM1020E / ARM1022E / ARM1026EJ-S)   * ARMv6 / ARMv6T2 / ARMv6Z / ARMv6K: ARM11 cores (ARM1136J(F)-S / ARM1156T2(F)-S / ARM1176JZ(F)-S / ARM11 MPCore)   * ARMv6-M: Cortex-M0 / Cortex-M0+ / Cortex-M1 (e.g. NXP LPC800/LPC1xxx, Freescale Kinetis L and M series, STM32 F0 series etc.)   * ARMv7-M: Cortex-M3 (e.g. NXP LPC17xx/18xx/13xx, STM32 F1/F2/L1 series, TI Stellaris, Toshiba TX03 / TMPM3xx etc.)   * ARMv7E-M: Cortex-M4 (e.g. NXP LPC43xx, STM32 F3/F4 series, TI Stellaris LM4F, Freescale Kinetis K series and W series, Atmel AT91SAM4 etc.)   * ARMv7-R: Cortex-R4(F)/Cortex-R5/Cortex-R7 (e.g. TI TMS570LS etc.)   * ARMv7-A: Cortex-A5 / Cortex-A7 / Cortex-A8 / Cortex-A9 / Cortex-A12 / Cortex-A15 (e.g. TI Sitara, TI OMAP series, Samsung S5PC100 and Exynos, Nvidia Tegra, Freescale i.MX, Allwinner A-Series and many others)   * ARMv7 (custom): Apple A4/A5/A5X/A6/A6X (Swift microarchitecture, used in Apple\u2019s iPhone/iPod/iPad/AppleTV), Qualcomm Snapdragon \\[_Note_: this list is incomplete; code for any ARM-compliant core can be disassembled] * ARM64 Architecture (aka AArch64): \\*   * ARMv8-A: Cortex-A50/Cortex-A53/Cortex-A57 etc.   * ARMv8 (custom): Apple A7,A8 etc. (iPhone 5s and newer devices) * ARC (Argonaut RISC Core), including ARCompact and ARCv2 (comes with source code) * ATMEL AVR (comes with source code) * DEC PDP-11(comes with source code) * Fujitsu FR (comes with source code) * Nintendo Entertainment System (NES) (6502) * Nintendo Super Entertainment System (SNES) (65816, 65C816) * Nintendo GameBoy (Z80, ARM7) * Nintendo DS (ARM9, ARM11) * Hitachi/Renesas [H8/300](https://hex-rays.com/products/ida/processors/#h8-300), [H8/300L](https://hex-rays.com/products/ida/processors/#h8-300l), [H8/300H](https://hex-rays.com/products/ida/processors/#h8-300h), [H8S/2000](https://hex-rays.com/products/ida/processors/#h8s-2000), [H8S/2600](https://hex-rays.com/products/ida/processors/#h8s-2600), H8SX (comes with source code)H8/330, H8/322, H8/323, H8/325, H8/326-329, H8/336-338, H8/350, H8/3048F, H8/3202, H8/3212, H8/3214, H8/3216, H8/3217, H8/3256, H8/3257, H8/3292, H8/3294, H8/3296, H8/3297, H8/3315, H8/3318, H8/3334Y, H8/3336Y, H8/3337Y, H8/3337YF, H8/3394, H8/3396, H8/3397, H8/3534, H8/3434, H8/3434F, H8/3436, H8/3437, H8/3437F, H8/3522H8/3612, H8/3613, H8/3614, H8/3712, H8/3713, H8/3714, H8/3723, H8/3724, H8/3725, H8/3726, H8/3812, H8/3813, H8/3814, H8/3833-37, H8/3875, H8/3876, H8/3877, H8/3924, H8/3925, H8/3926, H8/3927, H8/3945-47H8/3002, H8/3040-3042, H8/3003, H8/3030-32, H8/3048, H8/3070, H8/3071, H8/3072H8S/2246, H8S/2245, H8S/2244, H8S/2243, H8S/2242, H8S/2241, H8S/2133, H8S/2144F, H8S/2357F, H8S/2143, H8S/2142F, H8S/2345F, H8S/2343, H8S/2341, H8S/2237, H8S/2235, H8S/2233, H8S/2227, H8S/2225, H8S/2223, H8S/2240, H8S/2242, H8S/2350, H8S/2352, H8S/2340, H8S/2355, H8S/2353, H8S/2351, H8S/2134F, H8S/2132FH8S/2655R, H8S/2653R, H8S/2655 * Hitachi H8/500 (comes with source code) * Hitachi HD 6301, HD 6303, Hitachi HD 64180 * INTEL 8080 * INTEL 8085 (comes with source code) * INTEL 80196 (comes with source code) * INTEL 8051 (comes with source code) * INTEL 860XR (comes with source code) * INTEL 960 (comes with source code) * INTEL 80\u00d786 and 80\u00d787 (Intel 8086/8088, 80186, 80286, 80386, 80486 and compatibles) * INTEL Pentium/Celeron/Xeon, including SSE, SSE2, SSE3, SSE4, AVX, AVX2, AVX-512 and other extensions * Java Virtual Machine (comes with source code) * KR1878 (comes with source code) * Microsoft .NET (Common Language Infrastructure bytecode) * Mitsubishi MELPS740 or Renesas 740 (comes with source code) * Hitachi/Renesas M16C family (M16C/60, M16C/20, M16C/Tiny, R8C/Tiny, M16C/80, M32C/80, R32C/100 * MN102 (comes only with source code) * MOS Technologies 6502, 65C02 (comes with source code) * W65C816S aka 65C816 or 65816 (comes with source code) * Motorola/Freescale 68K family: [MC680xx](https://hex-rays.com/wp-content/uploads/2019/12/ida68k.gif), CPU32 (68330), MC6301 * Motorola 68xx series: MC6301, MC6303, MC6800, MC6801, MC6803, MC6805, MC6808, HCS08, MC6809, MC6811, \\\\ * Motorola MC6812/MC68HC12/CPU12 * Freescale HCS12, HCS12X (including XGATE coprocessor) * Motorola MC68HC16 * NSC CR16 (comes only with source code) * NEC V850 series (including V850E1, V850E1F, V850ES, V850E2, V850E2M) (comes with source code) * Renesas RH850 series (RH850G3K, RH850G3M, RH850G3KH, RH850G3MH) (comes with source code) * EFI Byte Code (EBC) (comes with source code) * SPU (Synergistic Processing Unit of the Cell BE) (comes with source code) * MSP430, MSP430X (comes with source code) * Microchip PIC 12XX, PIC 14XX, PIC 18XX, PIC 16XXX (comes with source code) * Microchip 16-bit PIC series (PIC24, dsPIC: PIC24XX, PIC30XX, PIC33XX) * Rockwell C39 (comes only with source code) * Samsung SAM8 (comes with source code) * SGS Thomson ST-7, and ST-20 (comes with source code) * TLCS900 (comes only with source code) * unSP from SunPlus * Sony SPC700 * Philips XA series (51XA G3)(comes with source code) * RISC-V * Renesas RL78 series * Intel xScale * Z80, Zilog Z8, Zilog Z180, Zilog Z380 (comes with source code) * IBM z/Architecture (S390, S390x) * x64 architecture (aka Intel 64/IA-32e/EM64T/x86-64/AMD64) * Analog Devices AD218x series (ADSP-2181, ADSP-2183, ADSP-2184(L/N), ADSP-2185(L/M/N), ADSP-2186(L/M/N), ADSP-2187(L/N), ADSP-2188M/N, ADSP-2189M/N) * Dalvik (Android bytecode, DEX) * DEC Alpha * Motorola DSP563xx, DSP566xx, DSP561XX (comes with source code) * TI TMS320C2X, TMS320C5X, TMS320C6X, TMS320C64X, TMS 320C54xx, TMS320C55xx, TMS320C3 (comes with source code) * TI TMS320C27x/TMS320C28x * Hewlett-Packard HP-PA aka PA-RISC (comes with source code) * Hitachi/Renesas SuperH series. Unexhaustive list:   * SH-1 core, for example SH7020,SH7021, SH7032,SH7034;   * SH-2 core: SH7047, SH7049, SH7105, SH7107, SH7109 etc.;   * SH-2E core: SH7055, SH7058 etc.;   * SH-2A core: SH7201, SH7206, SH7211, SH7214   * SH2A-FPU core: SH7450, SH7263 etc.;   * SH3 core: SH7706, SH7709S;   * SH4 core: SH7091(Sega Dreamcast), SH7750;   * SH-4A core: SH7450, SH7451,SH7734, SH7785. * Renesas RXv1, RXv2, RXv3 cores (RX100/RX200/RX600/RX700) * IBM/Motorola PowerPC/POWER architecture, including Power ISA extensions:   * Book E (Embedded Controller Instructions)   * Freescale ISA extensions (isel etc.)   * SPE (Signal Processing Engine) instructions   * AltiVec (SIMD) instructions   * Hypervisor and virtualization instructions   * All instructions from the Power ISA 2.06 specification (Vector, Decimal Floating Point, Integer Multiply-Accumulate, VSX etc.)   * Cell BE (Broadband Engine) instructions (used in PlayStation 3)   * VLE (Variable Length Encoding) compressed instruction set   * Xenon (Xbox 360) instructions, including VMX128 extension   * Paired Single SIMD instructions (PowerPC 750CL/Gekko/Broadway/Espresso, used in Nintendo Wii and WiiU) * Motorola/Freescale PowerPC-based cores and processors, including (but not limited to):   * MPC5xx series: MPC533 / MPC535 / MPC555 / MPC556 / MPC561 / MPC562 / MPC563 / MPC564 / MPC566 _Note_: code compression features of MPC534/MPC564/MPC556/MPC566 (Burst Buffer Controller) are currently not supported   * MPC8xx series (PowerQUICC): MPC821/MPC850/MPC860   * MPC8xxx series (PowerQUICC II, PowerQUICC II Pro, PowerQUICC III): MPC82xx / MPC83xx / MPC85xx / MPC87xx   * MPC5xxx series (Qorivva): MPC55xx, MPC56xx, MPC57xx   * Power PC 4xx, 6xx, 74xx, e200 (including e200z0 with VLE), e500 (including e500v1, e500v2 and e500mc), e600, e700, e5500, e6500 cores   * QorIQ series: P1, P2, P3, P4, P5 and T1, T2, T4 families * Infineon Tricore architecture (up to architecture v1.6.2 (AURIX)) * Intel IA-64 Architecture \u2013 Itanium. * Motorola DSP 56K * MIPS   * MIPS Mark I (R2000)   * MIPS Mark II (R3000)   * MIPS Mark III: (R4000, R4200, R4300, R4400, and R4600)   * MIPS Mark IV: R8000, R10000, R5900 (Playstation 2)   * MIPS32, MIPS32r2, MIPS32r3 and MIPS64, MIPS64r2, MIPS64r3   * Allegrex CPU (Playstation Portable \u2013 PSP), including VFPU instructions   * Cavium Octeon and Octeon2 (cnMIPS) ISA extensions   * MIPS16 (MIPS16e, MIPS16e2) Application Specific Extension   * microMIPS Application Specific Extension   * MIPS-MT, MIPS-3D, smartMIPS Application Specific Extensions   * Toshiba TX19/TX19A Family Application Specific Extension (MIPS16e+ aka MIPS16e-TX) * Mitsubishi M32R (comes with source code) * Mitsubishi M7700 (comes with source code) * Mitsubishi M7900 (comes with source code) * Nec 78K0 and Nec 78K0S (comes with source code) * STMicroelectronics ST9+, ST-10 (comes with source code) * SPARCII, ULTRASPARC * [Siemens C166](https://hex-rays.com/wp-content/uploads/2019/12/c166.gif) (flow) * Tensilica Xtensa * Fujitsu F2MC-16L, Fujitsu F2MC-LC (comes with source code)"},{"location":"user-guide/disassembler/supported-processors.html#ida-home-supported-processors","title":"IDA Home supported processors","text":"IDA Home supported processors  IDA Home is available in 5 versions, each supporting one of the common processor families:  * x86/x64 * ARM/ARM64 * MIPS/MIPS64 * PowerPC/PPC64 * RISC-V/RV64"},{"location":"user-guide/disassembler/supported-processors.html#debugger-modules","title":"Debugger Modules","text":"<p>In IDA Pro all debugger modules are available.</p>"},{"location":"user-guide/disassembler/supported-processors.html#unsupported-processors","title":"Unsupported Processors","text":"<p>If your target processor is not included in the list above, you have two options:</p> <ol> <li>Ask us to add support for the processor sometime in the future: we welcome your feedback about which processors should be added to IDA Pro.</li> <li>Use our SDK and develop your own (free to all, but unsupported).</li> </ol>"},{"location":"user-guide/disassembler/union-tutorial.html","title":"Union Tutorial","text":"<p>Suppose the source text looked like this:</p> <pre><code>#include &lt;stdlib.h&gt;\n\nunion urecord_t\n{\n  char c;\n  short s;\n  long l;\n};\n\nstruct record_t\n{\n  int type;\n#define RTYPE_CHAR      0\n#define RTYPE_SHORT     1\n#define RTYPE_LONG      2\n  urecord_t u;\n};\n\nbool is_negative(record_t *r)\n{\n  switch ( r-&gt;type )\n  {\n    case RTYPE_CHAR:  return r-&gt;u.c &lt; 0;\n    case RTYPE_SHORT: return r-&gt;u.s &lt; 0;\n    case RTYPE_LONG:  return r-&gt;u.l &lt; 0;\n  }\n  abort();\n}\n</code></pre> <p>We have a disassembly like this:</p> <p></p> <p>Let\u2019s improve it with unions. First, let\u2019s define an union type. For this we open the Local types view (menu View|Local types), press Ins to create an union.</p> <p>We create the union using the \"C syntax\" tab of the \"Add type\" dialog:</p> <p></p> <p>Switching to the disassembly window, we apply the defined structure through the Edit|Operand types|Struct offset menu item and select the proper representation for the operand. In the union type case, it may be necessary to select the desired union member with the Edit|Structs|Select union member command. The final disassembly looks like this:</p> <p></p> <p>That\u2019s all folks !</p>"},{"location":"user-guide/disassembler/varstr-tutorial.html","title":"Variable Length Structures Tutorial","text":"<p>Suppose the source text looked like this:</p> <pre><code>struct node_t\n{\n  long id;\n  char *name;\n  long nchild;                  // number of children\n  long child[];                 // children\n};\n\nnode_t n0 = { 0, \"first\",  2, { 1, 2 } };\nnode_t n1 = { 1, \"second\", 1, { 3 }    };\nnode_t n2 = { 2, \"third\",  1, { 4 }    };\nnode_t n3 = { 3, \"fourth\", 0,          };\nnode_t n4 = { 4, \"fifth\",  0,          };\n\n</code></pre> <p>Note that the length of the last field of the structure is not specified. In order to be able to create structures like this in a disassembly we must create a special kind of structure \u2013 a variable sized structure. A variable sized structure is created just as a normal structure is. The only difference is that the last member of the structure should be declared as an array with zero elements. (Just a reminder: arrays are declared with an * hotkey). Here is a sample variable sized structure definition:</p> <p></p> <p>Now we may switch to the disassembly window. In order to apply the defined structure we use Edit -&gt; Structs -&gt; Struct var ... or Alt+Q. But since the structure size cannot be calculated by IDA we need to specify the desired structure size by selecting an area to convert to a structure. Another way to specify the size of a structure would be to use * hotkey. In all cases, you need to tell IDA the exact size of a variable sized structure. The initial disassembly will evolve from this to this:</p> <p></p> <p>to this:</p> <p></p> <p>That\u2019s all folks !</p>"},{"location":"user-guide/disassembler/disassembly-gallery/index.html","title":"Disassembly Gallery","text":""},{"location":"user-guide/disassembler/disassembly-gallery/6301-6303-6800-6801-and-6803-disassembler.html","title":"6301, 6303, 6800, 6801 and 6803 Disassembler","text":"<p>IDA is the most powerful disassembler available for the 6803 microcontroller family.</p> <p>Assembler code</p> <pre><code>RAM:0098                 fcb   3\nRAM:0099                 fcb $E8 ; \u00e8\nRAM:009A                 fcb $C8 ; \u00c8\nRAM:009B                 fcb   0\nRAM:009C ; ---------------------------------------------------------------------------\nRAM:009C                 eorb    #$FF\nRAM:009E                 eorb    byte_64\nRAM:00A1                 eorb    0,x\nRAM:00A3                 eorb    $FF,x\nRAM:00A5                 eorb    byte_3E8\nRAM:00A8                 ldaa    #0\nRAM:00AA                 ldaa    #$FF\nRAM:00AC                 ldaa    byte_64\nRAM:00AF                 ldaa    0,x\nRAM:00B1                 ldaa    $FF,x\nRAM:00B3                 ldaa    byte_3E8\nRAM:00B6                 ldab    #0\nRAM:00B8                 ldab    #$FF\nRAM:00BA                 ldab    byte_64\nRAM:00BD                 ldab    0,x\nRAM:00BF                 ldab    $FF,x\nRAM:00C1                 ldab    byte_3E8\nRAM:00C4                 oraa    #0\nRAM:00C6                 oraa    #$FF\nRAM:00C8                 oraa    byte_64\nRAM:00CB                 oraa    0,x\nRAM:00CD                 oraa    $FF,x\nRAM:00CF                 oraa    byte_3E8\nRAM:00D2                 orab    #0\nRAM:00D4                 orab    #$FF\nRAM:00D6                 orab    byte_64\nRAM:00D9                 orab    0,x\nRAM:00DB                 orab    $FF,x\nRAM:00DD                 orab    byte_3E8\nRAM:00E0                 staa    byte_64\n\n</code></pre> <p>{% file src=\"../../.gitbook/assets/shot_6803.png\" %} Disassembler image</p>"},{"location":"user-guide/disassembler/disassembly-gallery/6502-and-65c02-disassembler.html","title":"6502 and 65C02 Disassembler","text":"<p>IDA is the most powerful existing 6502 disassembler. Companies such as Commodore, Atari and Apple have used the 6502 and 65c02 design. If you are looking for additional information or even less powerful disassemblers, we recommend www.6502.org, a very useful 6502 resource center.</p> <p>Assembler code</p> <pre><code>seg000:0065 ; ---------------------------------------------------------------------------\nseg000:0065                 CMP     $3E8\nseg000:0068                 CMP     $3E8,X\nseg000:006B                 CMP     $3E8,Y\nseg000:006E                 CMP     0,X\nseg000:0071                 CMP     $FF,X\nseg000:0073                 CPX     #0\nseg000:0075                 CPX     #$FF\nseg000:0077                 CPX     byte_64\nseg000:0079                 CPX     $3E8\nseg000:007C                 CPY     #0\nseg000:007E                 CPY     #$FF\nseg000:0080                 CPY     byte_64\nseg000:0082                 CPY     $3E8\nseg000:0085                 DEC     byte_64\nseg000:0087                 DEC     $3E8\nseg000:008A                 DEC     $3E8,X\nseg000:008D                 DEC     0,X\nseg000:0090                 DEC     $FF,X\nseg000:0092                 DEX\nseg000:0093                 DEY\nseg000:0094                 EOR     #0\nseg000:0096                 EOR     #$FF\nseg000:0098                 EOR     ($64),Y\nseg000:009A                 EOR     ($64,X)\nseg000:009C                 EOR     byte_64\nseg000:009E                 EOR     $3E8\nseg000:00A1                 EOR     $3E8,X\nseg000:00A4                 EOR     $3E8,Y\nseg000:00A7                 EOR     0,X\nseg000:00AA                 EOR     $FF,X\nseg000:00AC                 INC     byte_64\nseg000:00AE                 INC     $3E8\nseg000:00B1                 INC     $3E8,X\nseg000:00B4                 INC     0,X\n</code></pre> <p>{% file src=\"../../.gitbook/assets/shot_6502.png\" %} Disassembly image</p>"},{"location":"user-guide/disassembler/disassembly-gallery/68040-amiga.html","title":"68040, Amiga","text":"<p>Assembler code</p> <pre><code>CODE:00010390 ; ===========================================================================\nCODE:00010390\nCODE:00010390 ; Segment type: Pure code\nCODE:00010390 ; segment \"CODE\"\nCODE:00010390\nCODE:00010390 ; =============== S U B R O U T I N E =======================================\nCODE:00010390\nCODE:00010390 ; Attributes: noreturn bp-based frame\nCODE:00010390\nCODE:00010390 _main:                                  ; CODE XREF: startup+CA\u2191p\nCODE:00010390                                         ; startup:domain\u2191p\nCODE:00010390\nCODE:00010390 var_4           = -4\nCODE:00010390\nCODE:00010390                 link    a6,#-4\nCODE:00010394                 jsr     _Init\nCODE:0001039A                 jsr     _InitTrace\nCODE:000103A0\nCODE:000103A0 loc_103A0:                              ; CODE XREF: _main+182\u2193j\nCODE:000103A0                                         ; _main+18C\u2193j\nCODE:000103A0                 jsr     _WaitToAnimate\nCODE:000103A6                 jsr     _ClearControl\nCODE:000103AC                 moveq   #2,d0\nCODE:000103AE                 move.l  d0,-(sp)\nCODE:000103B0                 jsr     sub_1E88C\nCODE:000103B6                 addq.l  #4,sp\nCODE:000103B8                 moveq   #4,d0\nCODE:000103BA                 move.l  d0,-(sp)\nCODE:000103BC                 jsr     sub_1E88C\nCODE:000103C2                 addq.l  #4,sp\nCODE:000103C4                 jsr     _PollJoy\nCODE:000103CA                 jsr     _UserIn\nCODE:000103D0                 tst.l   (dword_2052A).l\nCODE:000103D6                 bne.s   loc_103EA\nCODE:000103D8                 movea.l (_aniObj).l,a0\n</code></pre> <p>{% file src=\"../../.gitbook/assets/shot_68040_amiga.png\" %} Disassembly image</p>"},{"location":"user-guide/disassembler/disassembly-gallery/6805-disassembler.html","title":"6805 Disassembler","text":"<p>The 6805 microcontroller family is Motorola\u2019s simplest and least-expensive family of microcontrollers. As usual there were many variations of the chips and the part numbers usually contain letter and digits, like 68HC05. IDA is the most powerful disassembler available for those microcontrollers.</p> <p>68HC05B6, 68HC05B8, 68HC05B16, 68HC705B16, 68HC05B32, 68HC705B32, 68HC05BD5, 68HC05C8A, 68HC705C8A, 68HC05C9A, 68HC705C9A, 68HC705F32, 68HC05J1A, 68HC705J1A, ,68HC05J5A, 68HC705J5A, 68HC05JB3, 68HC705JB3, 68HC05JB4, 68HC705JB4, 68HC05JJ6, ,68HC705JJ7, 68HC05JP6, 68HC705JP7, 68HC05K3, 68HC705KJ1, 68HC05L16, 68HC705L16, ,68HC05L25, 68HC05LJ5, 68HC05P18A, 68HC05P4A, 68HC05P6, 68HC705P6A, 68HC05PV8A, ,68HC805PV8, 68HC05SR3, 68HC705SR3, 68HC05SU3A, 68HC05X4, 68HC705X4, 68HC05X16, ,68HC05X32, 68HC705X32.</p> <p>Assembler code</p> <pre><code>RESERVED:01DC                 fcb $BF ; \u00bf\nRESERVED:01DD                 fcb $64 ; d\nRESERVED:01DE                 fcb $CF ; \u00cf\nRESERVED:01DF                 fcb   3\nRESERVED:01E0 ; ---------------------------------------------------------------------------\nRESERVED:01E0                 eorb    $97,x\nRESERVED:01E2                 sts     &lt;byte_9D\nRESERVED:01E4                 suba    #$81\nRESERVED:01E6                 subd    #$8F98\nRESERVED:01E9                 oraa    &lt;byte_9C\nRESERVED:01EB                 adca    &lt;byte_9B\nRESERVED:01ED                 lds     #$200E\nRESERVED:01F0                 brn     loc_1FE\nRESERVED:01F2                 bhi     loc_1FE\nRESERVED:01F4                 bls     loc_1FE\nRESERVED:01F6                 bcc     loc_1FE\nRESERVED:01F8                 bcc     loc_1FE\nRESERVED:01FA                 bcs     loc_1FE\nRESERVED:01FC                 bcs     *+2\nRESERVED:01FE\nRESERVED:01FE loc_1FE:                                ; CODE XREF: RESERVED:01F0\u2191j\nRESERVED:01FE                                         ; RESERVED:01F2\u2191j ...\nRESERVED:01FE                 bne     loc_1FE\nRESERVED:0200                 beq     loc_1FE\nRESERVED:0202                 bvc     loc_1FE\nRESERVED:0204                 bvs     loc_1FE\nRESERVED:0206                 bpl     loc_1FE\nRESERVED:0208                 bmi     loc_1FE\nRESERVED:020A                 bge     loc_1FE\nRESERVED:020C                 blt     loc_1FE\nRESERVED:020E                 bgt     loc_1FE\nRESERVED:0210                 ble     loc_1FE\nRESERVED:0212                 jsr     $EA,x\nRESERVED:0212 ; ---------------------------------------------------------------------------\nRESERVED:0214                 fcb   0\n\n</code></pre>"},{"location":"user-guide/disassembler/disassembly-gallery/6808-disassembler.html","title":"6808 Disassembler","text":"<p>IDA is the most powerful disassembler available for the 6808 family of microcontrollers. Which include the following devices:</p> <p>68HC08AB16A, 68HC908AB32, 68HC08AS32, 68HC08AS32A, 68HC908AS32A, 68HC908AS60, ,68HC908AS60A, 68HC08AZ32A, 68HC908AZ32A, 68HC08AZ60A, 68HC908AZ60A, 68HC08BD24, 68HC908BD48, ,68HC908EY16, 68HC908GP32, 68HC908GR4, 68HC908GR8, 68HC908GR8A, 68HC908GR16, 68HC908GT8, ,68HC908GT16, 68HC908GZ8, 68HC908GZ16, 68HC08JB1, 68HC908JB16, 68HC908JB8, 68HC08JB8, 68HC908JK1, ,68HC908JK3, 68HC08JK3, 68HC908JK8, 68HC08JK8, 68HC908JL3, 68HC08JL3, 68HC908JL8, 68HC08JL8, 68HC08JT8, 68HC08KH12, 68HC908KX2, 68HC908KX8, 68HC908LD64, 68HC908LJ12, 68HC908MR8, 68HC908MR16, 68HC908MR32, 68HC908QT1, 68HC908QT2, 68HC908QT4, 68HC908QY1, 68HC908QY2, 68HC908QY4, 68HC908RF2, ,8HC908RK2, 68HC908SR12, MC3PHAC, MC9S08GB32, MC9S08GB60, MC9S08GT32, MC9S08GT60.</p> <p>Assembler code</p> <pre><code>EXTRA0_87:0000C1B5\nEXTRA0_87:0000C1B5 ; =============== S U B R O U T I N E =======================================\nEXTRA0_87:0000C1B5\nEXTRA0_87:0000C1B5\nEXTRA0_87:0000C1B5                 ; public App_OnReadValues\nEXTRA0_87:0000C1B5 App_OnReadValues:                       ; CODE XREF: main+2A9\u2193P\nEXTRA0_87:0000C1B5                 pshx\nEXTRA0_87:0000C1B6                 pshh\nEXTRA0_87:0000C1B7                 tax\nEXTRA0_87:0000C1B8                 add     2, sp1\nEXTRA0_87:0000C1BB                 sta     1, sp1\nEXTRA0_87:0000C1BE                 cpx     #1\nEXTRA0_87:0000C1C0                 txa\nEXTRA0_87:0000C1C1                 bhi     loc_C1D2\nEXTRA0_87:0000C1C3                 tsx\nEXTRA0_87:0000C1C4                 ldx     , x\nEXTRA0_87:0000C1C5                 cpx     #2\nEXTRA0_87:0000C1C7                 bcs     loc_C1D2\nEXTRA0_87:0000C1C9                 brset   DDRF6, _LEDC, loc_C1CE\nEXTRA0_87:0000C1CC                 clrx\nEXTRA0_87:0000C1CD                 skip2\nEXTRA0_87:0000C1CE\nEXTRA0_87:0000C1CE loc_C1CE:                               ; CODE XREF: App_OnReadValues+14\u2191j\nEXTRA0_87:0000C1CE                 ldx     #1\nEXTRA0_87:0000C1D0                 stx     byte_70\nEXTRA0_87:0000C1D2\nEXTRA0_87:0000C1D2 loc_C1D2:                               ; CODE XREF: App_OnReadValues+C\u2191j\nEXTRA0_87:0000C1D2                                         ; App_OnReadValues+12\u2191j\nEXTRA0_87:0000C1D2                 ldx     #$6F ; 'o'\nEXTRA0_87:0000C1D4                 pshx\nEXTRA0_87:0000C1D5                 tsx\nEXTRA0_87:0000C1D6                 ldx     2, x1\nEXTRA0_87:0000C1D8                 jsr     SSD_CopyParmsToAppBuffer\nEXTRA0_87:0000C1DB                 ais     #3\nEXTRA0_87:0000C1DD                 rts\nEXTRA0_87:0000C1DD ; End of function App_OnReadValues\nEXTRA0_87:0000C1DD\n</code></pre>"},{"location":"user-guide/disassembler/disassembly-gallery/6809-disassembler.html","title":"6809 Disassembler","text":"<p>FLEX is the name of the Operating System for the Motorola 6800 and 6809. IDA can disassemble OS9 object and FLEX STX files</p> <p>Assembler code\\</p> <pre><code>TEXT:102F                 bcs     loc_1065\nTEXT:1031                 leax    ,u\nTEXT:1033\nTEXT:1033 loc_1033                                * CODE XREF: start+25\u2193j\nTEXT:1033                 clr     ,x+\nTEXT:1035                 subd    #1\nTEXT:1038                 bhi     loc_1033\nTEXT:103A                 stu     $80\nTEXT:103C                 ldd     ,s++\nTEXT:103E                 std     $B0\nTEXT:1040                 ldd     ,s++\nTEXT:1042                 leax    d,u\nTEXT:1044                 stx     $82\nTEXT:1046                 ldd     $B0\nTEXT:1048                 leax    d,x\nTEXT:104A                 stx     $B0\nTEXT:104C                 ldx     $88\nTEXT:104E                 OS9     F$All64 * '0'   * Allocate Process/Path Descriptor\nTEXT:1051                 bcs     loc_1065\nTEXT:1053                 stx     $88\nTEXT:1055                 OS9     F$Ret64 * '1'   * Return Process/Path Descriptor\nTEXT:1058                 leax    word_16A2,pc\nTEXT:105C                 stx     $26\nTEXT:105E                 leay    word_1067,pc\nTEXT:1061                 OS9     F$SSvc * '2'    * Service Request Table Initialization\nTEXT:1064                 rts\nTEXT:1065 * ---------------------------------------------------------------------------\nTEXT:1065\nTEXT:1065 loc_1065                                * CODE XREF: start+1C\u2191j\nTEXT:1065                                         * start+3E\u2191j\nTEXT:1065                 jmp     $6B\nTEXT:1065 * End of function start\nTEXT:1065\nTEXT:1065 * ---------------------------------------------------------------------------\nTEXT:1067 word_1067       fdb $7F00               * DATA XREF: start+4B\u2191r\n</code></pre>"},{"location":"user-guide/disassembler/disassembly-gallery/6809-os9-flex-disassembler.html","title":"6809 OS9 Flex Disassembler","text":"<p>FLEX is the name of the Operating System for the Motorola 6800 and 6809. IDA can disassemble OS9 object and FLEX STX files and is probably the most powerful disassembler for that platform.</p> <p>Assembler code</p> <pre><code>TEXT:54A5\nTEXT:54A5 * =============== S U B R O U T I N E =======================================\nTEXT:54A5\nTEXT:54A5\nTEXT:54A5 sub_54A5                                * CODE XREF: sub_4F06+78\u2191P\nTEXT:54A5                                         * sub_5048+1CB\u2191P ...\nTEXT:54A5                 pshs    dpr,y,u\nTEXT:54A7                 ldy     7,s\nTEXT:54AA                 ldx     ,y\nTEXT:54AC                 ldd     9,s\nTEXT:54AE                 aslb\nTEXT:54AF                 leay    b,y\nTEXT:54B1                 ldd     $B,s\nTEXT:54B3                 pshs    a,b,x\nTEXT:54B5                 tfr     b,a\nTEXT:54B7                 ldu     ,y\nTEXT:54B9                 beq     loc_54BD\nTEXT:54BB                 jsr     ,u\nTEXT:54BD\nTEXT:54BD loc_54BD                                * CODE XREF: sub_54A5+14\u2191j\nTEXT:54BD                 tfr     a,b\nTEXT:54BF                 clra\nTEXT:54C0                 leas    4,s\nTEXT:54C2                 puls    pcr,u,y,dpr\nTEXT:54C2 * End of function sub_54A5\nTEXT:54C2\nTEXT:54C4\nTEXT:54C4 * =============== S U B R O U T I N E =======================================\nTEXT:54C4\nTEXT:54C4\nTEXT:54C4 sub_54C4                                * CODE XREF: sub_4C67+63\u2191P\nTEXT:54C4                                         * sub_4C67+87\u2191P ...\nTEXT:54C4                 pshs    dpr,y,u\nTEXT:54C6                 lda     $C,s\nTEXT:54C8                 ldx     7,s\n\n</code></pre>"},{"location":"user-guide/disassembler/disassembly-gallery/6811-disassembler.html","title":"6811 Disassembler","text":"<p>The 68HC11 is a powerful 8-bit data, 16-bit address microcontroller from Motorola. IDA is, without any doubts, the most powerful 6811 disassembler. Here are a few part numbers of that huge family: 68HC11D0, 68HC11D3, 68HC711D3, 68HC11E0, 68HC11E1, 68HC11E9, 68HC11EA9, 68HC711E9, 68HC11E20, 68HC711E20, 68HC11F1, 68HC11K0, 68HC11K1, 68HC11K4, 68HC11KS1, 68HC11KS2, 68HC711KS2, 68HC11P1, 68HC11P2.</p> <p>Assembler code\\</p> <pre><code>RAM:00B4                 asl     $B4,y\nRAM:00B7                 asl     $88,y\nRAM:00BA\nRAM:00BA loc_BA:                                 ; DATA XREF: RAM:loc_BA\u2193w\nRAM:00BA                 asl     loc_BA\nRAM:00BD                 asl     word_8888\nRAM:00C0                 asra\nRAM:00C1                 asrb\nRAM:00C2                 asr     word_8888\nRAM:00C5                 asr     word_8888\nRAM:00C8                 asr     0,x\nRAM:00CA                 asr     $CA,x\nRAM:00CC                 asr     $88,x\nRAM:00CE                 asr     0,y\nRAM:00D1                 asr     $D1,y\nRAM:00D4                 asr     $88,y\nRAM:00D7\nRAM:00D7 loc_D7:                                 ; DATA XREF: RAM:loc_D7\u2193w\nRAM:00D7                 asr     loc_D7\nRAM:00DA                 asr     word_8888\nRAM:00DD                 bclr    $DD,x 0\nRAM:00E0                 bclr    $E0,x $88 ; '\u02c6'\nRAM:00E3                 bclr    $88,x $88 ; '\u02c6'\nRAM:00E6                 bclr    $E6,y $88 ; '\u02c6'\nRAM:00EA                 bclr    $88,y $88 ; '\u02c6'\nRAM:00EE                 bita    #0\nRAM:00F0\nRAM:00F0 loc_F0:                                 ; DATA XREF: RAM:loc_F0\u2193r\nRAM:00F0                 bita    &lt;loc_F0\nRAM:00F2                 bita    0,x\nRAM:00F4                 bita    $F4,x\nRAM:00F6                 bita    $88,x\nRAM:00F8                 bita    0,y\nRAM:00FB                 bita    $FB,y\nRAM:00FB ; ---------------------------------------------------------------------------\n\n</code></pre>"},{"location":"user-guide/disassembler/disassembly-gallery/68hc12-disassembler.html","title":"68HC12 Disassembler","text":"<p>The 68HC12 is a Motorola microcontroller that has been widely used by the automotive industry. IDA is the most powerful disassembler available for the 68HC12 family and a car tuner\u2019s favourite. Typical parts include the 68HC812A4, 68HC912B32, 68HC912BC32, 68HC12BC32, 68HC12BE32, 68HC12D60, 68HC912D60, 68HC912D60A, 68HC912D60C, 68HC912D60P, 68HC912DG128A, 68HC912DG128C, 68HC912DG128P, 68HC912DT128A, 68HC912DT128C, 68HC912DT128P and, in its automotive versions, 68HC912B32, 68HC912BC32, 68HC12BC32, 68HC12BE32, 68HC912D60A, 68HC912D60C, 68HC912D60P, 68HC12D60, 68HC912DG128A, 68HC912DG128C, 68HC912DG128P, 68HC912DT128A, 68HC912DT128C, 68HC912DT128P.</p> <p>Assembler code</p> <pre><code>.text:00000042\n.text:00000042 ; =============== S U B R O U T I N E =======================================\n.text:00000042\n.text:00000042\n.text:00000042 L26:                                    ; CODE XREF: L26:L87\u2193p\n.text:00000042                 addd    symbol141\n.text:00000045\n.text:00000045 L27:\n.text:00000045                 addd    $76,x\n.text:00000048\n.text:00000048 L28:\n.text:00000048                 anda    #$5A ; 'Z'\n.text:0000004A\n.text:0000004A L29:\n.text:0000004A                 anda    Z46\n.text:0000004C\n.text:0000004C L30:\n.text:0000004C                 anda    $63,x\n.text:0000004F\n.text:0000004F L31:\n.text:0000004F                 anda    symbol51\n.text:00000052\n.text:00000052 L32:\n.text:00000052                 anda    $9F,x\n.text:00000055\n.text:00000055 L33:\n.text:00000055                 andb    #$C9 ; '\u00c9'\n.text:00000057\n.text:00000057 L34:\n.text:00000057                 andb    Z154\n.text:00000059\n.text:00000059 L35:\n.text:00000059                 andb    $66,x\n.text:0000005C\n.text:0000005C L36:\n.text:0000005C                 andb    symbol50\n</code></pre>"},{"location":"user-guide/disassembler/disassembly-gallery/68hc16-disassembler.html","title":"68HC16 Disassembler","text":"<p>The 68HC16 is a Motorola microcontroller that is used, among other things, in the automotive industry: IDA is the most powerful disassembler for the 68HC16Y1 , 68HC16Z1, 68HC16Z3 processors and is widely used by car tuner and race teams.</p> <p>Assembler code</p> <pre><code>RESERVED:01BC                 fcb  $D\nRESERVED:01BD                 fcb $7F ; \u007f\nRESERVED:01BE                 fcb  $D\nRESERVED:01BF                 fcb $80 ; \u20ac\nRESERVED:01C0 ; ---------------------------------------------------------------------------\nRESERVED:01C0                 sec\nRESERVED:01C1                 stx     byte_E00\nRESERVED:01C4                 cli\nRESERVED:01C5                 nop\nRESERVED:01C6                 cli\nRESERVED:01C7                 clr     byte_E80\nRESERVED:01CA                 cli\nRESERVED:01CB                 stx     byte_F00\nRESERVED:01CE                 sei\nRESERVED:01CF                 nop\nRESERVED:01D0                 sei\nRESERVED:01D1                 clr     byte_F80\nRESERVED:01D4                 sei\nRESERVED:01D5                 stx     PORTA           ; Port A data\nRESERVED:01D8                 sba\nRESERVED:01D9                 nop\nRESERVED:01DA                 sba\nRESERVED:01DB                 clr     byte_1080\nRESERVED:01DE                 sba\nRESERVED:01DF                 stx     byte_1100\nRESERVED:01E2                 cba\nRESERVED:01E3                 nop\nRESERVED:01E4                 cba\nRESERVED:01E5                 clr     byte_1180\nRESERVED:01E8                 cba\nRESERVED:01E9                 stx     byte_1200\nRESERVED:01EC                 brset   &lt;byte_1 $12 loc_26F\nRESERVED:01F0\nRESERVED:01F0 loc_1F0:                                ; CODE XREF: RESERVED:loc_1F0\u2191j\nRESERVED:01F0                 brset   &lt;byte_80 $12 loc_1F0+3\n</code></pre>"},{"location":"user-guide/disassembler/disassembly-gallery/68k-amiga-disassembler.html","title":"68k Amiga Disassembler","text":"<p>IDA is the best disassembler for Amiga hunk files. The Motorola 68K family of processors is huge and very widely used. A few sample parts: MC68000, MC68010, MC68020, MC68030, MC68040, MC68330, MC68882, MC68851, MC68020EX, MC68302 Integrated Communication Processor, MC68306 68K/ColdFire, MC68331 68K/ColdFire, MC68332 68K/ColdFire, MC68336 68K/ColdFire, MC68340 68K/ColdFire, MC68360 Integrated Communication Processor, MC68F375 68K/ColdFire, MC68376 68K/ColdFire, etc\u2026.</p> <p>Assembler code</p> <pre><code>CODE:00010190\nCODE:00010190 ; =============== S U B R O U T I N E =======================================\nCODE:00010190\nCODE:00010190\nCODE:00010190 waitmsg:                                ; CODE XREF: startup+DE\u2191p\nCODE:00010190                 lea     $5C(a4),a0\nCODE:00010194                 jsr     -$180(a6)\nCODE:00010198                 lea     $5C(a4),a0\nCODE:0001019C                 jsr     -$174(a6)\nCODE:000101A0                 rts\nCODE:000101A0 ; End of function waitmsg\nCODE:000101A0\nCODE:000101A2\nCODE:000101A2 ; =============== S U B R O U T I N E =======================================\nCODE:000101A2\nCODE:000101A2\nCODE:000101A2 openDOS:                                ; CODE XREF: startup:fromCLI\u2191p\nCODE:000101A2                                         ; startup:fromWorkbench\u2191p\nCODE:000101A2\nCODE:000101A2 ; FUNCTION CHUNK AT CODE:00010176 SIZE 0000001A BYTES\nCODE:000101A2\nCODE:000101A2                 clr.l   (_DOSBase).l\nCODE:000101A8                 lea     (DOSName).l,a1  ; \"dos.library\"\nCODE:000101AE                 move.l  #$1E,d0\nCODE:000101B4                 jsr     -$228(a6)\nCODE:000101B8                 move.l  d0,(_DOSBase).l\nCODE:000101BE                 beq.s   noDOS\nCODE:000101C0                 rts\nCODE:000101C0 ; End of function openDOS\nCODE:000101C0\nCODE:000101C0 ; ---------------------------------------------------------------------------\nCODE:000101C2                 align 4\nCODE:000101C2 ; end of 'CODE'\nCODE:000101C2\nDATA:000101D0 ; ===========================================================================\nDATA:000101D0\nDATA:000101D0 ; Segment type: Pure data\nDATA:000101D0 ; segment \"DATA\"\nDATA:000101D0 VerRev:         dc.l startup\n</code></pre>"},{"location":"user-guide/disassembler/disassembly-gallery/68k-mac-os.html","title":"68k Mac OS","text":"<p>IDA is the most powerful disassembler for Max OS 8 and Mac OS 9 PEF files.</p> <p>The Motorola 68K family of processors is huge and very widely used. A few sample parts: MC68000, MC68010, MC68020, MC68030, MC68040, MC68330, MC68882, MC68851, MC68020EX, MC68302 Integrated Communication Processor, MC68306 68K/ColdFire, MC68331 68K/ColdFire, MC68332 68K/ColdFire, MC68336 68K/ColdFire, MC68340 68K/ColdFire, MC68360 Integrated Communication Processor, MC68F375 68K/ColdFire, MC68376 68K/ColdFire, etc.</p> <p>Assembler code</p> <pre><code>seg000:40800530\nseg000:40800530 ; =============== S U B R O U T I N E =======================================\nseg000:40800530\nseg000:40800530\nseg000:40800530 sub_0_40800530:                         ; CODE XREF: sub_0_40800194+164\u2191p\nseg000:40800530                 pea     -4(a5)\nseg000:40800534                 _InitGraf               ; f\nseg000:40800536                 pea     -$200(a6)\nseg000:4080053A                 _OpenCPort              ; ort\nseg000:4080053C                 movea.l (a5),a2\nseg000:4080053E                 pea     -$6C(a2)\nseg000:40800542                 _SetCursor              ; or\nseg000:40800544                 lea     -$74(a2),a0\nseg000:40800548                 move.l  a0,-(sp)\nseg000:4080054A                 lea     ($9FA).w,a1\nseg000:4080054E                 move.l  a1,-(sp)\nseg000:40800550                 move.l  a1,-(sp)\nseg000:40800552                 move.l  (a0)+,(a1)+\nseg000:40800554                 move.l  (a0),(a1)\nseg000:40800556                 move.l  #-$20003,-(sp)\nseg000:4080055C                 _InsetRect              ; ct\nseg000:4080055E                 move.l  #$30003,-(sp)\nseg000:40800564                 _PenSize\nseg000:40800566                 move.l  #$160016,-(sp)\nseg000:4080056C                 _FrameRoundRect         ; undRect\nseg000:4080056E                 _PenNormal              ; al\nseg000:40800570                 move.l  #$100010,-(sp)\nseg000:40800576                 pea     -$18(a2)\nseg000:4080057A                 _FillRoundRect          ; ndRect\nseg000:4080057C                 rts\nseg000:4080057C ; End of function sub_0_40800530\nseg000:4080057C\nseg000:4080057C ; ---------------------------------------------------------------------------\nseg000:4080057E                 align $10\nseg000:40800580\nseg000:40800580 ; =============== S U B R O U T I N E =======================================\nseg000:40800580\nseg000:40800580\nseg000:40800580 sub_0_40800580:                         ; CODE XREF: sub_0_40800194+80\u2191p\nseg000:40800580                 clr.w   -(sp)\n</code></pre>"},{"location":"user-guide/disassembler/disassembly-gallery/68k-palm-pilot.html","title":"68k Palm Pilot","text":"<p>IDA is the best disassembler for Palm Pilot programs. It supports all Palm OS versions and will even accept partially packed programs. The Palm Pilot uses a 68K processor.</p> <p>The Motorola 68K family of processors is huge and very widely used. A few sample parts: MC68000, MC68010, MC68020, MC68030, MC68040, MC68330, MC68882, MC68851, MC68020EX, MC68302 Integrated Communication Processor, MC68306 68K/ColdFire, MC68331 68K/ColdFire, MC68332 68K/ColdFire, MC68336 68K/ColdFire, MC68340 68K/ColdFire, MC68360 Integrated Communication Processor, MC68F375 68K/ColdFire, MC68376 68K/ColdFire, etc.</p> <p>Assembler code</p> <pre><code>code0001:00000204\ncode0001:00000204 ; =============== S U B R O U T I N E =======================================\ncode0001:00000204\ncode0001:00000204 ; Attributes: bp-based frame\ncode0001:00000204\ncode0001:00000204 proc            sub_204()               ; CODE XREF: sub_31E+A0\u2193p\ncode0001:00000204\ncode0001:00000204 var_68          = -$68\ncode0001:00000204 var_50          = -$50\ncode0001:00000204 arg_0           =  8\ncode0001:00000204 arg_8           =  $10\ncode0001:00000204 arg_A           =  $12\ncode0001:00000204\ncode0001:00000204                 link    a6,#-$50\ncode0001:00000208                 movem.l d3-d6/a2-a3,-(sp)\ncode0001:0000020C                 movea.l arg_0(a6),a3\ncode0001:00000210                 move.w  arg_8(a6),d0\ncode0001:00000214                 beq.s   loc_222\ncode0001:00000216                 addi.w  #-$8000,d0\ncode0001:0000021A                 clr.l   d4\ncode0001:0000021C                 move.w  d0,d4\ncode0001:0000021E                 bra     loc_224\ncode0001:00000222 ; ---------------------------------------------------------------------------\ncode0001:00000222\ncode0001:00000222 loc_222:                                ; CODE XREF: sub_204+10\u2191j\ncode0001:00000222                 moveq   #0,d4\ncode0001:00000224\ncode0001:00000224 loc_224:                                ; CODE XREF: sub_204+1A\u2191j\ncode0001:00000224                 move.w  d4,-(sp)\ncode0001:00000226                 move.l  #$636F6465,-(sp)\ncode0001:0000022C                 systrap DmGet1Resource()\ncode0001:00000230                 move.l  a0,d5\ncode0001:00000232                 addq.w  #6,sp\ncode0001:00000234                 bne.s   loc_272\ncode0001:00000236                 lea     aCouldNotLoadCo(pc),a1 ; \"Could not load code segment #\"\n</code></pre>"},{"location":"user-guide/disassembler/disassembly-gallery/80-86-architecture-dos-extender.html","title":"80\u00d786 Architecture : DOS Extender","text":"<p>Assembler code</p> <pre><code>00003F20\n00003F20 ; =============== S U B R O U T I N E =======================================\n00003F20\n00003F20\n00003F20                 public start\n00003F20 start           proc far\n00003F20                 call    sub_1050\n00003F25                 or      eax, eax\n00003F27                 jz      loc_3F3E\n00003F2D                 lea     edx, large aDpmiServerInit ; \"DPMI server initialization error -- out\"...\n00003F33                 mov     ah, 9\n00003F35                 int     21h             ; DOS - PRINT STRING\n00003F35                                         ; DS:DX -&gt; string terminated by \"$\"\n00003F37                 xor     eax, eax\n00003F39                 jmp     locret_3F44\n00003F3E ; ---------------------------------------------------------------------------\n00003F3E\n00003F3E loc_3F3E:                               ; CODE XREF: start+7\u2191j\n00003F3E                 lea     eax, large SetVectors\n00003F44\n00003F44 locret_3F44:                            ; CODE XREF: start+19\u2191j\n00003F44                 retf\n00003F44 start           endp\n00003F44\n00003F44 _text           ends\n00003F44\n00003F44\n00003F44                 end start\n</code></pre>"},{"location":"user-guide/disassembler/disassembly-gallery/80-86-architecture-geos-app.html","title":"80\u00d786 Architecture: Geos APP","text":"<p>Assembler code</p> <pre><code>seg003:0244                     jmp     ObjMessage      ; Jump\nseg003:0249     ; ---------------------------------------------------------------------------\nseg003:0249\nseg003:0249     loc_49_249:                             ; DATA XREF: seg001:0084\u2191o\nseg003:0249                     push    ax\nseg003:024A                     push    cx\nseg003:024B                     push    dx\nseg003:024C                     push    bp\nseg003:024D                     call    ContactSIMNumber ; Call Procedure\nseg003:0252                     mov     ax, 6181h\nseg003:0255                     cmp     cx, dx          ; Compare Two Operands\nseg003:0257                     jz      short loc_49_25C ; Jump if Zero (ZF=1)\nseg003:0259                     mov     ax, 6180h\nseg003:025C\nseg003:025C     loc_49_25C:                             ; CODE XREF: seg003:0257\u2191j\nseg003:025C                     push    dx\nseg003:025D                     mov     bx, seg seg007\nseg003:0260                     mov     si, 24h ; '$'\nseg003:0263                     mov     di, 8000h\nseg003:0266                     mov     dl, 2\nseg003:0268                     call    ObjMessage      ; Call Procedure\nseg003:026D                     pop     dx\nseg003:026E                     mov     ax, 6181h\nseg003:0271                     or      dx, dx          ; Logical Inclusive OR\nseg003:0273                     jz      short loc_49_278 ; Jump if Zero (ZF=1)\nseg003:0275                     mov     ax, 6180h\nseg003:0278\nseg003:0278     loc_49_278:                             ; CODE XREF: seg003:0273\u2191j\nseg003:0278                     push    ax\nseg003:0279                     mov     bx, seg seg007\nseg003:027C                     mov     si, 48h ; 'H'\nseg003:027F                     mov     di, 8000h\nseg003:0282                     mov     dl, 2\nseg003:0284                     call    ObjMessage      ; Call Procedure\nseg003:0289                     pop     ax\n\n</code></pre>"},{"location":"user-guide/disassembler/disassembly-gallery/80-86-architecture-geos-drv.html","title":"80\u00d786 Architecture: Geos DRV","text":"<p>Assembler code</p> <pre><code>seg003:0A36                 push    si\nseg003:0A37                 push    di\nseg003:0A38                 mov     [bp+var_C], 0\nseg003:0A3D                 mov     [bp+fDocDir], 0\nseg003:0A42                 call    FILEPUSHDIR     ; void pascal FilePushDir(void) in file.h\nseg003:0A47                 test    byte_9E, 1\nseg003:0A4C                 jz      short loc_410D\nseg003:0A4E                 mov     [bp+fDocDir], 8\nseg003:0A53                 push    [bp+fDocDir]    ; fDocDir\nseg003:0A56                 call    FOAMSETDOCUMENTDIR ; void pascal FoamSetDocumentDir(FDocumentDir fDocDir) in foam.goh\nseg003:0A5B                 jmp     short loc_411A\nseg003:0A5D ; ---------------------------------------------------------------------------\nseg003:0A5D\nseg003:0A5D loc_410D:                               ; CODE XREF: sub_40E0+1C\u2191j\nseg003:0A5D                 mov     [bp+var_C], 31h ; '1'\nseg003:0A62                 push    [bp+var_C]      ; sp\nseg003:0A65                 call    FILESETSTANDARDPATH ; void pascal FileSetStandardPath(StandardPath sp) in file.h\nseg003:0A6A\nseg003:0A6A loc_411A:                               ; CODE XREF: sub_40E0+2B\u2191j\nseg003:0A6A                 push    0\nseg003:0A6C                 push    0C800h\nseg003:0A6F                 call    sub_5B83\nseg003:0A74                 mov     [bp+var_16], ax\nseg003:0A77                 cmp     [bp+var_16], 0\nseg003:0A7B                 jz      short loc_419E\nseg003:0A7D                 test    byte_9E, 1\nseg003:0A82                 jz      short loc_4148\nseg003:0A84                 push    word ptr [bp+name+2]\nseg003:0A87                 push    word ptr [bp+name] ; name\nseg003:0A8A                 call    FILEDELETE      ; word pascal FileDelete(const char *name) in file.h\nseg003:0A8F                 les     bx, [bp+name]\nseg003:0A92                 mov     byte ptr es:[bx], 0\nseg003:0A96                 jmp     short loc_4188\nseg003:0A98 ; ---------------------------------------------------------------------------\nseg003:0A98\nseg003:0A98 loc_4148:                               ; CODE XREF: sub_40E0+52\u2191j\nseg003:0A98                 xor     si, si\n\n</code></pre>"},{"location":"user-guide/disassembler/disassembly-gallery/80-86-architecture-geos-lib.html","title":"80\u00d786 Architecture: Geos LIB","text":"<p>Assembler code</p> <pre><code>seg001:02BA                 call    near ptr VisCheckIfVisGrown\nseg001:02BD                 jnb     short loc_C3B\nseg001:02BF                 push    di\nseg001:02C0                 push    es\nseg001:02C1                 mov     di, seg seg087\nseg001:02C4                 mov     es, di\nseg001:02C6                 assume es:seg087\nseg001:02C6                 mov     di, 1548h\nseg001:02C9                 call    ObjIsObjectInClass\nseg001:02CE                 pop     es\nseg001:02CF                 assume es:nothing\nseg001:02CF                 pop     di\nseg001:02D0                 jb      short loc_C1A\nseg001:02D2                 call    FatalError\nseg001:02D7                 mov     ax, 31h ; '1'\nseg001:02DA\nseg001:02DA loc_C1A:                                ; CODE XREF: GenClass_24967+2F\u2191j\nseg001:02DA                 mov     di, [si]\nseg001:02DC                 add     di, [di+4]\nseg001:02DF                 test    byte ptr [di+9], 1\nseg001:02E3                 jz      short loc_C3B\nseg001:02E5                 push    cx\nseg001:02E6                 mov     cx, 0FFFFh\nseg001:02E9                 push    cs\nseg001:02EA                 call    near ptr GenClass_24967\nseg001:02ED                 pop     cx\nseg001:02EE                 jb      short loc_C38\nseg001:02F0                 call    FatalError\nseg001:02F5                 mov     ax, 31h ; '1'\nseg001:02F8\nseg001:02F8 loc_C38:                                ; CODE XREF: GenClass_24967+4D\u2191j\nseg001:02F8                 stc\nseg001:02F9                 jnz     short loc_C60\nseg001:02FB\nseg001:02FB loc_C3B:                                ; CODE XREF: GenClass_24967+16\u2191j\nseg001:02FB                                         ; GenClass_24967+1C\u2191j ...\nseg001:02FB                 mov     ax, si\n</code></pre>"},{"location":"user-guide/disassembler/disassembly-gallery/80-86-architecture-gnu-coff-format.html","title":"80\u00d786 Architecture: GNU COFF Format","text":"<p>Assembler code</p> <pre><code>.text:00000178\n.text:00000178 loc_178:                                ; CODE XREF: XDPSCreateStandardColormaps+53\u2191j\n.text:00000178                 test    esi, esi\n.text:0000017A                 jnz     short loc_19C\n.text:0000017C                 lea     eax, [ebp+var_84]\n.text:00000182                 push    eax\n.text:00000183                 push    [ebp+arg_4]\n.text:00000186                 push    [ebp+arg_0]\n.text:00000189                 call    XGetWindowAttributes\n.text:0000018E                 add     esp, 0Ch\n.text:00000191                 test    eax, eax\n.text:00000193                 jz      loc_21C\n.text:00000199                 mov     esi, [ebp+var_6C]\n.text:0000019C\n.text:0000019C loc_19C:                                ; CODE XREF: XDPSCreateStandardColormaps+57\u2191j\n.text:0000019C                                         ; XDPSCreateStandardColormaps+62\u2191j\n.text:0000019C                 cmp     dword ptr [edi], 0\n.text:0000019F                 jnz     short loc_1A7\n.text:000001A1                 cmp     [ebp+arg_4], 0\n.text:000001A5                 jz      short loc_21C\n.text:000001A7\n.text:000001A7 loc_1A7:                                ; CODE XREF: XDPSCreateStandardColormaps+87\u2191j\n.text:000001A7                 push    [ebp+arg_0]\n.text:000001AA                 call    FindDpyRec\n.text:000001AF                 mov     large ds:75E4h, eax\n.text:000001B4                 add     esp, 4\n.text:000001B7                 test    eax, eax\n.text:000001B9                 jz      loc_570\n.text:000001BF                 push    esi\n.text:000001C0                 call    XVisualIDFromVisual\n.text:000001C5                 mov     [ebp+var_24], eax\n.text:000001C8                 lea     eax, [ebp+var_88]\n.text:000001CE                 push    eax\n.text:000001CF                 lea     eax, [ebp+var_28]\n.text:000001D2                 push    eax\n</code></pre>"},{"location":"user-guide/disassembler/disassembly-gallery/80-86-architecture-netware-nlm.html","title":"80\u00d786 Architecture: Netware NLM","text":"<p>Assembler code</p> <pre><code>.bss:000000CA\n.bss:000000CA loc_CA:                                 ; CODE XREF: nlm_start+33\u2191j\n.bss:000000CA                                         ; nlm_start+A1\u2191j ...\n.bss:000000CA                 mov     dword_E150, edi\n.bss:000000D0                 push    54524C41h\n.bss:000000D5                 push    offset aAllocMemory ; \"Alloc Memory\"\n.bss:000000DA                 push    edi\n.bss:000000DB                 call    AllocateResourceTag\n.bss:000000E0                 mov     dword_E018, eax\n.bss:000000E5                 push    544D4E43h\n.bss:000000EA                 push    offset aNonMovableMemo ; \"Non Movable Memory\"\n.bss:000000EF                 push    edi\n.bss:000000F0                 call    AllocateResourceTag\n.bss:000000F5                 mov     dword_E020, eax\n.bss:000000FA                 push    53435250h\n.bss:000000FF                 push    offset aProcesses ; \"Processes\"\n.bss:00000104                 push    edi\n.bss:00000105                 call    AllocateResourceTag\n.bss:0000010A                 mov     dword_E15C, eax\n.bss:0000010F                 push    4C4B5344h\n.bss:00000114                 push    offset aDiskLocks ; \"Disk Locks\"\n.bss:00000119                 push    edi\n.bss:0000011A                 call    AllocateResourceTag\n.bss:0000011F                 mov     dword_E01C, eax\n.bss:00000124                 push    4E524353h\n.bss:00000129                 push    offset aScreens ; \"Screens\"\n.bss:0000012E                 push    edi\n.bss:0000012F                 call    AllocateResourceTag\n.bss:00000134                 add     esp, 3Ch\n.bss:00000137                 mov     dword_E158, eax\n.bss:0000013C                 push    504D4553h\n.bss:00000141                 push    offset aSemaphores ; \"Semaphores\"\n.bss:00000146                 push    edi\n.bss:00000147                 call    AllocateResourceTag\n.bss:0000014C                 mov     dword_E160, eax\n</code></pre>"},{"location":"user-guide/disassembler/disassembly-gallery/80-86-architecture-os-2-linear-executable-format.html","title":"80\u00d786 Architecture: OS/2 Linear Executable Format","text":"<p>Assembler code</p> <pre><code>cseg01:000102E1                 lea     eax, [ebp+var_44]\ncseg01:000102E4                 push    5\ncseg01:000102E6                 push    eax\ncseg01:000102E7                 push    esi\ncseg01:000102E8                 call    WinFillRect\ncseg01:000102ED                 add     esp, 0Ch\ncseg01:000102F0                 mov     [ebp+var_38], 0FAh ; '\u00fa'\ncseg01:000102F7                 mov     [ebp+var_40], 0E9h ; '\u00e9'\ncseg01:000102FE                 lea     eax, [ebp+var_84]\ncseg01:00010304                 push    eax\ncseg01:00010305                 push    40h ; '@'\ncseg01:00010307                 push    2Bh ; '+'\ncseg01:00010309                 push    0\ncseg01:0001030B                 push    dword_20874\ncseg01:00010311                 call    WinLoadString\ncseg01:00010316                 add     esp, 14h\ncseg01:00010319                 lea     eax, [ebp+var_84]\ncseg01:0001031F                 lea     edx, [ebp+var_44]\ncseg01:00010322                 push    100h\ncseg01:00010327                 push    0\ncseg01:00010329                 push    0FFFFFFFFh\ncseg01:0001032B                 push    edx\ncseg01:0001032C                 push    eax\ncseg01:0001032D                 push    0FFFFFFFFh\ncseg01:0001032F                 push    esi\ncseg01:00010330                 call    WinDrawText\ncseg01:00010335                 add     esp, 1Ch\ncseg01:00010338                 push    esi\ncseg01:00010339                 call    WinEndPaint\ncseg01:0001033E                 add     esp, 4\ncseg01:00010341                 mov     eax, 1\ncseg01:00010346                 pop     esi\ncseg01:00010347                 pop     edi\ncseg01:00010348                 pop     ebx\ncseg01:00010349                 leave\n</code></pre>"},{"location":"user-guide/disassembler/disassembly-gallery/80-86-architecture-qnx-executable.html","title":"80\u00d786 Architecture: QNX Executable","text":"<p>Assembler code</p> <pre><code>cseg_01:0000A3A1                 mov     [ebp-8], edx\ncseg_01:0000A3A4                 mov     edx, 0Eh\ncseg_01:0000A3A9                 call    __setmagicvar_\ncseg_01:0000A3AE                 mov     eax, cs\ncseg_01:0000A3B0                 mov     edx, 0Dh\ncseg_01:0000A3B5                 mov     [ebp-8], ax\ncseg_01:0000A3B9                 lea     eax, [ebp-8]\ncseg_01:0000A3BC                 mov     ebx, 0A34Ah\ncseg_01:0000A3C1                 call    __setmagicvar_\ncseg_01:0000A3C6                 mov     eax, 1\ncseg_01:0000A3CB                 mov     off_C304, ebx\ncseg_01:0000A3D1                 call    __InitRtns\ncseg_01:0000A3D6                 mov     eax, dword_C314\ncseg_01:0000A3DB                 add     eax, 3\ncseg_01:0000A3DE                 and     al, 0FCh\ncseg_01:0000A3E0                 xor     edx, edx\ncseg_01:0000A3E2                 sub     esp, eax\ncseg_01:0000A3E4                 mov     ecx, esp\ncseg_01:0000A3E6                 mov     ebx, dword_C314\ncseg_01:0000A3EC                 mov     eax, ecx\ncseg_01:0000A3EE                 call    memset_\ncseg_01:0000A3F3                 mov     eax, ecx\ncseg_01:0000A3F5                 mov     edx, [ebp-4]\ncseg_01:0000A3F8                 call    __QNXInit_\ncseg_01:0000A3FD                 mov     ebx, esi\ncseg_01:0000A3FF                 mov     eax, 0FFh\ncseg_01:0000A404                 mov     ecx, 2000h\ncseg_01:0000A409                 call    __InitRtns\ncseg_01:0000A40E                 mov     dword_C318, ecx\ncseg_01:0000A414                 mov     eax, edi\ncseg_01:0000A416                 push    ds\ncseg_01:0000A417                 pop     es\ncseg_01:0000A418                 assume es:dseg_01\ncseg_01:0000A418                 call    sub_A010\ncseg_01:0000A41D                 call    exit_\n\n</code></pre>"},{"location":"user-guide/disassembler/disassembly-gallery/80-86-architecture-watcom-runtime-1.html","title":"80\u00d786 Architecture: Watcom Runtime","text":"<p>Assembler code</p> <pre><code>cseg01:1044\ncseg01:1044 ; =============== S U B R O U T I N E =======================================\ncseg01:1044\ncseg01:1044 ; Attributes: library function\ncseg01:1044\ncseg01:1044 __MemFree       proc far                ; CODE XREF: _ffree_+1A\u2193p\ncseg01:1044                                         ; _nfree_+31\u2193p ...\ncseg01:1044\ncseg01:1044 ; FUNCTION CHUNK AT cseg01:1041 SIZE 00000003 BYTES\ncseg01:1044\ncseg01:1044                 push    si\ncseg01:1045                 push    di\ncseg01:1046                 push    cx\ncseg01:1047                 push    ds\ncseg01:1048                 mov     ds, dx\ncseg01:104A                 or      ax, ax\ncseg01:104C                 jz      short loc_1041\ncseg01:104E                 mov     si, ax\ncseg01:1050                 sub     si, 2\ncseg01:1053                 mov     ax, [si]\ncseg01:1055                 test    al, 1\ncseg01:1057                 jz      short loc_1041\ncseg01:1059                 and     al, 0FEh\ncseg01:105B                 mov     di, si\ncseg01:105D                 add     di, ax\ncseg01:105F                 test    word ptr [di], 1\ncseg01:1063                 jnz     short loc_1084\ncseg01:1065                 cmp     di, [bx+6]\ncseg01:1068                 jnz     short loc_106D\ncseg01:106A                 mov     [bx+6], si\ncseg01:106D\ncseg01:106D loc_106D:                               ; CODE XREF: __MemFree+24\u2191j\ncseg01:106D                 add     ax, [di]\ncseg01:106F                 mov     [si], ax\ncseg01:1071                 push    bx\n</code></pre>"},{"location":"user-guide/disassembler/disassembly-gallery/80-86-architecture-watcom-runtime.html","title":"80\u00d786 Architecture : Watcom Runtime","text":"<p>Assembler code</p> <pre><code>0010600C                 jmp     loc_105F29\n00106011 ; ---------------------------------------------------------------------------\n00106011\n00106011 loc_106011:                             ; DATA XREF: .text:00105E2E\u2191o\n00106011                 mov     edx, offset aNew ; \"new\"\n00106016                 jmp     loc_105F29\n0010601B ; ---------------------------------------------------------------------------\n0010601B\n0010601B loc_10601B:                             ; DATA XREF: .text:00105E66\u2191o\n0010601B                 mov     edx, offset aNew_0 ; \"new []\"\n00106020                 jmp     loc_105F29\n00106025 ; ---------------------------------------------------------------------------\n00106025\n00106025 loc_106025:                             ; DATA XREF: .text:00105E32\u2191o\n00106025                 mov     edx, offset aDelete ; \"delete\"\n0010602A                 jmp     loc_105F29\n0010602F ; ---------------------------------------------------------------------------\n0010602F\n0010602F loc_10602F:                             ; DATA XREF: .text:00105E62\u2191o\n0010602F                 mov     edx, offset aDelete_0 ; \"delete []\"\n00106034                 jmp     loc_105F29\n00106039 ; ---------------------------------------------------------------------------\n00106039\n00106039 loc_106039:                             ; DATA XREF: .text:00105E36\u2191o\n00106039                 movzx   edx, byte_10D7FC\n00106040                 jmp     loc_105EC9\n00106045 ; ---------------------------------------------------------------------------\n00106045\n00106045 loc_106045:                             ; DATA XREF: .text:00105E56\u2191o\n00106045                 test    byte ptr [ecx+34h], 8\n00106049                 jz      short loc_106052\n0010604B                 mov     eax, ecx\n0010604D                 call    sub_105D68\n00106052\n00106052 loc_106052:                             ; CODE XREF: .text:00106049\u2191j\n00106052                 mov     edx, offset asc_10D83F ; \"::\"\n</code></pre>"},{"location":"user-guide/disassembler/disassembly-gallery/80-86-architecture-windows-16-bits-dll.html","title":"80\u00d786 Architecture : Windows 16 bits DLL","text":"<p>Assembler code</p> <pre><code>cseg07:039A                 add     sp, 8\ncseg07:039D\ncseg07:039D loc_80E_39D:                            ; CODE XREF: @BMPCAPWN@0WMCREATE$QM8TMESSAGE+8D\u2191j\ncseg07:039D                 les     bx, [bp+arg_2]\ncseg07:03A0                 les     bx, es:[bx+5Ch]\ncseg07:03A4                 push    word ptr es:[bx+0Ah] ; HWND\ncseg07:03A8                 push    ss\ncseg07:03A9                 lea     ax, [bp+LPCSTR]\ncseg07:03AC                 push    ax              ; LPSTR\ncseg07:03AD                 mov     ax, 50h ; 'P'\ncseg07:03B0                 push    ax              ; int\ncseg07:03B1                 call    GETWINDOWTEXT\ncseg07:03B6                 les     bx, [bp+arg_2]\ncseg07:03B9                 push    word ptr es:[bx+0Ah] ; HWND\ncseg07:03BD                 push    ss\ncseg07:03BE                 lea     ax, [bp+LPCSTR]\ncseg07:03C1                 push    ax              ; LPCSTR\ncseg07:03C2                 call    SETWINDOWTEXT\ncseg07:03C7                 push    ss\ncseg07:03C8                 lea     ax, [bp+var_12]\ncseg07:03CB                 push    ax\ncseg07:03CC                 call    sub_240_AEA\ncseg07:03D1                 add     sp, 4\ncseg07:03D4                 les     bx, [bp+arg_2]\ncseg07:03D7                 les     bx, es:[bx+5Ch]\ncseg07:03DB                 cmp     word ptr es:[bx+0Ah], 0\ncseg07:03E0                 jz      short loc_80E_3FA\ncseg07:03E2                 les     bx, [bp+arg_2]\ncseg07:03E5                 les     bx, es:[bx+5Ch]\ncseg07:03E9                 push    word ptr es:[bx+0Ah]\ncseg07:03ED                 push    ss\ncseg07:03EE                 lea     ax, [bp+var_12]\ncseg07:03F1                 push    ax\ncseg07:03F2                 nop\ncseg07:03F3                 push    cs\n\n</code></pre>"},{"location":"user-guide/disassembler/disassembly-gallery/80-86-architecture-windows-omf.html","title":"80\u00d786 Architecture: Windows OMF","text":"<p>Assembler code</p> <pre><code>VIRDEF01:00000020 ; VIRDEF, segment _TEXT\nVIRDEF01:00000020 ; NOTE: VIRDEF records cannot be represented in assembly!\nVIRDEF01:00000020 ; ===========================================================================\nVIRDEF01:00000020\nVIRDEF01:00000020 ; Segment type: Pure code\nVIRDEF01:00000020 VIRDEF01        segment dword public 'CODE' use32\nVIRDEF01:00000020                 assume cs:VIRDEF01\nVIRDEF01:00000020                 ;org 20h\nVIRDEF01:00000020                 assume es:nothing, ss:nothing, ds:DGROUP, fs:nothing, gs:nothing\nVIRDEF01:00000020\nVIRDEF01:00000020 ; =============== S U B R O U T I N E =======================================\nVIRDEF01:00000020\nVIRDEF01:00000020 ; Attributes: bp-based frame\nVIRDEF01:00000020\nVIRDEF01:00000020                 public lread\nVIRDEF01:00000020 lread           proc near\nVIRDEF01:00000020\nVIRDEF01:00000020 arg_0           = dword ptr  8\nVIRDEF01:00000020 arg_4           = dword ptr  0Ch\nVIRDEF01:00000020 arg_8           = dword ptr  10h\nVIRDEF01:00000020\nVIRDEF01:00000020                 push    ebp\nVIRDEF01:00000021                 mov     ebp, esp\nVIRDEF01:00000023                 push    ebx\nVIRDEF01:00000024                 mov     ebx, [ebp+arg_8]\nVIRDEF01:00000027                 push    ebx\nVIRDEF01:00000028                 push    [ebp+arg_4]\nVIRDEF01:0000002B                 push    [ebp+arg_0]\nVIRDEF01:0000002E                 call    qlread\nVIRDEF01:00000033                 cmp     ebx, eax\nVIRDEF01:00000035                 jz      short loc_10072\nVIRDEF01:00000037                 push    offset aReadError ; \"read error\\n\"\nVIRDEF01:0000003C                 call    @error$qpxce    ; error(char *,...)\nVIRDEF01:00000041                 pop     ecx\nVIRDEF01:00000042\nVIRDEF01:00000042 loc_10072:                              ; CODE XREF: lread+15\u2191j\nVIRDEF01:00000042                 pop     ebx\n</code></pre>"},{"location":"user-guide/disassembler/disassembly-gallery/80-86-architecture-windows-portable-executable-format.html","title":"80\u00d786 Architecture: Windows Portable Executable Format","text":"<p>Assembler code</p> <pre><code>.text:00401236\n.text:00401236 ; =============== S U B R O U T I N E =======================================\n.text:00401236\n.text:00401236 ; Attributes: bp-based frame\n.text:00401236\n.text:00401236 ; void __cdecl sub_401236()\n.text:00401236 sub_401236      proc near               ; DATA XREF: start+DB\u2191o\n.text:00401236\n.text:00401236 var_1C          = dword ptr -1Ch\n.text:00401236 ms_exc          = CPPEH_RECORD ptr -18h\n.text:00401236\n.text:00401236 ; __unwind { // __SEH_prolog\n.text:00401236                 push    0Ch\n.text:00401238                 push    offset stru_402078\n.text:0040123D                 call    __SEH_prolog\n.text:00401242                 mov     [ebp+var_1C], offset unk_4020E0\n.text:00401249\n.text:00401249 loc_401249:                             ; CODE XREF: sub_401236+3C\u2193j\n.text:00401249                 cmp     [ebp+var_1C], offset unk_4020E0\n.text:00401250                 jnb     short loc_401274\n.text:00401252 ;   __try { // __except at loc_401267\n.text:00401252                 and     [ebp+ms_exc.registration.TryLevel], 0\n.text:00401256                 mov     eax, [ebp+var_1C]\n.text:00401259                 mov     eax, [eax]\n.text:0040125B                 test    eax, eax\n.text:0040125D                 jz      short loc_40126A\n.text:0040125F                 call    eax\n.text:00401261                 jmp     short loc_40126A\n.text:00401263 ; ---------------------------------------------------------------------------\n.text:00401263\n.text:00401263 loc_401263:                             ; DATA XREF: .rdata:stru_402078\u2193o\n.text:00401263 ;   __except filter // owned by 401252\n.text:00401263                 xor     eax, eax\n.text:00401265                 inc     eax\n.text:00401266                 retn\n</code></pre>"},{"location":"user-guide/disassembler/disassembly-gallery/80-86-architecture-windows-virtual-device-driver.html","title":"80\u00d786 Architecture: Windows Virtual Device Driver","text":"<p>Assembler code</p> <pre><code>ICOD:C001A45F\nICOD:C001A45F loc_C001A45F:                           ; CODE XREF: Locate_Byte_In_ROM+D\u2191j\nICOD:C001A45F                 xor     esi, esi\nICOD:C001A461                 mov     edi, offset aSystemrombreak ; \"SystemRomBreakPoint\"\nICOD:C001A466                 VMMCall Get_Profile_Boolean\nICOD:C001A46C                 test    eax, eax\nICOD:C001A46E                 jz      short loc_C001A495\nICOD:C001A470                 mov     al, 73h ; 's'\nICOD:C001A472                 VMMCall Get_Debug_Options\nICOD:C001A478                 jz      short loc_C001A495\nICOD:C001A47A                 mov     edi, 0FFFEFh\nICOD:C001A47F                 mov     ecx, 3FF0h\nICOD:C001A484                 mov     eax, [esp+20h+var_4]\nICOD:C001A488                 std\nICOD:C001A489                 repne scasb\nICOD:C001A48B                 jnz     short loc_C001A495\nICOD:C001A48D                 inc     edi\nICOD:C001A48E                 mov     [esp+20h+var_4], edi\nICOD:C001A492                 clc\nICOD:C001A493                 jmp     short loc_C001A496\nICOD:C001A495 ; ---------------------------------------------------------------------------\nICOD:C001A495\nICOD:C001A495 loc_C001A495:                           ; CODE XREF: Locate_Byte_In_ROM+23\u2191j\nICOD:C001A495                                         ; Locate_Byte_In_ROM+2D\u2191j ...\nICOD:C001A495                 stc\nICOD:C001A496\nICOD:C001A496 loc_C001A496:                           ; CODE XREF: Locate_Byte_In_ROM+48\u2191j\nICOD:C001A496                 cld\nICOD:C001A497                 popa\nICOD:C001A498                 retn\nICOD:C001A498 Locate_Byte_In_ROM endp\nICOD:C001A498\nICOD:C001A499 ; ---------------------------------------------------------------------------\nICOD:C001A499\nICOD:C001A499 loc_C001A499:                           ; CODE XREF: start+756\u2193p\nICOD:C001A499                 push    ebx\n\n</code></pre>"},{"location":"user-guide/disassembler/disassembly-gallery/80196-processor.html","title":"80196 Processor","text":"<p>IDA is probably the most powerful disassembler available for the INTEL 80196 line of micro-processors. IDA disassemble the Intel 80196, 80196NP and its variations.</p> <p>Assembler code</p> <pre><code>INTMEM:007C                 db 0FFh ; \u00ff\nINTMEM:007D                 db 0FFh ; \u00ff\nINTMEM:007E                 db 0FFh ; \u00ff\nINTMEM:007F                 db 0FFh ; \u00ff\nINTMEM:0080 ; ---------------------------------------------------------------------------\nINTMEM:0080                 skip    INTMEM_FF\nINTMEM:0082                 clr     INTMEM_20\nINTMEM:0084                 not     INTMEM_20\nINTMEM:0086                 neg     INTMEM_20\nINTMEM:0088                 xch     INTMEM_20, INTMEM_20\nINTMEM:008B                 dec     INTMEM_20\nINTMEM:008D                 ext     INTMEM_22\nINTMEM:008F                 inc     INTMEM_20\nINTMEM:0091                 shr     INTMEM_20, #8\nINTMEM:0094                 shr     INTMEM_20, INTMEM_FF\nINTMEM:0097                 shl     INTMEM_20, INTMEM_FF\nINTMEM:009A                 shra    INTMEM_20, INTMEM_FF\nINTMEM:009D                 xch     INTMEM_20, 55h[INTMEM_20]\nINTMEM:00A1                 xch     INTMEM_20, 3030h[INTMEM_20]\nINTMEM:00A6                 shrl    INTMEM_22, INTMEM_FF\nINTMEM:00A9                 shll    INTMEM_22, INTMEM_FF\nINTMEM:00AC                 shral   INTMEM_22, INTMEM_FF\nINTMEM:00AF                 norml   INTMEM_22, INTMEM_FF\nINTMEM:00B2                 clrb    INTMEM_FF\nINTMEM:00B4                 notb    INTMEM_FF\nINTMEM:00B6                 negb    INTMEM_FF\nINTMEM:00B8                 xchb    INTMEM_FF, INTMEM_FF\nINTMEM:00BB                 decb    INTMEM_FF\nINTMEM:00BD                 extb    INTMEM_20\nINTMEM:00BF                 incb    INTMEM_FF\nINTMEM:00C1                 shrb    INTMEM_FF, INTMEM_FF\nINTMEM:00C4                 shlb    INTMEM_FF, INTMEM_FF\nINTMEM:00C7                 shrab   INTMEM_FF, INTMEM_FF\nINTMEM:00CA                 xchb    INTMEM_FF, 55h[INTMEM_20]\nINTMEM:00CE                 sjmp    INTMEM_D2\nINTMEM:00CE ; ---------------------------------------------------------------------------\n</code></pre>"},{"location":"user-guide/disassembler/disassembly-gallery/8051-disassembler.html","title":"8051 Disassembler","text":"<p>Assembler code</p> <pre><code>code:0000019C                 .byte    0\ncode:0000019D                 .byte 0xFF ; \u00ff\ncode:0000019E                 .byte 0xF5 ; \u00f5\ncode:0000019F                 .byte 0xFF ; \u00ff\ncode:000001A0 ; ---------------------------------------------------------------------------\ncode:000001A0                 mov     RESERVED00FF, R0 ; RESERVED\ncode:000001A2                 mov     RESERVED00FF, R1 ; RESERVED\ncode:000001A4                 mov     RESERVED00FF, R2 ; RESERVED\ncode:000001A6                 mov     RESERVED00FF, R3 ; RESERVED\ncode:000001A8                 mov     RESERVED00FF, R4 ; RESERVED\ncode:000001AA                 mov     RESERVED00FF, R5 ; RESERVED\ncode:000001AC                 mov     RESERVED00FF, R6 ; RESERVED\ncode:000001AE                 mov     RESERVED00FF, R7 ; RESERVED\ncode:000001B0                 mov     RESERVED00FF, RAM_0 ; RESERVED\ncode:000001B3                 mov     RESERVED00FF, RESERVED00FF ; RESERVED\ncode:000001B6                 mov     RESERVED00FF, @R0 ; RESERVED\ncode:000001B8                 mov     RESERVED00FF, @R1 ; RESERVED\ncode:000001BA                 mov     RESERVED00FF, #0 ; RESERVED\ncode:000001BD                 mov     RESERVED00FF, #0xFF ; RESERVED\ncode:000001C0                 mov     @R0, #0\ncode:000001C2                 mov     @R0, #0xFF\ncode:000001C4                 mov     @R0, RAM_0\ncode:000001C6                 mov     @R0, RESERVED00FF ; RESERVED\ncode:000001C8                 mov     @R0, A\ncode:000001C9                 mov     @R1, #0\ncode:000001CB                 mov     @R1, #0xFF\ncode:000001CD                 mov     @R1, RAM_0\ncode:000001CF                 mov     @R1, RESERVED00FF ; RESERVED\ncode:000001D1                 mov     @R1, A\ncode:000001D2                 mov     C, RAM_20.0\ncode:000001D4                 mov     C, P5.7         ; Port 5\ncode:000001D6                 mov     RAM_20.0, C\ncode:000001D8                 mov     P5.7, C         ; Port 5\ncode:000001DA                 mov     DPTR, #0xFF\ncode:000001DD                 mov     DPTR, #0xFF00\n\n</code></pre>"},{"location":"user-guide/disassembler/disassembly-gallery/alpha-processor-nt-coff.html","title":"Alpha Processor \u2013 NT COFF","text":"<p>Assembler code</p> <pre><code>.text:0000000080900A90\n.text:0000000080900A90 # =============== S U B R O U T I N E =======================================\n.text:0000000080900A90\n.text:0000000080900A90\n.text:0000000080900A90 sub_80900A90:                           # CODE XREF: start+360\u2191p\n.text:0000000080900A90                                         # start+3A4\u2191p ...\n.text:0000000080900A90                 beq     $17, locret_80900B2C\n.text:0000000080900A94                 subq    $17, 4, $20\n.text:0000000080900A98                 ldq_u   $28, 0($18)\n.text:0000000080900A9C                 addq    $17, $18, $27\n.text:0000000080900AA0                 andnot  $16, 3, $19\n.text:0000000080900AA4                 bge     $20, loc_80900B30\n.text:0000000080900AA8                 ldq_u   $27, -1($27)\n.text:0000000080900AAC                 and     $16, 3, $16\n.text:0000000080900AB0                 ldl     $17, 0($19)\n.text:0000000080900AB4                 addq    $20, $16, $20\n.text:0000000080900AB8                 extql   $28, $18, $28\n.text:0000000080900ABC                 bgt     $20, loc_80900AF0\n.text:0000000080900AC0                 extqh   $27, $18, $27\n.text:0000000080900AC4                 addq    $20, 4, $20\n.text:0000000080900AC8                 or      $27, $28, $28\n.text:0000000080900ACC                 insql   $28, $16, $28\n.text:0000000080900AD0                 mskql   $17, $16, $18\n.text:0000000080900AD4                 mskql   $28, $20, $28\n.text:0000000080900AD8                 mskqh   $17, $20, $17\n.text:0000000080900ADC                 or      $18, $28, $28\n.text:0000000080900AE0                 or      $17, $28, $28\n.text:0000000080900AE4                 stl     $28, 0($19)\n.text:0000000080900AE8                 addq    $19, $20, $16\n.text:0000000080900AEC                 ret     $31, ($26), 4\n.text:0000000080900AF0 # ---------------------------------------------------------------------------\n.text:0000000080900AF0\n.text:0000000080900AF0 loc_80900AF0:                           # CODE XREF: sub_80900A90+2C\u2191j\n.text:0000000080900AF0                 extqh   $27, $18, $27\n.text:0000000080900AF4                 ldl     $18, 4($19)\n</code></pre>"},{"location":"user-guide/disassembler/disassembly-gallery/alpha-processor-unix-elf.html","title":"Alpha Processor \u2013 Unix ELF","text":"<p>Assembler code</p> <pre><code>\n.text:0000000120001F30                 br      loc_120001FD0\n.text:0000000120001F34 # ---------------------------------------------------------------------------\n.text:0000000120001F34\n.text:0000000120001F34 loc_120001F34:                          # CODE XREF: main+274\u2191j\n.text:0000000120001F34                 addq    $sp, 0xB8, $1 # '\u00b8'\n.text:0000000120001F38                 ldq     $16, 0x220+stream($sp) # stream\n.text:0000000120001F3C                 ldq     $17, ((off_120103268 - 0x12010B130) and 0xFFFF)($gp)# off_120103268 # format\n.text:0000000120001F40                 mov     $1, $18\n.text:0000000120001F44                 ldq     $27, ((fscanf_ptr - 0x12010B130) and 0xFFFF)($gp)# fscanf_ptr\n.text:0000000120001F48                 jsr     $26, ($27), 0x1620# fscanf\n.text:0000000120001F4C                 ldah    $gp, 0x11($26)\n.text:0000000120001F50                 lda     $gp, -0x6E1C($gp)\n.text:0000000120001F54                 # gp = 000000012010B130\n.text:0000000120001F54                 mov     $0, $1\n.text:0000000120001F58                 subq    $1, 1, $2\n.text:0000000120001F5C                 bne     $2, loc_120001FAC\n.text:0000000120001F60                 addq    $sp, 0xB8, $1 # '\u00b8'\n.text:0000000120001F64                 mov     $1, $16         # s1\n.text:0000000120001F68                 ldq     $17, ((s2 - 0x12010B130) and 0xFFFF)($gp)# s2 # s2\n.text:0000000120001F6C                 ldq     $27, ((strcmp_ptr - 0x12010B130) and 0xFFFF)($gp)# strcmp_ptr\n.text:0000000120001F70                 jsr     $26, ($27), 0x16DC# strcmp\n.text:0000000120001F74                 ldah    $gp, 0x11($26)\n.text:0000000120001F78                 lda     $gp, -0x6E44($gp)\n.text:0000000120001F7C                 # gp = 000000012010B130\n.text:0000000120001F7C                 mov     $0, $1\n.text:0000000120001F80                 addq    $1, 0, $2\n.text:0000000120001F84                 bne     $2, loc_120001F94\n.text:0000000120001F88                 ldq     $1, ((clockport_ptr - 0x12010B130) and 0xFFFF)($gp)# clockport_ptr\n.text:0000000120001F8C                 lda     $2, 0x170($31)\n.text:0000000120001F90                 stl     $2, 0($1)\n.text:0000000120001F94\n.text:0000000120001F94 loc_120001F94:                          # CODE XREF: main+2CC\u2191j\n.text:0000000120001F94                 ldq     $16, 0x220+stream($sp) # stream\n.text:0000000120001F98                 ldq     $27, ((fclose_ptr - 0x12010B130) and 0xFFFF)($gp)# fclose_ptr\n.text:0000000120001F9C                 jsr     $26, ($27), 0x1698# fclose\n\n</code></pre>"},{"location":"user-guide/disassembler/disassembly-gallery/analog-devices-218x..html","title":"Analog Devices 218x.","text":"<p>Assembler code</p> <pre><code>ROM:0034 ; ---------------------------------------------------------------------------\nROM:0034\nROM:0034 loc_34:                                 ; CODE XREF: TIMER+CF\u2193j\nROM:0034                 ar = $37\nROM:0035                 dm(byte_1003F4F) = ar\nROM:0036                 jump loc_25C3\nROM:0037 ; ---------------------------------------------------------------------------\nROM:0037                 imask = $240\nROM:0038\nROM:0038 loc_38:                                 ; CODE XREF: TIMER+12\u2193j\nROM:0038                 ar = dm(byte_1003E33)\nROM:0039                 ar = ar - 1\nROM:003A                 if lt jump loc_38\nROM:003B                 imask = $250\nROM:003C\nROM:003C loc_3C:                                 ; CODE XREF: TIMER+16\u2193j\nROM:003C                 ar = dm(byte_1003E33)\nROM:003D                 ar = ar - 2\nROM:003E                 if lt jump loc_3C\nROM:003F                 imask = $269\nROM:0040\nROM:0040 loc_40:                                 ; CODE XREF: TIMER+1A\u2193j\nROM:0040                 ar = dm(byte_1003F12)\nROM:0041                 ar = ar + 0\nROM:0042                 if eq jump loc_40\nROM:0043                 jump loc_6E\nROM:0044 ; ---------------------------------------------------------------------------\nROM:0044\nROM:0044 loc_44:                                 ; CODE XREF: TIMER+2F\u2193j\nROM:0044                                         ; TIMER+38\u2193j ...\nROM:0044                 ena timer\nROM:0045                 ay0 = dm(byte_1002CD2)\nROM:0046                 ax0 = dm(byte_1002CD3)\nROM:0047                 ar = ay0 - ax0\nROM:0048                 if ge jump loc_4B\n\n</code></pre>"},{"location":"user-guide/disassembler/disassembly-gallery/android-arm-executables-.elf.html","title":"Android ARM Executables (.elf)","text":"<p>Assembler code</p> <pre><code>.text:00008270\n.text:00008270 ; =============== S U B R O U T I N E =======================================\n.text:00008270\n.text:00008270 ; Attributes: library function noreturn bp-based frame\n.text:00008270\n.text:00008270                 EXPORT _start\n.text:00008270 _start                                  ; DATA XREF: LOAD:00008018\u2191o\n.text:00008270\n.text:00008270 structors       = -0x14\n.text:00008270 var_8           = -8\n.text:00008270\n.text:00008270                 LDR     R12, =(_GLOBAL_OFFSET_TABLE_ - 0x828C)\n.text:00008274                 PUSH    {R11,LR}\n.text:00008278                 LDR     R3, =(__PREINIT_ARRAY___ptr - 0x9FEC)\n.text:0000827C                 ADD     R11, SP, #4\n.text:00008280                 SUB     SP, SP, #0x10\n.text:00008284                 ADD     R12, PC, R12    ; _GLOBAL_OFFSET_TABLE_\n.text:00008288                 LDR     R3, [R12,R3]    ; __PREINIT_ARRAY__\n.text:0000828C                 STR     R3, [R11,#structors]\n.text:00008290                 LDR     R3, =(__INIT_ARRAY___ptr - 0x9FEC)\n.text:00008294                 ADD     R0, R11, #4     ; raw_args\n.text:00008298                 LDR     R3, [R12,R3]    ; __INIT_ARRAY__\n.text:0000829C                 STR     R3, [R11,#structors.init_array]\n.text:000082A0                 LDR     R3, =(__FINI_ARRAY___ptr - 0x9FEC)\n.text:000082A4                 MOV     R1, #0          ; onexit\n.text:000082A8                 LDR     R3, [R12,R3]    ; __FINI_ARRAY__\n.text:000082AC                 STR     R3, [R11,#structors.fini_array]\n.text:000082B0                 LDR     R3, =(__CTOR_LIST___ptr - 0x9FEC)\n.text:000082B4                 LDR     R3, [R12,R3]    ; __CTOR_LIST__\n.text:000082B8                 STR     R3, [R11,#var_8]\n.text:000082BC                 LDR     R3, =(main_ptr - 0x9FEC)\n.text:000082C0                 LDR     R2, [R12,R3]    ; main ; slingshot\n.text:000082C4                 SUB     R3, R11, #-structors ; structors\n.text:000082C8                 BL      __libc_init\n.text:000082CC ; ---------------------------------------------------------------------------\n.text:000082CC                 SUB     SP, R11, #4\n</code></pre>"},{"location":"user-guide/disassembler/disassembly-gallery/android-dalvik-executables-.dex.html","title":"Android Dalvik Executables (.dex)","text":"<p>Assembler code</p> <pre><code>CODE:000065D0 # Source file: AlarmReceiver.java\nCODE:000065D0 public void com.android.alarmclock.AlarmReceiver.onReceive(\nCODE:000065D0       android.content.Context p0,\nCODE:000065D0       android.content.Intent p1)\nCODE:000065D0 this = v11\nCODE:000065D0 p0 = v12\nCODE:000065D0 p1 = v13\nCODE:000065D0                 const/4                         v2, -1\nCODE:000065D2                 const/4                         v8, 0\nCODE:000065D4                 const-class                     v10, &lt;t: AlarmAlert&gt;\nCODE:000065D8                 const-string                    v9, aIntentExtraAla # \"intent.extra.alarm\"\nCODE:000065DC                 .prologue_end\nCODE:000065DC                 .line 45\nCODE:000065DC                 const-string                    v0, aAlarmKilled # \"alarm_killed\"\nCODE:000065E0                 +invoke-virtual-quick           {p1}, [0x12]\nCODE:000065E6                 move-result-object              v1\nCODE:000065E8                 +execute-inline                 {v0, v1}, [3]\nCODE:000065EE                 move-result                     v0\nCODE:000065F0                 if-eqz                          v0, loc_6618\nCODE:000065F4                 const-string                    v0, aIntentExtraAla # \"intent.extra.alarm\"\nCODE:000065F8                 +invoke-virtual-quick           {p1, v9}, [0x32]\nCODE:000065FE                 move-result-object              v0\nCODE:00006600                 check-cast                      v0, &lt;t: Alarm&gt;\nCODE:00006604                 const-string                    v1, aAlarmKilledTim # \"alarm_killed_timeout\"\nCODE:00006608                 +invoke-virtual-quick           {p1, v1, v2}, [0x2B]\nCODE:0000660E                 move-result                     v1\nCODE:00006610                 invoke-direct                   {this, p0, v0, v1}, &lt;void AlarmReceiver.updateNotification(ref, ref, int) AlarmReceiver_updateNotification@VLLI&gt;\nCODE:00006616\nCODE:00006616 locret:                                 # CODE XREF: AlarmReceiver_onReceive@VLL+6A\u2193j\nCODE:00006616                                         # AlarmReceiver_onReceive@VLL+B4\u2193j ...\nCODE:00006616                 .line 154\nCODE:00006616                 return-void\nCODE:00006618 # ---------------------------------------------------------------------------\nCODE:00006618\nCODE:00006618 loc_6618:                               # CODE XREF: AlarmReceiver_onReceive@VLL+20\u2191j\nCODE:00006618                 .line 51\nCODE:00006618                 const-string                    v0, aCancelSnooze # \"cancel_snooze\"\n\n</code></pre>"},{"location":"user-guide/disassembler/disassembly-gallery/angstrem-kr-1878.html","title":"Angstrem KR 1878","text":"<p>Assembler code</p> <pre><code>CODE:000F\nCODE:000F ; =============== S U B R O U T I N E =======================================\nCODE:000F\nCODE:000F\nCODE:000F                 global EEPWr\nCODE:000F EEPWr:\nCODE:000F                 movl    %c1 PCtlA,#0\nCODE:0010                 ldr     SR0,#8\nCODE:0011 ; assume a = 8\nCODE:0011                 ldr     SR1,#9\nCODE:0012 ; assume b = 9\nCODE:0012                 ldr     SR2,#$E\nCODE:0013 ; assume c = $E\nCODE:0013                 ldr     SR5,#$40\nCODE:0014                 movl    %b1 byte_100049,#0\nCODE:0015                 movl    %b4 byte_10004C,#0\nCODE:0016                 jsr     sub_29F\nCODE:0017                 ldr     SR6,#$82\nCODE:0018                 ldr     SR7,#7\nCODE:0019                 movl    %c0 byte_100070,#$A\nCODE:001A\nCODE:001A loc_1A:                                 ; CODE XREF: EEPWr+F\u2193j\nCODE:001A                 mov     %b0 byte_100048,%d7\nCODE:001B                 jsr     sub_25F\nCODE:001C                 jsr     sub_29F\nCODE:001D                 subl    %c0 byte_100070,#1\nCODE:001E                 jnz     loc_1A\nCODE:001F                 swap    %b0 byte_100048\nCODE:0020                 cmpl    %c1 byte_100071,#1\nCODE:0021                 jnz     loc_23\nCODE:0022                 btg     %b0 byte_100048,#$80\nCODE:0023\nCODE:0023 loc_23:                                 ; CODE XREF: EEPWr+12\u2191j\nCODE:0023                 mov     %c4 byte_100074,%b0 byte_100048\nCODE:0024                 movl    %b0 byte_100048,#$90\n\n</code></pre>"},{"location":"user-guide/disassembler/disassembly-gallery/arc-processor.html","title":"ARC Processor","text":"<p>Assembler code</p> <pre><code>.text:0000109C\n.text:0000109C # =============== S U B R O U T I N E =======================================\n.text:0000109C\n.text:0000109C # Attributes: bp-based frame\n.text:0000109C\n.text:0000109C                 .global ArcMain\n.text:0000109C ArcMain:                                # CODE XREF: main+C\u2191p\n.text:0000109C\n.text:0000109C arg_0           =  0\n.text:0000109C arg_4           =  4\n.text:0000109C\n.text:0000109C                 st      blink, [sp,arg_4]\n.text:000010A0                 st      fp, [sp,arg_0]\n.text:000010A4                 mov     fp, sp\n.text:000010A8                 sub     sp, sp, 0x10\n.text:000010AC                 mov     r0, state_ls\n.text:000010B4                 bl.d    Core_LocalClear\n.text:000010B8                 mov     r1, 0x18\n.text:000010BC                 mov     r2, _stack_start\n.text:000010C4                 mov     r0, 0x12345678\n.text:000010CC                 sub     r1, r1, r1\n.text:000010D0                 mov     lp_count, 0x20 # ' '\n.text:000010D4                 lp      loc_10E4\n.text:000010D8                 add     r12, r2, r1\n.text:000010DC                 st      r0, [r12]\n.text:000010E0                 add     r1, r1, 4\n.text:000010E4\n.text:000010E4 loc_10E4:                               # CODE XREF: ArcMain+38\u2191j\n.text:000010E4                 mov     r0, 0xFFFFFFFF\n.text:000010E8                 sr      r0, [0x23] # '#'\n.text:000010EC                 sr      0, COUNT # '!' # Enhanced Timer 0  Timer 0 Count value\n.text:000010F4                 sr      2, CONTROL # '\"' # Enhanced Timer 0  Timer 0 Control value\n.text:000010FC                 bl      Platform_Initialize\n.text:00001100                 bl      Core_Loop\n.text:00001104                 ld      blink, [fp,arg_4]\n</code></pre>"},{"location":"user-guide/disassembler/disassembly-gallery/arm-processor-aof-sdk.html","title":"ARM Processor: AOF SDK","text":"<p>Assembler code</p> <pre><code>C$$code:00000024                 ADD             R0, R0, #1\nC$$code:00000028                 CMP             R0, #0xC8 ; '\u00c8'\nC$$code:0000002C                 BLT             loc_20\nC$$code:00000030                 ADD             R1, R1, #1\nC$$code:00000034                 CMP             R1, #0x12C\nC$$code:00000038                 BLT             loc_10\nC$$code:0000003C                 MOV             R3, #1\nC$$code:00000040\nC$$code:00000040 loc_40                                  ; CODE XREF: x$litpool$0+90\u2193j\nC$$code:00000040                 MOV             R1, #0\nC$$code:00000044\nC$$code:00000044 loc_44                                  ; CODE XREF: x$litpool$0+84\u2193j\nC$$code:00000044                 ADD             R12, R1, R1,LSL#3\nC$$code:00000048                 ADD             R12, R12, R1,LSL#4\nC$$code:0000004C                 ADD             R12, R2, R12,LSL#5\nC$$code:00000050                 MOV             R0, #0\nC$$code:00000054\nC$$code:00000054 loc_54                                  ; CODE XREF: x$litpool$0+78\u2193j\nC$$code:00000054                 LDR             LR, [R12,R0,LSL#2]\nC$$code:00000058                 MUL             LR, R3, LR\nC$$code:0000005C                 STR             LR, [R12,R0,LSL#2]\nC$$code:00000060                 ADD             LR, R12, R0,LSL#2\nC$$code:00000064                 LDR             LR, [LR,#0x10]\nC$$code:00000068                 MUL             LR, R3, LR\nC$$code:0000006C                 STR             LR, [R12,R0,LSL#2]\nC$$code:00000070                 ADD             R0, R0, #5\nC$$code:00000074                 CMP             R0, #0xC3 ; '\u00c3'\nC$$code:00000078                 BLT             loc_54\nC$$code:0000007C                 ADD             R1, R1, #1\nC$$code:00000080                 CMP             R1, #0x12C\nC$$code:00000084                 BLT             loc_44\nC$$code:00000088                 ADD             R3, R3, #1\nC$$code:0000008C                 CMP             R3, #0x32 ; '2'\nC$$code:00000090                 BLT             loc_40\nC$$code:00000094                 MOV             R0, #0\n</code></pre>"},{"location":"user-guide/disassembler/disassembly-gallery/arm-processor-epoc-app.html","title":"ARM Processor EPOC App","text":"<p>Assembler code</p> <pre><code>.text:8012235E                 MOVS    R4, R5\n.text:80122360                 ADDS    R4, #0x4C ; 'L'\n.text:80122362\n.text:80122362 loc_80122362                            ; CODE XREF: sub_8012234E+C4\u2193j\n.text:80122362                 LDR     R4, [R4,#4]\n.text:80122364                 CMP     R4, #0\n.text:80122366                 BNE     loc_8012236C\n.text:80122368                 LDR     R4, [R5,#0x3C]\n.text:8012236A                 B       loc_801223FA\n.text:8012236C ; ---------------------------------------------------------------------------\n.text:8012236C\n.text:8012236C loc_8012236C                            ; CODE XREF: sub_8012234E+18\u2191j\n.text:8012236C                 LDR     R0, [R5,#0x3C]\n.text:8012236E                 CMP     R0, R4\n.text:80122370                 BLS     loc_8012237C\n.text:80122372                 LDR     R0, [R4,#4]\n.text:80122374                 CMP     R0, #0\n.text:80122376                 BEQ     loc_8012238E\n.text:80122378                 CMP     R0, R4\n.text:8012237A                 BHI     loc_8012238E\n.text:8012237C\n.text:8012237C loc_8012237C                            ; CODE XREF: sub_8012234E+22\u2191j\n.text:8012237C                 LDR     R0, [SP,#0x28+var_24]\n.text:8012237E                 BLX     arm_euser_eka2_1417\n.text:80122382                 MOVS    R2, R4\n.text:80122384                 MOVS    R1, #4\n.text:80122386                 LDR     R0, [SP,#0x28+var_18]\n.text:80122388                 LDR     R7, [SP,#0x28+var_1C]\n.text:8012238A                 MOVS    R3, #0\n.text:8012238C                 B       loc_801223F2\n.text:8012238E ; ---------------------------------------------------------------------------\n.text:8012238E\n.text:8012238E loc_8012238E                            ; CODE XREF: sub_8012234E+28\u2191j\n.text:8012238E                                         ; sub_8012234E+2C\u2191j\n.text:8012238E                 LDR     R7, [R4]\n</code></pre>"},{"location":"user-guide/disassembler/disassembly-gallery/arm-processor-epoc-pe-file.html","title":"ARM Processor EPOC PE File","text":"<p>Assembler code</p> <pre><code>.text:100097D8                 ADD     R4, R4, #0x38 ; '8'\n.text:100097DC                 MOV     R2, #0x18\n.text:100097E0                 MOV     R1, R4\n.text:100097E4                 MOV     R0, R5\n.text:100097E8                 BL      Copy__10TBufCBase8RC10TBufCBase8i ; TBufCBase8::Copy(TBufCBase8 const &amp;,int)\n.text:100097EC                 LDR     R3, [R4,#0x1C]\n.text:100097F0                 STR     R3, [R5,#0x1C]\n.text:100097F4                 LDR     R3, [R4,#0x20]\n.text:100097F8                 STR     R3, [R5,#0x20]\n.text:100097FC                 LDR     R3, [R4,#0x24]\n.text:10009800                 STR     R3, [R5,#0x24]\n.text:10009804                 ADD     LR, R7, #0x1540\n.text:10009808                 ADD     LR, LR, #0x30 ; '0'\n.text:1000980C                 ADD     R12, SP, #0x50+var_C\n.text:10009810                 LDM     R12!, {R0-R3}\n.text:10009814                 STM     LR!, {R0-R3}\n.text:10009818                 MOV     R1, #4\n.text:1000981C                 ADD     R0, R7, #0x18\n.text:10009820                 BL      Connect__3RFsi  ; RFs::Connect(int)\n.text:10009824                 BL      LeaveIfError__4Useri ; User::LeaveIfError(int)\n.text:10009828                 BL      Static__7CCoeEnv ; CCoeEnv::Static(void)\n.text:1000982C                 MOV     R1, R5\n.text:10009830                 BL      CreateScreenFontL__7CCoeEnvRC9TFontSpec ; CCoeEnv::CreateScreenFontL(TFontSpec const &amp;)\n.text:10009834                 LDR     R3, =0x158C\n.text:10009838                 STR     R0, [R7,R3]\n.text:1000983C                 MOV     R1, #0\n.text:10009840                 MOV     R0, #0x18\n.text:10009844                 BL      __nw__5CBaseUi6TLeave ; CBase::__nw(uint,TLeave)\n.text:10009848                 SUBS    R4, R0, #0\n.text:1000984C                 BEQ     loc_1000986C\n.text:10009850                 MOV     R3, #0xA\n.text:10009854                 MOV     R2, #0x10\n.text:10009858                 LDR     R1, =NewL__8CBufFlati ; CBufFlat::NewL(int)\n.text:1000985C                 MOV     R0, R4\n.text:10009860                 BL      __13CArrayFixBasePFi_P8CBufBaseii\n</code></pre>"},{"location":"user-guide/disassembler/disassembly-gallery/arm-processor-epoc-romfile.html","title":"ARM Processor EPOC ROMFile","text":"<p>Assembler code</p> <pre><code>.text:50292274                 B       sub_5029254C\n.text:50292274 ; ---------------------------------------------------------------------------\n.text:50292278 off_50292278    DCD start               ; DATA XREF: start+3C\u2191r\n.text:5029227C ; ---------------------------------------------------------------------------\n.text:5029227C                 MOV     R1, R0\n.text:50292280                 LDR     R0, =start\n.text:50292284                 B       sub_50292558\n.text:50292284 ; ---------------------------------------------------------------------------\n.text:50292288 off_50292288    DCD start               ; DATA XREF: start+4C\u2191r\n.text:5029228C ; ---------------------------------------------------------------------------\n.text:5029228C                 LDR     R0, =start\n.text:50292290                 B       sub_50292564\n.text:50292290 ; ---------------------------------------------------------------------------\n.text:50292294 off_50292294    DCD start               ; DATA XREF: start+58\u2191r\n.text:50292298 ; ---------------------------------------------------------------------------\n.text:50292298                 LDR     R0, =start\n.text:5029229C                 B       sub_50292570\n.text:5029229C ; ---------------------------------------------------------------------------\n.text:502922A0 off_502922A0    DCD start               ; DATA XREF: start+64\u2191r\n.text:502922A4 ; ---------------------------------------------------------------------------\n.text:502922A4                 LDR     R0, =start\n.text:502922A8                 B       sub_5029257C\n.text:502922A8 ; ---------------------------------------------------------------------------\n.text:502922AC off_502922AC    DCD start               ; DATA XREF: start+70\u2191r\n.text:502922B0 ; ---------------------------------------------------------------------------\n.text:502922B0                 LDR     R0, =start\n.text:502922B4                 B       sub_50292588\n.text:502922B4 ; ---------------------------------------------------------------------------\n.text:502922B8 off_502922B8    DCD start               ; DATA XREF: start+7C\u2191r\n.text:502922BC ; ---------------------------------------------------------------------------\n.text:502922BC                 MOV     R1, R0\n.text:502922C0                 LDR     R0, =start\n.text:502922C4                 B       sub_50292594\n.text:502922C4 ; ---------------------------------------------------------------------------\n.text:502922C8 off_502922C8    DCD start               ; DATA XREF: start+8C\u2191r\n</code></pre>"},{"location":"user-guide/disassembler/disassembly-gallery/arm-processor-ios-iphone-c%2B%2B-signatures.html","title":"ARM Processor iOS (iPhone): C++ signatures","text":"<p>Assembler code</p> <pre><code>__text:00015E90                 BL      _readdir\n__text:00015E94                 SUBS    R1, R0, #0\n__text:00015E98                 BEQ     loc_15F2C\n__text:00015E9C                 MOV     R3, #2\n__text:00015EA0                 LDRB    R2, [R1,#7]\n__text:00015EA4                 ADD     R0, SP, #0xA8+var_64\n__text:00015EA8                 STR     R3, [SP,#0xA8+fctx.call_site]\n__text:00015EAC                 ADD     R1, R1, #8\n__text:00015EB0                 ADD     R3, SP, #0xA8+var_5D\n__text:00015EB4                 BL      __ZNSsC1EPKcmRKSaIcE ; std::string::string(char const*,ulong,std::allocator&lt;char&gt; const&amp;)\n__text:00015EB8                 MOV     R3, #1\n__text:00015EBC                 STR     R3, [SP,#0xA8+fctx.call_site]\n__text:00015EC0                 ADD     R0, SP, #0xA8+var_64\n__text:00015EC4                 LDR     R3, [SP,#0xA8+var_A4]\n__text:00015EC8                 BLX     R3\n__text:00015ECC                 CMP     R0, #0\n__text:00015ED0                 BNE     loc_15F1C\n__text:00015ED4                 MOV     R3, #0xFFFFFFFF\n__text:00015ED8                 ADD     R0, SP, #0xA8+var_64 ; this\n__text:00015EDC                 STR     R3, [SP,#0xA8+fctx.call_site]\n__text:00015EE0                 BL      __ZNSsD2Ev      ; std::string::~string()\n__text:00015EE4                 B       loc_15E84\n__text:00015EE8 ; ---------------------------------------------------------------------------\n__text:00015EE8 ;   cleanup() // owned by 15E64\n__text:00015EE8                 LDR     R3, [SP,#0xA8+fctx.data]\n__text:00015EEC                 STR     R3, [SP,#0xA8+lpuexcpt]\n__text:00015EF0                 LDR     R3, [SP,#0xA8+fctx.call_site]\n__text:00015EF4                 CMP     R3, #1\n__text:00015EF8                 BEQ     loc_15F0C\n__text:00015EFC                 MOV     R3, #0\n__text:00015F00                 ADD     R0, SP, #0xA8+var_64 ; this\n__text:00015F04                 STR     R3, [SP,#0xA8+fctx.call_site]\n__text:00015F08                 BL      __ZNSsD2Ev      ; std::string::~string()\n__text:00015F0C\n__text:00015F0C loc_15F0C                               ; CODE XREF: sub_15E1C+DC\u2191j\n__text:00015F0C                 MOV     R3, #0xFFFFFFFF\n\n</code></pre>"},{"location":"user-guide/disassembler/disassembly-gallery/arm-processor-ios-iphone-objective-c-instance-variables.html","title":"ARM Processor iOS (iPhone): Objective-C Instance variables","text":"<p>Assembler code</p> <pre><code>__objc_const:000106C0                 __objc2_meth &lt;sel__clearFailureBadge, aV804, \\ ; -[SMSApplication _clearFailureBadge] ...\n__objc_const:000106C0                               __SMSApplication__clearFailureBadge_+1&gt;\n__objc_const:000106CC                 __objc2_meth &lt;sel__mediaDidFinishSaving, aV804, \\ ; -[SMSApplication _mediaDidFinishSaving] ...\n__objc_const:000106CC                               __SMSApplication__mediaDidFinishSaving_+1&gt;\n__objc_const:000106D8                 __objc2_meth &lt;sel__mediaDidStartSaving, aV804, \\ ; -[SMSApplication _mediaDidStartSaving] ...\n__objc_const:000106D8                               __SMSApplication__mediaDidStartSaving_+1&gt;\n__objc_const:000106E4 _OBJC_INSTANCE_VARIABLES_SMSApplication __objc2_ivar_list &lt;0x14, 0xF&gt;\n__objc_const:000106E4                                         ; DATA XREF: __objc_const:SMSApplication_$classData\u2191o\n__objc_const:000106EC                 __objc2_ivar &lt;_OBJC_IVAR_$_SMSApplication._waitToSendFinishLaunching, \\ ; char _waitToSendFinishLaunching;\n__objc_const:000106EC                               aWaittosendfini, aC, 0, 1&gt;\n__objc_const:00010700                 __objc2_ivar &lt;_OBJC_IVAR_$_SMSApplication._isLocked, aIslocked_0, aC, \\ ; char _isLocked;\n__objc_const:00010700                               0, 1&gt;\n__objc_const:00010714                 __objc2_ivar &lt;_OBJC_IVAR_$_SMSApplication._isSuspended, aIssuspended, \\ ; char _isSuspended;\n__objc_const:00010714                               aC, 0, 1&gt;\n__objc_const:00010728                 __objc2_ivar &lt;_OBJC_IVAR_$_SMSApplication._hasEmail, aHasemail, aC, 0,\\ ; char _hasEmail;\n__objc_const:00010728                               1&gt;\n__objc_const:0001073C                 __objc2_ivar &lt;_OBJC_IVAR_$_SMSApplication._window, aWindow_0, \\ ; UIWindow *_window;\n__objc_const:0001073C                               aUiwindow, 2, 4&gt;\n__objc_const:00010750                 __objc2_ivar &lt;_OBJC_IVAR_$_SMSApplication._messagesController, \\ ; CKMessagesController *_messagesController;\n__objc_const:00010750                               aMessagescontro, aCkmessagescont_7, 2, 4&gt;\n__objc_const:00010764                 __objc2_ivar &lt;_OBJC_IVAR_$_SMSApplication._smsService, aSmsservice, \\ ; CKService *_smsService;\n__objc_const:00010764                               aCkservice, 2, 4&gt;\n__objc_const:00010778                 __objc2_ivar &lt;_OBJC_IVAR_$_SMSApplication._madridService, \\ ; CKService *_madridService;\n__objc_const:00010778                               aMadridservice, aCkservice, 2, 4&gt;\n__objc_const:0001078C                 __objc2_ivar &lt;_OBJC_IVAR_$_SMSApplication._delaySuspendCount, \\ ; int _delaySuspendCount;\n__objc_const:0001078C                               aDelaysuspendco, aI, 2, 4&gt;\n__objc_const:000107A0                 __objc2_ivar &lt;_OBJC_IVAR_$_SMSApplication._backgroundTask, \\ ; unsigned int _backgroundTask;\n__objc_const:000107A0                               aBackgroundtask, aI_0, 2, 4&gt;\n__objc_const:000107B4                 __objc2_ivar &lt;_OBJC_IVAR_$_SMSApplication._madridRegistrationController,\\ ; CNFRegWizardController *_madridRegistrationController;\n__objc_const:000107B4                               aMadridregistra_2, aCnfregwizardco, 2, 4&gt;\n__objc_const:000107C8                 __objc2_ivar &lt;_OBJC_IVAR_$_SMSApplication._defaultPng, aDefaultpng_0, \\ ; NSString *_defaultPng;\n__objc_const:000107C8                               aNsstring, 2, 4&gt;\n__objc_const:000107DC                 __objc2_ivar &lt;_OBJC_IVAR_$_SMSApplication._suspendTimeStatusBarStyle, \\ ; int _suspendTimeStatusBarStyle;\n__objc_const:000107DC                               aSuspendtimesta, aI, 2, 4&gt;\n__objc_const:000107F0                 __objc2_ivar &lt;_OBJC_IVAR_$_SMSApplication._deferredLoadURL, \\ ; NSURL *_deferredLoadURL;\n__objc_const:000107F0                               aDeferredloadur_0, aNsurl, 2, 4&gt;\n</code></pre>"},{"location":"user-guide/disassembler/disassembly-gallery/arm-processor-ios-iphone-objective-c-metadata.html","title":"ARM Processor iOS (iPhone): Objective-C metadata","text":"<p>Assembler code</p> <pre><code>__text:0000309C\n__text:0000309C ; =============== S U B R O U T I N E =======================================\n__text:0000309C\n__text:0000309C ; Attributes: bp-based frame\n__text:0000309C\n__text:0000309C ; void __cdecl -[SMSApplication showNextMessage](SMSApplication *self, SEL.html)\n__text:0000309C __SMSApplication_showNextMessage_       ; DATA XREF: __objc_const:000101B8\u2193o\n__text:0000309C                 PUSH            {R4-R7,LR}\n__text:0000309E                 ADD             R7, SP, #0xC\n__text:000030A0                 PUSH.W          {R8}\n__text:000030A4                 SUB             SP, SP, #8\n__text:000030A6                 MOV             R4, R0\n__text:000030A8                 MOV             R0, #(selRef_sharedConversationList - 0x30BC)\n__text:000030B0                 MOV             R2, #(classRef_CKConversationList - 0x30BE)\n__text:000030B8                 ADD             R0, PC  ; selRef_sharedConversationList\n__text:000030BA                 ADD             R2, PC  ; classRef_CKConversationList\n__text:000030BC                 LDR             R1, [R0] ; \"sharedConversationList\"\n__text:000030BE                 LDR             R0, [R2] ; _OBJC_CLASS_$_CKConversationList ; id\n__text:000030C0                 BLX             _objc_msgSend\n__text:000030C4                 MOV             R1, #(selRef_activeConversations - 0x30D0)\n__text:000030CC                 ADD             R1, PC  ; selRef_activeConversations\n__text:000030CE                 LDR             R1, [R1] ; \"activeConversations\"\n__text:000030D0                 BLX             _objc_msgSend\n__text:000030D4                 MOV             R5, #(dword_11F80 - 0x30E8)\n__text:000030DC                 MOV             R1, #(selRef_objectAtIndex_ - 0x30EA)\n__text:000030E4                 ADD             R5, PC  ; dword_11F80\n__text:000030E6                 ADD             R1, PC  ; selRef_objectAtIndex_\n__text:000030E8                 LDR             R2, [R5]\n__text:000030EA                 LDR             R1, [R1] ; \"objectAtIndex:\"\n__text:000030EC                 BLX             _objc_msgSend\n__text:000030F0                 MOV             R6, R0\n__text:000030F2                 MOV             R0, #(off_1011C - 0x30FE)\n__text:000030FA                 ADD             R0, PC  ; off_1011C\n__text:000030FC                 LDR.W           R8, [R0] ; CKMessagesController *_messagesController;\n__text:00003100                 MOV             R0, #(selRef_currentConversation - 0x310C)\n</code></pre>"},{"location":"user-guide/disassembler/disassembly-gallery/arm-processor-ios-iphone-parameter-identification-and-tracking-pit.html","title":"ARM Processor iOS (iPhone): Parameter Identification &amp; Tracking (PIT)","text":"<p>Assembler code</p> <pre><code>\n__text:00002CAC\n__text:00002CAC ; =============== S U B R O U T I N E =======================================\n__text:00002CAC\n__text:00002CAC ; Attributes: bp-based frame\n__text:00002CAC\n__text:00002CAC sub_2CAC                                ; CODE XREF: sub_12FF8+18\u2193p\n__text:00002CAC                 LDR     R0, =off_52014\n__text:00002CB0                 PUSH    {R4,R7,LR}\n__text:00002CB4                 MOV     R1, #0          ; __c\n__text:00002CB8                 LDR     R4, =dword_52DBC\n__text:00002CBC                 LDR     R3, =unk_52DC4\n__text:00002CC0                 ADD     R7, SP, #4\n__text:00002CC4                 MOV     R2, #0xE7 ; '\u00e7' ; __len\n__text:00002CC8                 LDR     R0, [R0]        ; unk_53620 ; __b\n__text:00002CCC                 STR     R3, [R4]\n__text:00002CD0                 BL      _memset\n__text:00002CD4                 LDR     R3, =off_52018\n__text:00002CD8                 MOV     R1, #0\n__text:00002CDC                 LDR     R2, [R3]        ; byte_53610\n__text:00002CE0                 MOV     R3, R2\n__text:00002CE4                 STRB    R1, [R2,#(byte_53611 - 0x53610)]\n__text:00002CE8                 STRB    R1, [R3],#1\n__text:00002CEC                 LDR     R2, [R4]\n__text:00002CF0                 ADD     R3, R3, #1\n__text:00002CF4                 ADD     R0, R2, #0x84 ; '\u201e'\n__text:00002CF8                 STRB    R1, [R3],#1\n__text:00002CFC                 STRB    R1, [R3],#1\n__text:00002D00                 STRB    R1, [R3],#1\n__text:00002D04                 STRB    R1, [R3],#1\n__text:00002D08                 STRB    R1, [R3]\n__text:00002D0C                 MOV     R3, R2\n__text:00002D10\n__text:00002D10 loc_2D10                                ; CODE XREF: sub_2CAC+70\u2193j\n__text:00002D10                 STR     R1, [R3,#8]\n__text:00002D14                 ADD     R3, R3, #4\n</code></pre>"},{"location":"user-guide/disassembler/disassembly-gallery/arm-processor-ios-iphone-start.html","title":"ARM Processor iOS (iPhone): Start","text":"<p>Assembler code</p> <pre><code>__text:00002274\n__text:00002274 ; =============== S U B R O U T I N E =======================================\n__text:00002274\n__text:00002274 ; Attributes: noreturn bp-based frame\n__text:00002274\n__text:00002274 sub_2274                                ; CODE XREF: start+14\u2191p\n__text:00002274\n__text:00002274 var_10          = -0x10\n__text:00002274\n__text:00002274                 PUSH    {R4-R7,LR}\n__text:00002278                 ADD     R7, SP, #0xC\n__text:0000227C                 SUB     SP, SP, #4\n__text:00002280                 MOV     R6, R0\n__text:00002284                 MOV     R5, R1\n__text:00002288                 MOV     R4, R2\n__text:0000228C                 LDR     R3, =(_NXArgc - 0x2298)\n__text:00002290                 STR     R0, [PC,R3]     ; _NXArgc\n__text:00002294                 LDR     R3, =(_NXArgv - 0x22A0)\n__text:00002298                 STR     R1, [PC,R3]     ; _NXArgv\n__text:0000229C                 LDR     R3, =(_environ - 0x22A8)\n__text:000022A0                 STR     R2, [PC,R3]     ; _environ\n__text:000022A4                 LDR     R3, =(_mach_init_routine_ptr - 0x22B0)\n__text:000022A8                 LDR     R3, [PC,R3]     ; _mach_init_routine\n__text:000022AC                 LDR     R3, [R3]\n__text:000022B0                 CMP     R3, #0\n__text:000022B4                 BLXNE   R3\n__text:000022B8                 LDR     R3, =(__cthread_init_routine_ptr - 0x22C4)\n__text:000022BC                 LDR     R3, [PC,R3]     ; __cthread_init_routine\n__text:000022C0                 LDR     R3, [R3]\n__text:000022C4                 CMP     R3, #0\n__text:000022C8                 BLXNE   R3\n__text:000022CC                 BL      ___keymgr_dwarf2_register_sections\n__text:000022D0                 BL      sub_23C4\n__text:000022D4                 LDR     R0, =(aDyldModTermFun - 0x22E0) ; \"__dyld_mod_term_funcs\"\n__text:000022D8                 ADD     R0, PC, R0      ; \"__dyld_mod_term_funcs\"\n</code></pre>"},{"location":"user-guide/disassembler/disassembly-gallery/arm-processor-ios-iphone-switch-statements.html","title":"ARM Processor iOS (iPhone): Switch statements","text":"<p>Assembler code</p> <pre><code>__text:00003B48                 STR     R3, [R4,#0xE8]\n__text:00003B4C                 LDR     R3, [R4,#0x38]\n__text:00003B50                 CMP     R3, #0x27       ; switch 40 cases\n__text:00003B54                 LDRLS   PC, [PC,R3,LSL#2] ; switch jump\n__text:00003B58                 B       def_3B54        ; jumptable 00003B54 default case, cases 2-6,8,11,12,15,16,20-22,27,32-38\n__text:00003B58 ; ---------------------------------------------------------------------------\n__text:00003B5C jpt_3B54        DCD loc_3C0C            ; jump table for switch statement\n__text:00003B5C                 DCD loc_3C0C\n__text:00003B5C                 DCD def_3B54\n__text:00003B5C                 DCD def_3B54\n__text:00003B5C                 DCD def_3B54\n__text:00003B5C                 DCD def_3B54\n__text:00003B5C                 DCD def_3B54\n__text:00003B5C                 DCD loc_3C1C\n__text:00003B5C                 DCD def_3B54\n__text:00003B5C                 DCD loc_3C1C\n__text:00003B5C                 DCD loc_3BFC\n__text:00003B5C                 DCD def_3B54\n__text:00003B5C                 DCD def_3B54\n__text:00003B5C                 DCD loc_3C24\n__text:00003B5C                 DCD loc_3C2C\n__text:00003B5C                 DCD def_3B54\n__text:00003B5C                 DCD def_3B54\n__text:00003B5C                 DCD loc_3C14\n__text:00003B5C                 DCD loc_3C2C\n__text:00003B5C                 DCD loc_3C34\n__text:00003B5C                 DCD def_3B54\n__text:00003B5C                 DCD def_3B54\n__text:00003B5C                 DCD def_3B54\n__text:00003B5C                 DCD loc_3C14\n__text:00003B5C                 DCD loc_3C2C\n__text:00003B5C                 DCD loc_3C2C\n__text:00003B5C                 DCD loc_3C2C\n__text:00003B5C                 DCD def_3B54\n__text:00003B5C                 DCD loc_3C3C\n__text:00003B5C                 DCD loc_3C34\n__text:00003B5C                 DCD loc_3C34\n__text:00003B5C                 DCD loc_3C34\n__text:00003B5C                 DCD def_3B54\n__text:00003B5C                 DCD def_3B54\n__text:00003B5C                 DCD def_3B54\n__text:00003B5C                 DCD def_3B54\n__text:00003B5C                 DCD def_3B54\n__text:00003B5C                 DCD def_3B54\n__text:00003B5C                 DCD def_3B54\n__text:00003B5C                 DCD loc_3BFC\n</code></pre>"},{"location":"user-guide/disassembler/disassembly-gallery/arm-processor-ios-iphone-unlock.html","title":"ARM Processor iOS (iPhone): Unlock","text":"<p>Assembler code</p> <pre><code>__text:00002914                 STR     R3, [SP,#0x14+var_8]\n__text:00002918                 MOV     R3, #0\n__text:0000291C                 STRB    R3, [SP,#0x14+var_1]\n__text:00002920                 MOV     R0, #0xE\n__text:00002924                 BL      __keymgr_get_and_lock_processwide_ptr\n__text:00002928                 MOV     R3, R0\n__text:0000292C                 STR     R3, [SP,#0x14+var_C]\n__text:00002930                 LDR     R3, [SP,#0x14+var_C]\n__text:00002934                 CMP     R3, #0\n__text:00002938                 BEQ     loc_296C\n__text:0000293C                 LDR     R3, [SP,#0x14+var_C]\n__text:00002940                 LDRB    R3, [R3,#2]\n__text:00002944                 STRB    R3, [SP,#0x14+var_1]\n__text:00002948                 LDR     R2, [SP,#0x14+var_C]\n__text:0000294C                 MOV     R3, #1\n__text:00002950                 STRB    R3, [R2,#2]\n__text:00002954                 LDR     R3, [SP,#0x14+var_C]\n__text:00002958                 LDR     R3, [R3,#4]\n__text:0000295C                 STR     R3, [SP,#0x14+var_8]\n__text:00002960                 MOV     R0, #0xE\n__text:00002964                 LDR     R1, [SP,#0x14+var_C]\n__text:00002968                 BL      __keymgr_set_and_unlock_processwide_ptr\n__text:0000296C\n__text:0000296C loc_296C                                ; CODE XREF: sub_28F8+40\u2191j\n__text:0000296C                 LDR     R3, [SP,#0x14+var_10]\n__text:00002970                 LDR     R3, [R3,#4]\n__text:00002974                 CMP     R3, #0\n__text:00002978                 BEQ     loc_2998\n__text:0000297C                 LDR     R3, [SP,#0x14+var_10]\n__text:00002980                 LDR     R2, [R3]\n__text:00002984                 LDR     R3, [SP,#0x14+var_10]\n__text:00002988                 LDR     R3, [R3,#8]\n__text:0000298C                 MOV     R0, R3\n__text:00002990                 BLX     R2\n__text:00002994                 B       loc_29A4\n</code></pre>"},{"location":"user-guide/disassembler/disassembly-gallery/arm-processor-ios-iphone-write.html","title":"ARM Processor iOS (iPhone): Write","text":"<p>Assembler code</p> <pre><code>__text:00004424                 BHI     loc_440C\n__text:00004428\n__text:00004428 loc_4428                                ; CODE XREF: sub_43CC+24\u2191j\n__text:00004428                                         ; sub_43CC+3C\u2191j\n__text:00004428                 LDR     R3, =___stderrp_ptr\n__text:0000442C                 LDR     R0, =aSynchronized ; \"synchronized\\n\"\n__text:00004430                 MOV     R1, #1          ; __size\n__text:00004434                 LDR     R3, [R3]        ; ___stderrp\n__text:00004438                 MOV     R2, #0xD        ; __nitems\n__text:0000443C                 LDR     R3, [R3]        ; __stream\n__text:00004440                 BL      _fwrite\n__text:00004444                 MOV     R3, #0x12\n__text:00004448\n__text:00004448 loc_4448                                ; CODE XREF: sub_43CC+34\u2191j\n__text:00004448                                         ; sub_43CC+4C\u2191j\n__text:00004448                 STR     R3, [R4,#0x38]\n__text:0000444C                 LDR     R3, [R4,#0xE4]\n__text:00004450                 STR     R3, [R4,#0xE0]\n__text:00004454                 MOV     R3, #9\n__text:00004458                 STR     R3, [R4,#0xE4]\n__text:0000445C                 LDR     R3, [R4,#0xEC]\n__text:00004460                 STR     R3, [R4,#0xE8]\n__text:00004464                 MOV     R3, #0\n__text:00004468                 STR     R3, [R4,#0xEC]\n__text:0000446C                 POP     {R4,R7,PC}\n__text:0000446C ; End of function sub_43CC\n__text:0000446C\n__text:0000446C ; ---------------------------------------------------------------------------\n__text:00004470 off_4470        DCD dword_52E70         ; DATA XREF: sub_43CC\u2191r\n__text:00004474 off_4474        DCD ___stderrp_ptr      ; DATA XREF: sub_43CC:loc_4428\u2191r\n__text:00004478 ; void *const _ptr\n__text:00004478 __ptr           DCD aSynchronized       ; DATA XREF: sub_43CC+60\u2191r\n__text:00004478                                         ; \"synchronized\\n\"\n__text:0000447C\n__text:0000447C ; =============== S U B R O U T I N E =======================================\n__text:0000447C\n__text:0000447C\n__text:0000447C sub_447C                                ; DATA XREF: sub_4820+47C\u2193o\n__text:0000447C                                         ; __text:off_50A8\u2193o\n__text:0000447C                 UXTB    R0, R0\n\n</code></pre>"},{"location":"user-guide/disassembler/disassembly-gallery/arm-processor-linux-elf.html","title":"ARM Processor: Linux ELF","text":"<p>Assembler code</p> <pre><code>.text:0000107E                 VLDR            D0, [SP,#0x5E8+var_450]\n.text:00001082                 VMOV            R2, R3, D0\n.text:00001086                 VLDR            D0, [SP,#0x5E8+var_448]\n.text:0000108A                 VMOV            R0, R1, D0\n.text:0000108E                 BL              __aeabi_ddiv\n.text:00001092                 VMOV            D0, R0, R1\n.text:00001096                 VSTR            D0, [SP,#0x5E8+var_440]\n.text:0000109A                 VLDR            D0, [SP,#0x5E8+var_440]\n.text:0000109E                 VMOV            R0, R1, D0\n.text:000010A2                 BL              __aeabi_d2f\n.text:000010A6                 LDR             R1, =Usart1_out_DATA\n.text:000010A8                 STR             R0, [R1,#0x7C] ; `vtable for'__cxxabiv1::__si_class_type_info\n.text:000010AA                 LDR.W           R0, [SP,#0x5E8+var_18]\n.text:000010AE                 ADDW            R0, R0, #0xCC8\n.text:000010B2                 ADD.W           R0, R0, #0x400\n.text:000010B6                 VLDR            D0, [R0,#0x300]\n.text:000010BA                 VSTR            D0, [SP,#0x5E8+var_450]\n.text:000010BE                 VLDR            D0, [SP,#0x5E8+var_450]\n.text:000010C2                 BL              __hardfp_sqrt\n.text:000010C6                 VSTR            D0, [SP,#0x5E8+var_448]\n.text:000010CA                 LDR             R0, =glv\n.text:000010CC                 VLDR            D0, [R0,#0x48]\n.text:000010D0                 VSTR            D0, [SP,#0x5E8+var_450]\n.text:000010D4                 VLDR            D0, [SP,#0x5E8+var_450]\n.text:000010D8                 VMOV            R2, R3, D0\n.text:000010DC                 VLDR            D0, [SP,#0x5E8+var_448]\n.text:000010E0                 VMOV            R0, R1, D0\n.text:000010E4                 BL              __aeabi_ddiv\n.text:000010E8                 VMOV            D0, R0, R1\n.text:000010EC                 VSTR            D0, [SP,#0x5E8+var_440]\n.text:000010F0                 VLDR            D0, [SP,#0x5E8+var_440]\n.text:000010F4                 VMOV            R0, R1, D0\n.text:000010F8                 BL              __aeabi_d2f\n.text:000010FC                 LDR             R1, =Usart1_out_DATA\n.text:000010FE                 STR.W           R0, [R1,#0x80]\n\n</code></pre>"},{"location":"user-guide/disassembler/disassembly-gallery/arm-processor-windows-ce-coff-format.html","title":"ARM Processor: Windows CE COFF Format","text":"<p>Assembler code</p> <pre><code>.text:00000078                 MOVS            R3, R0\n.text:0000007C                 BNE             loc_58\n.text:00000080                 MOV             R0, #0x200\n.text:00000084                 ADD             R0, SP, R0\n.text:00000088                 BL              OutputDebugStringW\n.text:0000008C                 CMP             R6, #0\n.text:00000090                 MOV             R0, R6\n.text:00000094                 MOVLE           R0, #0\n.text:00000098                 ADD             SP, SP, #0x600\n.text:0000009C                 LDMFD           SP, {R4-R6,SP,PC}\n.text:0000009C ; ---------------------------------------------------------------------------\n.text:000000A0 off_A0          DCD __imp_vsprintf      ; DATA XREF: DbgPrint:$M4755\u2191r\n.text:000000A0 ; End of function DbgPrint\n.text:000000A0\n.text:000000A0 ; .text         ends\n.text:000000A0\n.pdata:000000A4 ; ===========================================================================\n.pdata:000000A4\n.pdata:000000A4 ; Segment type: Pure data\n.pdata:000000A4                 AREA .pdata, DATA, READONLY\n.pdata:000000A4                 ; ORG 0xA4\n.pdata:000000A4 ; COMDAT (pick associative to section at 10)\n.pdata:000000A4 $T4757          DCD DbgPrint            ; Function start\n.pdata:000000A8                 DCD 0x40002504          ; Function end: A4, prolog end: 20, 32-bit: 1, has EH: 0\n.pdata:000000A8 ; .pdata        ends\n.pdata:000000A8\nUNDEF:000000B0 ; ===========================================================================\nUNDEF:000000B0\nUNDEF:000000B0 ; Segment type: Externs\nUNDEF:000000B0                 IMPORT OutputDebugStringW\nUNDEF:000000B0                                         ; CODE XREF: DbgPrint+78\u2191p\nUNDEF:000000B4                 IMPORT __imp_vsprintf   ; DATA XREF: DbgPrint:$M4755\u2191o\nUNDEF:000000B4                                         ; DbgPrint:off_A0\u2191o\nUNDEF:000000B4\nUNDEF:000000B4                 END\n\n</code></pre>"},{"location":"user-guide/disassembler/disassembly-gallery/arm-processor-windows-ce-pe-format.html","title":"ARM Processor: Windows CE PE Format","text":"<p>Assembler code</p> <pre><code>.text:1001577C\n.text:1001577C ; =============== S U B R O U T I N E =======================================\n.text:1001577C\n.text:1001577C\n.text:1001577C ; BOOL __stdcall DllEntryPoint(HINSTANCE hinstDLL, DWORD fdwReason, LPVOID lpReserved)\n.text:1001577C                 EXPORT DllEntryPoint\n.text:1001577C DllEntryPoint                           ; DATA XREF: .pdata:1001BB70\u2193o\n.text:1001577C                 PUSH    {R4-R8,LR}\n.text:10015780                 MOV     R7, R2\n.text:10015784                 MOV     R6, R1\n.text:10015788                 MOV     R8, R0\n.text:1001578C                 LDR     R5, =dword_1001AD20\n.text:10015790                 CMP     R6, #1\n.text:10015794                 BNE     loc_100157BC\n.text:10015798                 LDR     R3, [R5]\n.text:1001579C                 CMP     R3, #0\n.text:100157A0                 BEQ     loc_100157B8\n.text:100157A4                 MOV     R1, #1\n.text:100157A8                 MOV     LR, PC\n.text:100157AC                 BX      R3\n.text:100157B0                 MOVS    R4, R0\n.text:100157B4                 BEQ     loc_10015804\n.text:100157B8\n.text:100157B8 loc_100157B8                            ; CODE XREF: DllEntryPoint+24\u2191j\n.text:100157B8                 BL      sub_100155D8\n.text:100157BC\n.text:100157BC loc_100157BC                            ; CODE XREF: DllEntryPoint+18\u2191j\n.text:100157BC                 MOV     R2, R7\n.text:100157C0                 MOV     R1, R6\n.text:100157C4                 MOV     R0, R8\n.text:100157C8                 BL      sub_10003C18\n.text:100157CC                 MOV     R4, R0\n.text:100157D0                 CMP     R6, #0\n.text:100157D4                 BNE     loc_10015804\n.text:100157D8                 BL      sub_10015760\n</code></pre>"},{"location":"user-guide/disassembler/disassembly-gallery/atmel-avr-disassembler.html","title":"ATMEL AVR Disassembler","text":"<p>Assembler code</p> <pre><code>.text:0000003B\n.text:0000003B ; =============== S U B R O U T I N E =======================================\n.text:0000003B\n.text:0000003B\n.text:0000003B                 ; public qsort\n.text:0000003B qsort:                                  ; CODE XREF: sub_41+1DE\u2193p\n.text:0000003B                 ldi     r26, 0xA\n.text:0000003C                 ldi     r27, 0\n.text:0000003D                 ldi     r30, (sub_41 &amp; 0xFF)\n.text:0000003E                 ldi     r31, (sub_41 &gt;&gt; 8)\n.text:0000003F                 jmp     __prologue_saves__\n.text:0000003F ; End of function qsort\n.text:0000003F\n.text:00000041\n.text:00000041 ; =============== S U B R O U T I N E =======================================\n.text:00000041\n.text:00000041\n.text:00000041 sub_41:                                 ; DATA XREF: qsort+2\u2191o\n.text:00000041                                         ; qsort+3\u2191o\n.text:00000041                 movw    r4, r24\n.text:00000042                 movw    r8, r22\n.text:00000043                 movw    r6, r20\n.text:00000044                 movw    r2, r18\n.text:00000045                 std     Y+5, r20\n.text:00000046                 std     Y+6, r7\n.text:00000047                 clr     r18\n.text:00000048                 clr     r19\n.text:00000049                 sub     r18, r20\n.text:0000004A                 sbc     r19, r21\n.text:0000004B                 std     Y+8, r19\n.text:0000004C                 std     Y+7, r18\n.text:0000004D\n.text:0000004D loc_4D:                                 ; CODE XREF: sub_41+1EB\u2193j\n.text:0000004D                 ldi     r19, 7\n.text:0000004E                 cp      r8, r19\n</code></pre>"},{"location":"user-guide/disassembler/disassembly-gallery/atmel-oak-dsp.html","title":"Atmel OAK DSP","text":"<p>Assembler code</p> <pre><code>ROM:0020\nROM:0020 ; =============== S U B R O U T I N E =======================================\nROM:0020\nROM:0020 ; Attributes: bp-based frame\nROM:0020\nROM:0020 RESET_0:                                ; CODE XREF: RESET\u2191j\nROM:0020\nROM:0020 ; FUNCTION CHUNK AT ROM:00CB SIZE 00000001 BYTES\nROM:0020\nROM:0020                 mov     #$35F,sp\nROM:0022                 mov     #$D,st0\nROM:0024                 mov     #1,st1\nROM:0026 ; assume page = 1\nROM:0026                 cntx    s\nROM:0027                 mov     #1,st0\nROM:0029                 mov     #0,st1\nROM:002B ; assume page = 0\nROM:002B                 mov     #$40,st2\nROM:002D                 cntx    r\nROM:002E                 mov     #$40,st2\nROM:0030                 mov     #0,cfgi\nROM:0032                 mov     #0,cfgj\nROM:0034                 mov     #$DD,a0\nROM:0036                 brr     loc_3E, eq\nROM:0037                 mov     #$C8DF,r0\nROM:0039                 mov     #$F955,r1\nROM:003B                 sub     #1,a0\nROM:003C                 rep     a0l\nROM:003D                 movp    (r0)+1,(r1)+1\nROM:003E\nROM:003E loc_3E:                                 ; CODE XREF: RESET_0+16\u2191j\nROM:003E                 call    sub_91\nROM:0040                 br      loc_CB\nROM:0040 ; End of function RESET_0\nROM:0040\n\n</code></pre>"},{"location":"user-guide/disassembler/disassembly-gallery/c166-processor-with-elf-file.html","title":"C166 Processor with ELF file","text":"<p>Assembler code</p> <pre><code>code_libc:00C00D9C ; ===========================================================================\ncode_libc:00C00D9C\ncode_libc:00C00D9C ; Segment type: Pure code\ncode_libc:00C00D9C code_libc       section CODE word public\ncode_libc:00C00D9C proccode_libc proc\ncode_libc:00C00D9C                 ; assume dpp0: 1 (page 0x4000)\ncode_libc:00C00D9C                 ; assume dpp1: 1 (page 0x4000)\ncode_libc:00C00D9C                 ; assume dpp2: 2 (page 0x8000)\ncode_libc:00C00D9C                 ; assume dpp3: 3 (page 0xC000)\ncode_libc:00C00D9C\ncode_libc:00C00D9C ; =============== S U B R O U T I N E =======================================\ncode_libc:00C00D9C\ncode_libc:00C00D9C\ncode_libc:00C00D9C _$cocofun_7:                            ; CODE XREF: _$cocofun_2+A\u2193J\ncode_libc:00C00D9C                                         ; _$cocofun_6_0+6\u2193J\ncode_libc:00C00D9C                 mov     r4, r0\ncode_libc:00C00D9E                 calls   0C0h, __emitchar\ncode_libc:00C00DA2                 mov     r11, #0\ncode_libc:00C00DA4                 cmp     r11, r8\ncode_libc:00C00DA6                 subc    r8, #0\ncode_libc:00C00DA8                 rets\ncode_libc:00C00DA8 ; End of function _$cocofun_7\ncode_libc:00C00DA8\ncode_libc:00C00DA8 proccode_libc endp\ncode_libc:00C00DA8 code_libc       ends\ncode_libc:00C00DA8\ncode_libc:00C00DAA ; ===========================================================================\ncode_libc:00C00DAA\ncode_libc:00C00DAA ; Segment type: Pure code\ncode_libc:00C00DAA code_libc       section CODE word public\ncode_libc:00C00DAA proccode_libc proc\ncode_libc:00C00DAA                 ; assume dpp0: 1 (page 0x4000)\ncode_libc:00C00DAA                 ; assume dpp1: 1 (page 0x4000)\ncode_libc:00C00DAA                 ; assume dpp2: 2 (page 0x8000)\ncode_libc:00C00DAA                 ; assume dpp3: 3 (page 0xC000)\ncode_libc:00C00DAA\ncode_libc:00C00DAA ; =============== S U B R O U T I N E =======================================\ncode_libc:00C00DAA\ncode_libc:00C00DAA\ncode_libc:00C00DAA _$cocofun_2:                            ; CODE XREF: code_libc:00C0050C\u2191P\ncode_libc:00C00DAA                                         ; code_libc:00C0055C\u2191P\ncode_libc:00C00DAA                 calls   0C0h, _$cocofun_6_0\n\n</code></pre>"},{"location":"user-guide/disassembler/disassembly-gallery/c166-processor.html","title":"C166 Processor","text":"<p>Assembler code</p> <pre><code>ROM:00005920\nROM:00005920 ; =============== S U B R O U T I N E =======================================\nROM:00005920\nROM:00005920\nROM:00005920 sub_5920:                               ; CODE XREF: ROM:00005A1A\u2193P\nROM:00005920                                         ; ROM:00005ADC\u2193P\nROM:00005920                 mov     r4, r8\nROM:00005922                 cmpb    rl4, #0\nROM:00005924                 jmpr    cc_NZ, loc_5932\nROM:00005926                 mov     r5, #4\nROM:00005928                 or      dword_18+4, ZEROS\nROM:0000592C                 or      dword_18+6, r5\nROM:00005930                 jmpr    cc_UC, loc_593E\nROM:00005932 ; ---------------------------------------------------------------------------\nROM:00005932\nROM:00005932 loc_5932:                               ; CODE XREF: sub_5920+4\u2191j\nROM:00005932                 mov     r5, #0FFFBh\nROM:00005936                 and     dword_18+4, ONES\nROM:0000593A                 and     dword_18+6, r5\nROM:0000593E\nROM:0000593E loc_593E:                               ; CODE XREF: sub_5920+10\u2191j\nROM:0000593E                 mov     r4, r9\nROM:00005940                 cmpb    rl4, #0\nROM:00005942                 jmpr    cc_NZ, loc_5950\nROM:00005944                 mov     r5, #8\nROM:00005946                 or      dword_18+4, ZEROS\nROM:0000594A                 or      dword_18+6, r5\nROM:0000594E                 jmpr    cc_UC, loc_595C\nROM:00005950 ; ---------------------------------------------------------------------------\nROM:00005950\nROM:00005950 loc_5950:                               ; CODE XREF: sub_5920+22\u2191j\nROM:00005950                 mov     r5, #0FFF7h\nROM:00005954                 and     dword_18+4, ONES\nROM:00005958                 and     dword_18+6, r5\nROM:0000595C\nROM:0000595C loc_595C:                               ; CODE XREF: sub_5920+2E\u2191j\nROM:0000595C                 mov     r4, dword_18+4\n</code></pre>"},{"location":"user-guide/disassembler/disassembly-gallery/cr16.html","title":"CR16","text":"<p>Assembler code</p> <pre><code>ROM:4B66                 .byte 0xCE ; \u00ce\nROM:4B67                 .byte 0x15\nROM:4B68                 .byte 0xFE ; \u00fe\nROM:4B69                 .byte 0x2E ; .\nROM:4B6A ; ---------------------------------------------------------------------------\nROM:4B6A                 bal     r6, sub_E8BA\nROM:4B6E                 movw    $0xEE36, r7\nROM:4B72                 movw    $0x25A8, r8\nROM:4B76                 movw    $0xEE4F, r9\nROM:4B7A                 movw    $0xEE4A, r10\nROM:4B7E                 movw    $0xEE4C, r11\nROM:4B82                 movw    $0xEE4D, r12\nROM:4B86                 movw    $0xEE4E, r13\nROM:4B8A                 loadb   0x00(r2), r0\nROM:4B8C                 cmpb    $0xFF98, r0\nROM:4B90                 bne     loc_4B98\nROM:4B92                 loadb   byte_EE49, r0\nROM:4B96                 storb   r0, 0x00(r2)\nROM:4B98\nROM:4B98 loc_4B98:                               ; CODE XREF: ROM:4B90\u2191j\nROM:4B98                 loadb   0x00(r2), r6\nROM:4B9A                 bal     r0, sub_E68A\nROM:4B9E                 addb    $-0x10, r0\nROM:4BA0                 mulw    $0x0B, r3\nROM:4BA2                 loadw   0x0002(r2), r4\nROM:4BA4                 loadb   0x04(r3), r9\nROM:4BA6                 mulw    $0xF2, r7\nROM:4BA8                 addb    $0x07, r4\nROM:4BAA                 loadb   0x09(r3), r1\nROM:4BAC                 mulw    $0x0F, r8\nROM:4BAE                 orw     $0x09, r4\nROM:4BB0                 loadb   0x0B(r3), r1\nROM:4BB2                 mulw    $0x04, r10\nROM:4BB4                 adduw   r5, r12\nROM:4BB6                 loadb   0x0D(r3), r1\n</code></pre>"},{"location":"user-guide/disassembler/disassembly-gallery/dsp56k.html","title":"DSP56K","text":"<p>Assembler code</p> <pre><code>ROM:00000100\nROM:00000100 ; =============== S U B R O U T I N E =======================================\nROM:00000100\nROM:00000100\nROM:00000100                 global start\nROM:00000100 start:                                  ; CODE XREF: ROM:00000000\u2191j\nROM:00000100                                         ; start+3\u2193j ...\nROM:00000100                 clr     a\nROM:00000101                 move    r5,a\nROM:00000102                 tst     a\nROM:00000103                 jne     &lt;start\nROM:00000104                 move    #$14,r5\nROM:00000105                 movec   #$13F,m6\nROM:00000107                 movec   #$13F,m4\nROM:00000109                 move    r2,r1\nROM:0000010A                 move    #$7000,r6\nROM:0000010C                 move    #$7400,r4\nROM:0000010E                 move    (r1)+n1\nROM:0000010F                 move    x:(r1)+,x0  y:(r6)+,y0\nROM:00000110                 do      #$140,ROM_115\nROM:00000112                 mpyr    y0,x0,a     x:(r1)+,x0    y:(r6)+,y0\nROM:00000113                 nop\nROM:00000114                 move    a,x:(r4)+\nROM:00000115\nROM:00000115 ROM_115:                                ; CODE XREF: start+10\u2191j\nROM:00000115                 movec   #$FFFF,m4\nROM:00000117                 movec   #$FFFF,m6\nROM:00000119                 move    #$72B0,r3\nROM:0000011B                 move    #$72A8,r4\nROM:0000011D                 move    #$72A0,r6\nROM:0000011F                 move    #$7156,r7\nROM:00000121                 do      #8,ROM_129\nROM:00000123                 jsr     ROM_12A\nROM:00000125                 nop\nROM:00000126                 nop\n\n</code></pre>"},{"location":"user-guide/disassembler/disassembly-gallery/epoc-sis-file-handler.html","title":"EPOC SIS File Handler","text":"<p>Assembler code</p> <pre><code>.text:100001CC                 BL      Open__5RFileR3RFsRC6TDesC8Ui ; RFile::Open(RFs &amp;,TDesC8 const &amp;,uint)\n.text:100001D0                 CMP     R0, #0\n.text:100001D4                 BEQ     loc_100001E8\n.text:100001D8                 MOV     R0, R10\n.text:100001DC                 BL      Close__11RHandleBase ; RHandleBase::Close(void)\n.text:100001E0\n.text:100001E0 loc_100001E0                            ; CODE XREF: sub_1000014C+6C\u2191j\n.text:100001E0                                         ; sub_1000014C+F8\u2193j\n.text:100001E0                 MOV     R0, #0xFFFFFFFF\n.text:100001E4                 B       loc_100007C4\n.text:100001E8 ; ---------------------------------------------------------------------------\n.text:100001E8\n.text:100001E8 loc_100001E8                            ; CODE XREF: sub_1000014C+88\u2191j\n.text:100001E8                 ADD     R5, R10, #0xC\n.text:100001EC                 ADD     R1, R10, #0x124\n.text:100001F0                 MOV     R0, R5\n.text:100001F4                 BL      Modified__C5RFileR5TTime ; RFile::Modified(TTime &amp;)\n.text:100001F8                 MOV     R3, #0x18\n.text:100001FC                 STR     R3, [SP,#0x94+var_24]\n.text:10000200                 ADD     R2, SP, #0x94+var_24\n.text:10000204                 MOV     R1, #1\n.text:10000208                 MOV     R0, R5\n.text:1000020C                 BL      Seek__C5RFile5TSeekRi ; RFile::Seek(TSeek,int &amp;)\n.text:10000210                 ADD     R4, SP, #0x94+var_30\n.text:10000214                 MOV     R3, #4\n.text:10000218                 MOV     R2, R3\n.text:1000021C                 ADD     R1, R10, #0x1C\n.text:10000220                 MOV     R0, R4\n.text:10000224                 BL      __5TPtr8PUcii\n.text:10000228                 MOV     R1, R4\n.text:1000022C                 MOV     R0, R5\n.text:10000230                 BL      Read__C5RFileR5TDes8 ; RFile::Read(TDes8 &amp;)\n.text:10000234                 LDR     R0, [R10,#0x1C]\n.text:10000238                 BL      __builtin_vec_new\n.text:1000023C                 STR     R0, [R10,#0x20]\n</code></pre>"},{"location":"user-guide/disassembler/disassembly-gallery/fujitsu-fr-.elf.html","title":"Fujitsu FR (.elf)","text":"<p>Assembler code</p> <pre><code>.text:00000114\n.text:00000114 ; =============== S U B R O U T I N E =======================================\n.text:00000114\n.text:00000114 ; Attributes: bp-based frame\n.text:00000114\n.text:00000114                 .globl main\n.text:00000114                 .type main, @function\n.text:00000114 main:\n.text:00000114\n.text:00000114 var_4           = -4\n.text:00000114\n.text:00000114                 st      rp, @-r15\n.text:00000116                 enter   #8\n.text:00000118                 ldi:32  #0x170, r4\n.text:0000011E                 ldi:32  #printf, r1\n.text:00000124                 call    @r1\n.text:00000126                 ldi:8   #1, r4\n.text:00000128                 ldi:8   #2, r5\n.text:0000012A                 ldi:8   #3, r6\n.text:0000012C                 ldi:32  #plok1, r1\n.text:00000132                 call    @r1\n.text:00000134                 mov     r4, r2\n.text:00000136                 ldi:8   #var_4, r1\n.text:00000138                 extsb   r1\n.text:0000013A                 addn    r14, r1\n.text:0000013C                 st      r2, @r1\n.text:0000013E                 ldi:8   #var_4, r1\n.text:00000140                 extsb   r1\n.text:00000142                 addn    r14, r1\n.text:00000144                 ld      @r1, r4\n.text:00000146                 ldi:32  #plok2, r1\n.text:0000014C                 call    @r1\n.text:0000014E                 ldi:8   #0x61, r4 ; 'a'\n.text:00000150                 ldi:32  #plok3, r1\n.text:00000156                 call    @r1\n</code></pre>"},{"location":"user-guide/disassembler/disassembly-gallery/gameboy.html","title":"Gameboy","text":"<p>Assembler code</p> <pre><code>ROM:0ABF                 db  23h ; #\nROM:0AC0                 db  10h\nROM:0AC1                 db 0EEh ; \u00ee\nROM:0AC2                 db 0C9h ; \u00c9\nROM:0AC3 ; ---------------------------------------------------------------------------\nROM:0AC3                 ld      a, (4DA4h)\nROM:0AC6                 and     a\nROM:0AC7                 ret     nz\nROM:0AC8                 ld      ix, 4C00h\nROM:0ACC                 ld      iy, 4DC8h\nROM:0AD0                 ld      de, 100h\nROM:0AD3                 cp      (iy+0)\nROM:0AD6                 jp      nz, loc_BD2\nROM:0AD9                 ld      (iy+0), 0Eh\nROM:0ADD                 ld      a, (4DA6h)\nROM:0AE0                 and     a\nROM:0AE1                 jr      z, loc_AFE\nROM:0AE3                 ld      hl, (4DCBh)\nROM:0AE6                 and     a\nROM:0AE7                 sbc     hl, de\nROM:0AE9                 jr      nc, loc_AFE\nROM:0AEB                 ld      hl, 4EACh\nROM:0AEE                 set     7, (hl)\nROM:0AF0                 ld      a, 9\nROM:0AF2                 cp      (ix+0Bh)\nROM:0AF5                 jr      nz, loc_AFB\nROM:0AF7                 res     7, (hl)\nROM:0AF9                 ld      a, 9\nROM:0AFB\nROM:0AFB loc_AFB:                                ; CODE XREF: ROM:0AF5\u2191j\nROM:0AFB                 ld      (4C0Bh), a\nROM:0AFE\nROM:0AFE loc_AFE:                                ; CODE XREF: ROM:0AE1\u2191j\nROM:0AFE                                         ; ROM:0AE9\u2191j\nROM:0AFE                 ld      a, (4DA7h)\n\n</code></pre>"},{"location":"user-guide/disassembler/disassembly-gallery/h8-300-coff-file-format.html","title":"H8 300: COFF FILE Format","text":"<p>Assembler code</p> <pre><code>.text:00000164                 beq     _L6:8\n.text:00000166                 mov.w   @(var_6:16,r6), r0\n.text:0000016A                 mov.w   @(var_4:16,r6), r1\n.text:0000016E                 mov.w   r3, @(var_2:16,r6)\n.text:00000172                 jsr     ___negsf2:16\n.text:00000176                 mov.w   r0, @(var_6:16,r6)\n.text:0000017A                 mov.w   r1, @(var_4:16,r6)\n.text:0000017E                 mov.w   @(var_2:16,r6), r3\n.text:00000182\n.text:00000182 _L6:                                    ; CODE XREF: ___adjust+64\u2191j\n.text:00000182                 mov.w   r3, r3\n.text:00000184                 bne     _L7:8\n.text:00000186                 mov.w   @(var_6:16,r6), r0\n.text:0000018A                 mov.w   @(var_4:16,r6), r1\n.text:0000018E                 bra     _L11:8\n.text:00000190 ; ---------------------------------------------------------------------------\n.text:00000190\n.text:00000190 _L7:                                    ; CODE XREF: ___adjust+84\u2191j\n.text:00000190                 mov.w   r3, r3\n.text:00000192                 bge     _L8:8\n.text:00000194                 mov.w   r3, r0\n.text:00000196                 not.b   r0l\n.text:00000198                 not.b   r0h\n.text:0000019A                 adds    #1, r0\n.text:0000019C                 jsr     ___exp10:16\n.text:000001A0                 push.w  r1\n.text:000001A2                 push.w  r0\n.text:000001A4                 mov.w   @(var_6:16,r6), r0\n.text:000001A8                 mov.w   @(var_4:16,r6), r1\n.text:000001AC                 jsr     ___divsf3:16\n.text:000001B0                 bra     _L12:8\n.text:000001B2 ; ---------------------------------------------------------------------------\n.text:000001B2\n.text:000001B2 _L8:                                    ; CODE XREF: ___adjust+92\u2191j\n.text:000001B2                 mov.w   r3, r0\n</code></pre>"},{"location":"user-guide/disassembler/disassembly-gallery/h8-300s-coff-file-format.html","title":"H8 300s: COFF FILE Format","text":"<p>Assembler code</p> <pre><code>.text:00000114                 ble     _L2:8\n.text:00000116                 mov.w   #0x22, r2 ; '\"'\n.text:0000011A                 mov.w   r2, @er0\n.text:0000011C                 mov.l   @___infinity:32, er0\n.text:00000124                 mov.w   r3, r3\n.text:00000126                 beq     _L11:8\n.text:00000128                 jsr     ___negsf2:24\n.text:0000012C                 bra     _L11:8\n.text:0000012E ; ---------------------------------------------------------------------------\n.text:0000012E\n.text:0000012E _L2:                                    ; CODE XREF: ___adjust+14\u2191j\n.text:0000012E                 cmp.w   #0xFECC, r4\n.text:00000132                 bge     _L4:8\n.text:00000134                 mov.w   #0x22, r2 ; '\"'\n.text:00000138                 mov.w   r2, @er0\n.text:0000013A                 mov.l   @_LC0:16, er0\n.text:00000140                 bra     _L11:8\n.text:00000142 ; ---------------------------------------------------------------------------\n.text:00000142\n.text:00000142 _L4:                                    ; CODE XREF: ___adjust+32\u2191j\n.text:00000142                 mov.l   @er1, er5\n.text:00000146                 mov.w   r3, r3\n.text:00000148                 beq     _L6:8\n.text:0000014A                 mov.l   er5, er0\n.text:0000014C                 jsr     ___negsf2:24\n.text:00000150                 mov.l   er0, er5\n.text:00000152\n.text:00000152 _L6:                                    ; CODE XREF: ___adjust+48\u2191j\n.text:00000152                 mov.w   r4, r4\n.text:00000154                 bne     _L7:8\n.text:00000156                 mov.l   er5, er0\n.text:00000158                 bra     _L11:8\n.text:0000015A ; ---------------------------------------------------------------------------\n.text:0000015A\n.text:0000015A _L7:                                    ; CODE XREF: ___adjust+54\u2191j\n.text:0000015A                 mov.w   r4, r4\n\n</code></pre>"},{"location":"user-guide/disassembler/disassembly-gallery/h8-500.html","title":"H8 500","text":"<p>Assembler code</p> <pre><code>ROM:1082\nROM:1082 ! =============== S U B R O U T I N E =======================================\nROM:1082\nROM:1082\nROM:1082 sub_1082: ! near\nROM:1082                 mov:g.w @(0xC:8,r3), r0\nROM:1085                 mov:g.w @(0xA:8,r3), r2\nROM:1088                 bra     loc_109D:8\nROM:108A ! ---------------------------------------------------------------------------\nROM:108A\nROM:108A loc_108A:                               ! CODE XREF: sub_1082:loc_109D\u2193j\nROM:108A                 mov:g.w @r0+, r4\nROM:108C                 mov:g.w @r0+, r1\nROM:108E                 shlr.w  r1\nROM:1090                 sub.w   #1:16, r1\nROM:1094\nROM:1094 loc_1094:                               ! CODE XREF: sub_1082+14\u2193j\nROM:1094                 clr.w   @r4+\nROM:1096                 scb/f   r1, loc_1094:8\nROM:1099                 sub.w   #1:16, r2\nROM:109D\nROM:109D loc_109D:                               ! CODE XREF: sub_1082+6\u2191j\nROM:109D                 bne     loc_108A:8\nROM:109F                 mov:g.w @(0x10:8,r3), r4\nROM:10A2\nROM:10A2 loc_10A2:                               ! CODE XREF: sub_1082+34\u2193j\nROM:10A2                 mov:g.w @r4+, r0\nROM:10A4                 beq     loc_10B8:8\nROM:10A6                 mov:g.w @r4+, r1\nROM:10A8\nROM:10A8 loc_10A8:                               ! CODE XREF: sub_1082+2C\u2193j\nROM:10A8                 mov:g.b @r4+, r2\nROM:10AA                 mov:g.b r2, @r1+\nROM:10AC                 add:q.w #-1, r0\nROM:10AE                 bne     loc_10A8:8\n</code></pre>"},{"location":"user-guide/disassembler/disassembly-gallery/hitachi-sh-1-processor.html","title":"Hitachi SH-1 Processor","text":"<p>Assembler code</p> <pre><code>seg001:0A227704                 cmp/eq  #1, r0          ; Compare: Equal\nseg001:0A227706                 bf      loc_A227718     ; Branch if False\nseg001:0A227708                 mov.l   #h'210907D, r3  ; Move Immediate Long Data\nseg001:0A22770A                 mov.b   @r3, r2         ; Move Byte Data\nseg001:0A22770C                 tst     r2, r2          ; Test Logical\nseg001:0A22770E                 bf      loc_A227718     ; Branch if False\nseg001:0A227710                 mov.l   #h'210907D, r1  ; Move Immediate Long Data\nseg001:0A227712                 mov.l   #h'A23C5E0, r3  ; Move Immediate Long Data\nseg001:0A227714                 jsr     @r3 ; sub_A23C5E0 ; Jump to Subroutine\nseg001:0A227716                 mov.b   r10, @r1        ; Move Byte Data\nseg001:0A227718\nseg001:0A227718 loc_A227718:                            ; CODE XREF: sub_A227018+6EE\u2191j\nseg001:0A227718                                         ; sub_A227018+6F6\u2191j\nseg001:0A227718                 mov     r8, r0          ; Move Data\nseg001:0A22771A                 mov.b   @(9,r0), r0     ; Move Structure Byte Data\nseg001:0A22771C                 tst     #h'10, r0       ; Test Logical\nseg001:0A22771E                 movt    r0              ; Move T Bit\nseg001:0A227720                 add     #-1, r0         ; Add binary\nseg001:0A227722                 neg     r0, r0          ; Negate\nseg001:0A227724                 cmp/eq  #1, r0          ; Compare: Equal\nseg001:0A227726                 bt      loc_A22772C     ; Branch if True\nseg001:0A227728                 bra     loc_A2278AE     ; Branch\nseg001:0A22772A                 nop                     ; No Operation\nseg001:0A22772C ; ---------------------------------------------------------------------------\nseg001:0A22772C\nseg001:0A22772C loc_A22772C:                            ; CODE XREF: sub_A227018+70E\u2191j\nseg001:0A22772C                 mov     r11, r0         ; Move Data\nseg001:0A22772E                 mov.b   @r0, r0         ; Move Byte Data\nseg001:0A227730                 tst     #4, r0          ; Test Logical\nseg001:0A227732                 bt      loc_A227740     ; Branch if True\nseg001:0A227734                 mov.l   #h'21094BA, r1  ; Move Immediate Long Data\nseg001:0A227736                 mov.b   @r1, r3         ; Move Byte Data\nseg001:0A227738                 mov.l   #h'21094B5, r0  ; Move Immediate Long Data\nseg001:0A22773A                 mov.b   r3, @r0         ; Move Byte Data\nseg001:0A22773C                 mov.l   #h'21094B1, r2  ; Move Immediate Long Data\n\n</code></pre>"},{"location":"user-guide/disassembler/disassembly-gallery/hitachi-sh-3-processor-windows-ce-coff-format.html","title":"Hitachi SH-3 Processor : Windows CE COFF format","text":"<p>Assembler code</p>"},{"location":"user-guide/disassembler/disassembly-gallery/hitachi-sh-3-processor-windows-ce-pe-format.html","title":"Hitachi SH-3 Processor : Windows CE PE format","text":"<p>Assembler code</p> <pre><code>.text:100011B4 ; Exported entry   1. CreateTransport\n.text:100011B4\n.text:100011B4 ; =============== S U B R O U T I N E =======================================\n.text:100011B4\n.text:100011B4\n.text:100011B4                 .export CreateTransport\n.text:100011B4 CreateTransport:                        ; DATA XREF: .rdata:off_100021C8\u2193o\n.text:100011B4                                         ; .pdata:10004028\u2193o\n.text:100011B4                 sts.l   pr, @-r15\n.text:100011B6                 add     #-h'10, r15\n.text:100011B8                 mov.l   #??2@YAPAXI@Z, r0 ; operator new(uint)\n.text:100011BA                 jsr     @r0 ; ??2@YAPAXI@Z ; operator new(uint)\n.text:100011BC                 mov     #h'1C, r4\n.text:100011BE                 mov     r0, r4\n.text:100011C0                 tst     r4, r4\n.text:100011C2                 bt      loc_100011CC\n.text:100011C4                 bsr     sub_10001190\n.text:100011C6                 nop\n.text:100011C8                 bra     loc_100011CE\n.text:100011CA                 mov     r0, r4\n.text:100011CC ; ---------------------------------------------------------------------------\n.text:100011CC\n.text:100011CC loc_100011CC:                           ; CODE XREF: CreateTransport+E\u2191j\n.text:100011CC                 mov     #0, r4\n.text:100011CE\n.text:100011CE loc_100011CE:                           ; CODE XREF: CreateTransport+14\u2191j\n.text:100011CE                 mov     r4, r0\n.text:100011D0                 add     #h'10, r15\n.text:100011D2                 lds.l   @r15+, pr\n.text:100011D4                 rts\n.text:100011D6                 nop\n.text:100011D6 ; ---------------------------------------------------------------------------\n.text:100011D8 off_100011D8:   .data.l ??2@YAPAXI@Z    ; DATA XREF: CreateTransport+4\u2191r\n.text:100011D8                                         ; operator new(uint)\n.text:100011DC off_100011DC:   .data.l off_10002030    ; DATA XREF: sub_100011A8+4\u2191r\n</code></pre>"},{"location":"user-guide/disassembler/disassembly-gallery/hitachi-sh-4-processor-elf-file-format.html","title":"Hitachi SH-4 Processor : ELF File Format","text":"<p>Assembler code</p> <pre><code>LOAD:08041080\nLOAD:08041080 ; =============== S U B R O U T I N E =======================================\nLOAD:08041080\nLOAD:08041080\nLOAD:08041080 sub_8041080:                            ; CODE XREF: LOAD:08040F1A\u2191p\nLOAD:08041080                                         ; DATA XREF: LOAD:08040F18\u2191o ...\nLOAD:08041080                 mov.l   r8, @-r15\nLOAD:08041082                 mov.l   r9, @-r15\nLOAD:08041084                 mov.l   r10, @-r15\nLOAD:08041086                 mov.l   r14, @-r15\nLOAD:08041088                 sts.l   pr, @-r15\nLOAD:0804108A                 mov     r15, r14\nLOAD:0804108C                 mov     r4, r8\nLOAD:0804108E                 mov     r5, r10\nLOAD:08041090                 mov     r6, r9\nLOAD:08041092                 mov     #h'C, r4\nLOAD:08041094                 mov.l   #malloc, r1\nLOAD:08041096                 jsr     @r1 ; malloc\nLOAD:08041098                 nop\nLOAD:0804109A                 tst     r0, r0\nLOAD:0804109C                 bf      loc_80410A4\nLOAD:0804109E                 mov     #h'FFFFFFFF, r0\nLOAD:080410A0                 bra     loc_80410F6\nLOAD:080410A2                 nop\nLOAD:080410A4 ; ---------------------------------------------------------------------------\nLOAD:080410A4\nLOAD:080410A4 loc_80410A4:                            ; CODE XREF: sub_8041080+1C\u2191j\nLOAD:080410A4                 mov.l   r10, @(4,r0)\nLOAD:080410A6                 mov.l   r9, @(8,r0)\nLOAD:080410A8                 mov     r8, r1\nLOAD:080410AA                 add     #h'40, r1 ; '@'\nLOAD:080410AC                 mov.l   @(h'34,r1), r1\nLOAD:080410AE                 tst     r1, r1\nLOAD:080410B0                 bt      loc_80410B8\nLOAD:080410B2                 mov.l   @(8,r1), r1\n\n</code></pre>"},{"location":"user-guide/disassembler/disassembly-gallery/hitachi-sh-4-processor-windows-ce-pe-file-format.html","title":"Hitachi SH-4 Processor : Windows CE PE File Format","text":"<p>Assembler code</p> <pre><code>.text:00011A10\n.text:00011A10 ; =============== S U B R O U T I N E =======================================\n.text:00011A10\n.text:00011A10\n.text:00011A10 sub_11A10:                              ; DATA XREF: sub_11A88+20\u2193o\n.text:00011A10                                         ; sub_11A88:off_11B2C\u2193o ...\n.text:00011A10                 mov.l   r8, @-r15\n.text:00011A12                 sts.l   pr, @-r15\n.text:00011A14                 add     #-h'10, r15\n.text:00011A16                 mov.l   #h'C350, r1\n.text:00011A18                 add     r1, r4\n.text:00011A1A                 mov     r4, r8\n.text:00011A1C\n.text:00011A1C loc_11A1C:                              ; CODE XREF: sub_11A10+24\u2193j\n.text:00011A1C                 mov.l   #_WaitForSingleObject, r0\n.text:00011A1E                 mov     r8, r5\n.text:00011A20                 mov.l   #unk_1512C, r1\n.text:00011A22                 jsr     @r0 ; _WaitForSingleObject\n.text:00011A24                 mov.l   @r1, r4\n.text:00011A26                 mov     r0, r4\n.text:00011A28                 mov.w   #h'102, r1\n.text:00011A2A                 cmp/eq  r1, r4\n.text:00011A2C                 bt      loc_11A36\n.text:00011A2E                 mov.l   #unk_1513C, r1\n.text:00011A30                 mov.l   @r1, r1\n.text:00011A32                 tst     r1, r1\n.text:00011A34                 bf      loc_11A1C\n.text:00011A36\n.text:00011A36 loc_11A36:                              ; CODE XREF: sub_11A10+1C\u2191j\n.text:00011A36                 mov.l   #_EnterCriticalSection, r0\n.text:00011A38                 mov.l   #unk_176A8, r4\n.text:00011A3A                 jsr     @r0 ; _EnterCriticalSection\n.text:00011A3C                 nop\n.text:00011A3E                 mov.l   #unk_1513C, r1\n.text:00011A40                 mov.l   @r1, r1\n\n</code></pre>"},{"location":"user-guide/disassembler/disassembly-gallery/hppa-risc-processor-hp-ux-som.html","title":"HPPA Risc Processor : HP-UX SOM","text":"<p>Assembler code</p> <pre><code>$CODE$:00004768\n$CODE$:00004768 # =============== S U B R O U T I N E =======================================\n$CODE$:00004768\n$CODE$:00004768 # THUNK\n$CODE$:00004768\n$CODE$:00004768 # __int32 __fastcall sigblock(__int32 mask)\n$CODE$:00004768 sigblock:                               # CODE XREF: sub_47C8+118C\u2193p\n$CODE$:00004768                                         # DATA XREF: sigblock\u2193o ...\n$CODE$:00004768\n$CODE$:00004768 es_rp           =  0x18\n$CODE$:00004768\n$CODE$:00004768                 ldw             -0x2D0(%dp), %r21 # .sigblock\n$CODE$:0000476C                 ldw             -0x2CC(%dp), %r19 # dword_40001614\n$CODE$:00004770                 ldsid           (%r21), %r1\n$CODE$:00004774                 mtsp            %r1, %sr0\n$CODE$:00004778                 be              0(%sr0,%r21)\n$CODE$:0000477C                 stw             %rp, -es_rp(%sp)\n$CODE$:0000477C\n$CODE$:0000477C # End of function sigblock\n$CODE$:0000477C\n$CODE$:00004780\n$CODE$:00004780 # =============== S U B R O U T I N E =======================================\n$CODE$:00004780\n$CODE$:00004780 # THUNK\n$CODE$:00004780\n$CODE$:00004780 # __int32 __fastcall sigsetmask(__int32 mask)\n$CODE$:00004780 sigsetmask:                             # CODE XREF: sub_47C8+1218\u2193p\n$CODE$:00004780                                         # DATA XREF: sigsetmask\u2193o ...\n$CODE$:00004780\n$CODE$:00004780 es_rp           =  0x18\n$CODE$:00004780\n$CODE$:00004780                 ldw             -0x368(%dp), %r21 # .sigsetmask\n$CODE$:00004784                 ldw             -0x364(%dp), %r19 # dword_4000157C\n$CODE$:00004788                 ldsid           (%r21), %r1\n$CODE$:0000478C                 mtsp            %r1, %sr0\n\n</code></pre>"},{"location":"user-guide/disassembler/disassembly-gallery/i51.html","title":"i51","text":"<p>Assembler code</p> <pre><code>code:0000006B\ncode:0000006B ; =============== S U B R O U T I N E =======================================\ncode:0000006B\ncode:0000006B ; External interrupt 6\ncode:0000006B\ncode:0000006B                 ; public IEX6\ncode:0000006B IEX6:\ncode:0000006B                 mov     R7, A\ncode:0000006C                 addc    A, RAM_0\ncode:0000006E                 addc    A, RESERVED00FF ; RESERVED\ncode:00000070                 addc    A, @R0\ncode:00000071                 addc    A, @R1\ncode:00000072                 addc    A, R0\ncode:00000073                 addc    A, R1\ncode:00000074                 addc    A, R2\ncode:00000075                 addc    A, R3\ncode:00000076                 addc    A, R4\ncode:00000077                 addc    A, R5\ncode:00000078                 addc    A, R6\ncode:00000079                 addc    A, R7\ncode:0000007A                 ajmp    IEX2+2          ; External interrupt 2\ncode:0000007A ; End of function IEX6\ncode:0000007A\ncode:0000007A ; ---------------------------------------------------------------------------\ncode:0000007C                 .byte 0x54 ; T\ncode:0000007D                 .byte    0\ncode:0000007E                 .word 0x54FF\ncode:00000080                 .byte 0x55, 0, 0x55\ncode:00000083\ncode:00000083 ; =============== S U B R O U T I N E =======================================\ncode:00000083\ncode:00000083 ; Serial channel 1\ncode:00000083\ncode:00000083                 ; public RI1_TI1\ncode:00000083 RI1_TI1:\ncode:00000083                 mov     R7, A\n\n</code></pre>"},{"location":"user-guide/disassembler/disassembly-gallery/i860.html","title":"i860","text":"<p>Assembler code</p> <pre><code>.text:000011C0\n.text:000011C0 // =============== S U B R O U T I N E =======================================\n.text:000011C0\n.text:000011C0\n.text:000011C0                 // public _main\n.text:000011C0 _main:                                  // CODE XREF: __main+120\u2193p\n.text:000011C0                 addu            -0x20, r2, r2\n.text:000011C4                 st.l            0x11(r2), r3\n.text:000011C8                 addu            0x10, r2, r3\n.text:000011CC                 st.l            5(r3), r1\n.text:000011D0                 orh             0, r0, r31\n.text:000011D4                 call            _printf\n.text:000011D8                 or              0xA000, r31, r16\n.text:000011DC                 adds            0x10, r3, r31\n.text:000011E0                 ld.l            4(r3), r1\n.text:000011E4                 ld.l            0(r3), r3\n.text:000011E8                 bri             r1\n.text:000011EC                 shl             r0, r31, r2\n.text:000011EC // End of function _main\n.text:000011EC\n.text:000011F0 // ---------------------------------------------------------------------------\n.text:000011F0                 shl             r0, r0, r0\n.text:000011F4                 shl             r0, r0, r0\n.text:000011F8                 shl             r0, r0, r0\n.text:000011FC                 shl             r0, r0, r0\n.text:00001200\n.text:00001200 // =============== S U B R O U T I N E =======================================\n.text:00001200\n.text:00001200\n.text:00001200                 // public _fclose\n.text:00001200 _fclose:                                // CODE XREF: ___cleanup+68\u2193p\n.text:00001200                 addu            -0x50, r2, r2\n.text:00001204                 st.l            1(r2), r1\n.text:00001208                 st.l            0x39(r2), r4\n.text:0000120C                 st.l            0x3D(r2), r5\n</code></pre>"},{"location":"user-guide/disassembler/disassembly-gallery/intel-i960.html","title":"Intel i960","text":"<p>Assembler code</p> <pre><code>.text:00000020\n.text:00000020 # =============== S U B R O U T I N E =======================================\n.text:00000020\n.text:00000020 # Attributes: library function\n.text:00000020\n.text:00000020                 .global __Ldoprnt\n.text:00000020 __Ldoprnt:\n.text:00000020                 lda     0xB0(sp), sp\n.text:00000024                 st      g8, 0xE0(fp)\n.text:00000028                 st      g9, 0xE4(fp)\n.text:0000002C                 st      g10, 0xE8(fp)\n.text:00000030                 st      g11, 0xEC(fp)\n.text:00000034                 mov     g0, r12\n.text:00000038                 mov     g1, r7\n.text:0000003C                 mov     g2, r6\n.text:00000040                 mov     0, g1\n.text:00000044\n.text:00000044 loc_44:                                 # DATA XREF: __Ldoprnt+3C\u2193o\n.text:00000044                 mov     5, g2\n.text:00000048                 lda     0x40(fp), g0\n.text:0000004C\n.text:0000004C loc_4C:                                 # DATA XREF: __Ldoprnt:loc_3AC\u2193o\n.text:0000004C                 mov     g3, r3\n.text:00000050                 st      g14, 0xA0(fp)\n.text:00000054                 call    _memset\n.text:00000058                 mov     0, g1\n.text:0000005C                 lda     loc_44, g2\n.text:00000060                 lda     0x50(fp), g0\n.text:00000064                 call    _memset\n.text:00000068\n.text:00000068 loc_68:                                 # DATA XREF: __Ldoprnt:loc_3D0\u2193o\n.text:00000068                 ldib    (r12), g4\n.text:0000006C\n.text:0000006C loc_6C:                                 # DATA XREF: __Ldoprnt+348\u2193o\n.text:0000006C                 mov     g14, g5\n\n</code></pre>"},{"location":"user-guide/disassembler/disassembly-gallery/intel-ia-64-itanium.html","title":"Intel IA-64 (Itanium)","text":"<p>Assembler code</p> <pre><code>.text:0000000000421100\n.text:0000000000421100 // =============== S U B R O U T I N E =======================================\n.text:0000000000421100\n.text:0000000000421100\n.text:0000000000421100 sub_421100:                             // CODE XREF: sub_41FF40+3C\u2191p\n.text:0000000000421100                 alloc r37 = ar.pfs, 0, 9, 2, 0\n.text:0000000000421106                 mov r39 = pr\n.text:000000000042110C                 adds sp = -32, sp\n.text:0000000000421110                 or r40 = gp, r0;;\n.text:0000000000421116                 cmp4.eq p14, p15 = 2, r32\n.text:000000000042111C                 mov r36 = b0;;\n.text:0000000000421120                 ld8.nta r3 = [sp]\n.text:0000000000421126                 mov.i r38 = ar.lc       // loop count register\n.text:000000000042112C   (p14)          br.cond.dpnt.few loc_4211D0;;\n.text:0000000000421130                 cmp4.eq p14, p15 = 1, r0\n.text:0000000000421136                 cmp4.eq p13, p0 = 15, r32\n.text:000000000042113C                 cmp4.eq p12, p0 = 21, r32;;\n.text:0000000000421140                 cmp4.eq.or.andcm p14, p15 = 4, r32\n.text:0000000000421146                 cmp4.eq.or.andcm p14, p15 = 8, r32\n.text:000000000042114C                 cmp4.eq.or.andcm p14, p15 = 11, r32\n.text:0000000000421150   (p14)          br.cond.dpnt.few loc_4211B0\n.text:0000000000421156   (p13)          br.cond.dpnt.few loc_4211A0\n.text:000000000042115C   (p12)          br.cond.dpnt.few loc_421190;;\n.text:0000000000421160                 cmp4.eq p14, p15 = 22, r32\n.text:0000000000421166                 nop.f 0\n.text:000000000042116C   (p14)          br.cond.dpnt.few loc_421180;;\n.text:0000000000421170                 mov r8 = -1\n.text:0000000000421176                 nop.f 0\n.text:000000000042117C                 br.few loc_421430;;\n.text:0000000000421180 // ---------------------------------------------------------------------------\n.text:0000000000421180\n.text:0000000000421180 loc_421180:                             // CODE XREF: sub_421100+6C\u2191j\n.text:0000000000421180                 addl r28 = -2086752, gp // unk_4308A0\n.text:0000000000421186                 nop.f 0\n.text:000000000042118C                 br.few loc_4211E0;;\n\n</code></pre>"},{"location":"user-guide/disassembler/disassembly-gallery/java-bytecode.html","title":"Java Bytecode","text":"<p>Assembler code</p> <pre><code>// Segment type: Pure code\n  public synchronized void reset()\n  max_stack 4\n  max_locals 2\n  {\n    invokestatic java.security.IdentityScope.getSystemScope()\n                                               // CODE XREF: &lt;init&gt;+5\u2191P\n    astore_1 // met004_slot001\n    aload_1 // met004_slot001\n    instanceof sun.security.provider.IdentityDatabase\n    ifeq met004_47\n    aload_0 // met004_slot000\n    aload_1 // met004_slot001\n    checkcast sun.security.provider.IdentityDatabase\n    putfield scope\n    aload_0 // met004_slot000\n    new java.lang.StringBuffer\n    dup\n    ldc \"installing \"\n    invokespecial java.lang.StringBuffer.&lt;init&gt;(java.lang.String)\n    aload_1 // met004_slot001\n    invokevirtual java.lang.StringBuffer.append(java.lang.Object)\n    ldc \" as the scope for signers.\"\n    invokevirtual java.lang.StringBuffer.append(java.lang.String)\n    invokevirtual java.lang.StringBuffer.toString()\n    invokevirtual debug(java.lang.String)\n    goto met004_53\n\nmet004_47:                                     // CODE XREF: reset+8\u2191j\n    aload_0 // met004_slot000\n    ldc \"no signer scope found.\"\n</code></pre>"},{"location":"user-guide/disassembler/disassembly-gallery/m740.html","title":"M740","text":"<p>Assembler Code</p> <pre><code>seg000:81D8\nseg000:81D8 ; =============== S U B R O U T I N E =======================================\nseg000:81D8\nseg000:81D8\nseg000:81D8 sub_81D8:                               ; CODE XREF: seg000:8F8C\u2193p\nseg000:81D8                 lda     3, X\nseg000:81DA                 pha\nseg000:81DB                 jsr     sub_815F\nseg000:81DE                 jsr     sub_818C\nseg000:81E1                 lda     $FB, X\nseg000:81E3                 sta     0, X\nseg000:81E5                 lda     $FC, X\nseg000:81E7                 sta     1, X\nseg000:81E9                 pla\nseg000:81EA                 bpl     locret_81FD\nseg000:81EC                 lda     0, X\nseg000:81EE                 eor     #$FF\nseg000:81F0                 clc\nseg000:81F1                 adc     #1\nseg000:81F3                 sta     0, X\nseg000:81F5                 lda     1, X\nseg000:81F7                 eor     #$FF\nseg000:81F9                 adc     #0\nseg000:81FB                 sta     1, X\nseg000:81FD\nseg000:81FD locret_81FD:                            ; CODE XREF: sub_81D8+12\u2191j\nseg000:81FD                 rts\nseg000:81FD ; End of function sub_81D8\nseg000:81FD\nseg000:81FE\nseg000:81FE ; =============== S U B R O U T I N E =======================================\nseg000:81FE\nseg000:81FE\nseg000:81FE sub_81FE:                               ; CODE XREF: seg000:8C2B\u2193p\nseg000:81FE                                         ; sub_9D0C+1\u2193j\nseg000:81FE                 lda     3, X\n</code></pre>"},{"location":"user-guide/disassembler/disassembly-gallery/m7700.html","title":"M7700","text":"<p>Assembler Code</p> <pre><code>seg000:00008051                 lda     A, word_815B\nseg000:00008054                 pha\nseg000:00008055                 pea     #0\nseg000:00008058                 pea     #80h ; '\u20ac'\nseg000:0000805B                 pea     #0\nseg000:0000805E                 pea     #817Ch\nseg000:00008061                 jsrl    sub_1800D\nseg000:00008065                 lda     A, #6B7h\nseg000:00008068                 tas\nseg000:00008069                 lda     A, word_8151\nseg000:0000806C                 pha\nseg000:0000806D                 lda     A, word_814F\nseg000:00008070                 pha\nseg000:00008071                 pea     #1\nseg000:00008074                 pea     #2010h\nseg000:00008077                 jsrl    sub_1803F\nseg000:0000807B                 lda     A, word_8155\nseg000:0000807E                 pha\nseg000:0000807F                 lda     A, word_8153\nseg000:00008082                 pha\nseg000:00008083                 pea     #1\nseg000:00008086                 pea     #2014h\nseg000:00008089                 jsrl    sub_1803F\nseg000:0000808D                 lda     A, word_8165\nseg000:00008090                 pha\nseg000:00008091                 lda     A, word_8163\nseg000:00008094                 pha\nseg000:00008095                 pea     #1\nseg000:00008098                 pea     #2000h\nseg000:0000809B                 pea     #1\nseg000:0000809E                 pea     #0AED5h\nseg000:000080A1                 jsrl    sub_1800D\nseg000:000080A5                 lda     A, word_8161\nseg000:000080A8                 pha\nseg000:000080A9                 lda     A, word_815F\n\n</code></pre>"},{"location":"user-guide/disassembler/disassembly-gallery/m7900.html","title":"M7900","text":"<p>Assembler code</p> <pre><code>ROM_:8000 ; ===========================================================================\nROM_:8000\nROM_:8000 ; Segment type: Pure data\nROM_:8000                 SEGMENT ROM_\nROM_:8000                 .org 8000h\nROM_:8000\nROM_:8000 ; =============== S U B R O U T I N E =======================================\nROM_:8000\nROM_:8000\nROM_:8000                 ; public __RESET\nROM_:8000 __RESET:                                ; DATA XREF: USER_VEC:FFFE\u2193o\nROM_:8000                 ldt     #2\nROM_:8003                 ldd     0,#0\nROM_:8007                 ldd     1,#1000h\nROM_:800B                 ldd     2,#2000h\nROM_:800F                 ldd     3,#3000h\nROM_:8013                 sem\nROM_:8014                 abs.b   A\nROM_:8015                 abs.b   B\nROM_:8017                 clm\nROM_:8018                 abs     A\nROM_:8019                 abs     B\nROM_:801B                 absd.d  E\nROM_:801D                 sem\nROM_:801E                 adc.b   A,#12h\nROM_:8021                 clm\nROM_:8022                 adc     A,#1234h\nROM_:8026                 adc     A,DP3:word_300F\nROM_:8029                 adc     A,DP3:word_300F,X\nROM_:802C                 adc     A,(DP3:word_3006)\nROM_:802F                 adc     A,(DP3:word_3006,X)\nROM_:8032                 adc     A,(DP3:word_3006),Y\nROM_:8035                 adc     A,L(DP3:tbyte_3009)\nROM_:8038                 adc     A,L(DP3:tbyte_3009),Y\nROM_:803B                 adc     A,12h,S\n\n</code></pre>"},{"location":"user-guide/disassembler/disassembly-gallery/mac-os-pef-file.html","title":"Mac OS PEF File","text":"<p>Assembler code</p> <pre><code>seg000:00002BDC\nseg000:00002BDC # =============== S U B R O U T I N E =======================================\nseg000:00002BDC\nseg000:00002BDC # Attributes: noreturn\nseg000:00002BDC\nseg000:00002BDC                 .globl .start\nseg000:00002BDC .start:                                 # DATA XREF: seg000:00003A60\u2193o\nseg000:00002BDC                                         # seg001:start\u2193o\nseg000:00002BDC\nseg000:00002BDC .set sender_sp, -0x450\nseg000:00002BDC .set saved_toc, -0x43C\nseg000:00002BDC .set var_20, -0x20\nseg000:00002BDC .set var_C, -0xC\nseg000:00002BDC .set var_8, -8\nseg000:00002BDC .set var_4, -4\nseg000:00002BDC .set sender_lr,  8\nseg000:00002BDC\nseg000:00002BDC                 mflr      r0\nseg000:00002BE0                 stw       r31, var_4(r1)\nseg000:00002BE4                 stw       r30, var_8(r1)\nseg000:00002BE8                 stw       r29, var_C(r1)\nseg000:00002BEC                 stw       r0, sender_lr(r1)\nseg000:00002BF0                 stwu      r1, sender_sp(r1)\nseg000:00002BF4                 mr        r29, r3\nseg000:00002BF8                 mr        r30, r4\nseg000:00002BFC                 mr        r31, r5\nseg000:00002C00                 lwz       r3, TC_argv_save # argv_save\nseg000:00002C04                 cmplwi    r31, 0\nseg000:00002C08                 lwz       r4, TC_environ # environ\nseg000:00002C0C                 stw       r30, 0(r3)\nseg000:00002C10                 stw       r31, 0(r4)\nseg000:00002C14                 bne       loc_2C20\nseg000:00002C18                 addi      r0, r2, (off_3E44 - 0x3A70) # \"NO_ENVIRON=true\"\nseg000:00002C1C                 stw       r0, 0(r4)\nseg000:00002C20\nseg000:00002C20 loc_2C20:                               # CODE XREF: .start+38\u2191j\nseg000:00002C20                 li        r3, 0\n</code></pre>"},{"location":"user-guide/disassembler/disassembly-gallery/mac-os-x-file.html","title":"Mac OS X File","text":"<p>Assembler code</p> <pre><code>__text:000036F8\n__text:000036F8 # =============== S U B R O U T I N E =======================================\n__text:000036F8\n__text:000036F8\n__text:000036F8 sub_36F8:                               # CODE XREF: sub_3578:loc_3610\u2191p\n__text:000036F8\n__text:000036F8 .set sender_sp, -0x60\n__text:000036F8 .set var_20, -0x20\n__text:000036F8 .set var_4, -4\n__text:000036F8 .set sender_lr,  8\n__text:000036F8\n__text:000036F8                 mflr      r0\n__text:000036FC                 stw       r31, var_4(r1)\n__text:00003700                 stw       r0, sender_lr(r1)\n__text:00003704                 stwu      r1, sender_sp(r1)\n__text:00003708                 bcl       20, 4*cr7+so, loc_370C\n__text:0000370C\n__text:0000370C loc_370C:\n__text:0000370C                 mflr      r31\n__text:00003710                 addis     r3, r31, (aDyldMakeDelaye - loc_370C)@ha\n__text:00003714                 addi      r3, r3, (aDyldMakeDelaye - loc_370C)@l # \"__dyld_make_delayed_module_initializer_\"...\n__text:00003718                 addi      r4, r1, 0x60+var_20\n__text:0000371C                 bl        sub_3794\n__text:00003720                 lwz       r12, 0x60+var_20(r1)\n__text:00003724                 mtctr     r12\n__text:00003728                 bctrl\n__text:0000372C                 lwz       r0, 0x60+sender_lr(r1)\n__text:00003730                 addi      r1, r1, 0x60\n__text:00003734                 mtlr      r0\n__text:00003738                 lwz       r31, var_4(r1)\n__text:0000373C                 blr\n__text:0000373C # End of function sub_36F8\n__text:0000373C\n__text:00003740\n__text:00003740 # =============== S U B R O U T I N E =======================================\n__text:00003740\n__text:00003740\n__text:00003740 sub_3740:                               # CODE XREF: sub_3578+24\u2191p\n__text:00003740                 lis       r11, dword_140A0@ha\n</code></pre>"},{"location":"user-guide/disassembler/disassembly-gallery/microsoft-.net-cli-disassembler.-visualbasic-library.html","title":"Microsoft .NET CLI Disassembler. VisualBasic library","text":"<p>Assembler code</p> <pre><code>conv.i8\n    mul.ovf\n    stloc.0\n    ldarg.0\n    ldfld    class [mscorlib]System.IO.FileStream Microsoft.VisualBasic.CompilerServices.VB6File::m_file\n    ldloc.1\n    ldloc.0\n    callvirt instance void [mscorlib]System.IO.FileStream::Lock(int64, int64)\n    ret\n  }\n\n  .method public hidebysig virtual instance void Unlock(int64 lStart, int64 lEnd)\n  {\n    .maxstack 3\n    .locals init (int64 V0,\n                  int64 V1)\n    ldarg.1\n    ldarg.2\n    ble.s    loc_439\n    ldstr    aArgumentInvali            // \"Argument_InvalidValue1\"\n    ldstr    aStart                     // \"Start\"\n    call     string Microsoft.VisualBasic.CompilerServices.Utils::GetResourceString(string ResourceKey, string Parm1)\n    newobj   instance void [mscorlib]System.ArgumentException::.ctor(string)\n    throw\n\nloc_439:                                // CODE XREF: Microsoft.VisualBasic.CompilerServices.VB6RandomFile__Unlock+2\u2191j\n    ldarg.1\n    ldc.i8   1\n    sub.ovf\n    ldarg.0\n    ldfld    int32 Microsoft.VisualBasic.CompilerServices.VB6File::m_lRecordLen\n    conv.i8\n    mul.ovf\n    stloc.1\n    ldarg.2\n\n</code></pre>"},{"location":"user-guide/disassembler/disassembly-gallery/microsoft-.net-cli-disassembler.html","title":"Microsoft .NET CLI Disassembler","text":"<p>The IDA disassembler can disassemble a portable executable (PE) file that contains Microsoft intermediate language (MSIL) code. The Common Language Infrastructure (CLI) is the ECMA standard that describes the core of the .NET Framework world.</p> <p>Assembler code</p> <pre><code>.method private hidebysig instance void UpdateDocumentRelatedTools()\n                                        // CODE XREF: Infragistics.Win.Printing.UltraPrintPreviewDialog__UltraPrintPreviewDialog_Load+F6\u2191p\n                                        // Infragistics.Win.Printing.UltraPrintPreviewDialog__ultraPrintPreviewControl1_PropertyChanged+43\u2191p\n  {\n    .maxstack 2\n    .locals init (bool V0,\n                  bool V1)\n    ldarg.0\n    ldfld    class [Infragistics2.Win.Misc.v10.1]Infragistics.Win.Printing.UltraPrintPreviewControl Infragistics.Win.Printing.UltraPrintPreviewDialog::ultraPrintPreviewControl1\n    callvirt instance class [System.Drawing]System.Drawing.Printing.PrintDocument [Infragistics2.Win.Misc.v10.1]Infragistics.Win.Printing.UltraPrintPreviewControl::get_Document()\n    ldnull\n    ceq\n    ldc.i4.0\n    ceq\n    stloc.0\n    ldloc.0\n    brfalse.s loc_588C\n    ldarg.0\n    ldfld    class [Infragistics2.Win.Misc.v10.1]Infragistics.Win.Printing.UltraPrintPreviewControl Infragistics.Win.Printing.UltraPrintPreviewDialog::ultraPrintPreviewControl1\n    callvirt instance class [System.Drawing]System.Drawing.Printing.PrintDocument [Infragistics2.Win.Misc.v10.1]Infragistics.Win.Printing.UltraPrintPreviewControl::get_Document()\n    callvirt instance class [System.Drawing]System.Drawing.Printing.PrinterSettings [System.Drawing]System.Drawing.Printing.PrintDocument::get_PrinterSettings()\n    callvirt instance bool [System.Drawing]System.Drawing.Printing.PrinterSettings::get_IsValid()\n    br.s     loc_588D\n\nloc_588C:                               // CODE XREF: Infragistics.Win.Printing.UltraPrintPreviewDialog__UpdateDocumentRelatedTools+13\u2191j\n    ldc.i4.0\n\nloc_588D:                               // CODE XREF: Infragistics.Win.Printing.UltraPrintPreviewDialog__UpdateDocumentRelatedTools+2A\u2191j\n    stloc.1\n    ldarg.0\n    ldfld    class [Infragistics2.Win.UltraWinToolbars.v10.1]Infragistics.Win.UltraWinToolbars.UltraToolbarsManager Infragistics.Win.Printing.UltraPrintPreviewDialog::ultraToolbarsManager1\n    callvirt instance class [Infragistics2.Win.UltraWinToolbars.v10.1]Infragistics.Win.UltraWinToolbars.RootToolsCollection [Infragistics2.Win.UltraWinToolbars.v10.1]Infragistics.Win.UltraWinToolbars.UltraToolbarsManager::get_Tools()\n    ldstr    aPrint                     // \"Print\"\n    callvirt instance class [Infragistics2.Win.UltraWinToolbars.v10.1]Infragistics.Win.UltraWinToolbars.ToolBase [Infragistics2.Win.UltraWinToolbars.v10.1]Infragistics.Win.UltraWinToolbars.ToolsCollectionBase::get_Item(string)\n    callvirt instance class [Infragistics2.Win.UltraWinToolbars.v10.1]Infragistics.Win.UltraWinToolbars.SharedProps [Infragistics2.Win.UltraWinToolbars.v10.1]Infragistics.Win.UltraWinToolbars.ToolBase::get_SharedProps()\n\n</code></pre>"},{"location":"user-guide/disassembler/disassembly-gallery/mips-processor-nintendo-n64.html","title":"MIPS Processor : Nintendo N64","text":"<p>Assembler code</p> <pre><code>CODE:80148710                 lrv     $v13[0], 2($t5)\nCODE:80148714\nCODE:80148714 loc_80148714:                            # CODE XREF: CODE:80148840\u2193j\nCODE:80148714                 addi    $s4, 9\nCODE:80148718                 vmudn   $v30, $v3, $v23[0]\nCODE:8014871C                 addi    $s5, 9\nCODE:80148720                 vmadn   $v30, $v4, $v23[0]\nCODE:80148724                 ldv     $v1[0], 0($s4)\nCODE:80148728                 vmudn   $v29, $v5, $v23[0]\nCODE:8014872C                 lbu     $at, 0($s5)\nCODE:80148730                 vmadn   $v29, $v6, $v23[0]\nCODE:80148734                 blez    $t6, loc_80148744\nCODE:80148738                 andi    $a7, $at, 0xF\nCODE:8014873C                 vmudm   $v30, $v22[8]\nCODE:80148740                 vmudm   $v29, $v22[8]\nCODE:80148744\nCODE:80148744 loc_80148744:                            # CODE XREF: CODE:80148734\u2191j\nCODE:80148744                 sll     $a7, 5\nCODE:80148748                 vand    $v3, $v25, $v1[8]\nCODE:8014874C                 add     $t5, $a7, $t7\nCODE:80148750                 vand    $v4, $v24, $v1[9]\nCODE:80148754                 vand    $v5, $v25, $v1[10]\nCODE:80148758                 vand    $v6, $v24, $v1[11]\nCODE:8014875C                 srl     $t6, $at, 4\nCODE:80148760                 vmudh   $v2, $v21, $v27[14]\nCODE:80148764                 li      $v0, 0xC\nCODE:80148768                 vmadh   $v2, $v20, $v27[15]\nCODE:8014876C                 sub     $t6, $v0, $t6\nCODE:80148770                 vmadh   $v2, $v19, $v30[8]\nCODE:80148774                 addi    $v0, $t6, -1\nCODE:80148778                 vmadh   $v2, $v18, $v30[9]\nCODE:8014877C                 li      $v1, 1\nCODE:80148780                 vmadh   $v2, $v17, $v30[10]\nCODE:80148784                 sll     $v1, 15\nCODE:80148788                 vmadh   $v2, $v16, $v30[11]\n</code></pre>"},{"location":"user-guide/disassembler/disassembly-gallery/mips-processor-sony-elf.html","title":"MIPS Processor : Sony ELF","text":"<p>Assembler code</p> <pre><code>.text:0000073C\n.text:0000073C  # =============== S U B R O U T I N E =======================================\n.text:0000073C\n.text:0000073C\n.text:0000073C sub_73C:                                 # CODE XREF: sub_0+154\u2191p\n.text:0000073C                                          # DATA XREF: .rodata.sceResident:00003910\u2193o\n.text:0000073C\n.text:0000073C var_s0          =  0\n.text:0000073C var_s4          =  4\n.text:0000073C var_s8          =  8\n.text:0000073C var_sC          =  0xC\n.text:0000073C\n.text:0000073C                 addiu   $sp, -0x10\n.text:00000740                 sw      $s0, var_s0($sp)\n.text:00000744                 lui     $v0, 0x8002\n.text:00000748                 move    $s0, $a0\n.text:0000074C                 sltiu   $a0, 0x43  # 'C'\n.text:00000750                 sw      $s1, var_s4($sp)\n.text:00000754                 ori     $v1, $v0, 0x65  # 'e'\n.text:00000758                 move    $s1, $zero\n.text:0000075C                 sw      $ra, var_sC($sp)\n.text:00000760                 beqz    $a0, loc_7A8\n.text:00000764                 sw      $s2, var_s8($sp)\n.text:00000768                 jal     sub_3180\n.text:0000076C                 nop\n.text:00000770                 sll     $a5, $s0, 3\n.text:00000774                 subu    $a4, $a5, $s0\n.text:00000778                 lui     $a3, %hi(unk_3C14)\n.text:0000077C                 sll     $a1, $a4, 3\n.text:00000780                 addiu   $a2, $a3, %lo(unk_3C14)\n.text:00000784                 addu    $a0, $a1, $a2\n.text:00000788                 lw      $v1, 0($a0)\n.text:0000078C                 bnez    $v1, loc_7C4\n.text:00000790                 move    $s2, $v0\n.text:00000794                 lui     $a6, 0x8002\n</code></pre>"},{"location":"user-guide/disassembler/disassembly-gallery/mips-processor-sony-psx-1.html","title":"MIPS Processor : Sony PSX","text":"<p>Assembler code</p> <pre><code>.text:00003E68\n.text:00003E68  # =============== S U B R O U T I N E =======================================\n.text:00003E68\n.text:00003E68\n.text:00003E68 sub_3E68:                                # CODE XREF: McGuiSave+64\u2193p\n.text:00003E68                                          # McGuiLoad+64\u2193p\n.text:00003E68\n.text:00003E68 var_s0          =  0\n.text:00003E68 var_s4          =  4\n.text:00003E68 var_s8          =  8\n.text:00003E68 var_sC          =  0xC\n.text:00003E68 var_s10         =  0x10\n.text:00003E68\n.text:00003E68                 addiu   $sp, -0x28\n.text:00003E6C                 lw      $a0, side\n.text:00003E74                 li      $a1, 0x10\n.text:00003E78                 sw      $s1, 0x10+var_s4($sp)\n.text:00003E7C                 li      $s1, ot\n.text:00003E84                 sw      $ra, 0x10+var_s10($sp)\n.text:00003E88                 sw      $s3, 0x10+var_sC($sp)\n.text:00003E8C                 sw      $s2, 0x10+var_s8($sp)\n.text:00003E90                 sw      $s0, 0x10+var_s0($sp)\n.text:00003E94                 sll     $a0, 6\n.text:00003E98                 jal     ClearOTag\n.text:00003E9C                 addu    $a0, $s1\n.text:00003EA0                 li      $v1, (sDraw+0x17A)\n.text:00003EA8                 lh      $v0, (aSsvabtransferF+6 - 0x282)($v1)  # \"ransfer failed (%d)\\n\"\n.text:00003EAC                 nop\n.text:00003EB0                 blez    $v0, loc_3F7C\n.text:00003EB4                 nop\n.text:00003EB8                 move    $s0, $v1\n.text:00003EBC                 li      $s3, disp\n.text:00003EC4                 li      $s2, draw\n.text:00003ECC\n.text:00003ECC loc_3ECC:                                # CODE XREF: sub_3E68+10C\u2193j\n.text:00003ECC                 lhu     $v0, 0($s0)\n\n</code></pre>"},{"location":"user-guide/disassembler/disassembly-gallery/mips-processor-sony-psx.html","title":"MIPS Processor : Sony PSX","text":"<p>Assembler code</p> <pre><code>.text:00003E68\n.text:00003E68  # =============== S U B R O U T I N E =======================================\n.text:00003E68\n.text:00003E68\n.text:00003E68 sub_3E68:                                # CODE XREF: McGuiSave+64\u2193p\n.text:00003E68                                          # McGuiLoad+64\u2193p\n.text:00003E68\n.text:00003E68 var_s0          =  0\n.text:00003E68 var_s4          =  4\n.text:00003E68 var_s8          =  8\n.text:00003E68 var_sC          =  0xC\n.text:00003E68 var_s10         =  0x10\n.text:00003E68\n.text:00003E68                 addiu   $sp, -0x28\n.text:00003E6C                 lw      $a0, side\n.text:00003E74                 li      $a1, 0x10\n.text:00003E78                 sw      $s1, 0x10+var_s4($sp)\n.text:00003E7C                 li      $s1, ot\n.text:00003E84                 sw      $ra, 0x10+var_s10($sp)\n.text:00003E88                 sw      $s3, 0x10+var_sC($sp)\n.text:00003E8C                 sw      $s2, 0x10+var_s8($sp)\n.text:00003E90                 sw      $s0, 0x10+var_s0($sp)\n.text:00003E94                 sll     $a0, 6\n.text:00003E98                 jal     ClearOTag\n.text:00003E9C                 addu    $a0, $s1\n.text:00003EA0                 li      $v1, (sDraw+0x17A)\n.text:00003EA8                 lh      $v0, (aSsvabtransferF+6 - 0x282)($v1)  # \"ransfer failed (%d)\\n\"\n.text:00003EAC                 nop\n.text:00003EB0                 blez    $v0, loc_3F7C\n.text:00003EB4                 nop\n.text:00003EB8                 move    $s0, $v1\n.text:00003EBC                 li      $s3, disp\n.text:00003EC4                 li      $s2, draw\n.text:00003ECC\n.text:00003ECC loc_3ECC:                                # CODE XREF: sub_3E68+10C\u2193j\n.text:00003ECC                 lhu     $v0, 0($s0)\n\n</code></pre>"},{"location":"user-guide/disassembler/disassembly-gallery/mips-processor-unix-coff-file-format.html","title":"MIPS Processor : Unix COFF File Format","text":"<p>Assembler code</p> <pre><code>.text:00400838\n.text:00400838  # =============== S U B R O U T I N E =======================================\n.text:00400838\n.text:00400838\n.text:00400838 sub_400838:                              # CODE XREF: sub_400700+3C\u2191p\n.text:00400838                                          # sub_400778+44\u2191p ...\n.text:00400838\n.text:00400838 var_s0          =  0\n.text:00400838 var_s4          =  4\n.text:00400838\n.text:00400838                 addiu   $sp, -0x20\n.text:0040083C                 sw      $s0, 0x18+var_s0($sp)\n.text:00400840                 move    $s0, $a0\n.text:00400844                 bnez    $s0, loc_400894\n.text:00400848                 sw      $ra, 0x18+var_s4($sp)\n.text:0040084C                 la      $t6, unk_10000A94\n.text:00400850                 li      $t7, unk_10000455\n.text:00400858                 lui     $s0, 0x1000\n.text:0040085C                 sltu    $at, $t6, $t7\n.text:00400860                 bnez    $at, loc_40088C\n.text:00400864                 li      $s0, unk_10000454\n.text:00400868\n.text:00400868 loc_400868:                              # CODE XREF: sub_400838+4C\u2193j\n.text:00400868                 beqz    $s0, loc_400878\n.text:0040086C                 nop\n.text:00400870                 jal     sub_400838\n.text:00400874                 move    $a0, $s0\n.text:00400878\n.text:00400878 loc_400878:                              # CODE XREF: sub_400838:loc_400868\u2191j\n.text:00400878                 la      $t8, unk_10000A94\n.text:0040087C                 addiu   $s0, 0x10\n.text:00400880                 sltu    $at, $s0, $t8\n.text:00400884                 bnez    $at, loc_400868\n.text:00400888                 nop\n.text:0040088C\n.text:0040088C loc_40088C:                              # CODE XREF: sub_400838+28\u2191j\n.text:0040088C                 b       loc_400970\n</code></pre>"},{"location":"user-guide/disassembler/disassembly-gallery/mips-processor-unix-elf-file-format.html","title":"MIPS Processor : Unix ELF File Format","text":"<p>Assembler code</p> <pre><code>.text:5FFE29A8                 li      $s1, 1\n.text:5FFE29AC\n.text:5FFE29AC $L137:                                   # CODE XREF: read_logfile(char const *)+138\u2191j\n.text:5FFE29AC                                          # read_logfile(char const *)+158\u2191j\n.text:5FFE29AC                 beqz    $s1, $L134\n.text:5FFE29B0                 nop\n.text:5FFE29B4\n.text:5FFE29B4 $Lb69:                                   # Alternative name is 'LM268'\n.text:5FFE29B4                 addiu   $v0, $fp, 0x750+var_428\n.text:5FFE29B8                 move    $a0, $v0         # char *\n.text:5FFE29BC                 jal     get_time__FPCc   # get_time(char const *)\n.text:5FFE29C0                 nop\n.text:5FFE29C4                 sw      $v0, 0x750+var_110($fp)\n.text:5FFE29C8                 lw      $v0, 0x750+var_110($fp)\n.text:5FFE29CC                 nop\n.text:5FFE29D0                 bnez    $v0, $L138\n.text:5FFE29D4                 nop\n.text:5FFE29D8\n.text:5FFE29D8 LM269:\n.text:5FFE29D8                 li      $v0, $LC37       # \"Illegal time\"\n.text:5FFE29E0                 sw      $v0, 0x750+var_11C($fp)\n.text:5FFE29E4\n.text:5FFE29E4 LM270:\n.text:5FFE29E4                 j       $L139\n.text:5FFE29E8                 nop\n.text:5FFE29EC  # ---------------------------------------------------------------------------\n.text:5FFE29EC\n.text:5FFE29EC $L138:                                   # CODE XREF: read_logfile(char const *)+188\u2191j\n.text:5FFE29EC                 lw      $v0, from_time   # Alternative name is 'LM271'\n.text:5FFE29F0                 lw      $v1, 0x750+var_110($fp)\n.text:5FFE29F4                 nop\n.text:5FFE29F8                 sltu    $v0, $v1\n.text:5FFE29FC                 bnez    $v0, $L140\n.text:5FFE2A00                 nop\n.text:5FFE2A04                 j       LM259\n\n</code></pre>"},{"location":"user-guide/disassembler/disassembly-gallery/mips-processor-windows-ce-pe-file-format.html","title":"MIPS Processor: Windows CE PE File Format","text":"<p>Assembler code</p> <pre><code>.text:10001140                 lw      $a0, 0x58+var_18($sp)\n.text:10001144                 lw      $a1, 0x58+var_14($sp)\n.text:10001148                 jal     memcpy\n.text:1000114C                 li      $a2, 0x400\n.text:10001150                 lw      $t7, ReleaseMutex\n.text:10001158                 lw      $a0, 0x58+var_1C($sp)\n.text:1000115C                 jalr    $t7\n.text:10001160                 nop\n.text:10001164                 lw      $t8, CloseHandle\n.text:1000116C                 lw      $a0, 0x58+var_1C($sp)\n.text:10001170                 jalr    $t8\n.text:10001174                 nop\n.text:10001178                 jal     LoadLibraryW\n.text:1000117C                 lw      $a0, 0x58+var_18($sp)\n.text:10001180                 beqz    $v0, loc_100011D0\n.text:10001184                 move    $a0, $v0\n.text:10001188                 lw      $t9, GetProcAddressW\n.text:10001190                 li      $a1, aCreatetranspor  # \"CreateTransport\"\n.text:10001198                 jalr    $t9\n.text:1000119C                 nop\n.text:100011A0                 jalr    $v0\n.text:100011A4                 nop\n.text:100011A8                 sw      $v0, dword_100030C4\n.text:100011B0                 lw      $t1, 0($v0)\n.text:100011B4                 lw      $t0, 0x58+var_18($sp)\n.text:100011B8                 move    $a0, $v0\n.text:100011BC                 lw      $t2, 4($t1)\n.text:100011C0                 addiu   $a1, $t0, 0x20C\n.text:100011C4                 lw      $a2, 0x208($t0)\n.text:100011C8                 jalr    $t2\n.text:100011CC                 nop\n.text:100011D0\n.text:100011D0 loc_100011D0:                            # CODE XREF: CreateStream+180\u2191j\n.text:100011D0                 jal     UnmapViewOfFile\n.text:100011D4                 lw      $a0, 0x58+var_18($sp)\n\n</code></pre>"},{"location":"user-guide/disassembler/disassembly-gallery/mips-processor-windows-ce-pe2-file-format.html","title":"MIPS Processor: Windows CE PE2 File Format","text":"<p>Assembler code</p> <pre><code>.text:10001088\n.text:10001088 loc_10001088:                            # DATA XREF: .pdata:10004028\u2193o\n.text:10001088                 lw      $t6, 8($s0)\n.text:1000108C                 beqzl   $t6, loc_100010F4\n.text:10001090                 li      $v0, 1\n.text:10001094                 sw      $zero, 8($s0)\n.text:10001098                 jal     closesocket\n.text:1000109C                 lw      $a0, 4($s0)\n.text:100010A0                 lw      $a0, 0x14($s0)\n.text:100010A4                 li      $t7, 0xFFFFFFFF\n.text:100010A8                 sw      $t7, 4($s0)\n.text:100010AC                 beqz    $a0, loc_100010CC\n.text:100010B0                 sw      $zero, 8($s0)\n.text:100010B4                 lw      $t8, 0x10($s0)\n.text:100010B8                 move    $a1, $zero\n.text:100010BC                 beql    $t8, $a0, loc_100010D0\n.text:100010C0                 lw      $a0, 0x10($s0)\n.text:100010C4                 jal     VirtualFree\n.text:100010C8                 li      $a2, 0xC000\n.text:100010CC\n.text:100010CC loc_100010CC:                            # CODE XREF: sub_10001078+34\u2191j\n.text:100010CC                 lw      $a0, 0x10($s0)\n.text:100010D0\n.text:100010D0 loc_100010D0:                            # CODE XREF: sub_10001078+44\u2191j\n.text:100010D0                 move    $a1, $zero\n.text:100010D4                 jal     VirtualFree\n.text:100010D8                 li      $a2, 0xC000\n.text:100010DC                 lw      $v0, 0x1C($s0)\n.text:100010E0                 beqzl   $v0, loc_100010F4\n.text:100010E4                 li      $v0, 1\n.text:100010E8                 jal     ??3@YAXPAX@Z     # operator delete(void *)\n.text:100010EC                 move    $a0, $v0\n.text:100010F0                 li      $v0, 1\n.text:100010F4\n.text:100010F4 loc_100010F4:                            # CODE XREF: sub_10001078+14\u2191j\n.text:100010F4                                          # sub_10001078+68\u2191j\n.text:100010F4                 lw      $s0, 0x18+var_s0($sp)\n\n</code></pre>"},{"location":"user-guide/disassembler/disassembly-gallery/mips-r5900-processor-sony-bin.html","title":"MIPS R5900 Processor : Sony bin","text":"<p>Assembler code</p> <pre><code>.text:001A5498\n.text:001A5498  # =============== S U B R O U T I N E =======================================\n.text:001A5498\n.text:001A5498\n.text:001A5498                 .globl SysTimerGet\n.text:001A5498 SysTimerGet:\n.text:001A5498\n.text:001A5498 var_s0          =  0\n.text:001A5498\n.text:001A5498                 addiu   $sp, -0x10\n.text:001A549C                 lui     $a0, 0x41  # 'A'\n.text:001A54A0                 sd      $ra, var_s0($sp)\n.text:001A54A4                 li      $a0, sysTimerVarG\n.text:001A54A8                 lui     $a1, 0x1000\n.text:001A54AC                 lw      $v0, (dword_416244 - 0x416238)($a0)\n.text:001A54B0                 lw      $v1, 0x10000000\n.text:001A54B4                 lwu     $a2, (dword_416240 - 0x416238)($a0)\n.text:001A54B8                 sll     $v0, 21\n.text:001A54BC                 dsll32  $v0, 0\n.text:001A54C0                 li      $a1, 0x3D86\n.text:001A54C4                 daddu   $v1, $a2\n.text:001A54C8                 dsrl32  $v0, 0\n.text:001A54CC                 daddu   $v1, $v0\n.text:001A54D0                 dsll    $a0, $v1, 5\n.text:001A54D4                 dsubu   $a0, $v1\n.text:001A54D8                 dsll    $a0, 2\n.text:001A54DC                 daddu   $a0, $v1\n.text:001A54E0                 jal     __divdi3\n.text:001A54E4                 dsll    $a0, 3\n.text:001A54E8                 ld      $ra, var_s0($sp)\n.text:001A54EC                 dsll32  $v0, 0\n.text:001A54F0                 dsra32  $v0, 0\n.text:001A54F4                 jr      $ra\n.text:001A54F8                 addiu   $sp, 0x10\n.text:001A54F8  # End of function SysTimerGet\n.text:001A54F8\n.text:001A54F8  # ---------------------------------------------------------------------------\n\n</code></pre>"},{"location":"user-guide/disassembler/disassembly-gallery/nec-78k0-and-78k0s-processor.html","title":"NEC 78k0 and 78k0s Processor","text":"<p>These NEC microcontrollers are available under many part numbers, which are all supported by the IDA Disassembler. IDA is the most powerful disassembler available for that line.</p>"},{"location":"user-guide/disassembler/disassembly-gallery/nec-78k0-and-78k0s-processor.html#78k0kb1","title":"78K0/KB1","text":"<p>uPD78075B, uPD78078, uPD78078Y, uPD78070A, uPD78070AY, uPD780058, uPD780058Y, uPD780065, uPD780078, uPD780078Y, uPD780034AS, uPD780024AS uPD780034A, uPD780024A, uPD780034AY, uPD780024AY, uPD780988, uPD780208, uPD780232, uPD78044F, uPD780354, uPD780344, uPD780354Y, uPD780344Y, uPD780338, uPD780328, uPD780318, uPD780308, uPD780308Y, uPD78064B, uPD78064, uPD78064Y, uPD78098B, uPD780702Y, uPD780833Y, uPD780958, uPD780852, uPD780828B, uPD780101, uPD780102, uPD780103, uPD78F010</p>"},{"location":"user-guide/disassembler/disassembly-gallery/nec-78k0-and-78k0s-processor.html#78k0s","title":"78K0S","text":"<p>uPD789046, uPD789026, uPD789074, uPD789088, uPD789062, uPD789052, uPD789177Y, uPD789167Y, uPD789177, uPD789167, uPD789134A, uPD789124A, uPD789114A, uPD789104A, uPD789842, uPD789417A, uPD789407A, uPD789456, uPD789446, uPD789436, uPD789426, uPD789316, uPD789306, uPD789467, uPD789327, uPD789835, uPD789830, uPD789479, uPD789489, uPD789800, uPD789862, uPD789861, uPD789860, uPD789850, uPD789871, uPD789881, uPD78F9026, uPD78F9046, uPD78F9076, uPD78F9116, uPD78F9136, uPD78F9177, uPD78F9306, uPD78F9316, uPD78F9328, uPD78F9418, uPDF78F9436, uPD78F9456, uPD78F9468, uPD78F9478, uPD78F9488, uPD78F9801, uPD78F9842, uPD78F9850.</p> <p>Assembler code</p> <pre><code>ROM_:00B9                 set1    CY\nROM_:00BA                 set1    byte_FED3.00h\nROM_:00BC                 set1    byte_FED7.00h\nROM_:00BE                 set1    byte_FEDB.00h\nROM_:00C0                 set1    byte_FEDF.00h\nROM_:00C2                 set1    byte_FEDD.00h\nROM_:00C4                 callt   [word_54]\nROM_:00C5                 set1    CY\nROM_:00C6                 incw    AX\nROM_:00C7                 incw    DE\nROM_:00C8                 add     byte_FE8C, #90h\nROM_:00CB                 decw    DE\nROM_:00CC                 sub     byte_FE9C, #00h\nROM_:00CF                 movw    AX, #1202h\nROM_:00D2                 set1    CR00.00h        ; 16-bit timer capture/compare register 00\nROM_:00D4                 callt   [word_64]\nROM_:00D5                 set1    SIO30.00h       ; Serial I/O shift register 30\nROM_:00D7                 callt   [word_64]\nROM_:00D8                 set1    byte_FE2A.00h\nROM_:00DA                 callt   [word_64]\nROM_:00DB                 set1    byte_FE3A.00h\nROM_:00DD                 callt   [word_64]\nROM_:00DE                 set1    byte_FE4A.00h\nROM_:00E0                 callt   [word_64]\nROM_:00E1                 set1    byte_FE5A.00h\nROM_:00E3                 callt   [word_64]\nROM_:00E4                 set1    byte_FE6A.00h\nROM_:00E6                 callt   [word_64]\nROM_:00E7                 set1    byte_FE7A.00h\nROM_:00E9                 callt   [word_64]\nROM_:00EA                 set1    CR00.00h        ; 16-bit timer capture/compare register 00\nROM_:00EA ; ---------------------------------------------------------------------------\nROM_:00EC                 .db  15h\nROM_:00ED                 .db  0Ah\nROM_:00EE                 .db  1Ah\n</code></pre>"},{"location":"user-guide/disassembler/disassembly-gallery/nec-v850.html","title":"NEC V850","text":"<p>Assembler code</p> <pre><code>.text:000007A6\n.text:000007A6 -- =============== S U B R O U T I N E =======================================\n.text:000007A6\n.text:000007A6\n.text:000007A6                 .globl _systeminit\n.text:000007A6 _systeminit:                            -- CODE XREF: __start+7C\u2191p\n.text:000007A6                 prepare {lp}, 0\n.text:000007AA                 mov     0x9F4, r6\n.text:000007B0                 mov     -1, r7\n.text:000007B2                 jarl    __rcopy, lp\n.text:000007B6                 di\n.text:000007BA                 jarl    _CG_ReadResetSource, lp\n.text:000007BE                 jarl    __startend, lp\n.text:000007C2                 jarl    _TMP0_Init, lp\n.text:000007C6                 ei\n.text:000007CA                 dispose 0, {lp}, [lp]\n.text:000007CA -- End of function _systeminit\n.text:000007CA\n.text:000007CE\n.text:000007CE -- =============== S U B R O U T I N E =======================================\n.text:000007CE\n.text:000007CE\n.text:000007CE                 .globl _f1\n.text:000007CE _f1:                                    -- CODE XREF: _complex1+B6\u2193p\n.text:000007CE                 ld.w    -0x8000[gp], r10\n.text:000007D2                 add     r6, r10\n.text:000007D4                 add     1, r10\n.text:000007D6                 jmp     [lp]\n.text:000007D6 -- End of function _f1\n.text:000007D6\n.text:000007D8\n.text:000007D8 -- =============== S U B R O U T I N E =======================================\n.text:000007D8\n.text:000007D8\n.text:000007D8                 .globl _f2\n.text:000007D8 _f2:                                    -- CODE XREF: _complex1+B0\u2193p\n.text:000007D8                 ld.w    -0x8000[gp], r10\n</code></pre>"},{"location":"user-guide/disassembler/disassembly-gallery/page-1.html","title":"Page 1","text":""},{"location":"user-guide/disassembler/disassembly-gallery/page-2.html","title":"Page 2","text":""},{"location":"user-guide/disassembler/disassembly-gallery/panasonic-mn102.html","title":"Panasonic MN102","text":"<p>Assembler code</p> <pre><code>IROM:00080008\nIROM:00080008 ; =============== S U B R O U T I N E =======================================\nIROM:00080008\nIROM:00080008 ; IRQ Manager\nIROM:00080008\nIROM:00080008                 ; public IRQMANAGER_\nIROM:00080008 IRQMANAGER_:\nIROM:00080008                 ADD     0x000000E2, SP ; '\u00e2'\nIROM:0008000A                 MOVX    D3, (0x00000008,SP)\nIROM:0008000D                 MOV     A0, (0x00000018,SP)\nIROM:0008000F                 MOV     MDR, D3\nIROM:00080011                 MOV     D3, (0x0000001C,SP)\nIROM:00080013                 MOVX    D0, (0x00000014,SP)\nIROM:00080016                 MOVX    D1, (0x00000010,SP)\nIROM:00080019                 MOVX    D2, (0x0000000C,SP)\nIROM:0008001C                 MOV     A1, (0x00000004,SP)\nIROM:0008001E                 MOV     A2, (0x00000000,SP)\nIROM:00080020                 MOV     0x00000001, D3\nIROM:00080022                 MOVB    D3, (0x00000003,SP)\nIROM:00080025                 MOV     SP, A2\nIROM:00080027                 MOV     PSW, D3\nIROM:00080029                 MOV     (IAGR), D0      ; Interrupt accept group number register\nIROM:0008002C                 ADD     off_80368, D0\nIROM:00080031                 MOV     D0, A0\nIROM:00080033                 MOV     (0x00000000,A0), A0\nIROM:00080035                 AND     0x0000EFFF, PSW\nIROM:00080039                 BTST    0x00002000, D3\nIROM:0008003D                 BNE     loc_80058\nIROM:0008003F                 OR      0x00001000, PSW\nIROM:00080043                 MOV     (tbyte_8000), A1\nIROM:00080047                 ADD     0x00000000, A1\nIROM:00080049                 BEQ     loc_80054\nIROM:0008004B                 MOV     (tbyte_8000), A1\nIROM:0008004F                 MOV     SP, (0x00000008,A1)\nIROM:00080051                 MOV     unk_8186, SP\n</code></pre>"},{"location":"user-guide/disassembler/disassembly-gallery/pdp-11-sav-file.html","title":"PDP 11 : SAV File","text":"<p>Assembler code</p> <pre><code>seg001:002556\nseg001:002556 ; =============== S U B R O U T I N E =======================================\nseg001:002556\nseg001:002556\nseg001:002556                 .globl start\nseg001:002556 start:                                  ; DATA XREF: asect:000040\u2191o\nseg001:002556\nseg001:002556 ; FUNCTION CHUNK AT seg001:001016 SIZE 00000158 BYTES\nseg001:002556 ; FUNCTION CHUNK AT seg001:002742 SIZE 00000014 BYTES\nseg001:002556\nseg001:002556                 inc     word_1012\nseg001:002562                 mov     word_1012, word_2554\nseg001:002570                 call    sub_2640\nseg001:002574                 mov     #700, R0\nseg001:002600                 emt     351             ; .PRINT - Print String to Terminal\nseg001:002602                 mov     #715, R0\nseg001:002606                 emt     351             ; .PRINT - Print String to Terminal\nseg001:002610                 jmp     loc_1016\nseg001:002614 ; ---------------------------------------------------------------------------\nseg001:002614\nseg001:002614 loc_2614:                               ; CODE XREF: start:loc_1542\u2191J\nseg001:002614                 mov     word_1014, word_2554\nseg001:002622                 call    sub_2640\nseg001:002626                 mov     #702, R0\nseg001:002632                 emt     351             ; .PRINT - Print String to Terminal\nseg001:002634                 clr     R0\nseg001:002636                 emt     350             ; .EXIT - Terminate Program\nseg001:002636 ; End of function start\nseg001:002636\nseg001:002640\nseg001:002640 ; =============== S U B R O U T I N E =======================================\nseg001:002640\nseg001:002640\nseg001:002640 sub_2640:                               ; CODE XREF: start+12\u2191P\nseg001:002640                                         ; start+44\u2191P\nseg001:002640                 mov     #57, R1 ; '/'\n\n</code></pre>"},{"location":"user-guide/disassembler/disassembly-gallery/philips-51xa-g3.html","title":"Philips 51XA-G3","text":"<pre><code>seg000:02E4\nseg000:02E4 ; =============== S U B R O U T I N E =======================================\nseg000:02E4\nseg000:02E4\nseg000:02E4 sub_2E4:                                ; CODE XREF: seg000:0316\u2193p\nseg000:02E4                                         ; seg000:0344\u2193p\nseg000:02E4                 cmp.b   R1H, #0\nseg000:02E7                 bge     loc_2F6\nseg000:02E9                 movs.w  R4, #0\nseg000:02EB                 sub.w   R4, R0\nseg000:02ED                 mov.w   R0, R4\nseg000:02EF                 movs.w  R4, #0\nseg000:02F1                 subb.w  R4, R1\nseg000:02F3                 mov.w   R1, R4\nseg000:02F5                 nop\nseg000:02F6\nseg000:02F6 loc_2F6:                                ; CODE XREF: sub_2E4+3\u2191j\nseg000:02F6                 cmp.b   R3H, #0\nseg000:02F9                 bge     locret_308\nseg000:02FB                 movs.w  R4, #0\nseg000:02FD                 sub.w   R4, R2\nseg000:02FF                 mov.w   R2, R4\nseg000:0301                 movs.w  R4, #0\nseg000:0303                 subb.w  R4, R3\nseg000:0305                 mov.w   R3, R4\nseg000:0307                 nop\nseg000:0308\nseg000:0308 locret_308:                             ; CODE XREF: sub_2E4+15\u2191j\nseg000:0308                 ret\nseg000:0308 ; End of function sub_2E4\nseg000:0308\nseg000:030A ; ---------------------------------------------------------------------------\nseg000:030A                 push.w  R4\nseg000:030C                 push.w  R5\nseg000:030E                 push.w  R6\n</code></pre> <p>{% file src=\"../../.gitbook/assets/shot_51xa.png\" %} Disassembly image </p>"},{"location":"user-guide/disassembler/disassembly-gallery/pic-12xx.html","title":"PIC 12xx","text":"<p>Assembler code</p> <pre><code>CODE:0011 ; assume bank = 0\nCODE:0011\nCODE:0011 ; =============== S U B R O U T I N E =======================================\nCODE:0011\nCODE:0011\nCODE:0011 sub_CODE_11:                            ; CODE XREF: RESET+189\u2193p\nCODE:0011                 comf    BANK0:R9, w\nCODE:0012                 xorwf   BANK0:R10, w\nCODE:0013                 xorwf   BANK0:R11, w\nCODE:0014                 movwf   BANK0:R15\nCODE:0015                 call    sub_CODE_4\nCODE:0016                 movwf   BANK0:R6\nCODE:0017                 btfsc   BANK0:R5, 1\nCODE:0018                  swapf   BANK0:R6, w\nCODE:0019                 xorwf   BANK0:R15, f\nCODE:001A                 comf    BANK0:R12, w\nCODE:001B                 xorwf   BANK0:R13, w\nCODE:001C                 xorwf   BANK0:R14, w\nCODE:001D                 movwf   BANK0:R16\nCODE:001E                 call    sub_CODE_5\nCODE:001F                 movwf   BANK0:R6\nCODE:0020                 btfsc   BANK0:R5, 0\nCODE:0021                  swapf   BANK0:R6, w\nCODE:0022                 xorwf   BANK0:R16, f\nCODE:0023                 retlw   0\nCODE:0023 ; End of function sub_CODE_11\nCODE:0023\nCODE:0024\nCODE:0024 ; =============== S U B R O U T I N E =======================================\nCODE:0024\nCODE:0024\nCODE:0024 sub_CODE_24:                            ; CODE XREF: RESET+C2\u2193p\nCODE:0024                                         ; RESET+D7\u2193p ...\nCODE:0024                 comf    BANK0:R9, w\nCODE:0025                 xorlw   17\n\n</code></pre>"},{"location":"user-guide/disassembler/disassembly-gallery/pic.html","title":"PIC","text":"<p>Assembler code</p> <pre><code>CODE:0004\nCODE:0004 ; =============== S U B R O U T I N E =======================================\nCODE:0004\nCODE:0004 ; Interrupt Vector\nCODE:0004\nCODE:0004                 ; public ISR\nCODE:0004 ISR:\nCODE:0004                 movlp   0\nCODE:0005                 btfss   BANK0:INTCON, T0IF\nCODE:0006                  b       loc_CODE_8\nCODE:0007                 b       loc_CODE_9\nCODE:0008 ; ---------------------------------------------------------------------------\nCODE:0008\nCODE:0008 loc_CODE_8:                             ; CODE XREF: ISR+2\u2191j\nCODE:0008                 b       loc_CODE_1A\nCODE:0009 ; ---------------------------------------------------------------------------\nCODE:0009\nCODE:0009 loc_CODE_9:                             ; CODE XREF: ISR+3\u2191j\nCODE:0009                 movlb   0\nCODE:000A                 movfw   byte_DATA_24\nCODE:000B                 xorlw   3\nCODE:000C                 bnz     loc_CODE_F\nCODE:000E                 b       loc_CODE_10\nCODE:000F ; ---------------------------------------------------------------------------\nCODE:000F\nCODE:000F loc_CODE_F:                             ; CODE XREF: ISR+8\u2191j\nCODE:000F                 b       loc_CODE_14\nCODE:0010 ; ---------------------------------------------------------------------------\nCODE:0010\nCODE:0010 loc_CODE_10:                            ; CODE XREF: ISR+A\u2191j\nCODE:0010                 movlp   5\nCODE:0011 ; assume pclath = 5\nCODE:0011                 call    sub_CODE_516\nCODE:0012                 movlp   0\nCODE:0013 ; assume pclath = 0\nCODE:0013                 b       loc_CODE_14\n</code></pre>"},{"location":"user-guide/disassembler/disassembly-gallery/power-pc-aif-ecoff-file-format.html","title":"Power PC AIF ECOFF file Format","text":"<p>Assembler code</p> <pre><code>.text:00002054\n.text:00002054 # =============== S U B R O U T I N E =======================================\n.text:00002054\n.text:00002054\n.text:00002054 bpf_tap:\n.text:00002054\n.text:00002054 .set sender_sp, -0x50\n.text:00002054 .set var_C, -0xC\n.text:00002054 .set var_8, -8\n.text:00002054 .set var_4, -4\n.text:00002054 .set sender_lr,  8\n.text:00002054\n.text:00002054                 stw       r31, var_4(r1)\n.text:00002058                 lwz       r31, 4(r3)\n.text:0000205C                 mr        r6, r5\n.text:00002060                 mflr      r0\n.text:00002064                 cmpwi     r31, 0\n.text:00002068                 lwz       r3, 0x28(r31)\n.text:0000206C                 stw       r0, sender_lr(r1)\n.text:00002070                 stwu      r1, sender_sp(r1)\n.text:00002074                 addi      r0, r3, 1\n.text:00002078                 stw       r5, 0x50+var_C(r1)\n.text:0000207C                 lwz       r3, 0x24(r31)\n.text:00002080                 stw       r4, 0x50+var_8(r1)\n.text:00002084                 beq       loc_20EC\n.text:00002088                 stw       r0, 0x28(r31)\n.text:0000208C\n.text:0000208C loc_208C:                               # CODE XREF: bpf_tap+80\u2193j\n.text:0000208C                 bl        bpf_filter\n.text:00002090                 nop\n.text:00002094                 mr.       r6, r3\n.text:00002098                 mr        r3, r31\n.text:0000209C                 lwz       r4, 0x50+var_8(r1)\n.text:000020A0                 lwz       r5, 0x50+var_C(r1)\n.text:000020A4                 lwz       r7, off_4178  # off_40B4\n</code></pre>"},{"location":"user-guide/disassembler/disassembly-gallery/power-pc-linux-elf.html","title":"Power PC Linux ELF","text":"<p>Assembler code</p> <pre><code>.text:01802348\n.text:01802348 # =============== S U B R O U T I N E =======================================\n.text:01802348\n.text:01802348 # Attributes: noreturn\n.text:01802348\n.text:01802348 sub_1802348:                            # CODE XREF: sub_1802F9C:def_18030F4\u2193p\n.text:01802348                                         # sub_1802F9C+2F4\u2193p\n.text:01802348\n.text:01802348 .set back_chain, -0x10\n.text:01802348 .set var_8, -8\n.text:01802348 .set var_4, -4\n.text:01802348 .set sender_lr,  4\n.text:01802348\n.text:01802348                 stwu      r1, back_chain(r1)\n.text:0180234C                 mflr      r0\n.text:01802350                 stw       r30, 0x10+var_8(r1)\n.text:01802354                 stw       r31, 0x10+var_4(r1)\n.text:01802358                 stw       r0, 0x10+sender_lr(r1)\n.text:0180235C                 bl        loc_1802360\n.text:01802360\n.text:01802360 loc_1802360:                            # DATA XREF: .text:off_1802344\u2191o\n.text:01802360                 mflr      r30\n.text:01802364                 lwz       r0, (off_1802344 - loc_1802360)(r30)\n.text:01802368                 add       r30, r0, r30\n.text:0180236C                 lwz       r3, (off_185CF04 - 0x1864F00)(r30) # _IO_stderr_ # stream\n.text:01802370                 lwz       r9, (off_185CF00 - 0x1864F00)(r30) # off_185DE7C\n.text:01802374                 lwz       r4, (off_185CF08 - 0x1864F00)(r30) # \"Usage: %s [-panyrcdfvstFSV] [-b superbl\"...\n.text:01802378                 lwz       r5, (off_185DE7C - 0x185DE7C)(r9) # \"e2fsck\"\n.text:0180237C                 bl        .fprintf\n.text:01802380                 li        r3, 0x10      # status\n.text:01802384                 bl        .exit\n.text:01802384 # End of function sub_1802348\n.text:01802384\n.text:01802384 # ---------------------------------------------------------------------------\n.text:01802388 off_1802388:    .long off_185CF00+0x8000 - loc_18023B0\n.text:01802388                                         # DATA XREF: sub_180238C+28\u2193r\n</code></pre>"},{"location":"user-guide/disassembler/disassembly-gallery/renesas-hitachi-m16c.html","title":"Renesas/Hitachi M16C","text":"<p>Assembler code</p> <pre><code>program:000E023C\nprogram:000E023C ; =============== S U B R O U T I N E =======================================\nprogram:000E023C\nprogram:000E023C ; Attributes: bp-based frame\nprogram:000E023C\nprogram:000E023C                 ; public $_pput\nprogram:000E023C $_pput:\nprogram:000E023C\nprogram:000E023C var_2           = -2\nprogram:000E023C\nprogram:000E023C                 ENTER   #2\nprogram:000E023F                 MOV.W   R1, var_2[FB]\nprogram:000E0242                 MOV.B   p4, R0L         ; Port P4 register\nprogram:000E0245                 MOV.B   #0, R0H\nprogram:000E0246                 BTST    #4, R0\nprogram:000E0249                 JEQ/Z   loc_E024F\nprogram:000E024B                 MOV.W   #-1, R0\nprogram:000E024D                 EXITD\nprogram:000E024F ; ---------------------------------------------------------------------------\nprogram:000E024F\nprogram:000E024F loc_E024F:                              ; CODE XREF: $_pput+D\u2191j\nprogram:000E024F                                         ; $_pput+1A\u2193j\nprogram:000E024F                 MOV.B   p4, R0L         ; Port P4 register\nprogram:000E0252                 MOV.B   #0, R0H\nprogram:000E0253                 BTST    #5, R0\nprogram:000E0256                 JEQ/Z   loc_E024F\nprogram:000E0258                 MOV.B   var_2[FB], p5   ; Port P5 register\nprogram:000E025D                 MOV.W   #0, var_2[FB]\nprogram:000E0260\nprogram:000E0260 loc_E0260:                              ; CODE XREF: $_pput+2F\u2193j\nprogram:000E0260                 CMP.W   #0Ah, var_2[FB]\nprogram:000E0265                 JGE     loc_E026D\nprogram:000E0268                 ADD.W   #1, var_2[FB]\nprogram:000E026B                 JMP.B   loc_E0260\nprogram:000E026D ; ---------------------------------------------------------------------------\nprogram:000E026D\nprogram:000E026D loc_E026D:                              ; CODE XREF: $_pput+29\u2191j\nprogram:000E026D                 MOV.B   #8, p4          ; Port P4 register\n\n</code></pre>"},{"location":"user-guide/disassembler/disassembly-gallery/renesas-hitachi-m32r.html","title":"Renesas/Hitachi M32R","text":"<p>Assembler code</p> <pre><code>P:000000C0 ; ===========================================================================\nP:000000C0\nP:000000C0 ; Segment type: Pure code\nP:000000C0 .section P\nP:000000C0\nP:000000C0 ; =============== S U B R O U T I N E =======================================\nP:000000C0\nP:000000C0\nP:000000C0 sub_C0:\nP:000000C0                 addi    sp, #-0x20 || nop\nP:000000C4                 seth    R0, #0x3F80\nP:000000C8                 or3     R0, R0, #0\nP:000000CC                 st      R0, @(0x1C, sp)\nP:000000D0                 seth    R0, #0x4000\nP:000000D4                 or3     R0, R0, #0\nP:000000D8                 st      R0, @(0x18, sp)\nP:000000DC                 ld      R0, @(0x1C, sp)\nP:000000E0                 ld      R1, @(0x18, sp)\nP:000000E4                 fadd    R0, R0, R1\nP:000000E8                 seth    R1, #0x4000\nP:000000EC                 or3     R1, R1, #0\nP:000000F0                 fdiv    R0, R0, R1\nP:000000F4                 st      R0, @(0x14, sp)\nP:000000F8                 ld      R0, @(0x14, sp)\nP:000000FC                 ld      R1, @(0x18, sp)\nP:00000100                 ld      R2, @(0x1C, sp)\nP:00000104                 fmul    R1, R1, R2\nP:00000108                 fsub    R0, R0, R1\nP:0000010C                 st      R0, @(0x10, sp)\nP:00000110                 ld      R0, @(0x10, sp)\nP:00000114                 ftoi    R0, R0\nP:00000118                 st      R0, @(0xC, sp)\nP:0000011C                 ld      R0, @(0xC, sp)\nP:00000120                 srai    R0, #2 || nop\nP:00000124                 itof    R0, R0\n\n</code></pre>"},{"location":"user-guide/disassembler/disassembly-gallery/rockwell-c39.html","title":"Rockwell C39","text":"<p>Assembler code</p> <pre><code>ROM:E520\nROM:E520 ; =============== S U B R O U T I N E =======================================\nROM:E520\nROM:E520\nROM:E520 sub_E520:                               ; CODE XREF: JSB0__0+9\u2193j\nROM:E520                                         ; sub_E581\u2193p ...\nROM:E520                 STI     #0x70, 0x0018 ; 'p' ; Bank switch register 0000-1FFF (R/W)\nROM:E523                 STI     #0x71, 0x0019 ; 'q' ; Bank switch register 2000-3FFF (R/W)\nROM:E526                 STI     #0x72, 0x001A ; 'r' ; Bank switch register 4000-5FFF (R/W)\nROM:E529                 STI     #0x73, 0x001B ; 's' ; Bank switch register 6000-7FFF (R/W)\nROM:E52C                 RTS\nROM:E52C ; End of function sub_E520\nROM:E52C\nROM:E52D\nROM:E52D ; =============== S U B R O U T I N E =======================================\nROM:E52D\nROM:E52D\nROM:E52D sub_E52D:                               ; CODE XREF: sub_E5B8\u2193p\nROM:E52D                 STI     #0x74, 0x0018 ; 't' ; Bank switch register 0000-1FFF (R/W)\nROM:E530                 STI     #0x75, 0x0019 ; 'u' ; Bank switch register 2000-3FFF (R/W)\nROM:E533                 STI     #0x76, 0x001A ; 'v' ; Bank switch register 4000-5FFF (R/W)\nROM:E536                 RTS\nROM:E536 ; End of function sub_E52D\nROM:E536\nROM:E537\nROM:E537 ; =============== S U B R O U T I N E =======================================\nROM:E537\nROM:E537\nROM:E537 sub_E537:                               ; CODE XREF: sub_E5EF\u2193p\nROM:E537                 STI     #0x78, 0x0018 ; 'x' ; Bank switch register 0000-1FFF (R/W)\nROM:E53A                 STI     #0x79, 0x0019 ; 'y' ; Bank switch register 2000-3FFF (R/W)\nROM:E53D                 STI     #0x7A, 0x001A ; 'z' ; Bank switch register 4000-5FFF (R/W)\nROM:E540                 STI     #0x7B, 0x001B ; '{' ; Bank switch register 6000-7FFF (R/W)\nROM:E543                 RTS\nROM:E543 ; End of function sub_E537\nROM:E543\n\n</code></pre>"},{"location":"user-guide/disassembler/disassembly-gallery/sparc-solaris-coff.html","title":"SPARC Solaris COFF","text":"<p>Assembler code</p> <pre><code>.text:0000010C ! ---------------------------------------------------------------------------\n.text:0000010C\n.text:0000010C loc_10C:                                ! CODE XREF: disassemble+A0\u2191j\n.text:0000010C                                         ! DATA XREF: disassemble:jpt_E4\u2191o\n.text:0000010C                 ld      [%fp+var_18], %o0 ! jumptable 000000E4 case 0\n.text:00000110                 set     0x3FFFFF, %o1\n.text:00000118                 and     %o0, %o1, %o0\n.text:0000011C                 st      %o0, [%fp+var_24]\n.text:00000120                 ld      [%fp+var_18], %o0\n.text:00000124                 set     0x3FFFFF, %o1\n.text:0000012C                 and     %o0, %o1, %o0\n.text:00000130                 st      %o0, [%fp+var_28]\n.text:00000134                 set     aUnimp, %o0     ! \"UNIMP\"\n.text:0000013C                 st      %o0, [%fp+var_2C]\n.text:00000140                 ld      [%fp+var_28], %o0\n.text:00000144                 call    lookup\n.text:00000148                 nop\n.text:0000014C                 mov     %o0, %o2\n.text:00000150                 set     aSS, %o0        ! \"%s %s\\n\"\n.text:00000158                 ld      [%fp+var_2C], %o1\n.text:0000015C                 call    printf\n.text:00000160                 nop\n.text:00000164                 ba      loc_704\n.text:00000168                 nop\n.text:0000016C ! ---------------------------------------------------------------------------\n.text:0000016C\n.text:0000016C loc_16C:                                ! CODE XREF: disassemble+A0\u2191j\n.text:0000016C                                         ! DATA XREF: disassemble:jpt_E4\u2191o\n.text:0000016C                 set     aSomeInst, %o0  ! jumptable 000000E4 cases 1,3,5\n.text:00000174                 call    printf\n.text:00000178                 nop\n.text:0000017C                 ba      loc_704\n.text:00000180                 nop\n.text:00000184 ! ---------------------------------------------------------------------------\n.text:00000184\n.text:00000184 loc_184:                                ! CODE XREF: disassemble+A0\u2191j\n.text:00000184                                         ! DATA XREF: disassemble:jpt_E4\u2191o\n.text:00000184                 ld      [%fp+var_18], %o1 ! jumptable 000000E4 case 2\n\n</code></pre>"},{"location":"user-guide/disassembler/disassembly-gallery/sparc-solaris-elf.html","title":"SPARC Solaris ELF","text":"<p>Assembler code</p> <pre><code>.text:0001171C ! ===========================================================================\n.text:0001171C\n.text:0001171C ! Segment type: Pure code\n.text:0001171C                 .text\n.text:0001171C\n.text:0001171C ! =============== S U B R O U T I N E =======================================\n.text:0001171C\n.text:0001171C\n.text:0001171C                 .global _start\n.text:0001171C _start:                                 ! DATA XREF: LOAD:00010018\u2191o\n.text:0001171C                                         ! LOAD:00010628\u2191o ...\n.text:0001171C\n.text:0001171C arg_40          =  0x40\n.text:0001171C arg_44          =  0x44\n.text:0001171C\n.text:0001171C                 mov     0, %fp          ! Alternative name is '_ex_text0'\n.text:00011720                 ld      [%sp+arg_40], %l0\n.text:00011724                 add     %sp, arg_44, %l1\n.text:00011728                 sethi   %hi(___Argv), %o1\n.text:0001172C                 st      %l1, [%o1+%lo(___Argv)]\n.text:00011730                 sll     %l0, 2, %l2\n.text:00011734                 inc     4, %l2\n.text:00011738                 add     %l1, %l2, %l2\n.text:0001173C                 sethi   %hi(environ), %l3\n.text:00011740                 st      %l2, [%l3+%lo(environ)]\n.text:00011744                 set     0, %l5\n.text:0001174C                 tst     %l5\n.text:00011750                 be      loc_117BC\n.text:00011754                 nop\n.text:00011758                 sll     %l5, 2, %l6\n.text:0001175C                 and     %l6, 0x300, %l7\n.text:00011760                 and     %l5, 0x3F, %l6\n.text:00011764                 bset    %l6, %l7\n.text:00011768                 sll     %l7, 22, %l5\n.text:0001176C                 set     __crt_scratch, %l4\n\n</code></pre>"},{"location":"user-guide/disassembler/disassembly-gallery/sparc-sun-elf-so.html","title":"SPARC Sun ELF SO","text":"<p>Assembler code</p> <pre><code>.text:00003978\n.text:00003978 ! =============== S U B R O U T I N E =======================================\n.text:00003978\n.text:00003978 ! Attributes: bp-based frame\n.text:00003978\n.text:00003978 strnicmp:                               ! CODE XREF: DoTheReads+48\u2193p\n.text:00003978                 save    %sp, -0x70, %sp ! Alternative name is 'gcc2_compiled.'\n.text:0000397C                 ba      loc_39B0\n.text:00003980                 inc     -1, %i2\n.text:00003984 ! ---------------------------------------------------------------------------\n.text:00003984\n.text:00003984 loc_3984:                               ! CODE XREF: strnicmp+3C\u2193j\n.text:00003984                 call    _toupper\n.text:00003988                 inc     %i0\n.text:0000398C                 mov     %o0, %l0\n.text:00003990                 ldsb    [%i1], %o0      ! c\n.text:00003994                 call    _toupper\n.text:00003998                 inc     %i1\n.text:0000399C                 cmp     %l0, %o0\n.text:000039A0                 be      loc_39B0\n.text:000039A4                 inc     -1, %i2\n.text:000039A8                 ba      locret_39C0\n.text:000039AC                 mov     1, %i0\n.text:000039B0 ! ---------------------------------------------------------------------------\n.text:000039B0\n.text:000039B0 loc_39B0:                               ! CODE XREF: strnicmp+4\u2191j\n.text:000039B0                                         ! strnicmp+28\u2191j\n.text:000039B0                 cmp     %i2, -1\n.text:000039B4                 bne,a   loc_3984\n.text:000039B8                 ldsb    [%i0], %o0\n.text:000039BC                 mov     0, %i0\n.text:000039C0\n.text:000039C0 locret_39C0:                            ! CODE XREF: strnicmp+30\u2191j\n.text:000039C0                 ret\n.text:000039C4                 restore\n.text:000039C4 ! End of function strnicmp\n.text:000039C4\n</code></pre>"},{"location":"user-guide/disassembler/disassembly-gallery/sparc-sun-elf.html","title":"SPARC Sun ELF","text":"<p>Assembler code</p> <pre><code>.text:000BA990                 bl      loc_BA968\n.text:000BA994                 mov     %l5, %o0        ! uid\n.text:000BA998\n.text:000BA998 loc_BA998:                              ! CODE XREF: perform_flag_actions+2C\u2191j\n.text:000BA998                 ldsh    [%i0], %l7\n.text:000BA99C                 btst    1, %l7\n.text:000BA9A0                 be      loc_BA9F8\n.text:000BA9A4                 mov     0x7F, %i2\n.text:000BA9A8                 call    getgid\n.text:000BA9AC                 nop\n.text:000BA9B0                 call    setgid\n.text:000BA9B4                 nop\n.text:000BA9B8                 tst     %o0\n.text:000BA9BC                 bne     loc_BA9EC\n.text:000BA9C0                 nop\n.text:000BA9C4                 call    getuid\n.text:000BA9C8                 nop\n.text:000BA9CC                 call    setuid\n.text:000BA9D0                 nop\n.text:000BA9D4                 tst     %o0\n.text:000BA9D8                 bne     loc_BA9EC\n.text:000BA9DC                 nop\n.text:000BA9E0                 ldsh    [%i0], %l7\n.text:000BA9E4                 ba      loc_BA9FC\n.text:000BA9E8                 btst    2, %l7\n.text:000BA9EC ! ---------------------------------------------------------------------------\n.text:000BA9EC\n.text:000BA9EC loc_BA9EC:                              ! CODE XREF: perform_flag_actions+A4\u2191j\n.text:000BA9EC                                         ! perform_flag_actions+C0\u2191j\n.text:000BA9EC                 call    _private_exit\n.text:000BA9F0                 mov     %i2, %o0        ! pid\n.text:000BA9F4                 ldsh    [%i0], %l7\n.text:000BA9F8\n.text:000BA9F8 loc_BA9F8:                              ! CODE XREF: perform_flag_actions+88\u2191j\n.text:000BA9F8                 btst    2, %l7\n</code></pre>"},{"location":"user-guide/disassembler/disassembly-gallery/st-20c4.html","title":"ST 20C4","text":"<p>Assembler code</p> <pre><code>ROM:26ECB\nROM:26ECB ; =============== S U B R O U T I N E =======================================\nROM:26ECB\nROM:26ECB\nROM:26ECB sub_26ECB:\nROM:26ECB\nROM:26ECB ; FUNCTION CHUNK AT ROM:18AD1 SIZE 00000003 BYTES\nROM:26ECB\nROM:26ECB                 xor\nROM:26ECD                 ldc     0\nROM:26ECE                 stl     2\nROM:26ECF                 ldc     0\nROM:26ED0                 ldlp    2\nROM:26ED1                 gajw\nROM:26ED3                 ldlp    2\nROM:26ED4                 ldc     43h ; 'C'\nROM:26ED6                 ldl     1\nROM:26ED7                 fcall   loc_18A48\nROM:26EDB                 ldlp    2\nROM:26EDC                 dup\nROM:26EDD                 cj      loc_26EE4\nROM:26EDE                 ldc     0\nROM:26EDF                 ldlp    2\nROM:26EE0                 gajw\nROM:26EE2                 j       loc_26EF8\nROM:26EE4 ; ---------------------------------------------------------------------------\nROM:26EE4\nROM:26EE4 loc_26EE4:                              ; CODE XREF: sub_26ECB+12\u2191j\nROM:26EE4                 ldlp    2\nROM:26EE5                 ldc     2Eh ; '.'\nROM:26EE7                 ldl     1\nROM:26EE8                 fcall   loc_18A48\nROM:26EEC                 ldlp    2\nROM:26EED                 dup\nROM:26EEE                 cj      loc_26EF4\n</code></pre>"},{"location":"user-guide/disassembler/disassembly-gallery/st-7.html","title":"ST 7","text":"<p>Assembler code</p> <pre><code>seg000:1235 ; ---------------------------------------------------------------------------\nseg000:1235                 sub     a, ($77,x)\nseg000:1237                 cp      a, ($77,y)\nseg000:123A                 sbc     a, ($77,y)\nseg000:123D                 cp      y, ($77,y)\nseg000:1240                 and     a, ($77,y)\nseg000:1243                 bcp     a, ($77,y)\nseg000:1246                 ld      a, ($77,y)\nseg000:1249                 ld      ($77,y), a\nseg000:124C                 xor     a, ($77,y)\nseg000:124F                 adc     a, ($77,y)\nseg000:1252                 or      a, ($77,y)\nseg000:1255                 add     a, ($77,y)\nseg000:1258                 jp      ($77,y)\nseg000:125B ; ---------------------------------------------------------------------------\nseg000:125B                 call    ($77,y)\nseg000:125E                 ld      y, ($77,y)\nseg000:1261                 ld      ($77,y), y\nseg000:1264                 sub     a, (y)\nseg000:1266                 cp      a, (y)\nseg000:1268                 sbc     a, (y)\nseg000:126A                 cp      y, (y)\nseg000:126C                 and     a, (y)\nseg000:126E                 bcp     a, (y)\nseg000:1270                 ld      a, (y)\nseg000:1272                 ld      (y), a\nseg000:1274                 xor     a, (y)\nseg000:1276                 adc     a, (y)\nseg000:1278                 or      a, (y)\nseg000:127A                 add     a, (y)\nseg000:127C                 jp      (y)\nseg000:127E ; ---------------------------------------------------------------------------\nseg000:127E                 call    (y)\nseg000:1280                 ld      y, (y)\nseg000:1282                 ld      (y), y\n\n</code></pre>"},{"location":"user-guide/disassembler/disassembly-gallery/st-9.html","title":"ST 9","text":"<p>Assembler code</p> <pre><code>.init:00000107\n.init:00000107 ; =============== S U B R O U T I N E =======================================\n.init:00000107\n.init:00000107\n.init:00000107                 .global ___Reset\n.init:00000107                 .desc ___Reset, near\n.init:00000107                 .proc ___Reset\n.init:00000107 ___Reset:\n.init:00000107                 spp     #0              ; Alternative name is '___Reset'\n.init:00000107                                         ; __Reset\n.init:00000109 ; Register page: 0\n.init:00000109                 ld      R252, #0x40 ; '@' ; Wait Control Register\n.init:0000010C                 ld      R235, #0x20 ; ' ' ; Mode Register\n.init:0000010F                 ld      R230, #0x8F ; Central Interrupt Control Register\n.init:00000112                 srp     #0x1A           ; r0 -&gt; R208, r1 -&gt; R209, r2 -&gt; R210, r3 -&gt; R211, r4 -&gt; R212, r5 -&gt; R213, r6 -&gt; R214, r7 -&gt; R215,\n.init:00000112                                         ; r8 -&gt; R216, r9 -&gt; R217, r10 -&gt; R218, r11 -&gt; R219, r12 -&gt; R220, r13 -&gt; R221, r14 -&gt; R222, r15 -&gt; R223\n.init:00000114 ; Register window: (26, 26)\n.init:00000114                 sdm\n.init:00000115                 ldw     RR238, #0x284 ; System Stack Pointer\n.init:00000119                 spp     #0x15           ; Registers R240-R255 will now be referred to the page 21 of paged registers\n.init:0000011B ; Register page: 21\n.init:0000011B                 ld      r0, #0x88 ; '\u02c6'\n.init:0000011D                 or      r0, r0\n.init:0000011F                 jpeq    loc_190\n.init:00000122                 ld      R242, #0 ; Data Page Register 2\n.init:00000125                 ldw     rr10, #0x28C\n.init:00000129                 or      r10, #0x80 ; '\u20ac'\n.init:0000012C\n.init:0000012C loc_12C:                                ; CODE XREF: ___Reset:loc_190\u2193j\n.init:0000012C                 ld      r8, (rr10)+\n.init:0000012F                 btjf    r8.1, loc_149\n.init:00000132                 ld      R240, (rr10)+ ; Data Page Register 0\n.init:00000135                 ldw     rr0, (rr10)+\n.init:00000138                 ldw     rr4, (rr10)+\n.init:0000013B                 ld      R241, (rr10)+ ; Data Page Register 1\n\n</code></pre>"},{"location":"user-guide/disassembler/disassembly-gallery/sunplus-unsp.html","title":"SunPlus unSP","text":"<p>Assembler code</p> <pre><code>ROM:41B3\nROM:41B3 ; =============== S U B R O U T I N E =======================================\nROM:41B3\nROM:41B3\nROM:41B3 sub_41B3:\nROM:41B3                 sp  = $27FF\nROM:41B5                 r1  = $4000\nROM:41B7                 r2  = [r1++]\nROM:41B8                 jmp      loc_41CA\nROM:41B9 ; ---------------------------------------------------------------------------\nROM:41B9\nROM:41B9 loc_41B9:                               ; CODE XREF: sub_41B3+18\u2193j\nROM:41B9                 push     r2, r2 to [sp]\nROM:41BA                 r3  = [r1++]\nROM:41BB                 r4  = [r1++]\nROM:41BC                 r4  = r4 lsl 4\nROM:41BD                 r4  = r4 lsl 4\nROM:41BE                 r4  = r4 lsl 2\nROM:41BF                 sr  = r4\nROM:41C0                 r4  = [r1++]\nROM:41C1                 bp  = [r1++]\nROM:41C2                 jmp      loc_41C6\nROM:41C3 ; ---------------------------------------------------------------------------\nROM:41C3\nROM:41C3 loc_41C3:                               ; CODE XREF: sub_41B3+14\u2193j\nROM:41C3                 r2  = ds:[r4++]\nROM:41C4                 [r3++]  = r2\nROM:41C5                 bp -= 1\nROM:41C6\nROM:41C6 loc_41C6:                               ; CODE XREF: sub_41B3+F\u2191j\nROM:41C6                 cmp      bp, 0\nROM:41C7                 jne      loc_41C3\nROM:41C8                 pop      r2, r2 from [sp]\nROM:41C9                 r2 -= 1\nROM:41CA\nROM:41CA loc_41CA:                               ; CODE XREF: sub_41B3+5\u2191j\nROM:41CA                 cmp      r2, 0\n</code></pre>"},{"location":"user-guide/disassembler/disassembly-gallery/super-nintendo-entertainement-system-snes.html","title":"Super Nintendo Entertainement System (SNES)","text":"<p>Assembler code</p> <pre><code>.C0:0019 .A8\n.C0:0019 .I16\n.C0:0019 ; ds=0 B=0 e=0\n.C0:0019\n.C0:0019 ; =============== S U B R O U T I N E =======================================\n.C0:0019\n.C0:0019\n.C0:0019 sub_C00019:                             ; CODE XREF: Emulation_mode_RESET+3\u2193J\n.C0:0019\n.C0:0019 ; FUNCTION CHUNK AT .C0:C62B SIZE 00000088 BYTES\n.C0:0019\n.C0:0019                 SEI\n.C0:001A                 CLC\n.C0:001B                 XCE\n.C0:001C                 SEP     #$20 ; ' '\n.C0:001E                 REP     #$10\n.C0:0020                 LDX     #$15FF\n.C0:0023                 TXS\n.C0:0024                 LDX     #0\n.C0:0027                 PHX\n.C0:0028                 PLD\n.C0:0029                 TDC\n.C0:002A                 PHA\n.C0:002B                 PLB\n.C0:002C                 LDA     #1\n.C0:002E                 STA     MEMSEL          ; Memory-2 Waitstate Control (0000000a a: 0 = 2.68 MHz, 1 = 3.58 MHz\n.C0:0031                 STZ     MDMAEN          ; Select General Purpose DMA Channel(s) and Start Transfer (abcdefgh a = Channel 7...h = Channel 0: 1 = Enable 0 = Disable\n.C0:0034                 STZ     HDMAEN          ; Select H-Blank DMA (H-DMA) Channel(s) (abcdefgh a = Channel 7 .. h = Channel 0: 1 = Enable 0 = Disable\n.C0:0037                 LDA     #$8F\n.C0:0039                 STA     INIDISP         ; Display Control 1 (a000bbbb a: 0=screen on 1=screen off, b = brightness)\n.C0:003C                 STZ     NMITIMEN        ; Interrupt Enable and Joypad Request (a0bc000d a = NMI b = V-Count c = H-Count d = Joypad)\n.C0:003F                 JSR     sub_C00525\n.C0:0042                 LDX     #0\n.C0:0045                 STX     D, word_7E0000\n.C0:0047                 LDX     #$FFFF\n</code></pre>"},{"location":"user-guide/disassembler/disassembly-gallery/tms-320c2-coff.html","title":"TMS 320c2 COFF","text":"<p>Assembler code</p> <pre><code>cseg:0017\ncseg:0017 ; =============== S U B R O U T I N E =======================================\ncseg:0017\ncseg:0017\ncseg:0017 sub_cseg_17:\ncseg:0017                 banz    unk_dseg_EDB, *-\ncseg:0019                 banz    unk_dseg_EED, *+\ncseg:001B                 bbnz    unk_dseg_F9C\ncseg:001D                 bbz     unk_dseg_F55\ncseg:001F                 bc      unk_dseg_F18\ncseg:0021                 bgez    unk_dseg_FD3\ncseg:0023                 bgz     unk_dseg_F0C\ncseg:0025                 bioz    unk_dseg_EED\ncseg:0027                 bit     drr, 8          ; Data receive register\ncseg:0028                 bit     *, 1\ncseg:0029                 bit     *, 2\ncseg:002A                 bit     *, 3\ncseg:002B                 bit     *, 4\ncseg:002C                 bit     *, 5\ncseg:002D                 bit     *, 8\ncseg:002E                 bitt    drr             ; Data receive register\ncseg:002F                 bitt    *\ncseg:0030                 blez    unk_dseg_ED1\ncseg:0032                 rptk    2\ncseg:0033                 blkd    byte_dseg_F400, *+\ncseg:0035                 rptk    2\ncseg:0036                 blkp    byte_dseg_FD30, *+\ncseg:0038                 blz     unk_dseg_F12\ncseg:003A                 bnc     unk_dseg_F55\ncseg:003C                 bnv     unk_dseg_FBE\ncseg:003E                 bnz     unk_dseg_F81, ar6\ncseg:0040                 bv      unk_dseg_F15\ncseg:0042                 bz      unk_dseg_F8B\ncseg:0044                 cala\ncseg:0045                 call    unk_dseg_F27\n\n</code></pre>"},{"location":"user-guide/disassembler/disassembly-gallery/tms-320c5.html","title":"TMS 320c5","text":"<p>Assembler code</p> <pre><code>cseg:0030\ncseg:0030 ; =============== S U B R O U T I N E =======================================\ncseg:0030\ncseg:0030\ncseg:0030 sub_cseg_30:\ncseg:0030                 bitt    *br0+, ar7\ncseg:0031                 bldd    #Reserved_0, byte_dseg_7F\ncseg:0033                 bldd    #Reserved_0, *br0+, ar7\ncseg:0035                 bldd    byte_dseg_7F, #Reserved_0\ncseg:0037                 bldd    *br0+, #Reserved_0, ar7\ncseg:0039                 bldd    bmar, byte_dseg_7F\ncseg:003A                 bldd    bmar, *br0+, ar7\ncseg:003B                 bldd    byte_dseg_7F, bmar\ncseg:003C                 bldd    *br0+, bmar, ar7\ncseg:003D                 bldp    byte_dseg_7F\ncseg:003E                 bldp    *br0+, ar7\ncseg:003F                 blpd    #start, byte_dseg_7F\ncseg:0041                 blpd    #start, *br0+, ar7\ncseg:0043                 blpd    bmar, byte_dseg_7F\ncseg:0044                 blpd    bmar, *br0+, ar7\ncseg:0045                 bsar    16\ncseg:0046                 cala\ncseg:0047                 calad\ncseg:0048                  call    start, *br0+, ar7\ncseg:004A                 calld   start, *br0+, ar7\ncseg:004C                  cc      start, geq,bio\ncseg:004E                 ccd     start, eq,bio\ncseg:0050                  clrc    ovm\ncseg:0051                  clrc    sxm\ncseg:0052                 clrc    hm\ncseg:0053                 clrc    tc\ncseg:0054                 clrc    c\ncseg:0055                 clrc    cnf\ncseg:0056                 clrc    intm\ncseg:0057                 clrc    xf\n</code></pre>"},{"location":"user-guide/disassembler/disassembly-gallery/tms-320c54.html","title":"TMS 320c54","text":"<p>Assembler code</p> <pre><code>.text:0000003A                 call    11Ch\n.text:0000003C                 calld   11Ch\n.text:0000003E                 nop\n.text:0000003F                 nop\n.text:00000040                 cc      11Ch, tc\n.text:00000042                 ccd     11Ch, aeq\n.text:00000044                 nop\n.text:00000045                 nop\n.text:00000046                 cmpl    B, A\n.text:00000047                 cmpm    *AR0+, #1\n.text:00000049                 cmpr    lt, AR1\n.text:0000004A                 cmps    A, *AR2+\n.text:0000004B                 dadd    *AR3-, A, B\n.text:0000004C                 dadst   *AR4-, A\n.text:0000004D                 delay   *AR5+\n.text:0000004E                 dld     *AR6-, A\n.text:0000004F                 drsub   *AR7-, B\n.text:00000050                 dsadt   *AR0-, A\n.text:00000051                 dst     A, *AR1-\n.text:00000052                 dsub    *AR2-, B\n.text:00000053                 dsubt   *AR3-, A\n.text:00000054                 exp     A\n.text:00000055                 firs    *AR3+, *AR4+, 11Ch\n.text:00000057                 frame   -80h\n.text:00000058                 idle    2\n.text:00000059                 intr    0Fh\n.text:0000005A                 ld      *AR0+, A\n.text:0000005B                 ld      *AR1+, TS, A\n.text:0000005C                 ld      *AR2+, 16, A\n.text:0000005D                 ld      *AR3+, 1, A\n.text:0000005E                 ld      *AR4+, 1, A\n.text:0000005F                 ld      #1, B\n.text:00000060                 ld      #7FFFh, 1, A\n.text:00000062                 ld      #7FFFh, 16, A\n.text:00000064                 ld      A, ASM, B\n\n</code></pre>"},{"location":"user-guide/disassembler/disassembly-gallery/tms-320c6-coff-file-format.html","title":"TMS 320c6 COFF File Format","text":"<p>Assembler code</p> <pre><code>.text:00008FC0\n.text:00008FC0 ; =============== S U B R O U T I N E =======================================\n.text:00008FC0\n.text:00008FC0\n.text:00008FC0 _main:                                  ; CODE XREF: start:loc_8EB8\u2191p\n.text:00008FC0           B       .S1    _printf\n.text:00008FC4           NOP            2\n.text:00008FC8\n.text:00008FC8           MVK     .S1    0FFFF9148h, A0\n.text:00008FCC   ||      STW     .D2    B3, *B15--[3]\n.text:00008FD0\n.text:00008FD0           STW     .D2    A10, *B15[2]\n.text:00008FD4   ||      MVKH    .S1    0, A0\n.text:00008FD8   ||      MVK     .S2    (loc_8FE8 &amp; 0FFFFh), B3\n.text:00008FDC   ||      NOP\n.text:00008FE0\n.text:00008FE0           STW     .D2    A0, *B15[1]\n.text:00008FE4   ||      MVKH    .S2    (loc_8FE8 &gt;&gt; 16), B3\n.text:00008FE4         ; CALL _printf OCCURS\n.text:00008FE8\n.text:00008FE8 loc_8FE8:                               ; DATA XREF: _main+18\u2191o\n.text:00008FE8                                         ; _main+24\u2191o\n.text:00008FE8           ZERO    .L1    A10\n.text:00008FEC           MV      .L1    A10, A4\n.text:00008FF0           LDW     .D2    *B15[2], A10\n.text:00008FF4           LDW     .D2    *++B15[3], B3\n.text:00008FF8           NOP            4\n.text:00008FFC           B       .S2    B3\n.text:00009000           NOP            5\n.text:00009000         ; BRANCH OCCURS\n.text:00009000 ; End of function _main\n.text:00009000\n.text:00009000 ; ---------------------------------------------------------------------------\n.text:00009004         .align 20h\n.text:00009020 ; [00000038 BYTES: COLLAPSED FUNCTION _strchr. PRESS CTRL-NUMPAD+ TO EXPAND]\n\n</code></pre>"},{"location":"user-guide/disassembler/disassembly-gallery/toshiba-tlcs-900.html","title":"Toshiba TLCS 900","text":"<p>Assembler code</p> <pre><code>IROM:00008100\nIROM:00008100 ; =============== S U B R O U T I N E =======================================\nIROM:00008100\nIROM:00008100\nIROM:00008100                 ; public RESET_\nIROM:00008100 RESET_:                                 ; DATA XREF: IROM:00008000\u2191o\nIROM:00008100                 DEC     0x02, XSP\nIROM:00008102                 DI\nIROM:00008104                 LD      (P3), 0x00      ; Port 3\nIROM:00008107                 LD      (P3CR), 0xF4 ; '\u00f4' ; Port 3 Control\nIROM:0000810A                 LD      (P3FC), 0x00    ; Port 3 Function\nIROM:0000810D                 LD      (SYSCR0), 0xA0 ; ' ' ; System Clock Register 0\nIROM:00008110                 LD      (SYSCR1), 0x00  ; System Clock Contol Register 1\nIROM:00008113                 LD      (B0CS), 0x99 ; '\u2122' ; Block 0 CS/WAIT Control Register\nIROM:00008116                 LD      (B1CS), 0x9A ; '\u0161' ; Block 1 CS/WAIT Control Register\nIROM:00008119                 LD      (B2CS), 0x8F    ; Block 2 CS/WAIT Control Register\nIROM:0000811C                 LD      XSP, 0x0000087F\nIROM:00008121                 LD      (WDMOD), 0x00   ; Watch Dog Timer Mode\nIROM:00008124                 LD      (WDCR), 0xB1 ; '\u00b1' ; Watch Dog Control Register\nIROM:00008127                 LD      XHL, 0x00000080 ; '\u20ac'\nIROM:0000812C                 LD      BC, 0x0800\nIROM:0000812F                 LD      A, 0x00\nIROM:00008131\nIROM:00008131 loc_8131:                               ; CODE XREF: RESET_+35\u2193j\nIROM:00008131                 LD      (XHL), A\nIROM:00008133                 INC     0x01, HL\nIROM:00008135                 DJNZ    BC, (loc_8131)\nIROM:00008138                 LD      (P0), 0x00      ; Port 0\nIROM:0000813B                 LD      (P0CR), 0xFF    ; Port 0 Control\nIROM:0000813E                 LD      (P1), 0x00      ; Port 1\nIROM:00008141                 LD      (P1CR), 0xFF    ; Port 1 Control\nIROM:00008144                 LD      (P1FC), 0x00    ; Port 1 Function\nIROM:00008147                 LD      (P2), 0x00      ; Port 2\nIROM:0000814A                 LD      (P2CR), 0xFF    ; Port 2 Control\nIROM:0000814D                 LD      (P2FC), 0x00    ; Port 2 Function\n\n</code></pre>"},{"location":"user-guide/disassembler/disassembly-gallery/tricore.html","title":"TRICORE","text":"<p>Assembler code</p> <pre><code>PFLASH:800000EC\nPFLASH:800000EC ; =============== S U B R O U T I N E =======================================\nPFLASH:800000EC\nPFLASH:800000EC\nPFLASH:800000EC                 .global asm_clear_endinit\nPFLASH:800000EC asm_clear_endinit:                      ; CODE XREF: _start+1C\u2191p\nPFLASH:800000EC                 ld32.w          d0, WDT_CON0 ; Watchdog Timer Control Register 0\nPFLASH:800000F0                 ld32.w          d1, WDT_CON1 ; Watchdog Timer Control Register 1\nPFLASH:800000F4                 movh            d2, #0\nPFLASH:800000F8                 addi            d2, d2, #-0xFF\nPFLASH:800000FC                 and16           d0, d2\nPFLASH:800000FE                 or32            d0, d0, #0xF0 ; '\u00f0'\nPFLASH:80000102                 and32           d4, d1, #0xC\nPFLASH:80000106                 or16            d0, d4\nPFLASH:80000108                 st32.w          WDT_CON0, d0 ; Watchdog Timer Control Register 0\nPFLASH:8000010C                 movh            d4, #0\nPFLASH:80000110                 addi            d4, d4, #-0x10\nPFLASH:80000114                 and16           d0, d4\nPFLASH:80000116                 or32            d0, d0, #2\nPFLASH:8000011A                 isync\nPFLASH:8000011E                 st32.w          WDT_CON0, d0 ; Watchdog Timer Control Register 0\nPFLASH:80000122                 ld32.w          d0, WDT_CON0 ; Watchdog Timer Control Register 0\nPFLASH:80000126                 nop16\nPFLASH:80000128                 ji16            a11\nPFLASH:80000128 ; End of function asm_clear_endinit\nPFLASH:80000128\nPFLASH:8000012A\nPFLASH:8000012A ; =============== S U B R O U T I N E =======================================\nPFLASH:8000012A\nPFLASH:8000012A\nPFLASH:8000012A                 .global _disable_wdt\nPFLASH:8000012A _disable_wdt:                           ; CODE XREF: _start:__no_board_init\u2191p\nPFLASH:8000012A                 movh            d2, #0\nPFLASH:8000012E                 addi            d2, d2, #-0xFD\nPFLASH:80000132                 movh            d5, #0\n\n\n</code></pre>"},{"location":"user-guide/disassembler/disassembly-gallery/unix-coff.html","title":"Unix COFF","text":"<p>IDA is the most powerful disassembler for 68K UNIX COFF Files. The Motorola 68K family of processors is huge and very widely used. A few sample parts: MC68000, MC68010, MC68020, MC68030, MC68040, MC68330, MC68882, MC68851, MC68020EX, MC68302 Integrated Communication Processor, MC68306 68K/ColdFire, MC68331 68K/ColdFire, MC68332 68K/ColdFire, MC68336 68K/ColdFire, MC68340 68K/ColdFire, MC68360 Integrated Communication Processor, MC68F375 68K/ColdFire, MC68376 68K/ColdFire, etc.</p> <p>Assembler code</p> <pre><code>.text:000001AC\n.text:000001AC ; =============== S U B R O U T I N E =======================================\n.text:000001AC\n.text:000001AC ; Attributes: bp-based frame\n.text:000001AC\n.text:000001AC                 global new_main\n.text:000001AC new_main:                               ; CODE XREF: main+16\u2191p\n.text:000001AC\n.text:000001AC var_C           = -$C\n.text:000001AC\n.text:000001AC                 link    a6,#-$10\n.text:000001B2                 movem.l 0,$10+var_C(sp)\n.text:000001B8                 fmovem  0,$10+var_C.l(sp)\n.text:000001C2\n.text:000001C2 qwerty:                                 ; CODE XREF: new_main+96\u2193j\n.text:000001C2                 pea     var_C+4(a6)\n.text:000001C6                 pea     var_C+8(a6)\n.text:000001CA                 move.l  #aLdLd,-(sp)    ; \"%ld %ld\"\n.text:000001D0                 jsr     (scanf).l\n.text:000001D6                 adda.w  #$C,sp\n.text:000001DA                 tst.l   var_C+8(a6)\n.text:000001DE                 bne.w   loc_200\n.text:000001E2                 tst.l   var_C+4(a6)\n.text:000001E6                 bne.w   loc_200\n.text:000001EA                 move.l  (fignqm).l,d0\n.text:000001F0                 add.l   (fignqn).l,d0\n.text:000001F6                 add.l   (fignqr).l,d0\n.text:000001FC                 bra.w   loc_246\n.text:00000200 ; ---------------------------------------------------------------------------\n.text:00000200\n.text:00000200 loc_200:                                ; CODE XREF: new_main+32\u2191j\n.text:00000200                                         ; new_main+3A\u2191j\n.text:00000200                 move.l  var_C+4(a6),(sp)\n.text:00000204                 move.l  var_C+8(a6),-(sp)\n.text:00000208                 jsr     (b1).l\n</code></pre>"},{"location":"user-guide/disassembler/disassembly-gallery/untitled.html","title":"Untitled","text":"<p>Assembler code</p> <pre><code>.text:0000000080900A90\n.text:0000000080900A90 # =============== S U B R O U T I N E =======================================\n.text:0000000080900A90\n.text:0000000080900A90\n.text:0000000080900A90 sub_80900A90:                           # CODE XREF: start+360\u2191p\n.text:0000000080900A90                                         # start+3A4\u2191p ...\n.text:0000000080900A90                 beq     $17, locret_80900B2C\n.text:0000000080900A94                 subq    $17, 4, $20\n.text:0000000080900A98                 ldq_u   $28, 0($18)\n.text:0000000080900A9C                 addq    $17, $18, $27\n.text:0000000080900AA0                 andnot  $16, 3, $19\n.text:0000000080900AA4                 bge     $20, loc_80900B30\n.text:0000000080900AA8                 ldq_u   $27, -1($27)\n.text:0000000080900AAC                 and     $16, 3, $16\n.text:0000000080900AB0                 ldl     $17, 0($19)\n.text:0000000080900AB4                 addq    $20, $16, $20\n.text:0000000080900AB8                 extql   $28, $18, $28\n.text:0000000080900ABC                 bgt     $20, loc_80900AF0\n.text:0000000080900AC0                 extqh   $27, $18, $27\n.text:0000000080900AC4                 addq    $20, 4, $20\n.text:0000000080900AC8                 or      $27, $28, $28\n.text:0000000080900ACC                 insql   $28, $16, $28\n.text:0000000080900AD0                 mskql   $17, $16, $18\n.text:0000000080900AD4                 mskql   $28, $20, $28\n.text:0000000080900AD8                 mskqh   $17, $20, $17\n.text:0000000080900ADC                 or      $18, $28, $28\n.text:0000000080900AE0                 or      $17, $28, $28\n.text:0000000080900AE4                 stl     $28, 0($19)\n.text:0000000080900AE8                 addq    $19, $20, $16\n.text:0000000080900AEC                 ret     $31, ($26), 4\n.text:0000000080900AF0 # ---------------------------------------------------------------------------\n.text:0000000080900AF0\n.text:0000000080900AF0 loc_80900AF0:                           # CODE XREF: sub_80900A90+2C\u2191j\n.text:0000000080900AF0                 extqh   $27, $18, $27\n.text:0000000080900AF4                 ldl     $18, 4($19)\n\n</code></pre>"},{"location":"user-guide/disassembler/disassembly-gallery/windows-nt-pe-file.html","title":"Windows NT PE File","text":"<p>Assembler code</p> <pre><code>.text:00011FE0\n.text:00011FE0 # =============== S U B R O U T I N E =======================================\n.text:00011FE0\n.text:00011FE0\n.text:00011FE0 sub_11FE0:                              # DATA XREF: .text:off_10464\u2191o\n.text:00011FE0                                         # .pdata:00012B44\u2193o ...\n.text:00011FE0\n.text:00011FE0 .set sender_sp, -0xB0\n.text:00011FE0 .set var_78, -0x78\n.text:00011FE0 .set var_70, -0x70\n.text:00011FE0 .set var_60, -0x60\n.text:00011FE0 .set var_58, -0x58\n.text:00011FE0 .set var_50, -0x50\n.text:00011FE0 .set var_44, -0x44\n.text:00011FE0 .set sender_lr,  8\n.text:00011FE0\n.text:00011FE0 # FUNCTION CHUNK AT .text:0001257C SIZE 000000B0 BYTES\n.text:00011FE0 # FUNCTION CHUNK AT .text:00012834 SIZE 00000038 BYTES\n.text:00011FE0\n.text:00011FE0                 stw       r15, var_44(r1)\n.text:00011FE4                 mflr      r15\n.text:00011FE8                 bl        _save32gpr_16\n.text:00011FEC                 mr        r27, r3\n.text:00011FF0                 mr        r23, r4\n.text:00011FF4                 stw       r2, sender_lr(r1)\n.text:00011FF8                 stwu      r1, sender_sp(r1)\n.text:00011FFC\n.text:00011FFC loc_11FFC:                              # DATA XREF: .pdata:00012B58\u2193o\n.text:00011FFC                 lwz       r10, 0x60(r23)\n.text:00012000                 lis       r11, 7\n.text:00012004                 mr        r21, r10\n.text:00012008                 lwz       r9, 0xC(r21)\n.text:0001200C                 ori       r11, r11, 0x14 # 0x70014\n.text:00012010                 cmplw     cr1, r9, r11\n.text:00012014                 lwz       r24, 0x28(r27)\n\n</code></pre>"},{"location":"user-guide/disassembler/disassembly-gallery/x-box-disassembler.html","title":"X-Box Disassembler","text":"<p>Assembler code</p> <pre><code>.text:00402E61\n.text:00402E61     loc_402E61:                             ; CODE XREF: sub_402DC4+8C\u2191j\n.text:00402E61                                             ; sub_402DC4+98\u2191j\n.text:00402E61 218                 lea     edi, [ebp+var_20C]\n.text:00402E67 218                 or      ecx, 0FFFFFFFFh\n.text:00402E6A 218                 xor     eax, eax\n.text:00402E6C 218                 mov     esi, offset asc_401634 ; \")\"\n.text:00402E71 218                 repne scasb\n.text:00402E73 218                 dec     edi\n.text:00402E74 218                 movsw\n.text:00402E76 218                 jmp     short loc_402E8E\n.text:00402E78     ; ---------------------------------------------------------------------------\n.text:00402E78\n.text:00402E78     loc_402E78:                             ; CODE XREF: sub_402DC4+55\u2191j\n.text:00402E78 218                 push    esi\n.text:00402E79 21C                 push    offset aS       ; \"%s\"\n.text:00402E7E\n.text:00402E7E     loc_402E7E:                             ; CODE XREF: sub_402DC4+31\u2191j\n.text:00402E7E 220                 lea     eax, [ebp+var_20C]\n.text:00402E84 220                 push    eax\n.text:00402E85 224                 call    ds:sprintf\n.text:00402E8B 224                 add     esp, 0Ch\n.text:00402E8E\n.text:00402E8E     loc_402E8E:                             ; CODE XREF: sub_402DC4+B2\u2191j\n.text:00402E8E 218                 mov     ecx, [ebp+var_4]\n.text:00402E91 218                 lea     eax, [ebp+var_20C]\n.text:00402E97 218                 push    eax             ; const char *\n.text:00402E98 21C                 call    sub_402EA3\n.text:00402E9D 218                 pop     edi\n.text:00402E9E 214                 pop     esi\n.text:00402E9F 210                 leave\n.text:00402EA0 000                 retn    8\n.text:00402EA0     sub_402DC4      endp\n.text:00402EA0\n.text:00402EA3\n.text:00402EA3     ; =============== S U B R O U T I N E =======================================\n.text:00402EA3\n.text:00402EA3\n.text:00402EA3     ; int __cdecl sub_402EA3(const char *)\n.text:00402EA3     sub_402EA3      proc near               ; CODE XREF: sub_402DC4+D4\u2191p\n.text:00402EA3                                             ; sub_4030B2:loc_403381\u2193p\n.text:00402EA3\n.text:00402EA3     arg_0           = dword ptr  8\n.text:00402EA3\n.text:00402EA3 000                 push    esi\n\n</code></pre>"},{"location":"user-guide/disassembler/disassembly-gallery/z180-coff-file-format.html","title":"Z180 COFF File Format","text":"<p>Assembler code</p> <pre><code>seg000:000E                 dec     bc\nseg000:000F                 inc     c\nseg000:0010\nseg000:0010 loc_10:                                 ; CODE XREF: seg000:010F\u2193p\nseg000:0010                 dec     c\nseg000:0011                 ld      c, 88h ; '\u02c6'\nseg000:0013                 rrca\nseg000:0014                 djnz    sub_0\nseg000:0016                 djnz    loc_1B\nseg000:0018\nseg000:0018 loc_18:                                 ; CODE XREF: seg000:011C\u2193p\nseg000:0018                 ld      de, 9876h\nseg000:001B\nseg000:001B loc_1B:                                 ; CODE XREF: sub_0+16\u2191j\nseg000:001B                 ld      (de), a\nseg000:001C                 inc     de\nseg000:001D                 inc     d\nseg000:001E                 dec     d\nseg000:001F\nseg000:001F loc_1F:                                 ; CODE XREF: seg000:0129\u2193p\nseg000:001F                 ld      d, 88h ; '\u02c6'\nseg000:0021                 rla\nseg000:0022                 jp      loc_88\nseg000:0025 ; ---------------------------------------------------------------------------\nseg000:0025                 add     hl, de\nseg000:0026                 ld      a, (de)\nseg000:0027                 dec     de\nseg000:0028\nseg000:0028 loc_28:                                 ; CODE XREF: seg000:0135\u2193p\nseg000:0028                 inc     e\nseg000:0029                 dec     e\nseg000:002A                 ld      e, 88h ; '\u02c6'\nseg000:002C                 rra\nseg000:002D                 jp      nz, loc_88\nseg000:0030\nseg000:0030 loc_30:                                 ; CODE XREF: seg000:0142\u2193p\nseg000:0030                 ld      hl, 9876h\n</code></pre>"},{"location":"user-guide/disassembler/disassembly-gallery/z380-coff-file-format.html","title":"Z380 COFF File Format","text":"<p>Assembler code</p> <pre><code>seg000:001E                 inc     d\nseg000:001F                 dec     d\nseg000:0020\nseg000:0020 loc_20:                                 ; CODE XREF: seg000:062A\u2193p\nseg000:0020                 ld      d, 12h\nseg000:0022\nseg000:0022 loc_22:                                 ; CODE XREF: sub_0+23\u2193j\nseg000:0022                 rla\nseg000:0023                 jr      loc_22\nseg000:0023 ; End of function sub_0\nseg000:0023\nseg000:0025 ; ---------------------------------------------------------------------------\nseg000:0025                 add     hl, de\nseg000:0026                 ld      a, (de)\nseg000:0027                 dec     de\nseg000:0028\nseg000:0028 ; =============== S U B R O U T I N E =======================================\nseg000:0028\nseg000:0028\nseg000:0028 sub_28:                                 ; CODE XREF: seg000:096A\u2193p\nseg000:0028                 dec     de\nseg000:0029                 inc     e\nseg000:002A                 dec     e\nseg000:002B                 ld      e, 12h\nseg000:002D\nseg000:002D loc_2D:                                 ; CODE XREF: sub_28+6\u2193j\nseg000:002D                 rra\nseg000:002E                 jr      nz, loc_2D\nseg000:002E ; End of function sub_28\nseg000:002E\nseg000:0030\nseg000:0030 ; =============== S U B R O U T I N E =======================================\nseg000:0030\nseg000:0030\nseg000:0030 sub_30:                                 ; CODE XREF: seg000:097D\u2193p\nseg000:0030                 ld      hl, 1234h\n\n</code></pre>"},{"location":"user-guide/disassembler/disassembly-gallery/z8.html","title":"Z8","text":"<p>Assembler code</p> <pre><code>code:0000000C\ncode:0000000C ; =============== S U B R O U T I N E =======================================\ncode:0000000C\ncode:0000000C\ncode:0000000C                 ; public start\ncode:0000000C start:\ncode:0000000C\ncode:0000000C ; FUNCTION CHUNK AT code:00000139 SIZE 00000016 BYTES\ncode:0000000C\ncode:0000000C                 ld      p2m, #0         ; Port 2 mode register\ncode:0000000F                 ld      p3m, #1         ; Port 3 mode register\ncode:00000012                 ld      p01m, #4        ; Ports 0-1 mode register\ncode:00000015                 ld      ipr, #1Ch       ; Interrupt priority register\ncode:00000018                 ld      imr, #21h ; '!' ; Interrupt mask register\ncode:0000001B                 ld      R4, #0Fh\ncode:0000001E                 ld      R5, #0Fh\ncode:00000021                 ld      R6, #0Fh\ncode:00000024                 srp     #10h\ncode:00000026                 .rp 10h\ncode:00000026\ncode:00000026                 ; public Start\ncode:00000026 Start:                                  ; Program control flags\ncode:00000026                 clr     flags\ncode:00000028                 ld      spl, #40h ; '@' ; Stack pointer low byte\ncode:0000002B                 clr     irq             ; Interrupt request register\ncode:0000002D                 ei\ncode:0000002E                 ld      R32, #10h\ncode:00000031                 ld      R31, #0Fh\ncode:00000033\ncode:00000033                 ; public zero\ncode:00000033 zero:                                   ; CODE XREF: start+2B\u2193j\ncode:00000033                 clr     @R32\ncode:00000035                 inc     R32\ncode:00000037                 djnz    R31, zero\ncode:00000039                 ld      p2, #0FFh       ; Port 2\n</code></pre>"},{"location":"user-guide/disassembler/disassembly-gallery/z80.html","title":"Z80","text":"<p>Assembler code</p> <pre><code>ROM:02A0\nROM:02A0 ; =============== S U B R O U T I N E =======================================\nROM:02A0\nROM:02A0\nROM:02A0 sub_2A0:\nROM:02A0                 ld      a, 7Fh\nROM:02A2                 in      a, (0FEh)\nROM:02A4                 rra\nROM:02A5                 jr      c, loc_2B2\nROM:02A7                 ld      a, 7Fh\nROM:02A9                 in      a, (0FEh)\nROM:02AB                 rra\nROM:02AC                 jr      c, loc_2B2\nROM:02AE                 ld      a, 14h\nROM:02B0                 scf\nROM:02B1                 ret\nROM:02B2 ; ---------------------------------------------------------------------------\nROM:02B2\nROM:02B2 loc_2B2:                                ; CODE XREF: sub_2A0+5\u2191j\nROM:02B2                                         ; sub_2A0+C\u2191j\nROM:02B2                 or      a\nROM:02B3                 ret\nROM:02B3 ; End of function sub_2A0\nROM:02B3\nROM:02B3 ; ---------------------------------------------------------------------------\nROM:02B4                 db    0\nROM:02B5                 db    0\nROM:02B6                 db    0\nROM:02B7                 db    0\nROM:02B8                 db    0\nROM:02B9                 db    0\nROM:02BA                 db    0\nROM:02BB                 db    0\nROM:02BC                 db    0\nROM:02BD                 db    0\n</code></pre>"},{"location":"user-guide/disassembler/navigation/anchor.html","title":"Anchor","text":"<p>Some IDA commands such as selecting a portion of file to output or specifying a segment to move need an anchor.</p> <p>To drop the anchor, you can either use the Alt-L key or the Shift-\\ combination, which is more convenient. You can also drop the anchor with the mouse by simply clicking and dragging it. <p>After you've dropped the anchor, you can navigate freely using arrows, etc. Any command that uses the anchor, raises it.</p> <p>The anchored range is displayed with another color.</p> <p>When you exit from IDA, the anchor value is lost.</p>"},{"location":"user-guide/disassembler/navigation/how-to-enter-a-number.html","title":"How to Enter a Number","text":"<p>You can enter any 'C' expression with constants. Long arithmetic will be used for calculations.</p> <p>In these expressions, you can use all the names that you have created in your program.</p>"},{"location":"user-guide/disassembler/navigation/how-to-enter-a-segment-value.html","title":"How to Enter a Segment Value","text":"<p>You must enter a segment base value as a hexadecimal number or a segment name. IDA will warn you if you enter an invalid segment.</p> <p>You may enter a segment register name too.</p>"},{"location":"user-guide/disassembler/navigation/how-to-enter-an-address.html","title":"How to Enter an Address","text":"<p>You should enter an address as a hexadecimal number or a location name. When you enter the address in the hexadecimal format, you can omit the segment part of the address and the current segment will be used. Addresses beyond the program limits are invalid.</p> <p>Also, you can enter a location name with a displacement:</p> <pre><code>        name+5\n</code></pre> <p>And finally you can specify a relative address:</p> <pre><code>        +10             0x10 bytes further\n        -5              5 bytes backwards\n</code></pre> <p>If the entered string cannot be recognized as a hexadecimal number or location name, IDA will try to interpret it as an expression using the current script interpreter. The default interpreter is IDC.</p> <p>Special addresses: $ - current location (depends on the current assembler) Examples:</p> <p><code>456</code> current segment, offset 0x456</p> <p><code>5E</code> current segment, offset 0x5E</p> <p><code>3000:34</code> segment 0x3000, offset 0x34</p> <p><code>ds:67</code> segment pointed by ds, offset 0x67</p> <p><code>0:4000000</code> linear address</p> <p><code>0x4000000</code> start a location with name 'start'</p>"},{"location":"user-guide/disassembler/navigation/how-to-enter-an-identifier.html","title":"How to Enter an Identifier","text":"<p>An identifier is a name which starts with a letter and contains only letters and digits. The list of allowed characters is specified in config file IDA.CFG. All names are case-sensitive.</p> <p>Maximal length of a name is specified in the configuration file too:</p> <pre><code>        MAX_NAME_LENGTH=120     // Maximal length of new names\n</code></pre> <p>Default is 120.</p> <p>Some assemblers have a shorter name length limit, beware!</p> <p>IDA will warn you if you enter an illegal name.</p>"},{"location":"user-guide/disassembler/navigation/how-to-enter-text.html","title":"How to enter text","text":""},{"location":"user-guide/disassembler/navigation/how-to-enter-text.html#how-to-enter-text","title":"How to enter text","text":"<pre><code> In the text version of IDA, you can use the following keys:\n\n Enter          starts a new line\n Ctrl-Enter     finishes the input\n Esc            cancels the input\n F1             gives some help\n\n                                        Shift-&lt;arrow&gt;  Select\n Ctrl-L         Search Again            Shift-Ins       Paste\n Ctrl-O         Indent Mode             Shift-Del       Cut\n Ctrl-T         Delete Word             Ctrl-Ins        Copy\n Ctrl-U         Undo                    Ctrl-Del        Clear\n Ctrl-Y         Delete Line             Ctrl-K B        Start Select\n Ctrl-Left      Word Left               Ctrl-K H        Hide Select\n Ctrl-Right     Word Right\n Ctrl-PgUp      Text Start              Ctrl-Q A        Replace\n Ctrl-PgDn      Text End                Ctrl-Q F        Search\n                                        Ctrl-Q H        Delete Line Start\n                                        Ctrl-Q Y        Delete Line End\n</code></pre> <p>Input containing only whitespaces is equal to an empty input.</p> <p>Do not forget that you can also use the clipboard.</p>"},{"location":"user-guide/disassembler/packed-executables/unpacked_pe_executable.html","title":"Using the IDA debugger to unpack an \u201chostile\u201d PE executable","text":""},{"location":"user-guide/disassembler/packed-executables/using-ida-debugger-to-unpack-an-hostile-pe-executable.html","title":"Using IDA debugger to unpack an \u201chostile\u201d PE executable","text":"<p>Several days ago we received, from an IDA user, a small harmless executable (test00.zip; unpack twice with the password 123) that could not be debugged in IDA. Breakpoints would not break and, the program would run out of control, as if the debugger was too slow to catch it. When we first loaded the program in IDA, it complained that it could not find the imports section. That type of situation is frequent with protected executables, packed worms etc\u2026.</p> <p></p> <p>The second remarkable thing is that the entry point jumping\u2026 nowhere. Addresses marked in red usually reflect a location that IDA can\u2019t resolve.</p> <p></p> <p>This code employs attempts to prevent the disassembly and, as a result, the default load parameters are not appropriate. This type of obfuscated code demonstrates the problems inherent to the a one-click approach.</p> <p>But what if we investigate a bit further, for example by loading the file in the manual mode? In this mode the user can specify which sections of the file should be loaded. To be on the safe side, let\u2019s load all sections. Let\u2019s uncheck the \u2018make imports section\u2019 checkbox to avoid the \u201cmissing imports\u201d message. We have this:</p> <p></p> <p>Once we have answered the questions about each section of the file we will get this listing: much better!</p> <p></p> <p>Now that we got rid of the unresolved address, we can analyze the program. The first instruction of our executable is a jump, and it jumps to the program header: loc_400158. Hmmmm, the program header is not supposed to contain any code but this program abuses the conventions and jumps to it. An interesting side effect results of the fact that the program header is read only. That could explain why breakpoints can\u2019t be put there.</p> <p>Anyway, let\u2019s see how the program works. We see that the program loads a pointer into ESI which gets immediately copied to EBX:</p> <pre><code>HEADER:00400158                 mov     esi, offset off_40601C\nHEADER:0040015D                 mov     ebx, esi\n</code></pre> <p>(Ctrl-O converted the hexadecimal number in the first instruction to a label expression)</p> <p>Later the value of EBX is used to call a subroutine:</p> <pre><code>HEADER:00400169                 call    dword ptr [ebx]\n</code></pre> <p>Calls like this are frequent in the listing, so let\u2019s find out the function and what it does. Apparently a pointer to the function is located here:</p> <pre><code>__u_____:0040601C off_40601C      dd offset __ImageBase+130h\n</code></pre> <p>If we click on __ImageBase, what we\u2019ll see is an array of dwords. IDA represented the program header as an array which is incorrect in our case. We undefine the array (hotkey U), go back to the pointer (hotkey Esc) and follow the pointer again. This time we will end up at the address 0x400130 which should contain a function. We are sure of that because the instruction at 0x400169 calls 0x400130 indirectly. We press P (create procedure or function) to tell IDA that there should be a function at the current address.While the function is now on screen, we only have half of it! It seems that the person who wrote that program wanted it to obfuscate it and separated the function into several pieces. IDA now knows how to deal with those fragmented functions and displays information about the other function parts on the screen:</p> <p></p> <p>But it has only references to other parts. It would be nice to have the whole function on one page. There is a special command to help us: the command to generate flow charts of functions in IDA, it\u2019s hotkey is F12. This command is especially interesting for fragmented functions like ours because all pieces of the function will be on the screen:</p> <p></p> <p>It might be interesting to display the flow chart of the main function (very long function, keep scrolling!):</p> <p></p> <p>A quick glance at the flow chart reveals that there is only one exit from the function at its \u201cret\u201d instruction (0x4001FA). We could put a breakpoint there and let the program run. Now, before we do that, let\u2019s repeat that it is not a good idea to run untrusted code on your computer. It is much better to have a separate \u201csandbox\u201d machine for such tests, for example using the remote debugging facilities IDA offers. Therefore, IDA displays a warning when a new file is going to be started under debugger: ignore at your own risk.</p> <p>Since the breakpoint is located in the program header, and the program header is write protected by the system, we cannot use a plain software breakpoint. We have to use a hardware breakpoint: first press F2 to create a breakpoint, then right click and select \u201cedit breakpoint\u201d to change it to a hardware breakpoint on the \u201cexecution\u201d event:</p> <p></p> <p>After having set the breakpoint, we start the debugger by pressing F9. When we reach the breakpoint, the program will be unpacked into the \u2018MEW\u2019 segment. We jump there and convert everything to code (the fastest way to do this is to press F7 at the breakpoint).</p> <p>Now we have a very nice listing but with one major problem: it is ephemeral \u2013 as soon as we\u2019ll stop the debugging session, the listing will disappear.</p> <p></p> <p>The reason is of course that the listing displays the memory content and that the memory will cease to exist when the process will die. It would be nice to be able to save the memory into the database and continue the analysis without the debugger. We will think about adding that feature into future versions of IDA, but meanwhile we\u2019ll have to do it manually. By \u201cmanually\u201d we do not mean to copy byte one by one on a paper, of course. We can use the built-in IDC language to achieve this.</p> <p>There are two things to be saved because they will disappear when the debugger stops: the memory contents and the imported function names. The memory contents can be saved by using the following 4-line script:</p> <pre><code>auto fp, ea;\nfp = fopen(\"bin\", \"wb\");\nfor ( ea=0x401000; ea &lt; 0x406000; ea++ )\n  fputc(Byte(ea), fp);\n</code></pre> <p>When the script has run, we will have a file named \u201cbin\u201d on the disk. It will contain the bytes from the \u201cMEW\u201d segment. As you can see, I hardcoded the hexadecimal addresses: after all, it is a disposable script intended to be run once.</p> <p>We have to save the imported function names too. Look at the call at 0x401002, for example:</p> <pre><code>MEW:00401002 call    sub_4012DC\n</code></pre> <p>If we want to know the name of the called function, we press Enter several times to follow the links and finally get the name:</p> <pre><code>kernel32.dll:77E7AD86\nkernel32.dll:77E7AD86 kernel32_GetModuleHandleA:              ; CODE XREF: sub_4012DCj\nkernel32.dll:77E7AD86                                         ; DATA XREF: MEW:off_402000o\nkernel32.dll:77E7AD86 cmp     dword ptr [esp+4], 0\n</code></pre> <p>When we quit the debugger, the kernel32.dll segment will disappear from the listing along with all its names, instructions, functions, everything. We have to copy the function names before that:</p> <pre><code>auto ea, name;\nfor (ea = 0x401270; ea&lt;0x4012e2; ea =ea+6 )\n{\n  name = Name(Dword(Dfirst(ea)));               /* get name */\n  name = substr(name, strstr(name, \"_\")+1, -1); /* drop the prefix */\n  MakeName(ea, name);\n}\n</code></pre> <p>Now that we have run those scripts, we may stop the debugger (press Ctrl-F2) and copy back the memory contents. The \u201cLoad additional binary file\u201d command in the File, Load menu is the way to go:</p> <p></p> <p>Please note that it is not necessary to create a segment, it already exists (clear the \u201ccreate segments\u201d flag). Also, the address is specified in paragraphs, i.e. it is shifted to the right by 4.</p> <p>Load the file, press P at 0x401000 and voila, you have a nice listing:</p> <p></p> <p>The rest of the analysis is a pleasant and agreeable task left to the reader as\u2026. you guessed it.</p>"},{"location":"user-guide/disassembler/supported-file-formats/windmp-file-loader.html","title":"Windmp file loader","text":""},{"location":"user-guide/disassembler/supported-file-formats/windmp-file-loader.html#windmp-file-loader","title":"Windmp file loader","text":"<p>The Windmp loader module can load *.dmp files into IDA for static analysis.</p> <p>For the Windmp loader to function properly, one needs to specify the path to MS Debugger Engine Library (dbgeng.dll). This option can be set in CFG\\IDA.CFG under the DBGTOOLS key. If this value is not set then Windmp will try to detect the path.</p> <p>Windmp can be used to load big dump files, however that will result in a huge database, therefore it is possible to manually load a given input file:</p> <ul> <li> <p>Load modules segments only: If used, Windmp will only load segments related to the loaded modules and skips all other memory segments.</p> </li> <li> <p>Do not load symbol names: If the symbol path is configured properly, then Windmp will fetch and rename all known addresses; you can skip this step by not loading symbol names.</p> </li> <li> <p>Skip segments greater than: It skips segments with a given size, resulting in faster loading speed. If this value is zero then this option will not be used.</p> </li> </ul> <p>In addition to static analysis it is possible to run the dump file under the WinDbg debugger module.</p>"},{"location":"user-guide/lumina/lc_user_manual.html","title":"lc command reference manual","text":""},{"location":"user-guide/lumina/lc_user_manual.html#introduction","title":"Introduction","text":"<p>The lc executable provides a command-line interface to interact with a Lumina server and its contents.</p> <p>NOTE: virtually all the commands described in this document, require administrator rights; \"regular\" users will typically not have the necessary privileges.</p>"},{"location":"user-guide/lumina/lc_user_manual.html#command-line-options","title":"Command-line options","text":"<p>-h, --host HOSTNAME[:PORT]\\ Lumina host name and port (if port is omitted, it defaults to 443)</p> <p>-u USERNAME\\ specify username</p> <p>-p PASSWORD\\ specify password</p> <p>-v, --verbose\\ verbose output</p> <p>In order to connect to a Lumina server, lc must at least be provided with a hostname and a valid user-password pair.</p> <p>In order to keep the various commands' syntax as clear as possible, we will omit the login options from commands for the rest of this manual.</p> <p>Other options exists, specific to each lc command (see Commands).</p>"},{"location":"user-guide/lumina/lc_user_manual.html#commands","title":"Commands","text":"<p>The following commands are accepted by lc:</p>"},{"location":"user-guide/lumina/lc_user_manual.html#operating-with-metadata","title":"Operating with metadata","text":"<p>Commands in this section let users view metadata stored in the Lumina server and their history.</p>"},{"location":"user-guide/lumina/lc_user_manual.html#hist-show","title":"<code>hist show</code>","text":"<p>hist show [OPTION]</p> <p>Queries history of changes for function(s).</p> <p>The following informations will be displayed for each change:</p> <ul> <li>The ID of the change</li> <li>The timestamp of the change</li> <li>The ID of the push that contains the change</li> <li>The name of the function at that change (+ <code>(*)</code> if it has been modified past this change)</li> <li>optional: The username of the user that pushed this change</li> <li>optional: The name of the license associated with the push for this change</li> <li>optional: The email of the license associated with the push for this change</li> <li>optional: The ID of the license associated with the push for this change</li> <li>optional: The ID of the function</li> <li>optional: The effective address (EA) of the function in the input file for the change</li> <li>optional: The hash of the function</li> <li>optional: The path of the idb file where the change came from</li> <li>optional: The hash of the file where the change came from</li> <li>optional: The path of the file where the change came from</li> </ul> <p>TIP: Wildcards can be used to facilitate the usage of options that take strings as input. See the appendix.</p> <p>Options: | Short form | Long form | Description | | ---- | ---- | ---- | | <code>-a</code> | <code>--additional-fields LIST</code> |  Comma-delimited list of additional info to display (<code>username</code>, <code>license_name</code>, <code>license_email</code>, <code>license_id</code>, <code>func_id</code>, <code>func_ea</code>, <code>calcrel_hash</code>, <code>idb_path</code>, <code>input_hash</code>, <code>input_path</code>, <code>all</code>) | | <code>-d</code> | <code>--details</code> |  Show details (diff-like) for each change | | <code>None</code> | <code>--chronological</code> |  Display entries in chronological order (defaults to reverse-chronological). | | <code>-m</code> | <code>--max-entries NUMBER</code> |  maximum number of entries to fetch (defaults to 100) | | <code>-l</code> | <code>--license-id LICENSE</code> |  license ID (XX-XXXX-XXXX-XX format) to operate on | | <code>-r</code> | <code>--history-id-range RANGE</code> |  history ID range(s) to operate on (<code>start0..end0 [...]</code>) | | <code>-t</code> | <code>--time-range RANGE</code> |  time range to operate on (<code>start..end</code>) see the appendix | | <code>-i</code> | <code>--idb IDB</code> |  IDB name(s) to operate on | | <code>-f</code> | <code>--input FILE</code> |  input file(s) to operate on | | <code>-u</code> | <code>--username USERNAME</code> |  username(s) to operate on | | <code>-n</code> | <code>--func NAME</code> |  function name(s) to operate on | | <code>-h</code> | <code>--input-hash HASH</code> |  input file hash(es) to operate on | | <code>-p</code> | <code>--pushes-id-range RANGE</code> |  Pushes ID range(s) to operate on (<code>start0..end0 [...]</code>) | | <code>-c</code> | <code>--calcrel-hash HASH</code> |  function hash(es) to operate on | | <code>None</code> | <code>--last-change</code> |  Select only the last change for a function (which speeds up execution)  |</p> <p>Examples:</p> <pre><code># Example: List the last 8 changes (\"-m 8\" specifies the number of changes to show; the default order is reverse-chronological)\nalice@alice_PC$ lc hist show -m 8\n    Change Time                Push Func name                  \n    ------ ------------------- ---- ---------------------------\n    507    2022-09-15 14:48:18 5    math_things                \n    506    2022-09-15 14:48:17 4    calc_things (*)            \n    505    2022-09-15 14:48:17 4    start                      \n    504    2022-09-15 14:48:16 3    keygen_window_dialog_proc_a\n    503    2022-09-15 14:48:16 3    display_keygen_window      \n    502    2022-09-15 14:48:15 2    fstat                      \n    501    2022-09-15 14:48:15 2    __umoddi3                  \n    500    2022-09-15 14:48:15 2    __udivdi3                  \n    # Shown 8 results (more are available...)\n\n</code></pre> <pre><code># Example: List changes from id 9 up to (but excluding) id 14\nalice@alice_PC$ lc hist show -r9..14\n    Change Time                Push Func name            \n    ------ ------------------- ---- ---------------------\n    13     2022-09-15 14:48:05 2    AllocateBucketGroup  \n    12     2022-09-15 14:48:05 2    addr_map_find        \n    11     2022-09-15 14:48:05 2    addr_map_insert      \n    10     2022-09-15 14:48:05 2    addr_map_compare_func\n    9      2022-09-15 14:48:05 2    addr_map_free_func   \n    # Shown 5 results\n\n</code></pre> <pre><code># Example: List changes using multiple ranges (9..14,505..515; in this case, there were no changes after 507 in the database)\nalice@alice_PC$ lc hist show -r9..14,505..515\n    Change Time                Push Func name            \n    ------ ------------------- ---- ---------------------\n    507    2022-09-15 14:48:18 5    math_things          \n    506    2022-09-15 14:48:17 4    calc_things (*)      \n    505    2022-09-15 14:48:17 4    start                \n    13     2022-09-15 14:48:05 2    AllocateBucketGroup  \n    12     2022-09-15 14:48:05 2    addr_map_find        \n    11     2022-09-15 14:48:05 2    addr_map_insert      \n    10     2022-09-15 14:48:05 2    addr_map_compare_func\n    9      2022-09-15 14:48:05 2    addr_map_free_func   \n    # Shown 8 results\n\n</code></pre> <pre><code># Example: Find changes from a specific idb file (\"-i\"), showing the function hash and ea (\"-a\" adds additional columns to the output)\nalice@alice_PC$ lc hist show -i C:\\malware\\apts\\pc_keygenme_3.pe.idb -a calcrel_hash,func_ea\n    Change Time                Push Func name                   Func EA Func hash                       \n    ------ ------------------- ---- --------------------------- ------- --------------------------------\n    504    2022-09-15 14:48:16 3    keygen_window_dialog_proc_a 4011e2  420A0485EDB7C6774E1822953FB785D4\n    503    2022-09-15 14:48:16 3    display_keygen_window       401099  ACA673D198FBC0DF24C20A15FF7F25CE\n    # Shown 2 results\n\n</code></pre> <pre><code># Example: Show the first 4 changes (\"-m4\") with their input file(s) (in \"--chronological\" order; \"-a\" adds an additional column)\nalice@alice_PC$ lc hist show --chronological -m 4 -a input_path\n    Change Time                Push Func name             Input path                          \n    ------ ------------------- ---- --------------------- ------------------------------------\n    1      2022-09-15 14:47:44 1    .init_proc            /home/alice/work/pc_dwarf_arrays.elf\n    2      2022-09-15 14:47:44 1    _start                /home/alice/work/pc_dwarf_arrays.elf\n    3      2022-09-15 14:47:44 1    __do_global_dtors_aux /home/alice/work/pc_dwarf_arrays.elf\n    4      2022-09-15 14:47:44 1    frame_dummy           /home/alice/work/pc_dwarf_arrays.elf\n    # Shown 4 results (more are available...)\n\n</code></pre> <pre><code># Example: Show the last change by a user (\"-u\" indicates the user, \"-m1\" means show 1 change only, \"-a\" adds an additional column)\nalice@alice_PC$ lc hist show -ubob -m1 -a username\n    Change Time                Push Func name Username\n    ------ ------------------- ---- --------- --------\n    502    2022-09-15 14:48:15 2    fstat     bob     \n    # Shown 1 results (more are available...)\n\n</code></pre> <pre><code># Example: Show up to 4 changes (\"-m4\") between two dates (\"-t\" indicates a range of \"YYYY-MM-DD\" dates)\nalice@alice_PC$ lc hist show -m4 -t2022-09-02..2022-12-03\n    Change Time                Push Func name                  \n    ------ ------------------- ---- ---------------------------\n    507    2022-09-15 14:48:18 5    math_things                \n    506    2022-09-15 14:48:17 4    calc_things (*)            \n    505    2022-09-15 14:48:17 4    start                      \n    504    2022-09-15 14:48:16 3    keygen_window_dialog_proc_a\n    # Shown 4 results (more are available...)\n\n</code></pre> <pre><code># Example: Show up to 4 changes (\"-m4\") between two \"now\"-relative dates (\"-t\", from 2 weeks ago to 5 minutes ago) (\"-a\" adds an additional column)\nalice@alice_PC$ lc hist show -m4 -t-2w..-5M -a func_id\n    Change Time                Push Func name                   Func ID\n    ------ ------------------- ---- --------------------------- -------\n    507    2022-09-15 14:48:18 5    math_things                 506    \n    506    2022-09-15 14:48:17 4    calc_things (*)             506    \n    505    2022-09-15 14:48:17 4    start                       505    \n    504    2022-09-15 14:48:16 3    keygen_window_dialog_proc_a 504    \n    # Shown 4 results (more are available...)\n\n</code></pre> <pre><code># Example: Show up to 4 changes (\"-m4\") between two \"now\"-relative dates (\"-t\", from 2 weeks ago to 5 minutes ago) (\"-a\" adds an additional column), only select the last change for each function\nalice@alice_PC$ lc hist show -m4 -t-2w..-5M -a func_id --last-change\n    Change Time                Push Func name                   Func ID\n    ------ ------------------- ---- --------------------------- -------\n    507    2022-09-15 14:48:18 5    math_things                 506    \n    505    2022-09-15 14:48:17 4    start                       505    \n    504    2022-09-15 14:48:16 3    keygen_window_dialog_proc_a 504    \n    503    2022-09-15 14:48:16 3    display_keygen_window       503    \n    # Shown 4 results (more are available...)\n\n</code></pre> <pre><code># Example: Show up to 4 changes (\"-m4\"), occurring after a \"now\"-relative date (\"-t\", from 6 hours ago up to now)\nalice@alice_PC$ lc hist show -m4 -t-6H\n    Change Time                Push Func name                  \n    ------ ------------------- ---- ---------------------------\n    507    2022-09-15 14:48:18 5    math_things                \n    506    2022-09-15 14:48:17 4    calc_things (*)            \n    505    2022-09-15 14:48:17 4    start                      \n    504    2022-09-15 14:48:16 3    keygen_window_dialog_proc_a\n    # Shown 4 results (more are available...)\n\n</code></pre> <pre><code># Example: Show changes about a specific function name (\"-n\")\nalice@alice_PC$ lc hist show -n print_relocinfo\n    Change Time                Push Func name      \n    ------ ------------------- ---- ---------------\n    175    2022-09-15 14:48:08 2    print_relocinfo\n    # Shown 1 results\n\n</code></pre> <pre><code># Example: Show changes about a function name (\"-n\") searched by wildcard (\"like:...\")\nalice@alice_PC$ lc hist show -n \"like:%reloc%info%\"\n    Change Time                Push Func name                 \n    ------ ------------------- ---- --------------------------\n    179    2022-09-15 14:48:08 2    print_reloc_information_32\n    178    2022-09-15 14:48:08 2    print_reloc_information_64\n    177    2022-09-15 14:48:08 2    print_relocinfo_32        \n    176    2022-09-15 14:48:08 2    print_relocinfo_64        \n    175    2022-09-15 14:48:08 2    print_relocinfo           \n    # Shown 5 results\n\n</code></pre> <pre><code># Example: Show metadata details (\"--details\") in changes for a function (\"-n\"); this particular change added a new function\nalice@alice_PC$ lc hist show -n is_location_form --details\n    Change Time                Push Func name       \n    ------ ------------------- ---- ----------------\n    126    2022-09-15 14:48:07 2    is_location_form\n          &gt;&gt; Score\n          &gt;&gt;     - 0\n          &gt;&gt;     + 1445\n          &gt;&gt; Name\n          &gt;&gt;     - None\n          &gt;&gt;     + is_location_form\n          &gt;&gt; Prototype\n          &gt;&gt;     - \n          &gt;&gt;     + 0C303D08626F6F6C65616E0207\n          &gt;&gt; Member @ 0x8\n          &gt;&gt;     .type\n          &gt;&gt;         - None\n          &gt;&gt;         + 07\n          &gt;&gt;     .cmt\n          &gt;&gt;         - None\n          &gt;&gt;         + \n          &gt;&gt;     .rptcmt\n          &gt;&gt;         - None\n          &gt;&gt;         + \n          &gt;&gt; Insn operands @ 0+0x3\n          &gt;&gt;     - [&lt;no ops repr&gt;]\n          &gt;&gt;     + [op0=0xb, op1=0x0, op2=0x0, op3=0x0, op4=0x0, op5=0x0, op6=0x0, op7=0x0]\n          &gt;&gt; Insn operands @ 0+0x9\n          &gt;&gt;     - [&lt;no ops repr&gt;]\n          &gt;&gt;     + [op0=0xb, op1=0x0, op2=0x0, op3=0x0, op4=0x0, op5=0x0, op6=0x0, op7=0x0]\n          &gt;&gt; Insn operands @ 0+0xf\n          &gt;&gt;     - [&lt;no ops repr&gt;]\n          &gt;&gt;     + [op0=0xb, op1=0x0, op2=0x0, op3=0x0, op4=0x0, op5=0x0, op6=0x0, op7=0x0]\n          &gt;&gt; Insn operands @ 0+0x15\n          &gt;&gt;     - [&lt;no ops repr&gt;]\n          &gt;&gt;     + [op0=0xb, op1=0x0, op2=0x0, op3=0x0, op4=0x0, op5=0x0, op6=0x0, op7=0x0]\n          &gt;&gt; Insn operands @ 0+0x1b\n          &gt;&gt;     - [&lt;no ops repr&gt;]\n          &gt;&gt;     + [op0=0xb, op1=0x0, op2=0x0, op3=0x0, op4=0x0, op5=0x0, op6=0x0, op7=0x0]\n          &gt;&gt; Insn operands @ 0+0x21\n          &gt;&gt;     - [&lt;no ops repr&gt;]\n          &gt;&gt;     + [op0=0xb, op1=0x0, op2=0x0, op3=0x0, op4=0x0, op5=0x0, op6=0x0, op7=0x0]\n          &gt;&gt; Insn operands @ 0+0x27\n          &gt;&gt;     - [&lt;no ops repr&gt;]\n          &gt;&gt;     + [op0=0xb, op1=0x0, op2=0x0, op3=0x0, op4=0x0, op5=0x0, op6=0x0, op7=0x0]\n    # Shown 1 results\n</code></pre>"},{"location":"user-guide/lumina/lc_user_manual.html#hist-pushes","title":"<code>hist pushes</code>","text":"<p>hist pushes [OPTION]</p> <p>Shows pushes to the Lumina server.</p> <p>Options: | Short form | Long form | Description | | ---- | ---- | ---- | | <code>-a</code> | <code>--additional-fields LIST</code> |  Comma-delimited list of additional info to display (<code>license_name</code>, <code>license_email</code>, <code>license_id</code>, <code>all</code>) | | <code>-t</code> | <code>--time-range TIMESTAMP</code> |  timestamp | | <code>-u</code> | <code>--username USERNAME</code> |  username(s) to operate on | | <code>-l</code> | <code>--license-id LICENSE</code> |  license ID (XX-XXXX-XXXX-XX format) to operate on | | <code>-m</code> | <code>--max-entries NUMBER</code> |  maximum number of entries to operate on (defaults to 100) | | <code>None</code> | <code>--chronological</code> |  Display entries in chronological order (defaults to reverse-chronological).  |</p> <p>Examples:</p> <pre><code>alice@alice_PC$ lc hist pushes \n    Push ID Time                User name IDB path                                \n    ------- ------------------- --------- ----------------------------------------\n    5       2022-09-15 14:48:18 alice     /home/alice/work/pc_math_b_64.elf.i64   \n    4       2022-09-15 14:48:17 alice     /home/alice/work/pc_math_a_64.elf.i64   \n    3       2022-09-15 14:48:16 damian    C:\\malware\\apts\\pc_keygenme_3.pe.idb    \n    2       2022-09-15 14:48:05 bob       /Users/bob/idbs/pc_dwarfdump.elf.idb    \n    1       2022-09-15 14:47:44 alice     /home/alice/work/pc_dwarf_arrays.elf.idb\n    # Shown 5 results\n\n</code></pre> <pre><code># Example: List all pushes from a specific license ID\nalice@alice_PC$ lc hist pushes -l BB-0B0B-AC8E-01 -a license_email\n    Push ID Time                User name License email IDB path                            \n    ------- ------------------- --------- ------------- ------------------------------------\n    2       2022-09-15 14:48:05 bob       bob@acme.com  /Users/bob/idbs/pc_dwarfdump.elf.idb\n    # Shown 1 results\n\n</code></pre> <pre><code># Example: List all pushes from licenses with IDs matching a pattern (\"-a\" adds an additional column)\nalice@alice_PC$ lc hist pushes -l like:AA-% -a license_id\n    Push ID Time                User name License ID      IDB path                                \n    ------- ------------------- --------- --------------- ----------------------------------------\n    5       2022-09-15 14:48:18 alice     AA-A11C-AC8E-01 /home/alice/work/pc_math_b_64.elf.i64   \n    4       2022-09-15 14:48:17 alice     AA-A11C-AC8E-01 /home/alice/work/pc_math_a_64.elf.i64   \n    1       2022-09-15 14:47:44 alice     AA-A11C-AC8E-01 /home/alice/work/pc_dwarf_arrays.elf.idb\n    # Shown 3 results\n\n</code></pre> <pre><code># Example: Show the first push\nalice@alice_PC$ lc hist pushes --chronological -m 1\n    Push ID Time                User name IDB path                                \n    ------- ------------------- --------- ----------------------------------------\n    1       2022-09-15 14:47:44 alice     /home/alice/work/pc_dwarf_arrays.elf.idb\n    # Shown 1 results (more are available...)\n\n</code></pre> <pre><code># Example: List all pushes between two timestamps\nalice@alice_PC$ lc hist pushes -t\"2022-09-07 10:20:00..2022-12-31\"\n    Push ID Time                User name IDB path                                \n    ------- ------------------- --------- ----------------------------------------\n    5       2022-09-15 14:48:18 alice     /home/alice/work/pc_math_b_64.elf.i64   \n    4       2022-09-15 14:48:17 alice     /home/alice/work/pc_math_a_64.elf.i64   \n    3       2022-09-15 14:48:16 damian    C:\\malware\\apts\\pc_keygenme_3.pe.idb    \n    2       2022-09-15 14:48:05 bob       /Users/bob/idbs/pc_dwarfdump.elf.idb    \n    1       2022-09-15 14:47:44 alice     /home/alice/work/pc_dwarf_arrays.elf.idb\n    # Shown 5 results\n\n</code></pre> <pre><code># Example: List all pushes from two users (\"-a\" adds an additional column)\nalice@alice_PC$ lc hist pushes -u\"bob damian\" -a\"license_name license_id\"\n    Push ID Time                User name License name License ID      IDB path                            \n    ------- ------------------- --------- ------------ --------------- ------------------------------------\n    3       2022-09-15 14:48:16 damian    Damian       DD-DA81-A000-01 C:\\malware\\apts\\pc_keygenme_3.pe.idb\n    2       2022-09-15 14:48:05 bob       Bob          BB-0B0B-AC8E-01 /Users/bob/idbs/pc_dwarfdump.elf.idb\n    # Shown 2 results\n</code></pre>"},{"location":"user-guide/lumina/lc_user_manual.html#hist-del","title":"<code>hist del</code>","text":"<p>hist del [OPTION]</p> <p>Deletes history and metadata for functions.</p> <p>Options: | Short form | Long form | Description | | ---- | ---- | ---- | | <code>-s</code> | <code>--silent</code> |  Do not ask for confirmation before deleting history | | <code>-l</code> | <code>--license-id LICENSE</code> |  license ID (XX-XXXX-XXXX-XX format) to operate on | | <code>-r</code> | <code>--history-id-range RANGE</code> |  history ID range(s) to operate on (<code>start0..end0 [...]</code>) | | <code>-t</code> | <code>--time-range RANGE</code> |  time range to operate on (<code>start..end</code>) see the appendix | | <code>-i</code> | <code>--idb IDB</code> |  IDB name(s) to operate on | | <code>-f</code> | <code>--input FILE</code> |  input file(s) to operate on | | <code>-u</code> | <code>--username USERNAME</code> |  username(s) to operate on | | <code>-n</code> | <code>--func NAME</code> |  function name(s) to operate on | | <code>-h</code> | <code>--input-hash HASH</code> |  input file hash(es) to operate on | | <code>-p</code> | <code>--pushes-id-range RANGE</code> |  Pushes ID range(s) to operate on (<code>start0..end0 [...]</code>) | | <code>-c</code> | <code>--calcrel-hash HASH</code> |  function hash(es) to operate on | | <code>None</code> | <code>--last-change</code> |  Select only the last change for a function (which speeds up execution)  |</p> <p>Examples:</p> <pre><code># Example: Display the last 10 changes, with their input file(s) and function ID(s)\nalice@alice_PC$ show -m10 -a input_path\n    Change Time                Push Func name                   Func ID Input path                       \n    ------ ------------------- ---- --------------------------- ------- ---------------------------------\n    507    2022-09-15 14:48:18 5    math_things                 506     /home/alice/work/pc_math_b_64.elf\n    506    2022-09-15 14:48:17 4    calc_things (*)             506     /home/alice/work/pc_math_a_64.elf\n    505    2022-09-15 14:48:17 4    start                       505     /home/alice/work/pc_math_a_64.elf\n    504    2022-09-15 14:48:16 3    keygen_window_dialog_proc_a 504     C:\\malware\\apts\\pc_keygenme_3.pe \n    503    2022-09-15 14:48:16 3    display_keygen_window       503     C:\\malware\\apts\\pc_keygenme_3.pe \n    502    2022-09-15 14:48:15 2    fstat                       502     /Users/bob/idbs/pc_dwarfdump.elf \n    501    2022-09-15 14:48:15 2    __umoddi3                   501     /Users/bob/idbs/pc_dwarfdump.elf \n    500    2022-09-15 14:48:15 2    __udivdi3                   500     /Users/bob/idbs/pc_dwarfdump.elf \n    499    2022-09-15 14:48:14 2    dwarf_get_ADDR_name         499     /Users/bob/idbs/pc_dwarfdump.elf \n    498    2022-09-15 14:48:14 2    dwarf_get_FRAME_name        498     /Users/bob/idbs/pc_dwarfdump.elf \n    # Shown 10 results (more are available...)\n\n</code></pre> <pre><code># Example: Delete all changes for functions matching a pattern\nalice@alice_PC$ lc hist del -s -n like:%dwarf%\n    267 entries deleted from history\n\nalice@alice_PC$ hist show -m10 -a input_path,func_id\n    Change Time                Push Func name                   Func ID Input path                       \n    ------ ------------------- ---- --------------------------- ------- ---------------------------------\n    507    2022-09-15 14:48:18 5    math_things                 506     /home/alice/work/pc_math_b_64.elf\n    506    2022-09-15 14:48:17 4    calc_things (*)             506     /home/alice/work/pc_math_a_64.elf\n    505    2022-09-15 14:48:17 4    start                       505     /home/alice/work/pc_math_a_64.elf\n    504    2022-09-15 14:48:16 3    keygen_window_dialog_proc_a 504     C:\\malware\\apts\\pc_keygenme_3.pe \n    503    2022-09-15 14:48:16 3    display_keygen_window       503     C:\\malware\\apts\\pc_keygenme_3.pe \n    502    2022-09-15 14:48:15 2    fstat                       502     /Users/bob/idbs/pc_dwarfdump.elf \n    501    2022-09-15 14:48:15 2    __umoddi3                   501     /Users/bob/idbs/pc_dwarfdump.elf \n    500    2022-09-15 14:48:15 2    __udivdi3                   500     /Users/bob/idbs/pc_dwarfdump.elf \n    474    2022-09-15 14:48:14 2    free_macro_stack            474     /Users/bob/idbs/pc_dwarfdump.elf \n    468    2022-09-15 14:48:14 2    print_line_detail           468     /Users/bob/idbs/pc_dwarfdump.elf \n    # Shown 10 results (more are available...)\n\n</code></pre> <pre><code># Example: Delete all changes stemming from a specific file\nalice@alice_PC$ lc hist del -s -f/Users/bob/idbs/pc_dwarfdump.elf\n    228 entries deleted from history\n\n</code></pre> <pre><code># Example: List the changes from pushes 1 to 5 (not included), showing their input file(s)\nalice@alice_PC$ lc show -p1..5 -a input_path\n    Change Time                Push Func name                   Input path                          \n    ------ ------------------- ---- --------------------------- ------------------------------------\n    506    2022-09-15 14:48:17 4    math_things                 /home/alice/work/pc_math_a_64.elf   \n    505    2022-09-15 14:48:17 4    start                       /home/alice/work/pc_math_a_64.elf   \n    504    2022-09-15 14:48:16 3    keygen_window_dialog_proc_a C:\\malware\\apts\\pc_keygenme_3.pe    \n    503    2022-09-15 14:48:16 3    display_keygen_window       C:\\malware\\apts\\pc_keygenme_3.pe    \n    7      2022-09-15 14:47:44 1    __do_global_ctors_aux       /home/alice/work/pc_dwarf_arrays.elf\n    6      2022-09-15 14:47:44 1    __libc_csu_init             /home/alice/work/pc_dwarf_arrays.elf\n    5      2022-09-15 14:47:44 1    main                        /home/alice/work/pc_dwarf_arrays.elf\n    4      2022-09-15 14:47:44 1    frame_dummy                 /home/alice/work/pc_dwarf_arrays.elf\n    3      2022-09-15 14:47:44 1    __do_global_dtors_aux       /home/alice/work/pc_dwarf_arrays.elf\n    2      2022-09-15 14:47:44 1    _start                      /home/alice/work/pc_dwarf_arrays.elf\n    1      2022-09-15 14:47:44 1    .init_proc                  /home/alice/work/pc_dwarf_arrays.elf\n    # Shown 11 results\n\n</code></pre> <pre><code># Example: Delete one single change\nalice@alice_PC$ lc hist del -s -r505..506\n    1 entries deleted from history\n\n</code></pre> <pre><code># Example: Delete all the changes from push 1\nalice@alice_PC$ lc hist del -s -p 1..2\n    7 entries deleted from history\n\nalice@alice_PC$ hist show -a username\n    Change Time                Push Func name                   Username\n    ------ ------------------- ---- --------------------------- --------\n    507    2022-09-15 14:48:18 5    math_things                 alice   \n    506    2022-09-15 14:48:17 4    calc_things (*)             alice   \n    504    2022-09-15 14:48:16 3    keygen_window_dialog_proc_a damian  \n    503    2022-09-15 14:48:16 3    display_keygen_window       damian  \n    # Shown 4 results\n\n</code></pre> <pre><code># Example: Delete all changes by a user\nalice@alice_PC$ lc hist del -s -udamian\n    2 entries deleted from history\n\nalice@alice_PC$ hist show -a func_id\n    Change Time                Push Func name       Func ID\n    ------ ------------------- ---- --------------- -------\n    507    2022-09-15 14:48:18 5    math_things     506    \n    506    2022-09-15 14:48:17 4    calc_things (*) 506    \n    # Shown 2 results\n\n</code></pre> <pre><code># Example: Delete the last change for a function\nalice@alice_PC$ lc hist del -s --func math_things --last-change\n    1 entries deleted from history\n\nalice@alice_PC$ hist show -a func_id\n    Change Time                Push Func name   Func ID\n    ------ ------------------- ---- ----------- -------\n    506    2022-09-15 14:48:17 4    calc_things 506    \n    # Shown 1 results\n\n</code></pre> <pre><code># Example: Delete all remaining changes for a function by name\nalice@alice_PC$ lc hist del -s --func calc_things\n    1 entries deleted from history\n\nalice@alice_PC$ hist show\n    # Shown 0 results\n</code></pre>"},{"location":"user-guide/lumina/lc_user_manual.html#various-information","title":"Various information","text":""},{"location":"user-guide/lumina/lc_user_manual.html#info","title":"<code>info</code>","text":"<p>info</p> <p>Shows lumina connection information.</p> <p>Example:</p> <pre><code>alice@alice_PC$ lc info \nHex-Rays Lumina Server v8.0\nLumina time: 2022-08-29 10:13:37, up since 2022-08-21 21:00:05\nMAC address: FF:32:67:FF:D3:00\nClient name: alice *ADMIN*\nClient host: 127.0.0.1\n</code></pre>"},{"location":"user-guide/lumina/lc_user_manual.html#users","title":"<code>users</code>","text":"<p>users</p> <p>Shows users.</p> <p>Example:</p> <pre><code>alice@alice_PC$ lc users \nLastActive Adm Login  License         User name                   Email             \n---------- --- ------ --------------- --------------------------- ------------------\n2022-08-29 *   bob    XX-XXXX-XXXX-XX bob                         bob@acme.com\n2022-08-29 *   alice  XX-XXXX-XXXX-XX alice                       alice@acme.com\n2022-08-27     damian XX-XXXX-XXXX-XX damian                      damian@acme.com\n</code></pre>"},{"location":"user-guide/lumina/lc_user_manual.html#stats","title":"<code>stats</code>","text":"<p>stats [OPTION]</p> <p>Shows the numbers of functions, pushes, history records, IDBs and input files stored in the Lumina server database.</p> <p>Options: | Short form | Long form | Description | | ---- | ---- | ---- | | <code>-u</code> | <code>--username USERNAME</code> |  username(s) to operate on  |</p> <p>Examples:</p> <pre><code>alice@alice_PC$ lc stats \n    Consolidated statistics from lumina_server:\n    Number of functions: 4\n    Number of pushes: 5\n    Number of history records: 6\n    Number of IDBs: 3\n    Number of input files: 3\n    ---------------------------------------------\n\n</code></pre> <pre><code># Example: Retrieve the statistics for a list of users\nalice@alice_PC$ lc stats -ualice,bob,russ\n    Statistics for alice:\n    Number of functions: 2\n    Number of pushes: 3\n    Number of history records: 4\n    Number of IDBs: 1\n    Number of input files: 1\n    ---------------------------------------------\n    Statistics for bob:\n    Number of functions: 1\n    Number of pushes: 1\n    Number of history records: 1\n    Number of IDBs: 1\n    Number of input files: 1\n    ---------------------------------------------\n</code></pre>"},{"location":"user-guide/lumina/lc_user_manual.html#administrative-commands","title":"Administrative commands","text":"<p>These commands require that the user executing them has admin privileges.</p>"},{"location":"user-guide/lumina/lc_user_manual.html#managing-users","title":"Managing users","text":"<p>User management will depend whether the Lumina server is configured to work with its own set of users, or delegating user management to the Teams server.</p> <p>In the latter case, you should use the <code>hv</code> command-line tool to administer the Teams server.</p>"},{"location":"user-guide/lumina/lc_user_manual.html#locally-managing-users","title":"Locally managing users","text":"<p>The following commands allow the administrator to manipulate users known to the Lumina server (provided of course the Lumina server doesn't delegate users management to the Teams server)</p>"},{"location":"user-guide/lumina/lc_user_manual.html#user-add","title":"<code>user add</code>","text":"<p>user add USERNAME EMAIL IS_ADMIN LICENSE_ID</p> <p>Adds a user.</p> <p>The <code>passwd</code> command must be used after creating a user; otherwise the new user will not be able to login to the Lumina server and use it.</p> <code>USERNAME</code> The username of the user. <code>EMAIL</code> The email address of the user. <code>IS_ADMIN</code> Should be 1 if the user is admin, otherwise 0. <code>LICENSE_ID</code> The license of the user. <p>Example:</p> <pre><code>alice@alice_PC$ lc user add damiank damian@acme.com 0 XX-XXXX-XXXX-XX\n</code></pre>"},{"location":"user-guide/lumina/lc_user_manual.html#user-edit","title":"<code>user edit</code>","text":"<p>user edit USERNAME EMAIL IS_ADMIN LICENSE_ID</p> <p>Edits a user definition.</p> <code>USERNAME</code> The username of the user to modify. <code>EMAIL</code> The email address of the user. <code>IS_ADMIN</code> Should be 1 if the user is admin, otherwise 0. <code>LICENSE_ID</code> The license of the user. <p>Example:</p> <pre><code># Example: For the given username, set the email, admin flag and license ID\nalice@alice_PC$ lc user edit damiank damiank@acme.com 0 XX-XXXX-XXXX-XX\n</code></pre>"},{"location":"user-guide/lumina/lc_user_manual.html#user-del","title":"<code>user del</code>","text":"<p>user del USERNAME EMAIL LICENSE_ID</p> <p>Deletes a user.</p> <code>USERNAME</code> The name of the user to delete. <code>EMAIL</code> The email address of the user. <code>LICENSE_ID</code> The license of the user. <p>Example:</p> <pre><code>alice@alice_PC$ lc user del damiank damiank@acme.com XX-XXXX-XXXX-XX\n</code></pre>"},{"location":"user-guide/lumina/lc_user_manual.html#passwd","title":"<code>passwd</code>","text":"<p>passwd PASS USER</p> <p>Modifies the password for a user.</p> <code>PASS</code> The new password. <code>USER</code> The username whose password should be changed Only admins can change other users' passwords. <p>Example:</p> <pre><code>alice@alice_PC$ lc passwd secret_password john\n</code></pre>"},{"location":"user-guide/lumina/lc_user_manual.html#managing-sessions","title":"Managing sessions","text":""},{"location":"user-guide/lumina/lc_user_manual.html#session-list","title":"<code>session list</code>","text":"<p>session list</p> <p>Lists the current connections to the Lumina server. For each connection, the currently executed query (if any) is shown. For each connection, the currently executed query (if any) is shown.</p> <p>Example:</p> <pre><code>alice@alice_PC$ lc session list \nid=1642 peer=\"127.0.0.1\", user=\"...\", license=\"...\", e-mail=\"...\", established=\"2022-08-16 17:13:21\"\ncurrent_query=\"INSERT INTO pushes (fk_idb, fk_user) VALUES (?, ?)\" (0msec)\n</code></pre>"},{"location":"user-guide/lumina/lc_user_manual.html#session-kill","title":"<code>session kill</code>","text":"<p>session kill ID</p> <p>Kills an existing connection to the Lumina server.</p> <code>ID</code> The connection to kill, as shown by the &lt;&gt; command <p>Example:</p> <pre><code>alice@alice_PC$ lc session list\nid=1 peer=\"127.0.0.1\", user=\"...\", license=\"...\", e-mail=\"...\", established=\"2022-09-20 16:47:07\" current_query=\"\" (0msec)\nalice@alice_PC$ lc session kill 1\nConnection killed\nalice@alice_PC$ lc session list\nNo connections.\n</code></pre>"},{"location":"user-guide/lumina/lc_user_manual.html#concepts","title":"Concepts","text":""},{"location":"user-guide/lumina/lc_user_manual.html#what-is-the-lumina-server","title":"What is the Lumina server","text":"<p>The Lumina server is a \"functions metadata\" repository.</p> <p>It is a place where IDA users can push, and pull such metadata, to ease their reverse-engineering work: metadata can be extracted from existing projects, and re-applied effortlessly to new projects, thereby reducing (sometimes dramatically) the amount of time needed to analyze binaries.</p>"},{"location":"user-guide/lumina/lc_user_manual.html#functions-metadata","title":"Functions metadata","text":"<p>The Lumina server associates \"function metadata\" to functions, by means of a (<code>md5</code>) hash of those functions: whenever it wants to push information to, or pull information from the server, IDA will first have to compute hashes of the functions it wants to retrieve metadata for, and send those hashes to the Lumina server.</p> <p>Similarly, when IDA pushes information to the Lumina server, it will first compute hashes for the corresponding functions, extract the metadata corresponding to those from the <code>.idb</code> file, and send those hash+metadata pairs to the server.</p>"},{"location":"user-guide/lumina/lc_user_manual.html#metadata-contents","title":"Metadata contents","text":"<p>Metadata about functions can include:</p> <ul> <li>function name</li> <li>function address</li> <li>function size</li> <li>function prototype</li> <li>function [repeatable] comments</li> <li>instruction-specific [repeatable] comments</li> <li>anterior/posterior (i.e., \"extra\") comments</li> <li>user-defined \"stack points\" in the function\u2019s frame</li> <li>the function frame description and stack variables</li> <li>instructions operands representations</li> </ul>"},{"location":"user-guide/lumina/lc_user_manual.html#pushing-overriding-metadata","title":"Pushing &amp; overriding metadata","text":"<p>When a user pushes metadata about a function whose <code>md5</code> hash isn\u2019t present in the database, the Lumina server will simply create a new record for it.</p> <p>However, when a user pushes metadata about a function whose <code>md5</code> hash (and associated metadata) is already present in the database, the Lumina server will attempt to \"score\" the quality of the old metadata and the quality of the new metadata. If the score of the new metadata is higher, the new function metadata will override the previous one.</p> <p>{% hint style=\"info\" %} When a user asks IDA to push all functions to the Lumina server, IDA will automatically skip some functions: those that still have a \"dummy\" name (e.g., <code>sub_XXXX</code>), or that are below a certain size threshold (i.e., 32 bytes) will be ignored.</p>"},{"location":"user-guide/lumina/lc_user_manual.html#metadata-history","title":"Metadata history","text":"<p>The Lumina server retains a history of the metadata associated to functions. Using the <code>lc</code> utility, it is possible to dig into that history, and view changes (detailed diffs, too.)</p>"},{"location":"user-guide/lumina/lc_user_manual.html#file-contents","title":"File contents","text":"<p>It\u2019s worth pointing out that when pushing metadata to the Lumina server, IDA will not push the binary file itself. Only the following metadata about the file itself will be sent:</p> <ul> <li>the name of the input file</li> <li>the name of the IDB file</li> <li>a <code>md5</code> hash of the input file</li> </ul> <p>The Lumina server cannot therefore be used as a backup/repository for binary files &amp; IDBs (that is the role of the <code>vault_server</code>)</p>"},{"location":"user-guide/lumina/lc_user_manual.html#commands_1","title":"Commands","text":""},{"location":"user-guide/lumina/lc_user_manual.html#string-patterns","title":"String patterns","text":"<p>Options that take strings as inputs can be enhanced through wildcards. The following wildcards are available:</p> <p><code>%</code>\\ represents zero, one or multiple characters.</p> <p><code>_</code>\\ represents one character.</p> <p>To use wildcards in a string, it must be prefixed with <code>like:</code> e.g. <code>-n like:%main%</code>.</p>"},{"location":"user-guide/lumina/lc_user_manual.html#timerange-formats","title":"Timerange formats","text":"<p>For timeranges, the following syntaxes are supported:</p> <ul> <li><code>&lt;ts&gt;..&lt;ts&gt;</code> (from timestamp to (but not including) timestamp)</li> <li><code>&lt;ts&gt;</code> (only one timestamp)</li> </ul> <p>Where <code>&lt;ts&gt;</code> can be of the form:</p> <ul> <li><code>yyyy-mm-dd HH:MM:SS</code>: e.g., <code>2022-09-12 11:38:22</code></li> <li><code>yyyy-mm-dd</code>: e.g., <code>2020-03-12</code></li> <li><code>+|-&lt;count&gt;&lt;unit&gt;</code>: this is a \"now-relative\" timestamp, where <code>&lt;unit&gt;</code> must be one of <code>w</code>, <code>d</code>, <code>H</code>, <code>M</code>, <code>S</code> for weeks, days, hours, minutes or seconds respectively. E.g., <code>-4d</code>, <code>+5w</code>, <code>-8H</code>, <code>+1H</code>, \u2026\u200b</li> </ul> <p>when using the <code>&lt;ts&gt;</code> syntax (i.e., only 1 timestamp is provided, not an actual range), the final range will be either \"from now to \\\", or \"from \\ to now\", depending on whether <code>&lt;ts&gt;</code> is before, or after, the present time."},{"location":"user-guide/lumina/lc_user_manual.html#speed-of-retrieving-changes","title":"Speed of retrieving changes","text":"<p>Although it may seem like a simple operation, <code>lc hist show</code> is actually a very demanding one: by default it will have to fetch bits of information from multiple tables (e.g., in order to provide information about which change was superseded by a later one.)</p> <p>This can be significantly sped up through the use of <code>--last-change</code>: this option lets the server issue a much simpler query, resulting in significantly reduced processing time.</p>"},{"location":"user-guide/lumina/lc_user_manual.md.in/admin.html","title":"Administrative commands","text":"<p>These commands require that the user executing them has admin privileges.</p>"},{"location":"user-guide/lumina/lc_user_manual.md.in/admin.html#managing-users","title":"Managing users","text":"<p>User management will depend whether the Lumina server is configured to work with its own set of users, or delegating user management to the Teams server.</p> <p>In the latter case, you should use the <code>hv</code> command-line tool to administer the Teams server.</p>"},{"location":"user-guide/lumina/lc_user_manual.md.in/admin.html#locally-managing-users","title":"Locally managing users","text":"<p>The following commands allow the administrator to manipulate users known to the Lumina server (provided of course the Lumina server doesn't delegate users management to the Teams server)</p> <p>$sub3(refs/user-add.md) $sub3(refs/user-edit.md) $sub3(refs/user-del.md) $sub3(refs/passwd.md)</p>"},{"location":"user-guide/lumina/lc_user_manual.md.in/admin.html#managing-sessions","title":"Managing sessions","text":"<p>$sub2(refs/session-list.md) $sub2(refs/session-kill.md)</p>"},{"location":"user-guide/lumina/lc_user_manual.md.in/info.html","title":"Various information","text":"<p>$sub1(refs/info.md) $sub1(refs/users.md) $sub1(refs/stats.md)</p>"},{"location":"user-guide/lumina/lc_user_manual.md.in/intro.html","title":"Introduction","text":"<p>The lc executable provides a command-line interface to interact with a Lumina server and its contents.</p> <p>NOTE: virtually all the commands described in this document, require administrator rights; \"regular\" users will typically not have the necessary privileges.</p>"},{"location":"user-guide/lumina/lc_user_manual.md.in/lc_user_manual.html","title":"lc command reference manual","text":"<p>$sub1(intro.md) $sub1(options.md)</p>"},{"location":"user-guide/lumina/lc_user_manual.md.in/lc_user_manual.html#commands","title":"Commands","text":"<p>The following commands are accepted by lc:</p> <p>$sub2(md.md) $sub2(info.md) $sub2(admin.md)</p>"},{"location":"user-guide/lumina/lc_user_manual.md.in/lc_user_manual.html#concepts","title":"Concepts","text":"<p>$sub2(../../../shared.in/lumina/concepts/lumina.md)</p>"},{"location":"user-guide/lumina/lc_user_manual.md.in/lc_user_manual.html#commands_1","title":"Commands","text":""},{"location":"user-guide/lumina/lc_user_manual.md.in/lc_user_manual.html#string-patterns","title":"String patterns","text":"<p>Options that take strings as inputs can be enhanced through wildcards. The following wildcards are available:</p> <p><code>%</code>\\ represents zero, one or multiple characters.</p> <p><code>_</code>\\ represents one character.</p> <p>To use wildcards in a string, it must be prefixed with <code>like:</code> e.g. <code>-n like:%main%</code>.</p>"},{"location":"user-guide/lumina/lc_user_manual.md.in/lc_user_manual.html#timerange-formats","title":"Timerange formats","text":"<p>For timeranges, the following syntaxes are supported:</p> <ul> <li><code>&lt;ts&gt;..&lt;ts&gt;</code> (from timestamp to (but not including) timestamp)</li> <li><code>&lt;ts&gt;</code> (only one timestamp)</li> </ul> <p>Where <code>&lt;ts&gt;</code> can be of the form:</p> <ul> <li><code>yyyy-mm-dd HH:MM:SS</code>: e.g., <code>2022-09-12 11:38:22</code></li> <li><code>yyyy-mm-dd</code>: e.g., <code>2020-03-12</code></li> <li><code>+|-&lt;count&gt;&lt;unit&gt;</code>: this is a \"now-relative\" timestamp, where <code>&lt;unit&gt;</code> must be one of <code>w</code>, <code>d</code>, <code>H</code>, <code>M</code>, <code>S</code> for weeks, days, hours, minutes or seconds respectively. E.g., <code>-4d</code>, <code>+5w</code>, <code>-8H</code>, <code>+1H</code>, \u2026\u200b</li> </ul> <p>when using the <code>&lt;ts&gt;</code> syntax (i.e., only 1 timestamp is provided, not an actual range), the final range will be either \"from now to \\\", or \"from \\ to now\", depending on whether <code>&lt;ts&gt;</code> is before, or after, the present time."},{"location":"user-guide/lumina/lc_user_manual.md.in/lc_user_manual.html#speed-of-retrieving-changes","title":"Speed of retrieving changes","text":"<p>Although it may seem like a simple operation, <code>lc hist show</code> is actually a very demanding one: by default it will have to fetch bits of information from multiple tables (e.g., in order to provide information about which change was superseded by a later one.)</p> <p>This can be significantly sped up through the use of <code>--last-change</code>: this option lets the server issue a much simpler query, resulting in significantly reduced processing time.</p>"},{"location":"user-guide/lumina/lc_user_manual.md.in/md.html","title":"Operating with metadata","text":"<p>Commands in this section let users view metadata stored in the Lumina server and their history.</p> <p>$sub1(refs/hist-show.md) $sub1(refs/hist-pushes.md) $sub1(refs/hist-del.md)</p>"},{"location":"user-guide/lumina/lc_user_manual.md.in/options.html","title":"Command-line options","text":"<p>-h, --host HOSTNAME[:PORT]\\ Lumina host name and port (if port is omitted, it defaults to 443)</p> <p>-u USERNAME\\ specify username</p> <p>-p PASSWORD\\ specify password</p> <p>-v, --verbose\\ verbose output</p> <p>In order to connect to a Lumina server, lc must at least be provided with a hostname and a valid user-password pair.</p> <p>In order to keep the various commands' syntax as clear as possible, we will omit the login options from commands for the rest of this manual.</p> <p>Other options exists, specific to each lc command (see Commands).</p>"},{"location":"user-guide/plugins/how-to-write-your-own-plugin.html","title":"How to write your own plugin?","text":"<p>Do you want to create custom plugins and wonder where to start? Check our tutorials based on the language of your choice:</p> Create plugins with C++ SDKhow-to-create-a-plugin.mdCreate plugins with IDAPythonhow-to-create-a-plugin.md"},{"location":"user-guide/plugins/open-plugin-architecture.html","title":"Open Plugin Architecture","text":"<p>IDA\u2019s functionality can easily be extended by the use of programmable plugins. Plugins may be written to automate routine tasks, for example, to enhance the analysis of hostile code or to add specific functionality to our disassembler. You can write plugins in C++ with our SDK or in Python with IDAPython API. </p> <p>Key plugin capabilities: - Integration with hotkeys: plugins can be linked to specific hotkeys or menu items for quick access - Access to IDB: they have full access to the IDA database, allowing them to examine or modify the program or use Input/Output functions.</p>"},{"location":"user-guide/plugins/open-plugin-architecture.html#where-can-i-find-sample-plugins","title":"Where can I find sample plugins?","text":"<ul> <li>Examples shipped with IDA C++ SDK: Our SDK contains +60 sample plugins, including decompiler plugins (you can find them all inside the SDK directory, in the <code>plugins</code> folder), as well as source code to processor modules, loaders, and header files. You can download the latest version of IDA SDK from Download Center in My Hex-Rays portal, under SDK and Utilities.</li> <li>Plugins shipped with your IDA instance: Explore the <code>plugins</code> directory in your IDA installation folder for plugins shipped out-of-the-box. You can run them through Edit -&gt; Plugins submenu or via hotkeys. </li> <li>Hex-Rays community plugins: To access a vast collection of community-developed plugins, visit our plugins repository. Here, you can explore additional plugins you may want to install, submit your own, and even participate in our annual plugin contest.</li> </ul> <p>Other resources: - Independent Plugin List from various resources.</p>"},{"location":"user-guide/plugins/plugin-contest.html","title":"Plugin Contest","text":"<p>Analyzing software in general and reverse-engineering in specifically are difficult. It is challenging even with a first-class tool like IDA: quite frequently, the limitations of the tool reveal themselves. That's why IDA can be programmed in multiple ways: with the built-in scriptable language, with Python 3, and plugins in C/C++.</p>"},{"location":"user-guide/plugins/plugin-contest.html#plugin-contest-in-a-nutshell","title":"Plugin contest in a nutshell:","text":"<ul> <li>Create an innovative and useful extension of our products and win the contest!</li> <li>Three cash prizes are on the stake:\\   The first place is 3000 USD, the second place is 2000 USD, and the third place is 1000 USD.</li> <li>Who can participate: all IDA license holders.</li> </ul> <p>Want to know more? Check our contest rules</p>"},{"location":"user-guide/plugins/plugin-options.html","title":"Plugin options","text":""},{"location":"user-guide/plugins/plugin-options.html#plugin-options","title":"Plugin options","text":"<p>The -O command line switch allows the user to pass options to the plugins. A plugin which uses options should call the get_plugin_options() function to get them.</p> <p>Since there may be many plugins written by independent programmers, each options will have a prefix -O in front of the plugin name.</p> <p>For example, a plugin named \\\"decomp\\\" should expect its parameters to be in the following format:</p> <pre><code>        -Odecomp:option1:option2:option3\n</code></pre> <p>In this case, get_plugin_options(\\\"decomp\\\") will return the \\\"option1:option2:option3\\\" part of the options string.</p> <p>If there are several -O options in the command line, they will be concatenated with \\':\\' between them.</p> <p>List of plugins recognizing \\'-O\\' switch - Conversion option - Objective-C - Lumina - Licensing - Pdb - Rust - Golang - Swift - hexrays </p> <p>This switch is not available in the IDA Home edition.</p>"},{"location":"user-guide/plugins/plugins-shipped-with-ida.html","title":"Plugins Shipped with IDA","text":"<p>IDA natively is shipped with repository of plugins, that are inside your IDA folder. You do not need to install them separately, but in this section you'll find guides on how to use their basic features.</p> <p>List of plugins shipped with IDA: - Rust - Swift - Golang - dscu - Objective-C analysis - picture_search - gooMBA - IDAClang</p>"},{"location":"user-guide/plugins/plugins-shipped-with-ida/index.html","title":"Plugins Shipped with IDA","text":""},{"location":"user-guide/plugins/plugins-shipped-with-ida/borland-rtti-descriptors-plugin.html","title":"Borland RTTI descriptors plugin","text":""},{"location":"user-guide/plugins/plugins-shipped-with-ida/borland-rtti-descriptors-plugin.html#borland-rtti-descriptors-plugin_1","title":"Borland RTTI descriptors plugin","text":"<p>This plugin allows you to create/delete/view Borland RTTI descriptors.</p> <p>These descriptors appear in programs written on BCC++ or Borland C++ Builder or Borland Delphi.</p> <p>The plugin is available for 32 bits binaries for PE or OMF format.</p>"},{"location":"user-guide/plugins/plugins-shipped-with-ida/borland-rtti-descriptors-plugin.html#dialog-box","title":"Dialog box","text":"<pre><code>  - List RTTI descriptors      : Displays the list of recognized RTTI\n                                 descriptors. IDA automatically recognizes\n                                 most descriptors. The list will include only\n                                 the descriptors specified by the 'RTTI type'\n                                 radiobuttons. You can also delete any\n                                 descriptor from list.\n  - List RTTI problems        :  Displays the list of problematic RTTI\n                                 descriptors. The list will include only the\n                                 descriptors specified by the 'RTTI type'\n                                 radiobuttons. You can also delete any\n                                 descriptor from list.\n  - Delete list of descriptors : Delete the whole list of RTTI descriptors.\n  - Delete list of problems    : Delete the whole list of problematic RTTI\n                                 descriptors.\n  - Create C++ descriptor      : Manually invoke creation of a C++ descriptor\n                                 at the current cursor location.\n  - Create Pascal descriptor   : Manually invoke creation of a Pascal\n                                 descriptor at the current cursor location.\n  - Create Pascal or C++ descriptor : Manually invoke creation of a Pascal or\n                                      C++ descriptor at the current cursor\n                                      location. This action tries to create a\n                                      Pascal descriptor. If it fails, then it\n                                      tries to create a C++ descriptor.\n\n  - RTTI type radiobutton group : Controls which descriptors will appear in\n                                  the displayed lists.\n                                  Options are :\n                                    * Include C++\n                                    * Include Pascal\n                                    * Include both\n\n   - Create recursive : If this option is set, then IDA tries to create\n                        descriptors recursively: if a created descriptor\n                        refers to another unknown descriptor, then it will be\n                        created and so on.\n</code></pre>"},{"location":"user-guide/plugins/plugins-shipped-with-ida/borland-rtti-descriptors-plugin.html#configuration","title":"Configuration","text":""},{"location":"user-guide/plugins/plugins-shipped-with-ida/dwarf-plugin.html","title":"DWARF plugin","text":""},{"location":"user-guide/plugins/plugins-shipped-with-ida/dwarf-plugin.html#dwarf-plugin_1","title":"DWARF plugin","text":"<p>The DWARF plugin will search for DWARF-encoded debug information either in the input file, or a \"companion\" file (using a strategy similar to that of GDB), when some is found, will extract the following:</p> <pre><code>  - type information\n  - function names, prototypes, local variables\n  - global variables names &amp; types\n</code></pre> <p>In addition, the DWARF plugin provides source-level debugging.</p>"},{"location":"user-guide/plugins/plugins-shipped-with-ida/dwarf-plugin.html#dialog-box","title":"Dialog box","text":"<pre><code>  Global name               : create global names based on DWARF informations\n  Functions                 : Create functions based on DWARF informations\n  Use function bounds       : Uses DWARF to determine functions boundaries\n  Types (uncheck for speed) : Create types, needed for Apply calling\n                              convention or Function prototype are definitive\n  Apply calling convention  : DWARF will try and guess the calling convention\n                              instead of using platform default calling\n                              convention. Needed for Allow __usercall\n  Allow __usercall          : If DWARF detects __usercall, allow to use it. If\n                              not allowed, the default calling convention for\n                              the platform will be used\n  Function prototypes are definitive: Decompiler will not try to change the\n                                     prototype if set. Use this with caution\n  Import file names/line numbers: Import all information\n</code></pre> <p>'cfg/dwarf.cfg' file presents in details all the options</p>"},{"location":"user-guide/plugins/plugins-shipped-with-ida/dwarf-plugin.html#list-of-odwarf-options","title":"List of '-Odwarf' options","text":"<pre><code> - off : disable the plugin for the current session\n - import_lnnums=1 : import file name and line number into idb\n</code></pre>"},{"location":"user-guide/plugins/plugins-shipped-with-ida/dyld-shared-cache-utils.html","title":"DYLD Shared Cache Utils","text":"<p>This plugin (nicknamed \"dscu\" for brevity) is essentially just an extension of the Mach-O loader. It allows you to manually load modules from a dyldcache that were not loaded when first opening the cache in IDA (the plugin is only activated after using the \"single module\" option for a dyldcache).</p> <p>For a quick overview of the dscu functionality, see menu File&gt;Load file&gt;DYLD Shared Cache Utils.</p>"},{"location":"user-guide/plugins/plugins-shipped-with-ida/dyld-shared-cache-utils.html#loading-modules","title":"Loading Modules","text":"<p>There are a few ways to manually load a module from the cache:</p> <p>1) Use File&gt;Load file&gt;DYLD Shared Cache Utils&gt;Load module... and choose which module to load</p> <p>2) Right-click on an unmapped address in the disassembly, and select 'Load module \\' <p>3) Programatically:</p> <pre><code>  n = idaapi.netnode()\n  n.create(\"$ dscu\")\n  n.supset(2, \"/usr/lib/libobjc.A.dylib\")\n  idaapi.load_and_run_plugin(\"dscu\", 1)\n</code></pre>"},{"location":"user-guide/plugins/plugins-shipped-with-ida/dyld-shared-cache-utils.html#loading-sections","title":"Loading Sections","text":"<p>dscu also allows you to load a subset of a given module.</p> <p>Any section from any of the dyldcache's submodules can be loaded individually. This is especially useful when analyzing Objective-C code, since often times it is convenient to only load Objective-C info from a given module without loading all of its code.</p> <p>For example, if you see a pointer to a selector string that has not been loaded:</p> <pre><code>  ADRP  X8, #0x1AECFF7F9@PAGE\n  ADD   X1, X8, #0x1AECFF7F9@PAGEOFF ; SEL\n  MOV   X0, X21 ; id\n  BL    _objc_msgSend_0\n</code></pre> <p>Right-click on \"0x1AECFF7F9\" and dscu will provide you with two options:</p> <pre><code>  Load UIKitCore:__objc_methname\n  Load UIKitCore\n</code></pre> <p>The UIKitCore module is huge, so perhaps you don't want to load the entire thing, but still want to clean up the disassembly. If you choose \"Load UIKitCore:__objc_methname\", dscu will load only these selector strings into the database:</p> <pre><code>  ADRP  X8, #sel_alloc@PAGE ; \"alloc\"\n  ADD   X1, X8, #sel_alloc@PAGEOFF ; SEL\n  MOV   X0, X21 ; id\n  BL    _objc_msgSend_0\n</code></pre> <p>This operation is much faster, and still provides a lot of benefit to the analysis.</p> <p>Sections can also be loaded via:</p> <pre><code>  File&gt;Load file&gt;DYLD Shared Cache Utils&gt;Load section...\n</code></pre> <p>or programmatically with:</p> <pre><code>  node = idaapi.netnode()\n  node.create(\"$ dscu\")\n  node.altset(3, 0x1AECFF7F9) # address can be any address in the section\n  idaapi.load_and_run_plugin(\"dscu\", 2)\n</code></pre> <p>See also</p> <ul> <li>Objective-C Analysis Plugin</li> <li>Debugger for macOS</li> <li>Remote iOS debugger</li> </ul>"},{"location":"user-guide/plugins/plugins-shipped-with-ida/flirt-signature-bundle.html","title":"FLIRT Signature Bundle","text":"<p>With FLIRT Signature Bundle, designed to be used with IDA Feeds (aka FLIRT Signature Manager), you can analyze thousands of signatures and bulk apply them to your binary.</p> <p>The bundle contains signatures for modern languages like Golang and Rust, as well as updates for classic compilers. The latest version of the FLIRT Signature Bundle can be downloaded from My Hex-Rays portal under SDK and utilities.</p> <p>Flirt Signature Bundles will be regularly updated and released independently whenever there is a new compiler, language, or library release. </p>"},{"location":"user-guide/plugins/plugins-shipped-with-ida/flirt-signature-bundle.html#released-versions","title":"Released versions","text":""},{"location":"user-guide/plugins/plugins-shipped-with-ida/flirt-signature-bundle.html#flirt-signature-bundle-91","title":"FLIRT Signature Bundle 9.1","text":"<p>The packages are updated with the latest language versions.</p>"},{"location":"user-guide/plugins/plugins-shipped-with-ida/flirt-signature-bundle.html#flirt-signature-bundle-90sp1","title":"FLIRT Signature Bundle 9.0sp1","text":"<p>Since 9.0SP1, alongside standard bundles, we have released FLIRT Signature Bundles with metadata. The packages are updated with the latest language versions.</p>"},{"location":"user-guide/plugins/plugins-shipped-with-ida/flirt-signature-bundle.html#20240912-flirt-signature-bundle-90","title":"2024/09/12 FLIRT Signature Bundle 9.0","text":""},{"location":"user-guide/plugins/plugins-shipped-with-ida/flirt-signature-bundle.html#packages","title":"Packages","text":"<p>Golang - Versions: stable versions from 1.10.0 to 1.23 - Operating Systems: Linux, Windows, MacOS - Architectures: arm64 (Windows, Linux, MacOS), arm (Windows, Linux, MacOS), x86 (Windows, Linux) , x86-64 (Windows, Linux)</p> <p>C/C++ - Windows (MSVC):     - Architectures: arm, arm64, i386, amd64     - Packages: ATL, CTL, MFC, Windows SDK 10, Windows SDK 11 - Linux:     - Distribution: Ubuntu &amp; Debian     - Architectures: i386, amd64, arm64, armhf, armel, arm, s390x, mips64el, mipsel, mips, ppc64el     - Packages: libc6, libselinux1, libpcre2, libidn2, libssl, zlib1g, lib32z1, libunistring, libcurl4-gnutls, libcurl4-nss, libcurl4-openssl, libnghttp2, libidn2, librtmp, libssh, libssh-gcrypt, libpsl, libldap, libzstd, libbrotli, libgnutls28, nettle, libgmp, comerr, libsasl2, libbrotli, libtasn1-6, libkeyutils, libffi, uuid, libprotobuf, heimdal-multidev, musl, libplib, libsdl1.2-bundle (libsdl-console, libsdl-sge, libsdl1.2, libsdl-ocaml, libsdl-image1.2, libsdl-kitchensink, libsdl-mixer1.2, libsdl-net1.2, libsdl-sound1.2, libsdl-ttf2.0, libsdl1.2-compat, libsdl-gfx1.2, libsdl-pango), libsdl2-bundle (libsdl2, libsdl2-gfx, libsdl2-image, libsdl2-mixer, libsdl2-net, libsdl2-ttf)</p> <p>Rust - Versions 1.77 to 1.81   - Architectures: arm64, arm, x86, x86-64   - Operating Systems: Linux, Windows, MacOS   - Compilers: GCC, LLVM, MSVC</p>"},{"location":"user-guide/plugins/plugins-shipped-with-ida/golang-plugin.html","title":"Golang plugin","text":"<p>Golang binaries are by default statically linked and full of metadata therefore a lot can be gained from annotating a Golang binary's contents using recovered metadata.</p>"},{"location":"user-guide/plugins/plugins-shipped-with-ida/golang-plugin.html#detection","title":"Detection","text":"<p>The golang plugin's analysis only happens by default if the input file is detected as a Golang file. There are multiple mechanisms in place to detect that:</p> <pre><code> - if a Golang startup signature matches the entry point (PC-only)\n - if the Golang plugin detects a Golang-specific segment name\n - if the elf loader finds a \"Go\" note in the input file\n - on PE files: if certain Golang symbol names or a Go build id signature is found\n</code></pre>"},{"location":"user-guide/plugins/plugins-shipped-with-ida/golang-plugin.html#analysis","title":"Analysis","text":"<p>The metadata parsed by the golang plugin falls under two main categories:</p> <pre><code> - function information (e.g. name, package, range) retrieved from the pclntab\n - type information (e.g. name, package, layout, size) retrieved from the typelinks table\n</code></pre> <p>The package paths of functions and types are used to create folders. This analysis will occur upon `ev_newfile` (when a new file has been loaded) if Golang has been detected.</p>"},{"location":"user-guide/plugins/plugins-shipped-with-ida/golang-plugin.html#actions","title":"Actions","text":"<pre><code>  `golang:detect_and_parse` (Edit&gt;Other)\n</code></pre> <p>This action is useful to force a full search of the binary for Golang metadata. It will first attempt to parse a pclntab at the current address, if this is unsuccessful it will perform a full search of the binary for the pclntab's signature and parse it if found. In addition, it will also attempt to locate and parse the type information.</p>"},{"location":"user-guide/plugins/plugins-shipped-with-ida/golang-plugin.html#calling-conventions","title":"Calling Conventions","text":"<p>Golang has its own calling convention(s), denoted in IDA as `__golang`. In fact, Golang has two different calling conventions: a stack-based CC (abi0) and a newer register-based CC (abiinternal). The version of Golang and thus which calling convention to use will be automatically inferred from metadata structures; It is also controllable through the `force_regabi` command line option.</p>"},{"location":"user-guide/plugins/plugins-shipped-with-ida/golang-plugin.html#list-of-ogolang-options","title":"List of `-Ogolang` options","text":"<p>Command line options take precedence over config file options.</p> <pre><code>  force                         try to force the analysis\n                                (no detection step needed)\n  off                           disable the plugin\n  no_rtypes                     do not import any types\n  rname_len2                    force the reflect type name format to go1.17\n                                and later (varint encoding: 1-10 bytes)\n  rname_len1                    force the reflect type name format to before\n                                go1.17 (2 bytes)\n  import_lnnums                 recover file names &amp; line numbers from pclntab\n  no_func_end_from_pcval_tabs   do not derive a function's end from pclntab\n                                metadata\n  force_regabi[=on|=off]        override calling convention version\n                                 `=off`: will force the stack-based CC\n                                 `=on`/no value: will force\n                                 the register-based CC\n</code></pre> <p>See cfg/golang.cfg for available configuration options.</p>"},{"location":"user-guide/plugins/plugins-shipped-with-ida/golang-plugin.html#examples","title":"Examples","text":"<p>forcing analysis and register-based calling convention</p> <pre><code>  -Ogolang:force:force_regabi\n</code></pre> <p>disabling the plugin</p> <pre><code>  -Ogolang:off\n</code></pre>"},{"location":"user-guide/plugins/plugins-shipped-with-ida/ida-feeds.html","title":"IDA Feeds","text":""},{"location":"user-guide/plugins/plugins-shipped-with-ida/ida-feeds.html#ida-feeds_1","title":"IDA Feeds","text":"<p>{% hint style=\"info\" %}</p>"},{"location":"user-guide/plugins/plugins-shipped-with-ida/ida-feeds.html#version-availability","title":"Version Availability","text":"<p>This feature is available only in IDA Pro, as it depends on idalib for full functionality.</p> <p>Starting with IDA 9.0, we introduced IDA Feeds (aka FLIRT Signature Manager), the tool designed to ease the application of new signatures through updatable libraries (known as IDA FLIRT Signature Bundles), shipped alongside other IDA plugins out-of-the-box. You can run IDA Feeds directly through the IDA Pro UI by navigating to Edit \u2192 Plugins \u2192 IDA Feeds. All related IDA Feeds files are located in the <code>plugins/ida_feeds</code> directory within your IDA installation folder.</p>"},{"location":"user-guide/plugins/plugins-shipped-with-ida/ida-feeds.html#what-is-ida-feeds","title":"What is IDA Feeds?","text":"<p>IDA Feeds helps you identify which signatures to apply when analyzing binary files, especially when you don't know which static libraries were linked to them. Rather than manually applying signatures, IDA Feeds automatically scans and applies many signatures in seconds. Just open the signature folder, allow IDA to scan and find the possible matches, and then bulk apply the suggested signatures.</p> <p>IDA Feeds uses the FLIRT Signature Bundles, which are going to be regularly updated and released to keep you up to date with the newest recognizable signatures.</p> <p>Besides managing FLIRT signatures, IDA Feeds can generate Rust signatures on demand.</p>"},{"location":"user-guide/plugins/plugins-shipped-with-ida/ida-feeds.html#ida-feeds-configuration-and-setup","title":"IDA Feeds configuration and setup","text":"<p>You can download the latest IDA FLIRT Signature Bundle from our Download Center in My Hex-Rays portal under SDK and utilities.</p> <p>Although IDA Feeds plugin basic options works out-of-the-box, to experience it full functionality, you may need to install some dependencies.</p>"},{"location":"user-guide/plugins/plugins-shipped-with-ida/ida-feeds.html#requirements-and-dependencies","title":"Requirements and dependencies","text":"<ul> <li>idalib configured properly (check idalib installation and activation steps) if you want to use fully functional IDA Feeds plugin (including parallel probing and generating Rust signatures) or run IDA Feeds as a standalone app</li> <li>RPyc 5.x for parallel probing</li> <li>Rust installed, if you want to generate Rust signatures</li> <li>Path to flair Correctly settled in the config.json file inside your <code>ida_feeds</code> folder</li> </ul> <p>Check readme file inside <code>ida_feeds</code> folder for detailed info.</p>"},{"location":"user-guide/plugins/plugins-shipped-with-ida/ida-feeds.html#installing-requirementsdependencies-optional","title":"Installing requirements/dependencies (optional)","text":"<p>Install requirements for Python modules in the interpreter that IDA is using or from within your virtual environment (venv).</p> <ol> <li>Navigate to the <code>plugin/ida_feeds</code> folder within the IDA Pro installation directory and install the requirements.</li> </ol> <pre><code>python3 -m pip install -r requirements.txt\n</code></pre> <ol> <li>Create symbolic link (optional)</li> </ol> <p>Linux &amp; OSX</p> <pre><code>ln -s $(pwd) $HOME/.idapro/plugins/ida_feeds\n</code></pre> <p>Windows</p> <pre><code>mklink /D \"%APPDATA%\\Hex-Rays\\IDA Pro\\plugins\\ida_feeds\" \"%cd%\"\n</code></pre>"},{"location":"user-guide/plugins/plugins-shipped-with-ida/ida-feeds.html#how-to-use-ida-feeds-plugin","title":"How to use IDA Feeds plugin?","text":"<ol> <li>Go to the Edit -&gt; Plugins -&gt; IDA Feeds. IDA Feeds will open in a new IDA Feeds subview.</li> <li>In the Signature Tools window, click Open signatures folder and select the folder with the downloaded FLIRT signature bundle (1), or leave the preloaded signatures already provided with your IDA instance.</li> </ol> <ol> <li>Select chosen signature files, pick the type of probing from the dropdown menu: Parallel probing or Sequential probing (2), and then click Run probe (3) to match functions in the binary against a specific selected signature file(s).</li> </ol> <p>{% hint style=\"info\" %}</p>"},{"location":"user-guide/plugins/plugins-shipped-with-ida/ida-feeds.html#parallel-vs-sequential-probing","title":"Parallel vs Sequential Probing","text":"<p>Parallel probing runs multiple probing processes on the copies of IDB, and although is faster, it's also more resource intensive. It requires idalib, idapro module and RPyC 5.x to work. Parallel type is available only when all prerequisites and dependencies are correctly installed. If any are missing, you can still use Sequential probing as a slower alternative.</p> <ol> <li>Check the results and click Apply signatures to bulk apply (4) correct matches to selected signatures.</li> </ol>"},{"location":"user-guide/plugins/plugins-shipped-with-ida/ida-feeds.html#creating-rust-signatures","title":"Creating Rust signatures","text":""},{"location":"user-guide/plugins/plugins-shipped-with-ida/ida-feeds.html#dependencies","title":"Dependencies","text":"<ul> <li>idalib with idapro module installed</li> <li> <p>Correctly settled a path to flair in the config.json file inside your <code>ida_feeds</code> folder</p> </li> <li> <p>Go to the Edit -&gt; Plugins -&gt; IDA Feeds. In the IDA Feeds subview, navigate to the folder tree view (Signatures panel) on the left and find FLIRT for Rust libraries at the bottom of the view.</p> </li> <li>Click Create and apply signature.</li> </ul> <p></p> <ol> <li>After generation:</li> </ol> <p></p> <p>you can find the .sig file in your <code>.idapro/cache/rust</code> folder.</p> <p></p>"},{"location":"user-guide/plugins/plugins-shipped-with-ida/ida-feeds.html#faq","title":"FAQ","text":""},{"location":"user-guide/plugins/plugins-shipped-with-ida/ida-feeds.html#signature-bundles-versus-standard-ida-sig-files","title":"Signature bundles versus standard IDA sig files","text":"<ul> <li>Q: What's the difference between signatures shipped with IDA installer (in the <code>sig</code> folder) and FLIRT signatures bundle?</li> </ul> <p>IDA comes with a set of standard FLIRT signatures, which you can find in the <code>sig</code> folder in the IDA installation directory.</p> <p>The signature bundles for IDA FEEDS (downloadable from My Hex-Rays portal) provide additional signatures to improve function recognition for various libraries and frameworks. What's more, these bundles are available with additional metadata files that may enhance your analysis.</p> <ul> <li>Q: Should I place the additional signatures, like these from the FLIRT signature bundles, always in the <code>sig</code> folder?</li> </ul> <p>It's up to you whether to keep some signatures separate or store them in the <code>sig</code> folder inside IDA installation directory.\\ Placing them in the <code>sig</code> folder makes them available globally for all IDBs opened in IDA and pre-loaded whenever you run the IDA Feeds plugin. It can be convenient if you usually work with the same set of libraries, but it can clutter the space if you don't need all signatures handy all the time.</p>"},{"location":"user-guide/plugins/plugins-shipped-with-ida/ida-feeds.html#signature-bundles-types","title":"Signature bundles types","text":"<ul> <li>Q: What is the difference between signature bundle with metadata and the one without?</li> </ul> <p>The signature bundle with metadata contains a txt file for each signature (.sig file) that explains in details what is inside that particular signature (listing libraries and versions). If this information is useful for your analysis, opting for bundles with metadata can be beneficial. However, if you don\u2019t require these details for your regular reverse engineering tasks, you may prefer a more lightweight bundle without metadata.</p>"},{"location":"user-guide/plugins/plugins-shipped-with-ida/ida-feeds.html#troubleshooting","title":"Troubleshooting","text":""},{"location":"user-guide/plugins/plugins-shipped-with-ida/ida-feeds.html#creating-rust-signatures-is-unavailable","title":"Creating Rust signatures is unavailable","text":"<p>Check the rust compiler version</p> <p>Your binary/executable may be compiled with a rust compiler that is not known by IDA Feeds, meaning that it is not included in the <code>rust-git-tags.json</code> file in <code>ida-feeds</code> folder. Before you proceed, verify that the rust compiler version is present in <code>rust-git-tags.json</code>.</p>"},{"location":"user-guide/plugins/plugins-shipped-with-ida/ida-feeds.html#debugging-other-issues","title":"Debugging other issues","text":"<p>When you encounter unexpected errors, set <code>IDA_FEEDS_LOG_LEVEL</code> environment variable to <code>DEBUG</code>, and then restart IDA and try again to obtain additional information from the Output Window.</p>"},{"location":"user-guide/plugins/plugins-shipped-with-ida/objective-c-analysis-plugin.html","title":"Objective-C Analysis Plugin","text":"<p>The objc plugin performs Objective-C specific analysis on the database.</p> <p>For an overview of what the plugin can do, see the menu options in Edit&gt;Other&gt;Objective-C, or the config options in objc.cfg.</p> <p>Type Information</p> <p>The bulk of the plugin's work is done at file load time, when it will parse all Objective-C type information embedded in the binary, and use this to create tinfo_t structures for all known classes and construct prototypes for all known methods.</p> <p>This analysis can be invoked manually at any time with:</p> <pre><code>  Edit&gt;Other&gt;Objective-C&gt;Reload Objective-C info\n</code></pre> <p>Or:</p> <pre><code>  idaapi.load_and_run_plugin(\"objc\", 1)\n</code></pre> <p>You can also disable objc analysis at load time with command line option:</p> <pre><code>  -Oobjc:+l\n</code></pre> <p>Or check the \"Lazy mode\" option in:</p> <pre><code>  Edit&gt;Other&gt;Objective-C&gt;Objective-C Options...\n</code></pre> <p>Decompilation</p> <p>The plugin will also perform Objective-C analysis during decompilation.</p> <p>When a function is decompiled, the plugin will analyze any calls to objc_msgSend, and use the arguments to determine if objc_msgSend will ultimately invoke one of the methods in the current database.</p> <p>If such a situation is detected, the plugin will replace the call to objc_msgSend with a call to the target method, and add an xref to the method. This is done in the hopes that continued use of the decompiler will improve call graphs for Objective-C binaries.</p> <p>If the target method has type information, then the return type can be used to refine the types of local variables in the pseudocode, which in turn could lead to more method calls being detected, and so on.</p> <p>You can disable objc analysis in the pseudocode with command line option:</p> <pre><code>  -Oobjc:-h\n</code></pre> <p>Or uncheck the \"Enable decompiler plugin for Objective-C\" option in:</p> <pre><code>  Edit&gt;Other&gt;Objective-C&gt;Objective-C Options...\n</code></pre> <p>Debugging</p> <p>objc also provides tools for dynamic analysis.</p> <p>During debugging, you can analyze objc info for a specific library by right-clicking in the Modules window and selecting \"Load debug info\".</p> <p>This operation can also be performed programmatically with:</p> <pre><code>  n = idaapi.netnode()\n  n.create(\"$ objc\")\n  n.supset(1, \"/module/path\", 'R')\n  idaapi.load_and_run_plugin(\"objc\", 3)\n</code></pre> <p>If you prefer that objc does not perform analysis during \"Load debug info\", (say if DWARF information is available for a module and you prefer that), you can disable this functionality with command line option:</p> <pre><code>  -Oobjc:-s\n</code></pre> <p>Or by unchecking the \"Enable SIP for Objective-C\" option in:</p> <pre><code>  Edit&gt;Other&gt;Objective-C&gt;Objective-C Options...\n</code></pre> <p>Step Into Message</p> <p>The plugin also implements a \"step into\" debugger action for Objective-C.</p> <p>If you use this action before a call to objc_msgSend, objc will try to calculate the address of method that is being invoked, and break at the method address rather than step into the objc_msgSend function itself.</p> <p>You can perform this action with shortcut:</p> <pre><code>  Shift+O\n</code></pre> <p>Or via the menu option:</p> <pre><code>  Debugger&gt;Run until message received\n</code></pre> <p>Or programmatically with:</p> <pre><code>  idaapi.load_and_run_plugin(\"objc\", 2)\n</code></pre> <p>This action can be very useful, but you must be careful. When invoked, the action will automatically run to the address of objc_msgSend, analyze its arguments, then continue to the target method.</p> <p>If there is no subsequent call to objc_msgSend in the program, you will lose control of the process. It is best to use this action only when you are sure that IP is in the vicinity of an objc_msgSend call.</p> <p>NSConcreteStackBlock</p> <p>The objc plugin can also be used to analyze Apple binaries that make heavy use of blocks: https://clang.llvm.org/docs/Block-ABI-Apple.html</p> <p>The analysis involves identifying NSConcreteStackBlock instances on the stack, and creating a specialized Block_layout structure to apply to the function's stack frame.</p> <p>The end result transforms the following sequence of statements:</p> <pre><code>  loc_BF60:                                 Block_layout_BF60 v1;\n    v1 = _NSConcreteStackBlock;             v1.isa        = _NSConcreteStackBlock;\n    v2 = 0x...;                             v1.flags      = 0x...;\n    v3 = 0;                                 v1.reserved   = 0;\n    v4 = __block_invoke;             =&gt;     v1.invoke     = __block_invoke;\n    v5 = &amp;__block_descriptor_tmp;           v1.descriptor = &amp;__block_descriptor_tmp;\n    v6 = ...                                v1.lvar1      = ...\n    v7 = ...                                v1.lvar2      = ...\n    ...                                     ...\n    func(&amp;v1);                              func(&amp;v1);\n</code></pre> <p>Already this cleans up the analysis quite a lot, but more importantly this new Block_layout_BF60 structure will be applied to the prototype of __block_invoke, which can heavily improve the pseudocode.</p> <p>Block analysis can be performed on the database with:</p> <pre><code>  Edit&gt;Other&gt;Objective-C&gt;Analyze stack-allocated blocks (entire database)\n</code></pre> <p>Or programmatically with:</p> <pre><code>  idaapi.load_and_run_plugin(\"objc\", 5)\n</code></pre> <p>You can also perform block analysis on a specific function:</p> <pre><code>  Edit&gt;Other&gt;Objective-C&gt;Analyze stack-allocated blocks (current function)\n</code></pre> <p>Or with shortcut:</p> <pre><code>  Ctrl+Shift+S\n</code></pre> <p>Or programmatically:</p> <pre><code>  n = idaapi.netnode()\n  n.create(\"$ objc\")\n  n.altset(1, 0xBF60, 'R') # the address can be any address within the function\n  idaapi.load_and_run_plugin(\"objc\", 5)\n</code></pre> <p>These actions work in both the disassembly and pseudocode windows, but note that you must refresh the pseudocode with F5 for the changes to take full effect.</p> <p>Also, please note that this feature makes use of the microcode in the hexrays SDK, so you must have the decompiler in order to use it.</p> <p>NSConcreteGlobalBlock</p> <p>Global blocks (i.e. blocks that don't make use of local variables) are much easier to analyze, and simply involve identifying references to NSConcreteGlobalBlock in the __const segment.</p> <p>Global blocks are analyzed automatically at load time, but the analysis can be performed manually at any time with:</p> <pre><code>  Edit&gt;Other&gt;Objective-C&gt;Re-analyze global block functions\n</code></pre> <p>Or:</p> <pre><code>  idaapi.load_and_run_plugin(\"objc\", 4)\n</code></pre> <p>Command Line</p> <p>Here's a summary of the command-line arguments that can be passed to objc:</p> <p>objc features can be enabled or disabled using '+' or '-', followed by one of the following characters:</p> <pre><code>  v: verbose mode\n  s: source info provider\n  h: hexrays decompiler analysis\n  l: lazy mode\n</code></pre> <p>For example, -Oobjc:+v:+l:-s will enable verbose and lazy mode, and will disable the objc SIP.</p> <p>See also</p> <ul> <li>Debugger for macOS</li> <li>Remote iOS debugger</li> <li>DYLD Shared Cache Utils</li> </ul>"},{"location":"user-guide/plugins/plugins-shipped-with-ida/patfind-plugin.html","title":"Patfind plugin","text":""},{"location":"user-guide/plugins/plugins-shipped-with-ida/patfind-plugin.html#patfind-plugin_1","title":"Patfind plugin","text":"<p>Patfind plugin makes it possible to automatically find functions in binary files.</p> <p>It relies on bit pattern definitions for typical function starts and function ends.</p> <p>Those bit patterns are defined in XML files, based on Ghidra's function patterns format. A collection of bit pattern files is provided for the commonly used CPU architectures.</p> <p>It is possible to add new architectures by simply adding a new XML file, just like the other XML files.</p> <p>It's also possible to add, remove or change existing patterns for better matching.</p>"},{"location":"user-guide/plugins/plugins-shipped-with-ida/patfind-plugin.html#configuration","title":"Configuration","text":"<p>'cfg/patfind.cfg' file presents all the options</p> <p>The config file also contains the documentation on how to use or change the XML pattern files.</p> <p>If desired, new XML files can be added to the 'cfg/ghidra_patterns/' directory.</p> <p>'-Opatfind' command line switches can be used to select the type of run differently for this session of IDA.</p>"},{"location":"user-guide/plugins/plugins-shipped-with-ida/patfind-plugin.html#list-of-options","title":"List of options","text":"<pre><code>  autorun=0 : don't automatically search for bit pattern\n  autorun=1 : search for bit pattern only on binary like files\n  autorun=2 : search for bit pattern on any input file\n</code></pre>"},{"location":"user-guide/plugins/plugins-shipped-with-ida/patfind-plugin.html#examples","title":"Examples","text":"<pre><code>  -Opatfind:autorun=0\n</code></pre>"},{"location":"user-guide/plugins/plugins-shipped-with-ida/picture_search.html","title":"picture_search","text":"<p>picture_search is a plugin that allows you to search for, and inspect pictures that are embedded in the binary.</p> <p>The key feature of the plugin is the \"Search for pictures\" action, available in the \"Search\" menu, that will scan the entire binary (or the selection if there is one) for so-called \"magic\" numbers of well-known image types (PNG, JPEG, ...), and present the results in a tabular fashion:</p> <pre><code>                 [Address]         |[Format]\n        .noptrdata:0000000000511620|GIF89a\n        .noptrdata:00000000005133E0|PNG\n        .noptrdata:0000000000517460|JPEG\n        .noptrdata:000000000051ADA0|BMP\n</code></pre> <p>Note: at this point, pictures have not been decoded yet; the plugin has merely spotted what looks like the start of pictures. Decoding will only happen when triggering any of the following actions.</p> <p>Double-clicking any row of that list will show the picture directly in IDA. Opening the context menu will reveal even more possibilities: open the picture in the OS's default viewer, save it, jump to its start address...</p> <p>In addition to this very handy scanning feature, the plugin will add the \"Open picture\" action to the disassembly listing's context menu when the current position happens to be near data that matches the well-known image types' magic numbers.</p>"},{"location":"user-guide/plugins/plugins-shipped-with-ida/rust-plugin.html","title":"Rust plugin","text":"<p>The binaries produced by the Rust compiler have some peculiarities which make them difficult to analyze, such as:</p> <pre><code>  - non-standard calling conventions\n  - non-terminated string literals\n  - unusual name mangling scheme\n</code></pre> <p>By default, Rust plugin is enabled if one of the following condition is true</p> <pre><code>  - one address is named 'rust_begin_unwind'\n  - the string 'rustc-' can be found somewhere in the program\n    If the segment '.rodata' exists, the search is limited to this segment\n</code></pre>"},{"location":"user-guide/plugins/plugins-shipped-with-ida/rust-plugin.html#string-literal-analysis","title":"String literal analysis","text":"<p>Rust plugin walks to all addresses in segment with name ending in \"__const\", \".rodata\" or \".rdata\" and creates string literals on xref</p> <pre><code>  - on dref, the string literal is set up to the next dref\n  - on cref, Rust tries to retrieve length from nearby instructions\n    Arm, Risc-V and pc proc module benefit from this\n</code></pre> <p>To force the string literal detection:</p> <pre><code>  idaapi.load_and_run_plugin(\"rust\", 1)\n</code></pre>"},{"location":"user-guide/plugins/plugins-shipped-with-ida/rust-plugin.html#demangling-name","title":"Demangling name","text":"<p>Rust plugin also offers the possibility to configure a demangler library for rust. By default the plugin will use the librustdemangle library that is shipped with IDA. You can disable this feature in 'Edit&gt;Plugin&gt;Rust language helper' or specify another library to use.</p> <p>See cfg/rust.cfg for the possible options</p>"},{"location":"user-guide/plugins/plugins-shipped-with-ida/rust-plugin.html#list-of-orust-options","title":"List of '-Orust' options","text":"<pre><code>  - on  : enable rust plugin for this session of IDA\n  - off : disable rust plugin for this session of IDA\n</code></pre>"},{"location":"user-guide/plugins/plugins-shipped-with-ida/rust-plugin.html#example","title":"Example","text":"<pre><code>  -Orust:off\n</code></pre> <p>This disable the plugin for this session of IDA.</p>"},{"location":"user-guide/plugins/plugins-shipped-with-ida/swift-plugin.html","title":"Swift plugin","text":""},{"location":"user-guide/plugins/plugins-shipped-with-ida/swift-plugin.html#demangling","title":"Demangling","text":"<p>The swift plugin uses libSwiftDemangle to demangle Swift names. Note that IDA already had a built-in swift demangler, but it was becoming difficult to maintain. In the long-term we hope to fully deprecate IDA's custom swift demangler in favor of libSwiftDemangle.</p> <p>However, the new approach still hasn't been fully integrated into IDA, so there may be times when IDA's old swift demangler produces more desirable results.</p> <p>'cfg/swift.cfg' file presents all the options</p> <p>'-Oswift' command line switches can be used to enable or disable some plugin options.</p>"},{"location":"user-guide/plugins/plugins-shipped-with-ida/swift-plugin.html#list-of-options","title":"List of options","text":"<pre><code>  - &lt;demangler_path&gt; : use specific libSwiftDemangle library\n  - -d : use the built-in IDA swift demangler (legacy)\n  - +d : use libSwiftDemangle swift demangler\n  - -m : don't present metadata in nice way\n  - +m : present metadata in nice way\n  - -e : don't import enumeration types\n  - +e : import enumeration types\n  - -s : don't import structure types\n  - +s : import structure types\n  - -v : don't set variable type based on mangled names\n  - +v : set variable type based on mangled names\n  - -f : don't set function prototype based on mangled names\n  - +f : set function prototype based on mangled names\n  - -g : don't group functions in folders corresponding to modules\n  - +g : group functions in folders corresponding to modules\n</code></pre>"},{"location":"user-guide/plugins/plugins-shipped-with-ida/swift-plugin.html#examples","title":"Examples","text":"<pre><code>  -Oswift:-g\n</code></pre> <p>Do not group functions into folders.</p> <pre><code>  -Oswift:/tmp/libSwiftDemangle_custom.dylib\n</code></pre>"},{"location":"user-guide/signatures/flirt.html","title":"FLIRT","text":"<p>FLIRT stands for Fast Library Identification and Recognition Technology. This technology allows IDA to recognize standard library functions generated by supported compilers and greatly improves the usability and readability of generated disassemblies. Of course, FLIRT can be combined with IDA\u2019s usual interactivity to further improve the analysis. See this Pascal and this Delphi example as well.</p>"},{"location":"user-guide/signatures/flirt.html#automatic-unretouched-disassembly","title":"Automatic Unretouched Disassembly","text":""},{"location":"user-guide/signatures/flirt.html#with-signatures-applied-borland-visual-component-library","title":"With signatures applied (Borland Visual Component Library)","text":""},{"location":"user-guide/signatures/makesig.html","title":"Makesig","text":"<p>Built-in Makesig plugin is a tool for generating FLIRT signatures from a current database.</p> <p>{% hint style=\"info\" %} The content here was a part of the blog article</p>"},{"location":"user-guide/signatures/makesig.html#how-to-make-signatures-from-working-database","title":"How to make signatures from working database?","text":"<ol> <li>Export the patterns from the database into a <code>.sig</code> file;</li> <li>Re-import the <code>.sig</code> into the target database.</li> </ol>"},{"location":"user-guide/signatures/makesig.html#example","title":"Example","text":"<p>Let\u2019s see how that would work in a real scenario. Imagine working on a long-term reversing project with frequent new versions. With the makesig plugin, we can migrate the carefully curated list of functions that we already reverse-engineered and exported as a signature file, into the current binary (given that compiler flags didn\u2019t change too much between releases). Let\u2019s say we identified an interesting function In the older release (source) binary and wanted to port that information to the newer binary:</p> <p></p> <p>We can export a signature file for this function via menu item File -&gt; Produce File -&gt; Create SIG file...</p> <p></p> <p>Then, in the new binary file, we can import this signature file in the Signatures window:</p> <p></p> <p>As we can see, IDA applies the signature and reports that it found a match in the new database! And indeed, we can find the function, labeled as a library function, because its function name came from the signature file:</p> <p></p>"},{"location":"user-guide/signatures/supported-compilers.html","title":"Supported Compilers","text":""},{"location":"user-guide/signatures/supported-compilers.html#supported-c-compilers","title":"Supported C Compilers","text":"<ul> <li>Aztec C v3.20d</li> <li>Borland C++ for OS/2 v1.0, v1.5, v2.0</li> <li>Borland Turbo C v2.0, v2.01</li> <li>Borland Turbo C++ v1.01</li> <li>Borland C++ v2.0, v3.1, v4.0, v4.5, v5.0, v5.01</li> <li>Borland C++ Builder v1.0</li> <li>Borland C++ Builder v3.0</li> <li>EMX (GCC) for OS/2 v0.9b</li> <li>IBM C Set v2.00, v2.10</li> <li>IBM Visual Age C++ v3.0 OS/2</li> <li>Lattice C v3.30</li> <li>Metaware High C for OS/2</li> <li>Microsoft C v5.0, v6.0, v7.0 Microsoft Quick C v1.0, v2.01</li> <li>Microsoft Visual C++ v1.0, v1.5, v2.0, v4.0, v4.1, v5 and v6</li> <li>NDP C v4.2</li> <li>Optima v1.0</li> <li>Symantec C++ v6.0, 6.1, 7.2</li> <li>Texas Instruments C Compiler for TMS320C6</li> <li>Visual Age C++ v3.0</li> <li>Visual Age C++ v3.5</li> <li>Watcom C++ v9.01d, v9.5, v10.0,</li> <li>v10.0b, v10.5, v10.6</li> <li>Watcom for QNX</li> <li>Zortech C v1.0, v3.1</li> <li>Microsoft Visual C++ v7, 8 (Microsoft.NET)</li> <li>Microsoft 64-bit Visual C++ AMD64</li> <li>Microsoft Visual C++ for Windows CE v3-4.2 on ARM</li> <li>Borland C++ Build v1-6</li> <li>GNU C compilers on various platforms</li> </ul>"},{"location":"user-guide/signatures/supported-compilers.html#supported-pascal-compilers","title":"Supported Pascal Compilers","text":"<ul> <li>Borland Turbo Pascal 5, 5.5, 6, 7, Borland Turbo Pascal for Windows</li> <li>Borland Delphi 1, Delphi 2, Delphi 3, Delphi 4, Delphi 5</li> </ul>"},{"location":"user-guide/signatures/supported-compilers.html#supported-fortran-compilers","title":"Supported Fortran Compilers","text":"<ul> <li>MS Fortran PowerStation 4.0</li> </ul>"},{"location":"user-guide/signatures/supported-compilers.html#supported-libraries","title":"Supported Libraries","text":"<ul> <li>Microsoft Foundation Classes</li> <li>Borland 5.0x MFC adaptation, Borland Visual Component Library</li> <li>CTask</li> <li>SDK CAB Library</li> <li>Vireo Libraries Borland Edition and MicroSoft Edition</li> <li>Object Toolkit Pro</li> <li>Windows CE libraries</li> <li>Keil runtime libraries for C166</li> <li>C runtime library for I960</li> <li>C runtime for TMS320C6</li> <li>Borland 6.0x Visual Component Library</li> </ul>"},{"location":"user-guide/signatures/supported-compilers.html#how-does-it-work","title":"How does it work ?","text":"<p>Have a look at the Flirt technical paper!</p>"},{"location":"user-guide/signatures/flirt/generate-flirt-signature-file.html","title":"Generate FLIRT signature file","text":"<pre><code> Action    name: makesig:create_signature\n\n</code></pre> <p>This command generate a FLIRT signature file. A function is eligible when then name don't start with \"sub_\".</p> <pre><code> File: Pathname for the signature file\n Library name: identifier, shown in the description of Signature\n\n Collect functions\n  - All: Generate signature for all functions in the idb that are eligible\n  - Selected: Generate a signature only for the selection in Functions\n\n Collisions\n  - Ignore: don't add collision FLIRT signature\n            will delete the Exclusion file if it exists\n  - Deal with manually: if there is collisions, a window will open to manage\n                        the collisions\n</code></pre> <p>Two or three files are generated:</p> <pre><code> - Signature file: The output file\n - Pattern file:   Filename is Signature filename with extension replaced\n                   with \"pat\"\n - Exclusion File: Filename with extension replaced by \"exc\"\n                   Only present if you want to deal with collision and there\n                   is any.\n</code></pre> <p>The last two files can be deleted once the signature file is generated.</p>"},{"location":"user-guide/signatures/flirt/ida-f.l.i.r.t.-technology-in-depth.html","title":"IDA F.L.I.R.T. Technology: In-Depth","text":""},{"location":"user-guide/signatures/flirt/ida-f.l.i.r.t.-technology-in-depth.html#the-goal","title":"The Goal","text":"<p>One major stumbling block in the disassembly of programs written in modern high level languages is the time required to isolate library functions. This time may be considered lost because it does not bring us new knowledge : it is only a mandatory step that allows further analysis of the program and its meaningful algorithms. Unfortunately, this process has to be repeated for each and every new disassembly.</p> <p>Sometimes, the knowledge of the class of a library function can considerably ease the analysis of a program. This knowledge might be extremely helpful in discarding useless information. For example, a C++ function that works with streams usually has nothing to do with the main algorithm of a program.</p> <p>It is interesting to note that every high level language program uses a great number of standard library functions, sometimes even up to 95% of all the functions called are standard functions. For one well known compiler, the \u201cHello, world!\u201d program contains:</p> <pre><code>        library functions       -       58\n        function main()         -       1\n</code></pre> <p>Of course, this is an artificial example but our analysis has shown that real life programs contain, on average, 50% of library functions. This is why the user of a disassembler is forced to waste more than half of his time isolating those library functions. The analysis of an unknown program resembles the resolution of a gigantic crossword puzzle : the more letters we know, the easier it is to guess the next word. During a disassembly, more comments and meaningful names in a function means a faster understanding of its purpose. Widespread use of standard libraries such as OWL, MFC and others increase even more the contribution of the standard functions in the target program.</p> <p>A middle sized program for Win32, written in C++, using modern technologies (e.g., AppExpert or a similar wizard) calls anything from 1000 to 2500 library functions.</p> <p>To assist IDA users we attempted to create an algorithm to recognize the standard library functions. We wanted to achieve a practical, usable result and therefore accepted some limitations</p> <ul> <li>we only consider programs written in C/C++</li> <li> <p>we do not attempt to achieve perfect function recognition : this is theoretically impossible. Moreover the recognition of some functions may lead to undesirable consequences. For example, the recognition of the following function</p> <p>```                 push    bp                 mov     bp, sp                 xor     ax, ax                 pop     bp                 ret</p> <p>```</p> <p>would lead to many misidentifications. It is worth noting that in modern C++ libraries one can find a lot of functions that are absolutely identical byte-to-byte but have different names. * we only recognize and identify functions located in the code segment, we ignore the data segment. * when a function has been sucessfully identified, we assign it a name and an eventual comment. We do not aim to provide information about the function arguments or about the behaviour of the function.</p> </li> </ul> <p>and we imposed the following constraints upon ourselves</p> <ul> <li>we try to avoid false positives completely. We consider that a false positive (a function wrongly identified) is worse than a false negative (a function not identified). Ideally, there should be no false positive at all.</li> <li>the recognition of the functions must require a minimum of processor and memory resources.</li> <li>because of the polyvalent architecture of IDA \u2013 it supports tens of very different processors \u2013 the identification algorithm must be platform-independent, i.e. it must work with the programs compiled for any processor.</li> <li>the main() function should be identified and properly labelled as the library\u2019 startup-code is of no interest.</li> </ul>"},{"location":"user-guide/signatures/flirt/ida-f.l.i.r.t.-technology-in-depth.html#the-difficulties","title":"The Difficulties","text":""},{"location":"user-guide/signatures/flirt/ida-f.l.i.r.t.-technology-in-depth.html#memory-usage","title":"Memory usage","text":"<p>The main obstacle to recognition and identification is the sheer quantity of functions and the size of the memory they occupy. If we evaluate the size of the memory occupied by all _versions_ of all libraries produced by all compiler _vendors_ for memory _models_, we easily fall into the tens of gigabytes range.</p> <p>Matters get even worse if we try to take OWL, MFC, MFC and similar libraries into account. The storage needed is huge. At this time, personal computers\u2019 users can\u2019t afford to set aside hundreds of Megabytes of disk space for a simple utility disassembler. Therefore, we had to find an algorithm that diminishes the size of the information needed to recognize standard library functions. Of course, the number of functions that should be recognized dictates the need for an efficient recognition algorithm : a simple brute force search is not an option.</p>"},{"location":"user-guide/signatures/flirt/ida-f.l.i.r.t.-technology-in-depth.html#variability","title":"Variability","text":"<p>An additional difficulty arises from the presence of _variant_ bytes in the program. Some bytes are corrected (fixed up) at load time, others become constants at link time, but most of the variant bytes originate from references to external names. In that case the compiler does not know the addresses of the called functions and leaves these bytes equal to zeroes. This so called \u201cfixup information\u201d is usually written to a table in the output file (sometimes called \u201crelocation table\u201d or \u201crelocation information\u201d). The example below</p> <pre><code>B8 0000s                             mov     ax, seg _OVRGROUP_\n9A 00000000se                        call    _farmalloc\n26: 3B 1E 0000e                      cmp     bx, word ptr es:__ovrbuffer\n\n</code></pre> <p>contains variant bytes. The linker will try to resolve external references, replacing zeroes with the addresses of called functions, but some bytes will stay untouched : references to dynamic libraries or bytes containing absolute address in the program. These references can be resolved only at load time by the system loader. It will try to resolve all external references and replace zeroes with absolute addresses. When the system loader cannot resolve an external referenceI, as it is the case when the program refers to an unknown DLL, the program will simply not run.</p> <p>Optimizations introduced by some linkers will also complicate the matter because constant bytes will sometim es be changed. For example:</p> <pre><code>               0000: 9A........        call    far ptr xxx\n\n             is replaced by\n\n               0000: 90                nop\n               0001: 0E                push    cs\n               0002: E8....            call    near ptr xxx\n\n\n</code></pre> <p>The program will execute as usual, but the replacement introduced by the linker effectively prohibits byte-to-byte comparison with a function template. The presence of variant bytes in a program makes the use of simple checksums for recognition impossible. If functions did not contain variant bytes, the CRC of the first N Bytes would be enough to identify and select a group of functions in a hash table. The use of such tables would greatly decrease the size of the information required for identification : the name of a function, its length and checksum would suffice.</p> <p>We have already mentionned the fact that the recognition of all standard library functions was not possible or even desirable. One additional proof is the fact that some identical functions do exactly the same thing but are called in a different manner. For example, the functions strcmp() and fstrcmp() are identical in large memory models.</p> <p>We face a dilemna here : we do not want to discard these functions from the recgnition process since they are not trivial and their labelling would help the user but, we are unable to distinguish them.</p> <p>And there is more : consider this</p> <pre><code>                call    xxx\n                ret\n        or\n                jmp     xxx\n\n</code></pre> <p>At first sight, these pieces of code are not interesting. The problem is that they are present, sometimes in significant number, in standard libraries. The libraries for the Borland C++ v1.5 OS/2 compiler contains 20 calls of this type, in important functions such as read(), write(), etc.</p> <p>Plain comparison of these functions yields nothing. The only way to distinguish those functions is to discover what other function they call. Generally, all short functions (consisting merely of 2-3 instructions) are difficult to recognize and the probability of wrong recognition is very high. However not recognizing them is undesirable, as it can lead to cascade failures : if we do not recognize the function tolower(), we may fail to recognize strlwr() which refers to tolower().</p>"},{"location":"user-guide/signatures/flirt/ida-f.l.i.r.t.-technology-in-depth.html#copyright","title":"Copyright","text":"<p>Finally, there is an obvious copyright problem: standard libraries may simply not be distributed with a disassembler.</p>"},{"location":"user-guide/signatures/flirt/ida-f.l.i.r.t.-technology-in-depth.html#the-idea","title":"The idea","text":"<p>To address those issues, we created a database of all the functions from all libraries we wanted to recognize. IDA now checks, at each byte of the program being disassembled, whether this byte can mark the start of a standard library function.</p> <p>The information required by the recognition algorithm is kept in a signature file. Each function is represented by a pattern. Patterns are first 32 bytes of a function where all variant bytes are marked.</p> <p>For example:</p> <pre><code>558BEC0EFF7604..........59595DC3558BEC0EFF7604..........59595DC3 _registerbgidriver\n558BEC1E078A66048A460E8B5E108B4E0AD1E9D1E980E1C0024E0C8A6E0A8A76 _biosdisk\n558BEC1EB41AC55604CD211F5DC3.................................... _setdta\n558BEC1EB42FCD210653B41A8B5606CD21B44E8B4E088B5604CD219C5993B41A _findfirst\n\n</code></pre> <p>where variant bytes are displayed as \u201c..\u201d Several functions start with the same byte sequence. Therefore a tree structure seems particularly well suited to the storage of those functions :</p> <pre><code>558BEC\n      0EFF7604..........59595DC3558BEC0EFF7604..........59595DC3 _registerbgidriver\n      1E\n        078A66048A460E8B5E108B4E0AD1E9D1E980E1C0024E0C8A6E0A8A76 _biosdisk\n        B4\n          1AC55604CD211F5DC3                                       _setdta\n          2FCD210653B41A8B5606CD21B44E8B4E088B5604CD219C5993B41A   _findfirst\n</code></pre> <p>Sequences of bytes are kept in the nodes of the tree. In this example, the root of the tree contains the sequence \u201c558BEC\u201d, three subtrees stem from the root, respectively starting with bytes 0E, 1E, B4. The subtree starting with B4 gives birth to two subtrees. Each subtree ends with leaves . The information about the function is kept in that (only the name is visible in the above example).</p> <p>The tree data structure simultaneously achieves two goals :</p> <ul> <li>Memory requirements are decreased since we store bytes common to several functions in tree nodes. This saving is, of course, proportional to the number of functions starting with the same bytes.</li> <li>It is well suited to fast fast pattern matching. The number of comparisons required to match a specific location within a program to all functions in a signature file grows logarithmically with the number of functions.</li> </ul> <p>It would not be very wise to take a decision based on the first 32 bytes of a function alone. As already suggested, modern real-world libraries contain several functions starting with the same bytes:</p> <pre><code>558BEC\n      56\n        1E\n          B8....8ED8\n                   33C050FF7608FF7606..........83C406\n                                                      8BF083FEFF\n                    0. _chmod   (20 5F33)\n                    1. _access  (18 9A62)\n\n</code></pre> <p>When two functions have the same first 32 bytes, they are stored in the same leaf of the tree. To resolve that situation, we calculate the CRC16 of the bytes starting from position 33 until till the first variant byte. The CRC is stored in the signature file. The number of bytes used to calculate that CRC also needs to be saved, as it differs from function to function. In the above example, the CRC16 is calculated on 20 bytes for the _chmod (bytes 33..52) function and 18 _access function.</p> <p>There is, of course, a possibility that the first variant byte will be at the 33d position. The length of the sequence of bytes used to calculate the CRC16 is then equal to zero. In practice, this happens rarely and this algorithm gives very low number of false recognitions.</p> <p>Sometimes functions have the same initial 32-byte pattern and the same CRC16, as in the example below</p> <pre><code>05B8FFFFEB278A4606B4008BD8B8....8EC0\n          0. _tolower (03 41CB) (000C:00)\n          1. _toupper (03 41CB) (000C:FF)\n\n</code></pre> <p>We are unlucky: only 3 bytes were used to calculate the CRC16 and they were the same for both functions. In this case we will try to find a position at which all functions in a leaf have different bytes. (in our example this position is 32+3+000C)</p> <p>But even this method does not allow to recognize all functions. Here is another example:</p> <pre><code>... (partial tree is shown here)\n                0D8A049850E8....83C402880446803C0075EE8BC7:\n                  0. _strupr (04 D19F) (REF 0011: _toupper)\n                  1. _strlwr (04 D19F) (REF 0011: _tolower)\n\n</code></pre> <p>These functions are identical at non-variant bytes and differ only by the functions they call. In this example the only way to distinguish functions is to examine the name referenced from the instruction at offset 11.</p> <p>The last method has a disadvantage: proper recognition of functions _strupr() and _strlwr() depends on the recognition of functions _toupper() and _tolower(). It means that in the case of failure because of the absence of reference to _toupper() or _tolower() we should defer recognition and repeat it later, after finding _tolower() or _toupper(). This has an impact on the general design of the algorithm : we need a second pass to resolve those deferred recognitions. Luckily, subsequent passes are only applied to a few locations in the program.</p> <p>Finally, one can find functions that are identical in non-variant bytes, refer to the same names but are called differently. Those functions have the same implementation but different names. Surprisingly, this is a frequent situation in standard libraries, especially in C++ libraries.</p> <p>We call this situation a _collision_ which occurs when functions attached to a leaf cannot be distinguished from each other by using the described methods. A classical example is:</p> <pre><code>558BEC1EB441C55606CD211F720433C0EB0450E8....5DCB................\n   0. _remove (00 0000)\n   1. _unlink (00 0000)\n\n   or\n8BDC36834702FAE9....8BDC36834702F6E9............................\n   0. @iostream@$vsn            (00 0000)\n   1. @iostream_withassign@$vsn (00 0000)\n\n</code></pre> <p>Artificial Intelligence is the only way to resolve those cases. Since our goal was efficiency and speed, we decided to leave artificial intelligence for the future developments of the algorithm.</p>"},{"location":"user-guide/signatures/flirt/ida-f.l.i.r.t.-technology-in-depth.html#the-implementation","title":"The Implementation","text":"<p>In IDA version 3.6, the practical implementation of the algorithm matches the above description almost perfectly. We have limited ourselves to the C and C++ language but it will be, without doubt, possible to write pre-processors for other libraries in the future.</p> <p>A separate signature file is provided for each compiler. This segregation decreases the probability of cross-compiler identification collisions. A special signature file, called startup signature file is applied to the entry point of the disassembled program to determine the generating compiler. Once it has been identified, we know which signature file should be used for the rest of the disassembly. Our algorithm successfully discerns the startup modules of most popular compilers on the market.</p> <p>Since we store all functions\u2019 signatures for one compiler in one signature file, it is not necessary to discriminate the memory models (small,compact, medium, large, huge) of the libraries and/or versions of the compilers.</p> <p>We use special startup-signatures for every format of disassembled file. The signature exe.sig is used for programs running under MS DOS, lx.sig or ne.sig \u2013 for OS/2, etc.</p> <p>To decrease a probability of false recognition of short functions, we must absolutely remember any reference to an external name if such a reference exists. It may decrease, to some degree, the probability of the recognition of the function in general but we believe that such an approach is justified. It is better not to recognize than to recognize wrongly. Short functions (shorter than 4 bytes) that do no contain references to external names are not used in the creation of a signature file and no attempt is made to recognize such functions.</p> <p>The functions from \\ are short and refer to the array of types of the symbols, therefore we decided to consider the references to this array as an exception : we calculate the CRC16 of the array of the types of the symbols and store it in the signature file. <p>Without artificial intelligence, the collisions are solved by natural intelligence. The human creator of a signature file chooses the functions to include and to discard from the signature file. This choice is very easy and is practically implemented by the edition of a text file.</p> <p>The patterns of the functions are not stored in a signature file under their original form (i.e., they do not look like the example figures). In place of the patterns, we store the arrays of bits determining the changing bytes and the values of the individual bytes are stored. Therefore the signature file contains no byte from the original libraries, except for the names of the functions. The creation of a signature file involves in 2 stages: the preprocessing of the libraries and the creation of a signature file. In the first stage the program \u2018parselib\u2019 is used. It preprocesses *.obj and *.lib files to produce a pattern-file. The pattern-file contains the patterns of the functions, their names, their CRC16 and all other information necessary to create the signature file. At the second stage the \u2018sigmake\u2019 program builds the signature file from the pattern-file.</p> <p>This division into 2 stages allows sigmake utility to be independent of the format of the input file. Therefore it will be possible to write other preprocessors for files differing from *.obj and *.lib in future.</p> <p>We decided to compress (using the InfoZip algorithm) the created signature files to decrease the disk space necessary for their storage.</p> <p>For the sake of user\u2019s convenience we attempted to recognize the main() function as often as it was possible. The algorithm for identifying this function differs from compiler to compiler and from program to program. (DOS/OS2/Windows/GUI/Console\u2026).</p> <p>This algorithm is written, as a text string, in a signature file. Unfortunately we have not yet been able to automate the creation of this algorithm.</p>"},{"location":"user-guide/signatures/flirt/ida-f.l.i.r.t.-technology-in-depth.html#the-results","title":"The Results","text":"<p>As it turns out the signature files compress well; they may be compressed by a factor bigger than 2. The reason of this compressibility is that about 95% of a signature file are function names. (Example: the signature file for MFC 2.x was 2.5MB before compression, 700Kb after. It contains 33634 function names; an average of 21 bytes is stored per function. Generally, the ratio of the size of a library size to the size of a signature file varies from 100 to 500.</p> <p>The percentage of properly recognized functions is very high. Our algorithm recognized all but one function of the \u201cHello World\u201d program. The unrecognized function consists of only one instruction:</p> <pre><code>        jmp     off_1234\n\n</code></pre> <p>We were especially pleased with the fact that there was no false recognition. However it does not mean that they will not occur in the future. It should be noted that the algorithm only works with functions.</p> <p>Data is sometimes located in the code segment and therefore we need to mark some names as \u201cdata names\u201d, not as \u201cfunction names\u201d. It is not easy to examine all names in a modern large library and mark all data names.</p> <p>The implementation of these data names is planned, some time in the future.</p>"},{"location":"user-guide/signatures/flirt/supported-compilers/delphi.html","title":"Delphi","text":"<p>Thanks to Peter Sawatzki who kindly generated the FLIRT sig files. He also donated Delphi 4/5 files.</p>"},{"location":"user-guide/signatures/flirt/supported-compilers/delphi.html#delphi-3-program","title":"Delphi 3 Program","text":""},{"location":"user-guide/signatures/flirt/supported-compilers/delphi.html#flirt-enhanced-disassembly","title":"FLIRT-Enhanced Disassembly","text":"<p>Note : this result is totally automatic, including the comments.</p> <p></p>"},{"location":"user-guide/signatures/flirt/supported-compilers/turbo-pascal.html","title":"Turbo Pascal","text":"<p>(FLIRT libraries thanks to Nick Pisanov)</p>"},{"location":"user-guide/signatures/flirt/supported-compilers/turbo-pascal.html#turbo-pascal-program","title":"Turbo Pascal Program","text":""},{"location":"user-guide/signatures/flirt/supported-compilers/turbo-pascal.html#flirt-enhanced-disassembly","title":"FLIRT-Enhanced Disassembly","text":"<p>Note: this result is totally automatic, including the comments.</p> <p></p>"},{"location":"user-guide/teams/index.html","title":"Teams","text":""},{"location":"user-guide/teams/hv_user_manual.html","title":"hv command reference manual","text":""},{"location":"user-guide/teams/hv_user_manual.html#hv-credentials","title":"hv credentials","text":"<p>In order to connect to the vault server, hv must at least have:</p> <ul> <li>a username</li> <li>a password</li> <li>a hostname</li> </ul> <p>For example:</p> <pre><code>$ hv -hhexvault.acme.com:65433 -uadmin -psecret users\nLastActive Adm    Login        Email\n---------- --- ------------ ------------\n2022-06-27  *  admin\n2022-06-22     alice       Alice &lt;alice@acme.com&gt;\nNever          bob         Bob &lt;bob@acme.com&gt;\n...\n</code></pre> <p>There are 3 ways to specify credentials (in decreasing order of priority):</p> <ul> <li>providing them as command-line arguments (as in the example above)</li> <li>storing them in environment variables</li> <li>storing them in the registry+keychain (recommended)</li> </ul> <p>All credentials, including usernames, are case-senstive, meaning that \"Joe\" and \"joe\" would be different users.</p>"},{"location":"user-guide/teams/hv_user_manual.html#command-line","title":"Command line","text":"<p>Passing credentials on the command line will always take precedence over environment variables and registry+keychain.</p> <code>-uUSERNAME</code> specify username <code>-pPASSWORD</code> specify password <code>-hHOST</code> specify host (server:port) (if port is omitted, defaults to 65433) <code>-sSITENAME</code> specify site <code>--set</code> remember credentials. This option doesn\u2019t require the credentials to be passed through the command line, credentials passed through environment variables will work as well"},{"location":"user-guide/teams/hv_user_manual.html#environment-variables","title":"Environment variables","text":"<p>Credentials can also be passed through environment variables. They will take precedence over those possibly found in the registry+keychain.</p> <code>VAULT_HOST</code> the server host name <code>VAULT_PORT</code> the server port <code>VAULT_USER</code> the username to connect to the server <code>VAULT_PASS</code> the user\u2019s password <code>VAULT_SITE</code> the site to use (most commands need a site to operate)"},{"location":"user-guide/teams/hv_user_manual.html#registry-keychain","title":"Registry + keychain","text":"<p>Unless environment variables or command-line arguments are provided, <code>hv</code> will look for credentials in the registry (and the OS\u2019s keychain for passwords.)</p> <p>Credentials can be stored in the registry (and keychain) like so:</p> <pre><code>alice@alice_PC$ hv --set -ualice -palice -hvaultserver -salice_on_alicepc\n</code></pre> <p>The user, host (and optional site) will be persisted in the registry, while the password will be saved to the OS\u2019s keychain.</p> <p>For this operation to succeed, at least a user and host must be provided</p> <p>In order to keep the various commands' syntax as clear as possible, we will assume that the user has stored credentials (in either the registry+keychain or environment variables) for the rest of this manual.</p>"},{"location":"user-guide/teams/hv_user_manual.html#best-practices","title":"Best practices","text":"<p>We recommend persisting credentials using the registry+keychain method.</p> <p>Once that is done, commands will become cleaner:</p> <pre><code>&gt;./hv info\n\nHex-Rays Vault Server v1\nVault time: 2022-04-14 15:36:29, up since 2022-04-14 15:17:25\n...\n</code></pre> <p>if you login to the server using <code>hvui</code> and save the login information, it will end up in the the registry+keychain method, and thus <code>hv</code> will then be able to use that information as well.</p>"},{"location":"user-guide/teams/hv_user_manual.html#path-formats","title":"Path formats","text":"<p>Local paths refer to a file on the host file system.</p> <p>Vault paths refer to a file mapped on the vault. They can start with <code>//</code> to refer to the root of the vault.</p> <p>Some vault paths can optionally specify the revision of the path.</p> <p>Special symbols were created to access specific revisions:</p> <code>^</code> last revision available on the vault <code>=</code> current revision, that is synced on the site <code>*</code> all revisions <p>Special file revision symbols</p> <code>subdir/</code> means all files in all subdirectories <code>subdir</code> means all files in all subdirectories (same as subdir/) <code>subdir/*</code> means all files in the directory <p>Directories and wildcards</p>"},{"location":"user-guide/teams/hv_user_manual.html#examples","title":"Examples","text":"<p>Get the first revision of a file:</p> <pre><code>$ hv sync //malware/Ransomware.WannaCry/41aa.exe.i64#1\nok synced //malware/Ransomware.WannaCry/41aa.exe.i64#1 (838724 bytes)\nok sync completed\n</code></pre> <p>Sync to the last version of a file:</p> <pre><code>$ hv sync malware/Ransomware.WannaCry/41aa.exe.i64#^\nok synced //malware/Ransomware.WannaCry/41aa.exe.i64#3 (846916 bytes)\nok sync completed\n</code></pre> <p>Force sync to the current revision (we must specify -f to force a file transfer):</p> <pre><code>$ hv sync -f malware/Ransomware.WannaCry/41aa.exe.i64#=\nok synced //malware/Ransomware.WannaCry/41aa.exe.i64#2 (846916 bytes)\nok sync completed\n</code></pre> <p>Display md5 checksums of all revisions of a file:</p> <pre><code>$ hv md5 malware/Ransomware.WannaCry/41aa.exe.i64#*\nok 8F464140FA3DA4A20B03166F2E80325B //malware/Ransomware.WannaCry/41aa.exe.i64#1\nok E0F7B984151FEF497985F375C64FA5C7 //malware/Ransomware.WannaCry/41aa.exe.i64#2\nok 5C3B88306CF0D93DC35FFD67A710AE3B //malware/Ransomware.WannaCry/41aa.exe.i64#3\n</code></pre> <p>List Hex-Rays Vault server\u2019s toplevel directory contents:</p> <pre><code>$ hv dir //\n2022-06-02 10:29:30       140267 CL29/edit //malware/cppobj_virtcall.i64#9\n2022-06-14 16:44:19      2173541 CL36/edit //iOS/dyld_ios16.i64#3\n</code></pre> <p>Plan to add a file to the vault:</p> <pre><code>$ hv add /path/to/local_rootdir/enable.png\nok added '//enabled.png'\n</code></pre> <p>Plan to add a directory:</p> <pre><code>$ hv add /path/to/local_rootdir/REsearch\nok added '//REsearch/vm2vm.dat'\nok added '//REsearch/vm2vm.exe'\nok added '//REsearch/vm2vm.i64'\n</code></pre> <p>Plan to delete a file:</p> <pre><code>$ hv del /path/to/local_rootdir/REsearch/*.dat\nok checked out '//REsearch/vm2vm.dat' for 'del' (worklist 1)\n</code></pre> <p>Show worklist to which files were added:</p> <pre><code>$ hv worklist show\nWL 1 add  //REsearch/vm2vm.exe#0\nWL 1 add  //REsearch/vm2vm.i64#0\nWL 1 edit //cppobj_virtcall.i64#9\nWL 1 add  //enabled.png#0\n</code></pre> <p>It is safe to interrupt a command using Ctrl-C. The file transfers in action will be gracefully terminated, so that no partially received files will be left on the disk. However, the requests that were delivered to the server will still be carried out up to the completion. For example, if the user asked to check out thousands of files for editing, this will be performed even if the user presses Ctrl-C after invoking the command.</p> <p>If the command syntax specifies ellipsis (\u2026\u200b), it means that multiple path patterns can be specified. The path patterns can be specified using local paths or vault paths, which start with a double slash (<code>//</code>).</p>"},{"location":"user-guide/teams/hv_user_manual.html#commands","title":"Commands","text":""},{"location":"user-guide/teams/hv_user_manual.html#sites","title":"Sites","text":"<p>Commands in this section manipulate sites.</p> <p>A user must be using a site in order for most commands to work correctly.</p>"},{"location":"user-guide/teams/hv_user_manual.html#site-add","title":"<code>site add</code>","text":"<p>site add [-u USER] SITENAME ROOTDIR [HOST]</p> <p>Creates a new site.</p> <p>The specified user will be the owner of the new site. If the user is not specified, the current user will own the site. Only the site owner can use a site.</p> <p>Only admins can create sites for other users.</p> <p>To use a site, it must be specified as described in the credentials section.</p> <code>-u USER</code> The user (owner) of the new site, must be an existing username. Defaults to the current user. Admins can specify a different user. <code>SITENAME</code> The name of the site that will be created, it must be unique (no site can already exist with that name). It must not exceed 64 characters, and it must be composed of alphanumerics or underscore or dash. The first character cannot be a digit or a dash. <code>ROOTDIR</code> The absolute path to the directory that will hold the vault files. <code>HOST</code> The computer from which the site can be used. It can be specified as an empty string. In this case the server will let the site to be used by any computer. However, since it is a safety feature that prevents from inadvertently using a site from a wrong computer, we do not recommend to specify it as an empty string. When creating a site for the current user, the host defaults to the current computer. <p>Examples:</p> <pre><code># Example: Create a new site:\nalice@alice_PC$ hv site add alicepc /home/alice/vault_site\n</code></pre> <pre><code># Example: Ensure that is exists:\nalice@alice_PC$ hv sites\nSite name User  Host     Last Used  Rootdir\n--------- ----- -------- ---------- ------------\nalicepc   alice alice_PC Never     /home/alice/vault_site\n</code></pre> <pre><code># Example: Remember the new site in the registry:\nalice@alice_PC$ hv --set -salicepc\nInformation has been saved into the registry.\n</code></pre> <pre><code># Example: The new site is used in all future commands:\nalice@alice_PC$ hv info |grep site\nClient site: alicepc\n</code></pre>"},{"location":"user-guide/teams/hv_user_manual.html#site-del","title":"<code>site del</code>","text":"<p>site del [-f] SITENAME</p> <p>Deletes a site.</p> <p>If <code>-f</code> was passed and the site has some pending worklists, they will be deleted.</p> <p>This is not a reversible operation, so we recommend caution.</p> <p>Only admins can delete sites that belong to other users.</p> <code>-f</code> Force the deletion even if the site still has worklists. <code>SITENAME</code> Name of the site to delete. <p>Example:</p> <pre><code># Example: Delete the site, forcing deletion of the site's worklists\nalice@alice_PC$ hv site del alice_old_laptop\n'alice_old_laptop' not empty\n\nalice@alice_PC$ hv site del -f alice_old_laptop\n</code></pre>"},{"location":"user-guide/teams/hv_user_manual.html#site-edit","title":"<code>site edit</code>","text":"<p>site edit [-u USER] SITENAME ROOTDIR [HOST]</p> <p>Edits an existing site's details, such as the rootdir and the host it is bound to.</p> <p>Admins can reassign a site to a new user or edit sites of other users.</p> <code>-u USER</code> The new user (owner) of the site, can only be different than the previous owner if the current user is admin. <code>SITENAME</code> The name of the site that will be edited. It must exist and be owned by the current user, unless if the current user is admin. <code>ROOTDIR</code> The new absolute path to the directory that will hold the site files. <code>HOST</code> The new hostname that will be used for the site. It can be omitted if no changes are desired. <p>Examples:</p> <pre><code># Example: Change the root directory of a site:\nalice@alice_PC$ hv site edit alicepc /home/alice/vault\n\n</code></pre> <pre><code># Example: Transfer ownership of site \"local_on_shared_machine\" to Bob:\nalice@alice_PC$ hv site edit -u bob local_on_shared_machine /home/shared/projects re.acme.com\n\n</code></pre>"},{"location":"user-guide/teams/hv_user_manual.html#sites_1","title":"<code>sites</code>","text":"<p>sites [SITENAME]</p> <p>Lists all sites.</p> <p>Show a list of sites, and their associated information.</p> <code>SITENAME</code> Name of the site to show. <p>Example:</p> <pre><code>alice@alice_PC$ hv sites \nSite name  User   Host       Last Used  Rootdir                Cur\n---------- ------ ---------- ---------- ---------------------- ---\nalicepc    alice  alice_PC   2022-06-22 /home/alice/vault_site  *\njoe_laptop joe    ThinkPad14 2022-05-30 c:/work/vault\nchrispc    chris  chris_PC   Never      W:/vault\n</code></pre>"},{"location":"user-guide/teams/hv_user_manual.html#site-filters","title":"Site filters","text":"<p><code>filt get</code></p> <p>filt get [-s SITENAME]</p> <p>Displays the filter table associated with the site.</p> <p>Only admins can see filter tables of other users.</p> <code>-s SITENAME</code> The sitename whose filter table should be displayed. If omitted, defaults to the current site. <p>Examples:</p> <pre><code># Example: Show the default (i.e., empty) filter table\nalice@alice_PC$ hv filt get \n##### If the site filters were not set yet, the following info will be displayed:\nalice@alice_PC$ hv filt get\n##### By default all vault files are visible.\n##### The admin can set up permissions to deny access\n##### to some files. The user too can set up filter\n##### patterns to make some files invisible. For that,\n##### each site has a user-controlled filter table.\n#####\n##### The below table controls vault file visibility.\n##### The table is scanned from the beginning to the end.\n##### Lines starting with '!' hide the matching files.\n##### Other lines make the matching files visible.\n##### If the first line starts with '!', all files are\n##### visible by default. Otherwise, all files are\n##### invisible by default.\n# Example: !*.mov will hide all *.mov files.\n\n</code></pre> <pre><code># Example: Set site filters from the standard input:\nalice@alice_PC$ hv filt set\n/work/research/\n&lt;Ctrl-D&gt;\n\n</code></pre> <pre><code># Example: Verify the new filters:\nalice@alice_PC$ hv filt get \n/work/research/\n##### The files outside of /work/research/ are not visible anymore\n</code></pre> <p><code>filt set</code></p> <p>filt set [-s SITENAME] [@file]</p> <p>Sets the filter table associated to the site, either interactively or from @file.</p> <p>Information about the format of site filters can be retrieved by issuing the filt get command.</p> <p>Only admins can modify filter tables of other users.</p> <code>-s SITENAME</code> The sitename whose filter table should be set. If omitted, defaults to current site. <code>@file</code> File containing the new table. <p>Examples:</p> <pre><code># Example: Make everything in the current site hidden, but `.bak` files\nalice@alice_PC$ echo *.bak | hv filt set\n\n</code></pre> <pre><code># Example: Set site filters, from a file\nalice@alice_PC$ cat @tablefile\n*.idb\n*.exe\nalice@alice_PC$ hv filt set -s site1 @tablefile\n</code></pre>"},{"location":"user-guide/teams/hv_user_manual.html#file-manipulation","title":"File manipulation","text":""},{"location":"user-guide/teams/hv_user_manual.html#add","title":"<code>add</code>","text":"<p>add [-s] [-w WORKLIST_ID] PATH_PATTERN...</p> <p>Adds new file(s) to a worklist.</p> <p>Issuing this command will not upload the file(s) to the server right away: the new file name(s) will be placed into a worklist, which then needs to be committed to the server. Once a worklist is committed, its files will be available to other users.</p> <p>The specified file(s) are not required to exist, it is possible to add a file that does not exist yet.</p> <p>The files must be inside the site's rootdir.</p> <p>The files will be filtered using hvignore rules.</p> <code>-s</code> Silent mode; do not output any messages. <code>-w WORKLIST_ID</code> The id of the worklist that the file(s) will be added to. If omitted, defaults to worklist 1. PATH_PATTERN... Local path to file(s) to add to the vault. <p>Examples:</p> <pre><code>alice@alice_PC$ hv add new.idb\nok added '//new.idb'\n\n</code></pre> <pre><code># Example: add files to worklist 2\nalice@alice_PC$ hv add -w 2 cuda_demo_suite/*\nok added '//cuda_demo_suite/bandwidthTest'\nok added '//cuda_demo_suite/busGrind'\nok added '//cuda_demo_suite/deviceQuery'\nok added '//cuda_demo_suite/nbody'\nok added '//cuda_demo_suite/nbody_data_files/nbody_galaxy_20K.bin'\nok added '//cuda_demo_suite/oceanFFT'\nok added '//cuda_demo_suite/oceanFFT_data_files/ocean.frag'\nok added '//cuda_demo_suite/oceanFFT_data_files/ocean.vert'\nok added '//cuda_demo_suite/oceanFFT_data_files/ref_slopeShading.bin'\nok added '//cuda_demo_suite/oceanFFT_data_files/ref_spatialDomain.bin'\nok added '//cuda_demo_suite/randomFog'\nok added '//cuda_demo_suite/randomFog_data_files/ref_randomFog.bin'\nok added '//cuda_demo_suite/vectorAdd'\n</code></pre>"},{"location":"user-guide/teams/hv_user_manual.html#copy","title":"<code>copy</code>","text":"<p>copy [-s] [-w WORKLIST_ID] SRC_PATH DST_PATH</p> <p>Makes a copy of vault file(s).</p> <p>This command creates a copy of the original file at the requested destination, and place the new file into a worklist. Once the worklist is committed, the new file will be visible to other users.</p> <p>NOTE: The source file will be downloaded from the server to the new file. If the source file was modified locally, those modifications won't be part of the copy. This implies that if a file has just been added to the {hrvsrv} but not committed yet, it can't be copied because it does not exist on the server yet.</p> <code>-s</code> Silent mode; do not output any messages. <code>-w WORKLIST_ID</code> The id of the worklist that the files will be added to. If omitted, defaults to worklist 1. SRC_PATH The source path. DST_PATH The destination path. <p>Examples:</p> <pre><code># Example: Copy `newfile` into the `rust_samples` subdirectory. The worklist #2 will hold the change.\nalice@alice_PC$ hv copy -w 2 newfile rust_samples/newfile\nok copied '//newfile#1' to '//rust_samples/newfile'\n\n</code></pre> <pre><code># Example: Copy an entire subdirectory (note the trailing slash at the destination):\nalice@alice_PC$ hv copy source_subdir/ destination/subdir/\nok copied '//source_subdir/aaa/sample.idb#1' to '//destination/subdir/aaa/sample.idb'\nok copied '//source_subdir/common.idb#1' to '//destination/subdir/common.idb'\n\n</code></pre> <pre><code># Example: Copy a subdirectory without recursion:\nalice@alice_PC$ hv copy source_subdir/* destination/subdir/\nok copied '//source_subdir/common.idb#1' to '//destination/subdir/common.idb'\n\n</code></pre> <pre><code># Example: Copy a file that was just added but not yet committed, it will fail:\nalice@alice_PC$ hv add test.text\nok added '//test.text'\nalice@alice_PC$ hv copy test.text test.text.copy\nno matching files for '//test.text'\n\n</code></pre>"},{"location":"user-guide/teams/hv_user_manual.html#move","title":"<code>move</code>","text":"<p>move [-s] [-w WORKLIST_ID] SRC_PATH DST_PATH</p> <p>Opens tracked file(s) for moving/renaming.</p> <p>This is similar to performing a copy, followed by a del: the new file will be checked out for copy while the original file will be checked out for deletion.</p> <code>-s</code> Silent mode; do not output any messages. <code>-w WORKLIST_ID</code> The id of the worklist that the file(s) will be added to. If omitted, defaults to the worklist 1. SRC_PATH The source path. DST_PATH The destination path. <p>Example:</p> <pre><code>alice@alice_PC$ hv move //VxWorks/CP05x/info.txt //VxWorks/CP05x/info.md\nok moved '//VxWorks/CP05x/info.txt#1' to '//VxWorks/CP05x/info.md'\n\nalice@alice_PC$ hv wk show 1\nWL 1 copy //VxWorks/CP05x/info.md#0\nWL 1 del  //VxWorks/CP05x/info.txt#1\n\nalice@alice_PC$ hv edit //VxWorks/CP05x/info.txt\nfile '//VxWorks/CP05x/info.txt' is already checked out\n</code></pre>"},{"location":"user-guide/teams/hv_user_manual.html#del","title":"<code>del</code>","text":"<p>del [-s] [-w WORKLIST_ID] PATH_PATTERN...</p> <p>Opens tracked file(s) for deletion, adding them to a worklist.</p> <p>Once the worklist is committed, the file(s) won't be tracked anymore by the {hrvsrv}, and will be removed from the local filesystem.</p> <p>NOTE: That this does not remove all revisions of the file on the server: that is the role of the purge command.</p> <code>-s</code> Silent mode; do not output any messages. <code>-w WORKLIST_ID</code> The id of the worklist that the file(s) will be added to. If omitted, defaults to worklist 1. PATH_PATTERN... Vault path of file(s) to delete. <p>Example:</p> <pre><code>alice@alice_PC$ ls /path/to/site_rootdir/cat\n/path/to/site_rootdir/cat\n\nalice@alice_PC$ hv del -w2 cat\nok checked out '//cat' for 'del' (worklist 2)\n\nalice@alice_PC$ ls /path/to/site_rootdir/cat\n/path/to/site_rootdir/cat\n\nalice@alice_PC$ hv commit 2 \"Deleted 'cat'\"\nok commit #39 completed\n\nalice@alice_PC$ ls /path/to/site_rootdir/cat\nls: cannot access '/path/to/site/rootdir/cat': No such file or directory\n</code></pre>"},{"location":"user-guide/teams/hv_user_manual.html#edit","title":"<code>edit</code>","text":"<p>edit [-s] [-w WORKLIST_ID] PATH_PATTERN...</p> <p>Opens tracked file(s) for edit, adding them to a worklist.</p> <p>This command is used to instruct the {hrvsrv} that we will be working on files, so that it knows what revision of the file(s) that work will be based on and so later diff or resolve commands can work correctly.</p> <code>-s</code> Silent mode; do not output any messages. <code>-w WORKLIST_ID</code> The id of the worklist that the file(s) will be added to. If omitted, defaults to worklist 1. PATH_PATTERN... Vault path of file(s) to checkout for edit. <p>Example:</p> <pre><code>alice@alice_PC$ hv edit cat.i64\nok checked out '//cat.i64' for 'edit' (worklist 1)\n\n(...do some work...)\n\nalice@alice_PC$ hv commit 1 \"Analyzed 'main' function\"\nok commit #12 completed\n</code></pre>"},{"location":"user-guide/teams/hv_user_manual.html#scan","title":"<code>scan</code>","text":"<p>scan [-a] [-e] [-d] [-s] [PATH_PATTERN...]</p> <p>Reconciles the contents of the current directory (or the one(s) provided) on the local filesystem, with those of the corresponding path(s) on the server.</p> <p>This command will recursively look for:</p> <ul> <li>new files (if <code>-a</code> is provided)</li> <li>deleted files (if <code>-d</code> is provided)</li> <li>modified files (if <code>-e</code> is provided)</li> </ul> <p>If any is found will create a new worklist and, add those for addition/deletion/modification.</p> <p>This command is particularly useful if the user didn't have access to the server at a time it was necessary (e.g., to issue an edit command, while flying across the Atlantic.) Users can still get work done in such cases, and once they gain access to the server again, issue a scan to commit the changes.</p> <p>NOTE: The <code>-e</code> option causes the scan command to compute checksums of the local files, in order to compare them against those known to the server, in order to spot modifications.</p> <p>NOTE: If no options were given, defaults to <code>-e -d</code>.</p> <p>The files found by the <code>scan</code> command will be filtered by hvignore.</p> <code>-a</code> Checkout for add files that are present only on the client side. <code>-e</code> Checkout for edit files that are present on both the vault and the client side but differ. <code>-d</code> Checkout for delete files that are present only on the server side. <code>-s</code> Silent mode; do not output any messages. PATH_PATTERN... Local path of file(s) to scan, if omitted defaults to current directory. <p>Example:</p> <pre><code>alice@alice_PC$ hv scan -a -e -d //\nadded worklist 3\nchecked out '//afile' for 'del' (worklist 3)\nchecked out '//Win32.Emotet/29D6161522C7F7F21B35401907C702BDDB05ED47.bin.i64' for 'edit' (worklist 3)\n</code></pre>"},{"location":"user-guide/teams/hv_user_manual.html#working-with-worklists","title":"Working with worklists","text":""},{"location":"user-guide/teams/hv_user_manual.html#worklists","title":"<code>worklists</code>","text":"<p>worklists [WORKLIST_ID] [USER]</p> <p>Lists information about worklists.</p> <p>Show a (possibly filtered) list of pending worklists, and their metadata:</p> <ul> <li>the timestamp of when they were last changed</li> <li>the number of files they contain</li> <li>the owner</li> <li>the site</li> <li>their description</li> </ul> <p>See also worklist show</p> <code>WORKLIST_ID</code> Restrict to the provided worklist, defaults to showing all worklists. <code>USER</code> Restrict to user USER, defaults to the current user. <p>Example:</p> <pre><code>alice@alice_PC$ hv worklists \nWL 4 2022-06-27 17:24:51 2 files; $USER@$ALICE_SITE More work on L30DS2 firmware\n\n</code></pre>"},{"location":"user-guide/teams/hv_user_manual.html#manipulating-a-worklist","title":"Manipulating a worklist","text":"<p>The following <code>worklist</code> commands will also work with the shorter <code>wk</code> alias.</p> <p><code>worklist add</code></p> <p>worklist add DESCRIPTION</p> <p>Creates a new worklist, with the provided description.</p> <p>The worklist will initially be empty, and assigned a free ID.</p> <p>Files can be associated to that new worklist when they are marked for addition, deletion, or edition.</p> <code>DESCRIPTION</code> The description of the new worklist. <p>Example:</p> <pre><code>alice@alice_PC$ hv worklist add \"Working on the 'TMutexLocker' vtable\"\nadded worklist 3\nalice@alice_PC$ hv edit -w 3 //cppobj*\nok checked out '//cppobj_virtcall.i64' for 'edit' (worklist 3)\nalice@alice_PC$ hv worklist add \"vm2vm: WIP\"\nadded worklist 4\nalice@alice_PC$ hv edit -w 4 //REsearch/*\nok checked out '//REsearch/vm2vm.exe' for 'edit' (worklist 4)\nok checked out '//REsearch/vm2vm.i64' for 'edit' (worklist 4)\n</code></pre> <p><code>worklist show</code></p> <p>worklist show [-s SITE] [-u USER] [WORKLIST_ID]</p> <p>Lists worklist contents.</p> <p>Show a list of files opened for editing, addition or deletion, and their associated worklist(s).</p> <code>-s SITE</code> Restrict to site SITE. If omitted, defaults to the current site. <code>-u USER</code> Restrict to user USER. If omitted, defaults to the current user. <code>WORKLIST_ID</code> Restrict to the provided worklist, defaults to showing all worklists. <p>Examples:</p> <pre><code>alice@alice_PC$ hv worklist show 3\nWL 3 edit //cppobj_virtcall.i64#9\nalice@alice_PC$ hv worklist show 4\nWL 4 edit //REsearch/vm2vm.exe#1\nWL 4 edit //REsearch/vm2vm.i64#1\nalice@alice_PC$ hv worklist show \nWL 4 edit //REsearch/vm2vm.exe#1\nWL 4 edit //REsearch/vm2vm.i64#1\nWL 3 edit //cppobj_virtcall.i64#9\n\n</code></pre> <pre><code># Example: Show the worklist contents of another user\nalice@alice_PC$ hv worklist show -u ted\nWL 4 edit //malware/unk_2022#1/6 SITE=ted_laptop\nWL 2 copy //docs/onboarding.md#0 SITE=TEDPC\nWL 1 del  //ida64.i64#6 SITE=TEDPC\n\n</code></pre> <p><code>worklist edit</code></p> <p>worklist edit WORKLIST_ID DESCRIPTION</p> <p>Edits a worklist description.</p> <code>WORKLIST_ID</code> The worklist to modify. <code>DESCRIPTION</code> The new description for the worklist. <p>Example:</p> <pre><code># Example: change description of worklist 4\nalice@alice_PC$ hv worklist edit 4 \"vm2vm: resolved all offsets in 'main' function\"\n</code></pre> <p><code>worklist del</code></p> <p>worklist del WORKLIST_ID</p> <p>Deletes a worklist.</p> <p>This command will only succeed if the worklist is currently empty.</p> <code>WORKLIST_ID</code> The worklist to delete. <p>Example:</p> <pre><code>alice@alice_PC$ hv worklist del 3\nworklist 3 is not empty\nalice@alice_PC$ hv revert //cppobj*\nok reverted //cppobj_virtcall.i64\nalice@alice_PC$ hv worklist del 3\n</code></pre>"},{"location":"user-guide/teams/hv_user_manual.html#committing-a-worklist-to-the-server","title":"Committing a worklist to the server","text":"<p><code>commit</code></p> <p>commit [-f] [-s] WORKLIST_ID [DESCRIPTION]</p> <p>Commits files to the vault (push).</p> <p>This command uploads files from the local computer to the vault.</p> <p>After a successful commit, the modifications made to the files contained in the worklist will be made available for other users.</p> <p>A commit may fail if another user uploaded another revision of the changed files meanwhile. In this case resolve is necessary to merge the changes.</p> <p>If the worklist does not yet have a proper description, the DESCRIPTION is mandatory.</p> <code>-f</code> Force commit of unchanged files. <code>-s</code> Silent mode; do not output any messages. <code>WORKLIST_ID</code> The id of the worklist to commit to the vault. <code>DESCRIPTION</code> A description for the commit. <p>Example:</p> <pre><code>alice@alice_PC$ hv commit 1\nworklist 1 has empty description\nalice@alice_PC$ hv commit 1 \"more samples\"\nok accepted //newfile#1 (5 bytes)\nok commit #2 completed\n</code></pre>"},{"location":"user-guide/teams/hv_user_manual.html#syncing-files-resolving-reverting","title":"Syncing files, resolving &amp; reverting","text":"<p><code>sync</code></p> <p>sync [-f] [-p] [-s] [@COMMIT_ID] [PATH_PATTERN[=REVISION]...]</p> <p>Downloads the requested revisions of the files from the server, and stores them on the local filesystem.</p> <p>NOTE: If no paths are provided, all files from the server will be retrieved.</p> <p>Requires that a site to be currently selected.</p> <code>-f</code> Force sync. This will force a download of the files, even when the server thinks the client has the desired revision. This is a dangerous operation: any modification made to local files will be lost. <code>-p</code> The server will perform sync without really transferring files. This options is useful if the local files are already in sync but the server has stale info about them. <code>-s</code> Silent mode; do not output any messages. <code>@COMMIT_ID</code> Sync to state right after <code>COMMIT_ID</code> was committed, cannot be used with <code>=REVISION</code>. PATH_PATTERN[=REVISION]... Vault path of file(s) to sync, if path is omitted, defaults to current directory, if no revision is specified, defaults to last revision available on vault (<code>#^</code>). <p>Examples:</p> <pre><code># Example: Sync all\nalice@alice_PC$ hv sync \n\n</code></pre> <pre><code># Example: Sync only the specified subtree\nalice@alice_PC$ hv sync -f //work/ds1_10\n\n</code></pre> <pre><code># Example: Sync a file to specific revision\nalice@alice_PC$ hv sync //malware/Trojan.Shylock.Skype/D57D.i64#1\nok synced //malware/Trojan.Shylock.Skype/D57D.i64#1 (4374263 bytes)\nok sync completed\n</code></pre> <p><code>resolve</code></p> <p>resolve METHOD PATH_PATTERN</p> <p>Resolves conflicts in a file, using the specified strategy.</p> <p>After the strategy is successfully applied and the local file has incorporated both the \"local\" and \"remote\" changes, it will be ready to be committed.</p> <code>METHOD</code> One of \"auto\", \"lmerge\", \"rmerge\", \"manual\", \"local\" or \"remote\". PATH_PATTERN Vault path of file(s) to resolve. <p>Example:</p> <pre><code>alice@alice_PC$ hv resolve lmerge depot/file1.txt\n</code></pre> <p><code>revert</code></p> <p>revert [-a] [-p] [-s] PATH_PATTERN...</p> <p>Reverts opened files to their current revisions.</p> <code>-a</code> Revert only unchanged files. <code>-p</code> The server will revert the files without transferring files. <code>-s</code> Silent mode; do not output any messages. This options is useful if the local files are already in sync but the server has stale info about them. PATH_PATTERN... Vault path of file(s) to revert. <p>Example:</p> <pre><code>alice@alice_PC$ hv revert -a //\nok reverted //Win32.Emotet/29D6161522C7F7F21B35401907C702BDDB05ED47.bin\nok reverted //Win32.Emotet/29D6161522C7F7F21B35401907C702BDDB05ED47.bin.asm\nok reverted //Win32.Emotet/29D6161522C7F7F21B35401907C702BDDB05ED47.bin.log\n</code></pre> <p><code>migrate</code></p> <p>migrate [-s] PATH_PATTERN... WORKLIST_ID</p> <p>Moves opened files between worklists.</p> <code>-s</code> Silent Mode; do not output any messages. PATH_PATTERN... Vault path of file(s) to move. <code>WORKLIST_ID</code> The id of the worklist to move the files to, the worklist must already exist. <p>Example:</p> <pre><code>alice@alice_PC$ hv migrate afile subdir/for/fred/interfaces 3\nok migrated //afile#1 to worklist 3\nok migrated //subdir/for/fred/interfaces#0 to worklist 3\n</code></pre>"},{"location":"user-guide/teams/hv_user_manual.html#various-information","title":"Various information","text":""},{"location":"user-guide/teams/hv_user_manual.html#files","title":"<code>files</code>","text":"<p>files [-d] [-s] [PATH_PATTERN_OR_SUBSTRING[=REVISION]...]</p> <p>Displays the list of the files present in the vault.</p> <p>The command will collect files from the vault (that match the selection) and display for each file:</p> <ul> <li>the file path</li> <li>the revision</li> <li>the file size if it hasn't been deleted</li> <li>the last commit id</li> <li>the last action</li> </ul> <code>-d</code> Include deleted files. <code>-s</code> Search for substring instead of using a path. PATH_PATTERN_OR_SUBSTRING[=REVISION]... Vault path of file(s) to include in search or substring to search for if <code>-s</code>. If revision is not specified, defaults to current revision (<code>#=</code>). If no path is specified, defaults to the root directory of the vault. <p>Examples:</p> <pre><code>alice@alice_PC$ hv files -d //malware/Ransomware.WannaCry\n//malware/Ransomware.WannaCry/ed01ebfbc9eb5bbea545af4d01bf5f1071661840480439c6e5babe8e080e41aa.exe#1 (size 3514368 CL1/add)\n//malware/Ransomware.WannaCry/ed01ebfbc9eb5bbea545af4d01bf5f1071661840480439c6e5babe8e080e41aa.exe.asm#2 (CL2/del)\n//malware/Ransomware.WannaCry/ed01ebfbc9eb5bbea545af4d01bf5f1071661840480439c6e5babe8e080e41aa.exe.i64#1 (size 838724 CL1/add)\n//malware/Ransomware.WannaCry/ed01ebfbc9eb5bbea545af4d01bf5f1071661840480439c6e5babe8e080e41aa.exe.log#2 (CL2/del)\n\n</code></pre> <pre><code>alice@alice_PC$ hv files -s i64\n//malware/EquationGroup.GrayFish/GrayFish_9B1CA66AAB784DC5F1DFE635D8F8A904.i64#1 (size 2929035 CL1/add)\n//malware/Ransomware.WannaCry/ed01ebfbc9eb5bbea545af4d01bf5f1071661840480439c6e5babe8e080e41aa.exe.i64#1 (size 838724 CL1/add)\n//malware/Trojan.Ransom.Petya/eefa052da01c3faa1d1f516ddfefa8ceb8a5185bb9b5368142ffdf839aea4506.i64#1 (size 4535045 CL1/add)\n//malware/Trojan.Shylock.Skype/Shylock-skype_8FBEB78B06985C3188562E2F1B82D57D.i64#1 (size 4374263 CL1/add)\n//malware/Win32.Emotet/29D6161522C7F7F21B35401907C702BDDB05ED47.bin.i64#1 (size 319858 CL1/add)\n\n</code></pre>"},{"location":"user-guide/teams/hv_user_manual.html#dir","title":"<code>dir</code>","text":"<p>dir [-d] [-s] [-u] PATH_PATTERN_OR_SUBSTRING...</p> <p>Displays vault directory listing (current revisions).</p> <p>For each file entry the command will display:</p> <ul> <li>the timestamp of when the file was committed</li> <li>the file size</li> <li>the commit id</li> <li>the type of action that was executed on the file in the commit</li> <li>the path</li> <li>the current revision on disk</li> <li>an extra label if the file is unsynced</li> </ul> <p>Directories will be displayed as: <code>&lt;subdir&gt; PATH</code></p> <code>-d</code> Include deleted files. <code>-s</code> Path patterns are simple substrings. <code>-u</code> Include unsynced files. PATH_PATTERN_OR_SUBSTRING... Vault path of file(s) to include in search or substring to search for if <code>-s</code>. <p>Examples:</p> <pre><code>alice@alice_PC$ hv dir -u -d //\n1970-02-04 01:52:08       573440 CL1/add  //malware/EquationGroup.GrayFish/A904#1\n2022-06-29 11:30:10            0 CL2/del  //malware/EquationGroup.GrayFish/A904.asm#0/2 UNSYNCED\n1970-02-04 01:52:08      2929035 CL1/add  //malware/EquationGroup.GrayFish/A904.i64#1\n2022-06-29 11:30:10            0 CL2/del  //malware/EquationGroup.GrayFish/A904.log#0/2 UNSYNCED\n1970-02-04 01:52:08      3514368 CL1/add  //malware/Ransomware.WannaCry/41aa.exe#1\n2022-06-29 11:30:10            0 CL2/del  //malware/Ransomware.WannaCry/41aa.exe.asm#0/2 UNSYNCED\n2022-06-29 13:52:57       846916 CL3/edit //malware/Ransomware.WannaCry/41aa.exe.i64#2/3 UNSYNCED\n\n</code></pre> <pre><code>alice@alice_PC$ hv dir \"//*\"\n                    &lt;subdir&gt;              //malware\n</code></pre>"},{"location":"user-guide/teams/hv_user_manual.html#show","title":"<code>show</code>","text":"<p>show PATH_PATTERN[=REVISION]</p> <p>Writes the contents of a file on the vault to the command line.</p> PATH_PATTERN[=REVISION] Vault path to file(s) to display. If no revision is specified, defaults to current revision (<code>#=</code>). If the file revision denotes a deleted revision of the file, the contents will not be displayed. <p>Example:</p> <pre><code>alice@alice_PC$ hv show patterns/ubuntu-libgcc-10.pat\n415729CE415641554D89C54154554C89CD5389D34881EC280100004C8BBC2470 FF 15C2 14AD :0000 add_and_round.constprop.0 010000F30F6F842470010000C7442474000000004C8B842480010000C7442478000000000F294424504C8B742458F30F6F8C24800100004C897C2428488B9424\n415729CE415641554D89C54154554C89CD5389D34881EC280100004C8BBC2470 FF 90F7 14A0 :0000 add_and_round.constprop.0 010000F30F6F842470010000C7442474000000004C8B842480010000C7442478000000000F294424504C8B742458F30F6F8C24800100004C897C2428488B9424\n415729CE415641554D89C54154554C89CD5389D34881EC380100004C8BBC2480 FF 2016 157D :0000 add_and_round.constprop.0 0100004C8B842490010000C784248400000000000000F30F6F842480010000F30F6F8C2490010000C7842488000000000000004C897C2438488B842470010000\n415741564155415455534881EC780100004889542410488B9424B80100004889 FF 26D7 8168 :0000 bid128_ext_fma 4C24184C8BB424B001000048B9DDBADDBADDBADDBA4889742408488B8424C801000048..................48893C244C89F34C8B9C24C001000048898C24C0\n415741564155415455534881EC780100004889542410488B9424B80100004889 FF D77A 80B0 :0000 bid128_ext_fma 4C24184C8BB424B001000048B9DDBADDBADDBADDBA4889742408488B8424C801000048..................48893C244C89F34C8B9C24C001000048898C24C0\n ...\n</code></pre>"},{"location":"user-guide/teams/hv_user_manual.html#diff","title":"<code>diff</code>","text":"<p>diff PATH[=REVISION] PATH_OR_REV[=REVISION]</p> <p>Compares two databases, will launch IDA in diff mode.</p> <p>Only IDA databases (<code>.i64</code>, <code>.idb</code>) can be diffed with this command. If revisions of databases requested for comparison are currently not in the site, they will be downloaded to a temporary directory and will be deleted when IDA exits. On unix the temporary directory can be specified with <code>$TMPDIR</code>.</p> PATH[=REVISION] Database 1. PATH_OR_REV[=REVISION] Database 2. If no path is specified, it will default to the path of Database 1. If no revision is specified, it will default to the current revision (<code>#=</code>). <p>Examples:</p> <pre><code># Example: with `interfaces.i64` opened for edit and changed, this will open IDA and show the differences with the current revision on vault\nalice@alice_PC$ hv diff interfaces.i64\n\n</code></pre> <pre><code>alice@alice_PC$ hv changes interfaces.i64\nCM 9 2022-06-30 23:55:33 edit alice@alicepc interfaces.i64: deobfuscated some string\nCM 8 2022-06-28 23:30:17 edit john@johnpc interfaces.i64: annotated areas to inves\nCM 1 1970-02-04 01:52:08 add  john@johnpc added samples\nalice@alice_PC$ hv diff interfaces.i64 \"#2\"\n</code></pre>"},{"location":"user-guide/teams/hv_user_manual.html#md5","title":"<code>md5</code>","text":"<p>md5 PATH_PATTERN[=REVISION]</p> <p>Prints the md5 checksum of a file on the vault.</p> PATH_PATTERN[=REVISION] Vault path of file(s) to process, if no revision is specified, defaults to the current revision (<code>#=</code>). <p>Example:</p> <pre><code>alice@alice_PC$ hv md5 Win32.Emotet/29D6161522C7F7F21B35401907C702BDDB05ED47.bin\nok D243C0B2DBA37565CE3601AD78A73E07 //Win32.Emotet/29D6161522C7F7F21B35401907C702BDDB05ED47.bin#1\n</code></pre>"},{"location":"user-guide/teams/hv_user_manual.html#info","title":"<code>info</code>","text":"<p>info</p> <p>Displays info about the vault and current session.</p> <p>Example:</p> <pre><code>alice@alice_PC$ hv info \nHex-Rays Vault Server v1\nVault time: 2022-06-29 00:13:55, up since 2022-06-28 09:40:53\nLicense user : Johnny Appleseed\nLicense email: john@appleseed.net\nLicense: IDAULTTL; 10 users out of 30; expires on 2023-10-13\nMAC address: 7F:A7:B3:C1:8D:79\nVault directory: /opt/hexvault/files\nClient name: john *ADMIN*\nClient site: johnpc\nClient host: johnpc (127.0.0.1)\nClient root: /home/john/vault\nLogin time : 2022-06-29 00:13:55\nLast active: 2022-06-29 00:13:55\n</code></pre>"},{"location":"user-guide/teams/hv_user_manual.html#changes","title":"<code>changes</code>","text":"<p>changes [-s SITENAME] [-u USERNAME] [-c MIN_COMMIT] [-C MAX_COMMIT] [-m MAX_REPORTED_ENTRIES] [-d MIN_DATE] [-D MAX_DATE] [-l] [PATH_PATTERN...]</p> <p>Displays list of commits that affect a path.</p> <p>List can be refined using options.</p> <p>For each commit the following info will be displayed:</p> <ul> <li>the commit id</li> <li>the timestamp of the commit</li> <li>if only one file was changed, the action that was done to it (e.g. <code>edit</code>)</li> <li>the user who sent the commit</li> <li>the site from which the commit was sent</li> <li>a description of the commit, truncated to 40 chars unless if <code>-l</code> is enabled</li> </ul> <p>[horizontal] TIP:: This command is also available under the alias <code>commits</code>.</p> <code>-s SITENAME</code> Restrict to commits from SITENAME. <code>-u USERNAME</code> Restrict to commits from USERNAME. <code>-c MIN_COMMIT</code> Restrict to commits after commit: MIN_COMMIT. <code>-C MAX_COMMIT</code> Restrict to commits prior to commit: MAX_COMMIT. <code>-m MAX_REPORTED_ENTRIES</code> Limit number of reported commits to: MAX_REPORTED_ENTRIES. <code>-d MIN_DATE</code> Restrict to commits after MIN_DATE using format <code>YYYY-MM-DD</code>. <code>-D MAX_DATE</code> Restrict to commits prior to MAX_DATE using format <code>YYYY-MM-DD</code>. <code>-l</code> Display long (&gt;40 characters) commit descriptions. PATH_PATTERN... Filter commits by vault paths. If omitted, defaults to all files. <p>Examples:</p> <pre><code># Example: find all commits made by john\nalice@alice_PC$ hv changes -u john\nCM 109 2022-04-05 17:09:18 john@johnpc reverted commit 85\nCM 108 2022-04-05 17:00:02 john@johnpc added more malware samples\nCM 107 2022-04-05 16:37:02 john@johnpc WannaCry: annotated a few funcs\nCM 106 2022-04-05 16:35:57 john@johnpc removed unused files\n\n</code></pre> <pre><code># Example: show last 2 commits on a file with full descriptions\nalice@alice_PC$ hv changes -m 2 -l //iOS/dyld_ios16.i64\nCommit 42 2022-06-14 16:44:19 edit gregm@gregpc\n        iOS: dyld iOS 16 WIP\n\n        annotated more struct members\n\nCommit 35 2022-06-14 00:35:43 edit gregm@gregpc\n        iOS: RE of ios16 split cache loading\n\n        discovered some structures and their members\n\n</code></pre>"},{"location":"user-guide/teams/hv_user_manual.html#users","title":"<code>users</code>","text":"<p>users</p> <p>Shows users.</p> <p>Example:</p> <pre><code>alice@alice_PC$ hv users \nLastActive Adm Login   RealName/Email         Notes\n---------- --- ------- ---------------------- -----\n2022-07-27  *  admin   \n2022-09-16     alice   Alice &lt;alice@acme.com&gt;\nNever          bob     Bob &lt;bob@acme.com&gt;\n</code></pre>"},{"location":"user-guide/teams/hv_user_manual.html#groups","title":"<code>groups</code>","text":"<p>groups</p> <p>Displays all the existing groups and their users.</p> <p>Example:</p> <pre><code>alice@alice_PC$ hv groups \nmalware: alice michael matt sarah jason\naudit: stephen ilse\ninterns: russ\n</code></pre>"},{"location":"user-guide/teams/hv_user_manual.html#group-show","title":"<code>group show</code>","text":"<p>group show GROUP_NAME</p> <p>Displays the list of users in a group.</p> <code>GROUP_NAME</code> A group name. <p>Example:</p> <pre><code>alice@alice_PC$ hv group show \"malware\"\nmalware: alice michael matt sarah jason\n</code></pre>"},{"location":"user-guide/teams/hv_user_manual.html#user-show","title":"<code>user show</code>","text":"<p>user show USERNAME</p> <p>Displays the full details of a specific user.</p> <p>The following details will be displayed:</p> <ul> <li>the timestamp of when the user was last active</li> <li>the username, with a <code>*</code> next to it if the user has admin privileges</li> <li>the license id of the user</li> <li>the full name of the user</li> <li>the email address of the user</li> <li>notes about the user</li> </ul> <code>USERNAME</code> The username of the user to display. <p>Example:</p> <pre><code>alice@alice_PC$ hv user show johndoe\n2022-06-27     johndoe      99-9999-9999-99 John doe &lt;johndoe@doe.net&gt; NOTES\n</code></pre>"},{"location":"user-guide/teams/hv_user_manual.html#commit-show","title":"<code>commit show</code>","text":"<p>commit show COMMIT_ID</p> <p>Displays the contents of a commit.</p> <p>This will list all of the files that were changed by the commit.</p> <p>For each file the following details will be displayed:</p> <ul> <li>the action that was performed on it in the commit</li> <li>the path</li> <li>the revision</li> <li>if it's unsynced, an extra label will be displayed</li> <li>the size of the file</li> </ul> <code>COMMIT_ID</code> The id of the commit to display. <p>Example:</p> <pre><code>alice@alice_PC$ hv commit show 5\nadd  //cat.i64#1 (size 503909)\n</code></pre>"},{"location":"user-guide/teams/hv_user_manual.html#misc","title":"Misc.","text":""},{"location":"user-guide/teams/hv_user_manual.html#passwd","title":"<code>passwd</code>","text":"<p>passwd PASS [USER]</p> <p>Sets a new password for a user.</p> <code>PASS</code> The new password. <code>USER</code> The username whose password should be changed. Only admins can change other users' passwords. If omitted, defaults to the current user. <p>Examples:</p> <pre><code>alice@alice_PC$ hv passwd newpw\n\n</code></pre> <pre><code>alice@alice_PC$ hv passwd newpw user1\n</code></pre>"},{"location":"user-guide/teams/hv_user_manual.html#commit-edit","title":"<code>commit edit</code>","text":"<p>commit edit COMMIT_ID DESCRIPTION</p> <p>Edits a commit description.</p> <p>Regular users may modify only their own commits. Admins may modify any commit.</p> <code>COMMIT_ID</code> The id of the commit to amend. <code>DESCRIPTION</code> New description of the commit. <p>Example:</p> <pre><code>alice@alice_PC$ hv commit edit 42 \"removed unused file, it had been wrongfully added with commit #39\"\n</code></pre>"},{"location":"user-guide/teams/hv_user_manual.html#licenses","title":"<code>licenses</code>","text":"<p>licenses</p> <p>Shows active licenses</p> <p>Example:</p> <pre><code>alice@alice_PC$ hv licenses \nVault licenses:\n  99-9999-9999-99 IDAULTTW: used 2 out of 10 seat(s)\n  Expires: 2023-04-15\n  Online users: john@johnpc (99.999.99.99): 1 IDA instance(s)\n</code></pre>"},{"location":"user-guide/teams/hv_user_manual.html#borrow","title":"<code>borrow</code>","text":"<p>borrow PRODUCT END_DATE</p> <p>Borrow a license</p> <p>A borrowed license can be used offline but other users will not have access to it.</p> <p>A borrowed license can be returned to the vault using return. If not returned earlier, it will automatically be returned to the vault at the expiration time.</p> <code>PRODUCT</code> The product code or license id. <code>END_DATE</code> YYYY-MM-DD - exact date, +Nd - N days since now, +Nw - N weeks since now. DD-MON-YYYY can be used to specify an exact date too. <p>Example:</p> <pre><code>alice@alice_PC$ hv borrow IDAULTTW 2022-07-31\nLicense IDAULTTW 99-9999-9999-99 has been borrowed until 2022-07-31 00:00:00\nalice@alice_PC$ hv borrow IDAULTTL +6d\nLicense IDAULTTL 99-9999-9999-99 has been borrowed until 2022-07-31 13:53:23\n</code></pre>"},{"location":"user-guide/teams/hv_user_manual.html#return","title":"<code>return</code>","text":"<p>return PRODUCT</p> <p>Return a borrowed license</p> <p>A returned license becomes available to other vault users.</p> <code>PRODUCT</code> The product code or license id. <p>Example:</p> <pre><code>alice@alice_PC$ hv return IDAULTTW\nLicence 99-9999-9999-99 has been returned\n</code></pre>"},{"location":"user-guide/teams/hv_user_manual.html#gc","title":"<code>gc</code>","text":"<p>gc [-r] [-s] MAX_SIZE PATH_PATTERN...</p> <p>Deletes old files from the vault cache on the client.</p> <p>This command examines the contents of the .vault subdirectory in the specified directories and deletes old files from them, so that the total size of files does not exceed MAX_SIZE. MAX_SIZE can be specified as a plain number of bytes or using the k,M,G suffixes to denote KBs, MBs, GBs. The default value is 1GB.</p> <p>If <code>-r</code> is specified, all subdirectories of the current directory will be processed.</p> <code>-r</code> Recursive <code>-s</code> Silent mode; do not output any messages. <code>MAX_SIZE</code> max size of the cache. PATH_PATTERN... Local directories to process <p>Example:</p> <pre><code>alice@alice_PC$ hv gc 3G /mydir\ndeleted /mydir/.vault/B52C6B8E8039752CE8BC6793816EB490: 120M freed, still 4.19G used\ndeleted /mydir/.vault/C693254A5A370F609CC86A1F31CE5B84: 149M freed, still 4.05G used\ndeleted /mydir/.vault/90CFB553818B2C44DE25759C0D14C811: 670M freed, still 3.39G used\ndeleted /mydir/.vault/E8652439192CD33E8D4417C468AFFA49: 213M freed, still 3.18G used\ndeleted /mydir/.vault/D0F3CF8A94A646E6EBBB15BD54847B31: 404M freed, still 2.79G used\n</code></pre>"},{"location":"user-guide/teams/hv_user_manual.html#administrative-commands","title":"Administrative commands","text":"<p>These commands require that the user executing them has admin privileges.</p>"},{"location":"user-guide/teams/hv_user_manual.html#managing-users","title":"Managing users","text":"<p><code>user add</code></p> <p>user add USERNAME REALNAME EMAIL IS_ADMIN NOTES</p> <p>Adds a user.</p> <code>USERNAME</code> The username of the user. <code>REALNAME</code> The full name of the user. <code>EMAIL</code> The email address of the user. <code>IS_ADMIN</code> Should be 1 if the user is admin, otherwise 0. <code>NOTES</code> Extra notes about the user. <p>Example:</p> <pre><code>alice@alice_PC$ hv user add johndoe \"John Doe\" johndoe@doe.net 0 \"NOTES\"\n</code></pre> <p><code>user edit</code></p> <p>user edit USERNAME REALNAME EMAIL IS_ADMIN NOTES</p> <p>Edits a user definition.</p> <code>USERNAME</code> The username of the user to modify. <code>REALNAME</code> The full name of the user. <code>EMAIL</code> The email address of the user. <code>IS_ADMIN</code> Should be 1 if the user is admin, otherwise 0. <code>NOTES</code> Extra notes about the user. <p>Example:</p> <pre><code>alice@alice_PC$ hv user edit johndoe \"John Doe\" john_doe@doe.net 0 \"NOTES\"\n</code></pre> <p><code>user del</code></p> <p>user del [-b] [-f] USERNAME</p> <p>Deletes a user.</p> <p>Cuation: deleting a user with borrowed licenses will make the borrowed licenses unavailable until their expiration date.</p> <code>-b</code> Force deletion even if the user has borrowed licenses. <code>-f</code> Force deletion even if the user has checked out files. <code>USERNAME</code> The name of the user to delete from the vault. <p>Example:</p> <pre><code>alice@alice_PC$ hv user del -f johndoe\n</code></pre>"},{"location":"user-guide/teams/hv_user_manual.html#managing-groups","title":"Managing groups","text":"<p><code>group add</code></p> <p>group add GROUP_NAME</p> <p>Adds a new group.</p> <p>An empty group with the specified name is created.</p> <code>GROUP_NAME</code> the name of the new group. <p>Example:</p> <pre><code>alice@alice_PC$ hv group add my_group\n</code></pre> <p><code>group edit</code></p> <p>group edit GROUP_NAME USER ADD_OR_DELETE</p> <p>Edits a group by adding or deleting users.</p> <code>GROUP_NAME</code> the name of the group. <code>USER</code> the name of the user. <code>ADD_OR_DELETE</code> add or delete the specified user from the group, 0 is delete, 1 is add. <p>Example:</p> <pre><code>alice@alice_PC$ hv group edit \"my_group\" \"user1\" 1\nalice@alice_PC$ hv group edit \"my_group\" \"user1\" 0\n</code></pre> <p><code>group del</code></p> <p>group del GROUP_NAME</p> <p>Deletes a group.</p> <code>GROUP_NAME</code> the name of the group to delete. <p>Example:</p> <pre><code>alice@alice_PC$ hv group del my_group\n</code></pre>"},{"location":"user-guide/teams/hv_user_manual.html#managing-permissions","title":"Managing permissions","text":"<p><code>perm get</code></p> <p>perm get</p> <p>Displays permission table.</p> <p>The current permission table is printed to the standard output.</p> <p>Example:</p> <pre><code>alice@alice_PC$ hv perm get \n##### The permission for each vault file is determined as the result of applying\n##### all matching lines, from the beginning of the permission table to the end.\n##### An empty permission table grants all access to everyone.\n##### A non-empty permission table starts by denying all access to everyone.\ngrant user fred write //subdir-for-fred/\ndeny group remote list //local-secret\ngrant group analysts write //subdir/for/idbs/\ngrant user * read //subdir/for/idbs/\n</code></pre> <p><code>perm set</code></p> <p>perm set [@FILE]</p> <p>Sets new permissions table from STDIN or from file.</p> <p>The installed permission table becomes active immediately.</p> <p>We recommend using perm check to ensure that the new permission table works correctly.</p> <code>@FILE</code> The file from which to set the new permissions table. <p>Example:</p> <pre><code>alice@alice_PC$ hv perm set &lt;perms.txt\n</code></pre> <p><code>perm check</code></p> <p>perm check USERNAME PATH_PATTERN</p> <p>Checks permissions for a user.</p> <p>The list of files that are visible to the user is printed, along with the permissions that the user has. The read access is denoted by 'r' and the write access is denoted by 'w'.</p> <code>USERNAME</code> The USERNAME of the user whose permissions that will be tested. PATH_PATTERN Vault path of file(s) that will be tested. <p>Example:</p> <pre><code>alice@alice_PC$ hv perm check fred\nrw //subdir-for-fred/afile\nrw //subdir-for-fred/anotherfile\nr- //subdir/for/idbs/interfaces.i64\n\nalice@alice_PC$ hv perm check fred //local-secret\n</code></pre>"},{"location":"user-guide/teams/hv_user_manual.html#others","title":"Others","text":"<p><code>sessions</code></p> <p>sessions</p> <p>Displays the sessions info.</p> <p>For each session on the vault, the following info will be displayed:</p> <ul> <li>the site</li> <li>the user</li> <li>the hostname</li> <li>the timestamp of the login time</li> <li>the timestamp of the last activity</li> <li>\"ADM\" if the user has admin privileges</li> <li>\"*\" for the session executing the command</li> </ul> <p>Example:</p> <pre><code>alice@alice_PC$ hv sessions \ngregpc       gregm        GREGPC-554HW             LOGIN=2022-07-04 LAST=2022-07-04 ADM *\nlindapc      linda        lindasmac                LOGIN=2022-07-02 LAST=2022-07-04\n</code></pre> <p><code>purge</code></p> <p>purge [-s] [-y] PATH_PATTERN...</p> <p>Purges file(s) from the Vault server, permanently deleting it and all of its history.</p> <p>The path patterns must be specified using full paths, starting with //</p> <code>-s</code> Silent mode; do not output any messages. <code>-y</code> Really purge the files, without this parameter the command does a dry-run. PATH_PATTERN... Vault path of file(s) to purge from the vault. <p>Example:</p> <pre><code>alice@alice_PC$ hv purge -s -y //work/ds1_10 //work/more_work\n</code></pre>"},{"location":"user-guide/teams/hv_user_manual.html#concepts","title":"Concepts","text":""},{"location":"user-guide/teams/hv_user_manual.html#what-is-a-site","title":"What is a \"site\"?","text":"<p>A site represents a mapping of the server files to the local filesystem. Normally each computer has a site associated with it. A site has the following attributes:</p> <ul> <li>A site name</li> <li>A host name</li> <li>The path to a folder on the filesystem (a.k.a., \"root directory\")</li> <li>Path filters (optional)</li> </ul> <p></p>"},{"location":"user-guide/teams/hv_user_manual.html#root-directory","title":"Root directory","text":"<p>The root directory is the essential attribute of a site. It denotes where all files from the vault server will be mapped to the local disk. Everything inside the root directory can potentially be uploaded to the vault server and shared with other team members.</p> <p>The vault server cannot manage files located outside the root directory. However, this limitation is straightforward to overcome: create a symbolic link (or, on Windows, a junction point) from the root directory to the directory of your choice. This will make the target of the symbolic link visible as part of the root directory.</p> <p>The vault server keeps track of each site's state: what files have been downloaded to the local disk, what files have been checked out for editing, etc. This simplifies the housekeeping tasks, especially for big repositories with millions of files. Even for them, downloading the latest files or reconciling the local disk with the server, are almost instantaneous.</p> <p>The host name is a security feature that prevents from using a site on a wrong computer. Since the server keeps track of the files downloaded to each site, using a wrong site may lead to an inconsistent mapping between the server and local disk. However, if the user does not want this protection, it is possible to erase the host name in the site definition.</p> <p>Sites can be edited from the \"Sites\" view.</p>"},{"location":"user-guide/teams/hv_user_manual.html#path-filters","title":"Path filters","text":"<p>By default all server files are visible, but for servers that manage gigabytes of data this can be problematic: it may be undesirable for users to download all files to their local computer.</p> <p>Site filters provide a mechanism that lets users restrict the set of files their IDA Teams client works with. Users who want to work on some specific projects can set a filter that restricts the visibility only to selected subdirectories.</p> <p>Each site has its own filters, that con be modified at any time. Filters do not directly affect any files on the local disk, or on the server: they are strictly about visibility.</p> <p>WARNING: Site filters are meant simplify a user's life by letting them focus on specific projects. Since they can be modified by users, they should not be considered a security measure: that would be the role of the permissions system, which can only be managed by vault_server administrators.</p> <p>NOTE: The purpose of site filters is to create a subset of the full set of files provided by the server. Site filters don't directly affect what locally-available files (i.e., present in the site's rootdir, but not tracked by the server) are visible by IDA Teams clients.</p> <p>There is another mechanism to specify what files should not be added to the vault. See <code>.hvignore</code> for more info.</p> <p>Examples</p> <p>An empty filter</p> <pre><code>$ cat empty_filter.txt\n$\n</code></pre> <p>Hide all files, except those in <code>malware/</code></p> <pre><code>$ cat only_malware.txt\nmalware/\n$\n</code></pre> <p>Show all files, except those from the pentesting team</p> <pre><code>$ cat hide_pentest.txt\n!pentesting/\n$\n</code></pre> <p>Show all files but those from the pentesting team, except their produced documents</p> <pre><code>$ cat hide_pentest_but_docs.txt\n!pentesting/\npentesting/research_docs/\n$\n</code></pre>"},{"location":"user-guide/teams/hv_user_manual.html#resolving-conflicts-in-a-file","title":"Resolving conflicts in a file","text":"<p>When a user needs to commit changes made to a file, but that same file has received other modifications (likely from other users) in the meantime, it is necessary to first \"merge\" the two sets of modifications together.</p> <p>When the two sets of modifications do not overlap, merging is trivial</p> <ul> <li>at least conceptually. But when they do overlap, they produce conflict(s).</li> </ul> <p>Since IDA Teams focuses on collaboration over IDA database files, the rest of this section will focus on the different strategies that are available for resolving conflicts among those.</p> <p>IDA Teams comes with multiple strategies to help in conflict resolution of IDA database files:</p>"},{"location":"user-guide/teams/hv_user_manual.html#auto-resolve-if-no-conflicts","title":"Auto-resolve (if no conflicts)","text":"<p>Launch IDA in a non-interactive batch mode, attempting to perform all merging automatically.</p> <p>If any conflict is discovered, bail out of the merge process, and don't modify the local database.</p>"},{"location":"user-guide/teams/hv_user_manual.html#auto-resolve-prefer-local","title":"Auto-resolve, prefer local","text":"<p>Launch IDA in a non-interactive batch mode, attempting to perform all merging automatically.</p> <p>If a conflict is discovered, assume that the \"local\" change (i.e., the current user's change) is the correct one, and apply that.</p> <p>Once all merging is done and conflicts are resolved, write those to the local database and exit IDA</p>"},{"location":"user-guide/teams/hv_user_manual.html#auto-resolve-prefer-remote","title":"Auto-resolve, prefer remote","text":"<p>Launch IDA in a non-interactive batch mode, attempting to perform all merging automatically.</p> <p>If a conflict is discovered, assume that the \"remote\" change (i.e., the change made by another user) is the correct one, and apply that.</p> <p>Once all merging is done and conflicts are resolved, write those to the local database and exit IDA</p>"},{"location":"user-guide/teams/hv_user_manual.html#interactive-merge-mode","title":"Interactive merge mode","text":"<p>Manual merge mode.</p> <p>This will launch IDA in an interactive, 3-pane mode, allowing the user to decide how to resolve each conflict.</p> <p>Once all merging is done and conflicts are resolved, exit IDA and write the changes to the local database.</p>"},{"location":"user-guide/teams/hv_user_manual.html#use-local-discard-remote","title":"Use local, discard remote","text":"<p>Select the local database, ignoring all changes in the remote database.</p> <p>No IDA process is run.</p>"},{"location":"user-guide/teams/hv_user_manual.html#use-remote-discard-local","title":"Use remote, discard local","text":"<p>Select the remote database, ignoring all changes in the local database.</p> <p>No IDA process is run.</p>"},{"location":"user-guide/teams/hv_user_manual.html#hvignore-and-hvignore-files","title":"<code>hvignore</code> (and <code>.hvignore</code>) files","text":"<p>IDA Teams comes with a mechanism that lets users specify what files should be ignored when adding files from their local machines to the vault_server.</p>"},{"location":"user-guide/teams/hv_user_manual.html#the-main-hvignore-file-pathtoinstall-dirhvignore","title":"The main <code>hvignore</code> file (<code>path/to/install-dir/hvignore</code>)","text":"<p>In IDA Teams' install directory, you will find the \"main\" <code>hvignore</code> file, that is pre-populated with a list of files that you would typically not want to add to the vault_server, such as <code>.bak</code> backup files and unpacked IDA database files: <code>.id0</code>, <code>.nam</code>, etc...</p> <p>The syntax for <code>hvignore</code> is very close to that of <code>.gitignore</code> files.</p>"},{"location":"user-guide/teams/hv_user_manual.html#additional-hvignore-files","title":"Additional <code>.hvignore</code> files","text":"<p>In addition to that file, you can have <code>.hvignore</code> file (notice the <code>.</code> - dot) placed in your site's directory structure.</p> <p>When found, those files' contents will be appended to the main file's contents.</p>"},{"location":"user-guide/teams/hv_user_manual.html#the-registry","title":"The registry","text":"<p>On Microsoft Windows, IDA Teams will store certain bits of information in the registry (host name, user name, site name.)</p> <p>On macOS and Linux, it will use a pseudo-registry file, located at <code>$HOME/.idapro/hvui.reg</code>.</p>"},{"location":"user-guide/teams/hv_user_manual.html#passwords-storage-in-the-oss-keychain","title":"Passwords storage in the OS's keychain","text":"<p>While hosts, user names &amp; site names are persisted to the registry, passwords are stored securely in the operating system's keychain.</p> <ul> <li>On Windows, the Windows Credential Store is used (therefore requiring Windows 7 or newer)</li> <li>On macOS, the macOS Keychain is used</li> <li>On Linux, the \"Secret service\" is used (through <code>libsecret-1</code>)</li> </ul>"},{"location":"user-guide/teams/hv_user_manual.html#managing-permissions-on-a-vault","title":"Managing permissions on a vault","text":"<p>The vault_server includes a way to restrict the access of users and groups to the data stored in the vault_server.</p> <p>The permission file is a text file that contains the permission table. The file consists of lines that grant or deny access to certain path patterns in the vault. The syntax for an entry is the following:</p> <p><code>grant/deny group/user NAME PERMISSION VAULT_PATH_PATTERN</code></p> <p>Possible <code>PERMISSION</code> values are: <code>list</code>, <code>read</code> and <code>write</code>. <code>read</code> includes <code>list</code>, <code>write</code> includes <code>read</code> (and thus also includes <code>list</code>).</p> <p>Example of a permission file:</p> <pre><code># deny everything to everyone. no need to specify it explicitly,\n# it is the default for a non-empty permission table:\n# deny  user *      list  //*\n\ndeny  user *      list  //secret/   # nobody can see //secret. this line is superfluous\n                                    # because everything is denied by default.\ngrant user hughes write //secret/   # but hughes can write to secret and its subdirs\ngrant user john   read  //secret/   # and john can read the entire directory.\ndeny  user *      list  //secret/supersecret # supersecret is not visible to anyone\ngrant user hughes write //secret/supersecret # but hughes can modify it (john cannot)\ngrant user *      write //local_files/ # everyone can work with 'local_files'\ndeny group remote list //local_files/  # except that the 'remote' group cannot see 'local_files'\n</code></pre> <p>An empty permission table means that no permissions are enforced rendering all files accessible by everyone. As soon as a non-empty permission table is specified, all access is denied to everyone by default.</p> <p>Path patterns may refer to (yet) unexisting files. Users and groups too may refer to unexisting users and groups.</p> <p>The order of the permission file is important as the last lines will take precedence over the preceding lines (if there are conflicts).</p> <p>Admins are not affected by the permission table, they are granted all access.</p> <p>To install a new permission table, use perm set</p> <p>The current permissions can be retrieved using perm get</p>"},{"location":"user-guide/teams/hvui_user_manual.html","title":"Hex-Rays Vault\u2019s visual client user manual","text":""},{"location":"user-guide/teams/hvui_user_manual.html#about-this-manual","title":"About this manual","text":"<p>This user guide provides information about HVUI, the Hex-Rays Vault visual client.</p> <p>HVUI is provided in addition to the command-line client, HV.</p> <p>This manual assumes that the reader has an understanding of the IDA Teams general concepts.</p> <p>NOTE: Although Hex-Rays Vault will host any file you want, its primary use-case is to allow users to keep a history, and allow collaborative work on, IDA databases (i.e., <code>.idb</code> and <code>.i64</code> files.) Throughout this manual, we will be using the terms \"idbs\" and \"files\" interchangeably.</p>"},{"location":"user-guide/teams/hvui_user_manual.html#getting-started","title":"Getting started","text":"<p>In order to function, HVUI will need to connect to a Hex-Rays Vault server.</p> <p>This guide assumes that such a server is running, accessible, and an account is available:</p> Connection attributes Host vaultserver Port 65433 User name joe User password secret"},{"location":"user-guide/teams/hvui_user_manual.html#starting-hvui","title":"Starting HVUI","text":"<p>The first time the user starts the application, credentials will need to be input:</p> <p></p> <p>NOTE: Checking the checkbox at the bottom of the form, will cause HVUI to store credentials in the registry, password(s) will be stored in the OS's keychain.</p> <p>If this is the first time a login is performed from this machine, the user will have to specify a directory where files will be locally stored:</p> <p></p> <p>This will a site (that is, a mapping of the server files on the local disk) for use on this computer.</p> <p>After accepting the dialog, you will be presented with the main view:</p> <p></p>"},{"location":"user-guide/teams/hvui_user_manual.html#getting-the-latest-revision","title":"Getting the latest revision","text":"<p>The widget now shows what files are available.</p> <p>Notice the <code>#0/1</code> suffixes: it means we currently have revision number 0 (i.e., no revision at all) of those files.</p> <p>Let's sync those files to their latest revision, from the server:</p> <p></p> <p>And the files are now up-to-date:</p> <p></p>"},{"location":"user-guide/teams/hvui_user_manual.html#working-with-files","title":"Working with files","text":"<p>In the previous chapter, we have introduced the notion of \"syncing to the latest revision\".</p> <p>This chapter will go a bit further, and introduce the most common, day-to-day operations users will want to perform on their files.</p>"},{"location":"user-guide/teams/hvui_user_manual.html#what-are-worklists-and-commits","title":"What are worklists, and commits?","text":"<p>Any work done in HVUI will involve worklists, and commits.</p>"},{"location":"user-guide/teams/hvui_user_manual.html#worklist","title":"Worklist","text":"<p>A worklist holds files that have been</p> <ul> <li>modified,</li> <li>marked for addition or</li> <li>deletion,</li> <li>\u2026\u200b</li> </ul> <p>Those modifications are local to the user\u2019s site. They will only be made available for everyone after the user commits the worklist.</p>"},{"location":"user-guide/teams/hvui_user_manual.html#commit","title":"Commit","text":"<p>Once a worklist is committed, it becomes a commit, and makes its modifications available for everyone.</p> <p>In comparison to a worklist, a commit holds \"published\" modifications, and any user syncing to that commit will benefit from those.</p> <p>Let\u2019s look at a concrete example illustrating worklists and commits: adding a file to the Hex-Rays Vault!</p>"},{"location":"user-guide/teams/hvui_user_manual.html#adding-files-to-the-vault","title":"Adding files to the vault","text":"<p>From the \"Local files\" widget, I can add a file that is not yet present in the Hex-Rays Vault server:</p> <p></p> <p>That file will now be added to the current worklist (one will be created if needed):</p> <p></p> <p>For this new file to become available for everyone, the user will need to \"commit\" the worklist:</p> <p></p> <p>Once the worklist is committed, it becomes a commit, and the modifications are then available for everyone:</p> <p></p> <p>TIP: Notice how our commit isn\u2019t the first one in the system: another user submitted a commit before us\u2009\u2014\u2009it\u2019s that commit that added the files we\u2019ve seen in the getting-started portion of this guide.</p>"},{"location":"user-guide/teams/hvui_user_manual.html#modifying-files","title":"Modifying files","text":"<p>When working on a file, a user must first check it out for modification:</p> <p></p> <p>Just like with the adding, the file will now show in a worklist:</p> <p></p> <p>\u2026\u200band just like with the adding, whatever modification you make to the file, will only be visible to coworkers after committing that worklist.</p>"},{"location":"user-guide/teams/hvui_user_manual.html#committing","title":"Committing","text":"<p>Files that have been checked out (e.g. for modification) or opened for adding will go into a worklist until they are committed, which then turns the worklist into a commit. A worklist can be committed to make its changes available to other users: right-click, commit</p> <p></p> <p>The worklist becomes a commit:</p> <p></p> <p>\u2026\u200band the worklist is gone:</p> <p></p>"},{"location":"user-guide/teams/hvui_user_manual.html#synchronizing-files","title":"Synchronizing files","text":"<p>To fetch the latest set of the changes (changes/additions/deletions), use \"Get latest revision\".</p>"},{"location":"user-guide/teams/hvui_user_manual.html#viewing-the-history-of-a-file","title":"Viewing the history of a file","text":"<p>To get an overview of all of the changes made to a file: right-click, File history</p> <p></p> <p></p> <p>From the \"History of \u2026\u200b\" widget, you can view any revision of a file.</p> <p></p> <p>It\u2019s also possible to synchronize files to older revisions, from this widget.</p> <p></p> <p>When asked to do that, HVUI will retrieve that older revision of the file from the server. This is what will now be present on your filesystem.</p> <p>Notice how the file now shows as 'outdated':</p> <p></p>"},{"location":"user-guide/teams/hvui_user_manual.html#opening-files","title":"Opening files","text":"<p>On many widgets, it's possible to view/open a file. If the file extension has a corresponding association it will be used to open the file.</p>"},{"location":"user-guide/teams/hvui_user_manual.html#file-associations","title":"File associations","text":"<p>Out-of-the-box, HVUI associates <code>.i64</code> files with IDA. In addition to that, it provides a default \"fallback\" <code>\"*\"</code> association that will cause matching files to be opened in IDA.</p> <p>Users can specify their file extension associations via a form available from the View menu.</p> <p></p>"},{"location":"user-guide/teams/hvui_user_manual.html#deleting-files","title":"Deleting files","text":"<p>Files can be removed from the server (if they have become unnecessary for example): right-click, delete.</p> <p></p> <p>Just like other file actions, the change (deletion) needs to be committed for its effects to be visible on the server.</p>"},{"location":"user-guide/teams/hvui_user_manual.html#reverting-changes-to-files","title":"Reverting changes to files","text":"<p>To revert unwanted changes to a file: right-click, Revert</p> <p></p> <p>It is also possible to use \"Revert if unchanged\" to only revert files that were checked out without actual changes. This is especially useful when used on a selection of files or a directory.</p>"},{"location":"user-guide/teams/hvui_user_manual.html#renaming-and-moving-files-or-folders","title":"Renaming and Moving Files or Folders","text":"<p>One may wish to rename and/or move around files/folders in their workspace, for that \"Checkout for move/rename...\" can be used.</p> <p></p> <p></p>"},{"location":"user-guide/teams/hvui_user_manual.html#copying-files-or-folders","title":"Copying Files or Folders","text":"<p>{hvui_app} provides an action to copy files or directories easily. Use \"Checkout for copy...\".</p> <p></p> <p></p>"},{"location":"user-guide/teams/hvui_user_manual.html#finding-a-file-in-the-vault","title":"Finding a file in the vault","text":"<p>When a vault contains a lot of files, manually searching for a file in the directory tree becomes inefficient. To help you locate files easily, you can use the Find in vault\u2026\u200b action.</p> <p></p> <p></p> <p></p> <p>You can navigate between the search results by using Next search result and Previous search result, located next to Find in vault\u2026\u200b both in the toolbar, and in the \"Search\" menu.</p>"},{"location":"user-guide/teams/hvui_user_manual.html#font-styles","title":"Font styles","text":"<p>As you may have noticed by now, files are shown with different font styles in different circumstances.</p> <p>A gray font denotes a file that is not in the vault. It has been added or renamed and not yet commited.</p> <p>A bold font means that this file is being worked on, or has been changed.</p> <p>An italic font means that it\u2019s not the latest version of this file.</p> <p>Some combinations are possible, for example a file being resolved (not latest version and being worked on) will have a bold and italic font style. The combination gray (not in vault) and italic (not latest version) is for example not possible.</p>"},{"location":"user-guide/teams/hvui_user_manual.html#inspecting-changes","title":"Inspecting changes","text":"<p>After having done some reverse-engineering work on an IDA database, it is possible to view those changes in a special mode in IDA: right-click, and choose the diff action:</p> <p></p> <p>Here a new instance of IDA will be launched in a special \"diff\" mode:</p> <p></p>"},{"location":"user-guide/teams/hvui_user_manual.html#idas-diff-mode","title":"IDA's diff mode","text":"<p>This new IDA mode lets the user compare two databases, in a traditional \"diff\" fashion: essentially a two-panel window, showing the unmodified file on the left and the version with your changes on the right.</p>"},{"location":"user-guide/teams/hvui_user_manual.html#the-progress-widget","title":"The \"Progress\" widget","text":"<p>Represents the current step in the diff process.</p>"},{"location":"user-guide/teams/hvui_user_manual.html#the-left-panel","title":"The left panel","text":"<p>Shows the \"untouched\" version of the database (i.e., the one without your changes)</p>"},{"location":"user-guide/teams/hvui_user_manual.html#the-right-panel","title":"The right panel","text":"<p>Shows your version of the database (i.e., featuring your changes)</p>"},{"location":"user-guide/teams/hvui_user_manual.html#diff-region-details","title":"Diff region details","text":"<p>Notice how both panels have a little area at the bottom, that is labeled \"Details\".</p> <p>Details are available on certain steps of the diffing process, and provide additional information about the change that is currently displayed.</p>"},{"location":"user-guide/teams/hvui_user_manual.html#the-diffing-toolbar","title":"The \"diffing\" toolbar","text":"<p>The actions in the toolbar are:</p> <ul> <li>Previous chunk</li> <li>Center chunk</li> <li>Next chunk</li> <li>Proceed to the next step</li> <li>Toggle 'Details'</li> </ul> <p>Using actions in the toolbar, you can now iterate through the differences between the two databases, with each change shown in context as if viewed through a normal IDA window.</p> <p>The ability to view changes in context was a major factor in the decision to use IDA itself as the diffing/merging tool for IDA Teams.</p> <p>Diff mode IDA's toolbar actions</p> <p>Previous chunk</p> <p>Move to the previous change</p> <p>Center chunk</p> <p>Re-center the panels to show the current chunk (useful if you navigated around to get more context)</p> <p>Next chunk</p> <p>Move to the next change</p> <p>Proceed to the next step</p> <p>Move to the next step in the diffing process.</p> <p>Toggle 'Details'</p> <p>Toggle the visibility of the \"Details\" widgets in the various panels (note that some steps do not provide details, so even if the \"Details\" are requested, they might not be currently visible.)</p>"},{"location":"user-guide/teams/hvui_user_manual.html#terminology","title":"Terminology","text":"<p>It is important to note the difference between the terms \"diff\" and \"merge\".</p> <p>This document will sometimes use the two terms interchangeably. This is because to IDA, a diff is just a specialized merge. Both diffing and merging are handled by IDA's \"merge mode\", which involves up to 3 databases, one of which can be modified to contain the result of the merge.</p> <p>A diff is simply a merge operation that involves only 2 databases, neither of which are modified.</p> <p>This is why often times you will see the term \"merge\" used in the context of a diff. In this case \"merge\" is referring to IDA's \"merge mode\", rather than the process of merging multiple databases together into a combined database.</p>"},{"location":"user-guide/teams/hvui_user_manual.html#using-ida-as-a-diffing-tool","title":"Using IDA as a diffing tool","text":"<p>We must stress the fact that performing a merge between two IDA databases is quite different than performing a merge between, say, two text files. A change in a chunk of text file will not have an impact over another chunk.</p> <p>IDA databases are not so simple. A change in one place in an idb will often have an impact on another place. For example, if a structure <code>mystruct</code> changed between two databases, it will have an impact not only on the name of the structure, but on cross-references to structure members, function prototypes, etc.</p> <p>This is why IDA's merge mode is split into a strict series of \"steps\":</p> <p></p> <p>Within a single step it is possible to go forward &amp; backward between different chunks. But because of possible inter-dependencies between steps, it is not possible to move backwards between steps, you can only go forward:</p> <p></p> <p>Since IDA's diff mode is just a variation of its merge mode, diffing databases is also subject to this sequential application of steps in order to view certain bits of information. That is why, in some steps (e.g., the \"Disassembly/Items\") IDA might not report some changes that were performed at another level.</p> <p>For instance, if a user marked a function as <code>noret</code>, the listings that will be shown in \"Disassembly/Items\" step, will not advertise that there was a change at that place (even though the <code>\"Attributes: noreturn\"</code> is visible in the left-hand listing), only the changes to the instructions (and data, ...) are visible in the current step:</p> <p></p> <p>The change will, however, be visible at a later step (i.e., \"Functions/Registry\"):</p> <p></p> <p>NOTE: The changes applied during the \"diff\" process are only temporary. Exiting IDA (at any moment) will not alter the files being compared.</p>"},{"location":"user-guide/teams/hvui_user_manual.html#merging-concurrent-modifications-conflicts","title":"Merging concurrent modifications (conflicts)","text":"<p>As with any collaborative tool, it may happen that two coworkers work on the same dataset (e.g., IDA database), and make modifications to the same areas, resulting in \"conflicts\". Conflicts must be \"resolved\" prior to committing.</p> <p></p> <p>To do that, right-click and pick one of the \"resolve\" options:</p> <p></p> <p>IDA Teams provides the following merge strategies.</p>"},{"location":"user-guide/teams/hvui_user_manual.html#interactive-merging","title":"Interactive merging","text":"<p>If the option that was chosen (e.g., Interactive merge mode) requires user interaction due to conflicts, IDA will show in 3-pane \"merge\" mode.</p> <p></p> <p>When a conflict is encountered, you'll have the ability to pick, for all conflicts, which change should be kept (yours, or the other). Every time you pick a change (and thus resolve a conflict), IDA will proceed with the merging, applying all the non-conflicting changes it can, until the next conflict - if any. When all conflicts are resolved, you can leave IDA, and the new resulting file is ready to be submitted.</p>"},{"location":"user-guide/teams/hvui_user_manual.html#general-concepts","title":"General concepts","text":""},{"location":"user-guide/teams/hvui_user_manual.html#collaboration-in-the-reverse-engineering-field","title":"Collaboration in the reverse-engineering field","text":"<p>Over the years, a trend has been emerging in the field of reverse-engineering: a need to enable collaboration between different (teams of) individuals and share their work with one another.</p> <p>In order to achieve that, different groups of people have come up with different strategies, the most common ones being:</p> <ul> <li>\"live\" propagation of changes from one IDA session, to other sessions (this requires all IDA instances are either directly connected, or talk to a server, at all time)</li> <li>extracting some of the important bits of work done on an <code>.idb</code>, and applying those to another one -- in fact, we at Hex-Rays have also been providing a tool that enables this type of workflow: the lumina server.</li> </ul> <p>While those solutions have interesting properties, they also typically suffer from significant drawbacks as well:</p> <ul> <li>they might require a live connection at all times in order to work,</li> <li>there is no way to make sure many supposedly-synced IDA sessions are indeed working with exactly the same data,</li> <li>the information that's extracted isn't complete enough,</li> <li>...</li> </ul> <p>So we took a step back and looked at how things are done in other places, and in particular in the field of software engineering, where collaboration over a piece of software is typically achieved by using [revision control](#Revision control-for-reverse-engineering-projects).</p> <p>That is why one of the key features of IDA Teams, is software engineering-inspired revision control, applied to reverse-engineering</p> <p>NOTE: Plans for IDA Teams span well beyond just revision control, but this was our first, significant milestone.</p>"},{"location":"user-guide/teams/hvui_user_manual.html#revision-control-for-reverse-engineering-projects","title":"Revision control, for reverse-engineering projects","text":"<p>The general concepts behind IDA Teams revision control, are essentially the same as those behind many other revision control systems, and uses a client-server architecture.</p> <ul> <li>On the server-side, we will find a new component: the vault server</li> <li>On the client side, we will find that an IDA Teams installation now install a few additional binaries: a pair of clients to connect to the server</li> </ul>"},{"location":"user-guide/teams/hvui_user_manual.html#the-vault_server","title":"The vault_server","text":"<p>The server, called <code>vault_server</code>, maintains a ledger of operations that were performed on the files that it hosts: modifications, added files, deleted files, ...</p> <p>It should be made available to all members of a team destined to work on common projects.</p> <p>The server comes with its own installer, and an \"admin guide\" explaining how to tune the installation &amp; perform common tasks.</p>"},{"location":"user-guide/teams/hvui_user_manual.html#the-clients","title":"The clients","text":"<p>On the client-side, IDA Teams will consist of an IDA installer, to be installed on each user's computer.</p> <p>In addition to the regular IDA binaries, that new installer will alse place two clients to connect to the vault_server:</p> <ul> <li><code>hv</code>: a command-line interface client</li> <li><code>hvui</code>: a visual client</li> </ul> <p>Users interact with the server using those tools, which lets them get a good view over who contributed what, and offer functionality for organizing their work in the most efficient way possible.</p> <p>Online vs Offline</p> <p>Users have all the freedom to organize their work the way they see fit: they don't have to be connected at all times, and will only need to be able to connect to the server when it is time to publish their changes so they are available for others to benefit from.</p>"},{"location":"user-guide/teams/hvui_user_manual.html#resolving-conflicts-in-a-file","title":"Resolving conflicts in a file","text":"<p>When a user needs to commit changes made to a file, but that same file has received other modifications (likely from other users) in the meantime, it is necessary to first \"merge\" the two sets of modifications together.</p> <p>When the two sets of modifications do not overlap, merging is trivial</p> <ul> <li>at least conceptually. But when they do overlap, they produce conflict(s).</li> </ul> <p>Since IDA Teams focuses on collaboration over IDA database files, the rest of this section will focus on the different strategies that are available for resolving conflicts among those.</p> <p>IDA Teams comes with multiple strategies to help in conflict resolution of IDA database files:</p>"},{"location":"user-guide/teams/hvui_user_manual.html#auto-resolve-if-no-conflicts","title":"Auto-resolve (if no conflicts)","text":"<p>Launch IDA in a non-interactive batch mode, attempting to perform all merging automatically.</p> <p>If any conflict is discovered, bail out of the merge process, and don't modify the local database.</p>"},{"location":"user-guide/teams/hvui_user_manual.html#auto-resolve-prefer-local","title":"Auto-resolve, prefer local","text":"<p>Launch IDA in a non-interactive batch mode, attempting to perform all merging automatically.</p> <p>If a conflict is discovered, assume that the \"local\" change (i.e., the current user's change) is the correct one, and apply that.</p> <p>Once all merging is done and conflicts are resolved, write those to the local database and exit IDA</p>"},{"location":"user-guide/teams/hvui_user_manual.html#auto-resolve-prefer-remote","title":"Auto-resolve, prefer remote","text":"<p>Launch IDA in a non-interactive batch mode, attempting to perform all merging automatically.</p> <p>If a conflict is discovered, assume that the \"remote\" change (i.e., the change made by another user) is the correct one, and apply that.</p> <p>Once all merging is done and conflicts are resolved, write those to the local database and exit IDA</p>"},{"location":"user-guide/teams/hvui_user_manual.html#interactive-merge-mode","title":"Interactive merge mode","text":"<p>Manual merge mode.</p> <p>This will launch IDA in an interactive, 3-pane mode, allowing the user to decide how to resolve each conflict.</p> <p>Once all merging is done and conflicts are resolved, exit IDA and write the changes to the local database.</p>"},{"location":"user-guide/teams/hvui_user_manual.html#use-local-discard-remote","title":"Use local, discard remote","text":"<p>Select the local database, ignoring all changes in the remote database.</p> <p>No IDA process is run.</p>"},{"location":"user-guide/teams/hvui_user_manual.html#use-remote-discard-local","title":"Use remote, discard local","text":"<p>Select the remote database, ignoring all changes in the local database.</p> <p>No IDA process is run.</p>"},{"location":"user-guide/teams/hvui_user_manual.html#what-is-a-site","title":"What is a \"site\"?","text":"<p>A site represents a mapping of the server files to the local filesystem. Normally each computer has a site associated with it. A site has the following attributes:</p> <ul> <li>A site name</li> <li>A host name</li> <li>The path to a folder on the filesystem (a.k.a., \"root directory\")</li> <li>Path filters (optional)</li> </ul> <p></p>"},{"location":"user-guide/teams/hvui_user_manual.html#root-directory","title":"Root directory","text":"<p>The root directory is the essential attribute of a site. It denotes where all files from the vault server will be mapped to the local disk. Everything inside the root directory can potentially be uploaded to the vault server and shared with other team members.</p> <p>The vault server cannot manage files located outside the root directory. However, this limitation is straightforward to overcome: create a symbolic link (or, on Windows, a junction point) from the root directory to the directory of your choice. This will make the target of the symbolic link visible as part of the root directory.</p> <p>The vault server keeps track of each site's state: what files have been downloaded to the local disk, what files have been checked out for editing, etc. This simplifies the housekeeping tasks, especially for big repositories with millions of files. Even for them, downloading the latest files or reconciling the local disk with the server, are almost instantaneous.</p> <p>The host name is a security feature that prevents from using a site on a wrong computer. Since the server keeps track of the files downloaded to each site, using a wrong site may lead to an inconsistent mapping between the server and local disk. However, if the user does not want this protection, it is possible to erase the host name in the site definition.</p> <p>Sites can be edited from the \"Sites\" view.</p>"},{"location":"user-guide/teams/hvui_user_manual.html#path-filters","title":"Path filters","text":"<p>By default all server files are visible, but for servers that manage gigabytes of data this can be problematic: it may be undesirable for users to download all files to their local computer.</p> <p>Site filters provide a mechanism that lets users restrict the set of files their IDA Teams client works with. Users who want to work on some specific projects can set a filter that restricts the visibility only to selected subdirectories.</p> <p>Each site has its own filters, that con be modified at any time. Filters do not directly affect any files on the local disk, or on the server: they are strictly about visibility.</p> <p>WARNING: Site filters are meant simplify a user's life by letting them focus on specific projects. Since they can be modified by users, they should not be considered a security measure: that would be the role of the permissions system, which can only be managed by vault_server administrators.</p> <p>NOTE: The purpose of site filters is to create a subset of the full set of files provided by the server. Site filters don't directly affect what locally-available files (i.e., present in the site's rootdir, but not tracked by the server) are visible by IDA Teams clients.</p> <p>There is another mechanism to specify what files should not be added to the vault. See <code>.hvignore</code> for more info.</p> <p>Examples</p> <p>An empty filter</p> <pre><code>$ cat empty_filter.txt\n$\n</code></pre> <p>Hide all files, except those in <code>malware/</code></p> <pre><code>$ cat only_malware.txt\nmalware/\n$\n</code></pre> <p>Show all files, except those from the pentesting team</p> <pre><code>$ cat hide_pentest.txt\n!pentesting/\n$\n</code></pre> <p>Show all files but those from the pentesting team, except their produced documents</p> <pre><code>$ cat hide_pentest_but_docs.txt\n!pentesting/\npentesting/research_docs/\n$\n</code></pre>"},{"location":"user-guide/teams/hvui_user_manual.html#hvignore-and-hvignore-files","title":"<code>hvignore</code> (and <code>.hvignore</code>) files","text":"<p>IDA Teams comes with a mechanism that lets users specify what files should be ignored when adding files from their local machines to the vault_server.</p>"},{"location":"user-guide/teams/hvui_user_manual.html#the-main-hvignore-file-pathtoinstall-dirhvignore","title":"The main <code>hvignore</code> file (<code>path/to/install-dir/hvignore</code>)","text":"<p>In IDA Teams' install directory, you will find the \"main\" <code>hvignore</code> file, that is pre-populated with a list of files that you would typically not want to add to the vault_server, such as <code>.bak</code> backup files and unpacked IDA database files: <code>.id0</code>, <code>.nam</code>, etc...</p> <p>The syntax for <code>hvignore</code> is very close to that of <code>.gitignore</code> files.</p>"},{"location":"user-guide/teams/hvui_user_manual.html#additional-hvignore-files","title":"Additional <code>.hvignore</code> files","text":"<p>In addition to that file, you can have <code>.hvignore</code> file (notice the <code>.</code> - dot) placed in your site's directory structure.</p> <p>When found, those files' contents will be appended to the main file's contents.</p>"},{"location":"user-guide/teams/hvui_user_manual.html#the-registry","title":"The registry","text":"<p>On Microsoft Windows, IDA Teams will store certain bits of information in the registry (host name, user name, site name.)</p> <p>On macOS and Linux, it will use a pseudo-registry file, located at <code>$HOME/.idapro/hvui.reg</code>.</p>"},{"location":"user-guide/teams/hvui_user_manual.html#passwords-storage-in-the-oss-keychain","title":"Passwords storage in the OS's keychain","text":"<p>While hosts, user names &amp; site names are persisted to the registry, passwords are stored securely in the operating system's keychain.</p> <ul> <li>On Windows, the Windows Credential Store is used (therefore requiring Windows 7 or newer)</li> <li>On macOS, the macOS Keychain is used</li> <li>On Linux, the \"Secret service\" is used (through <code>libsecret-1</code>)</li> </ul>"},{"location":"user-guide/teams/hvui_user_manual.html#managing-permissions-on-a-vault","title":"Managing permissions on a vault","text":"<p>The vault_server includes a way to restrict the access of users and groups to the data stored in the vault_server.</p> <p>The permission file is a text file that contains the permission table. The file consists of lines that grant or deny access to certain path patterns in the vault. The syntax for an entry is the following:</p> <p><code>grant/deny group/user NAME PERMISSION VAULT_PATH_PATTERN</code></p> <p>Possible <code>PERMISSION</code> values are: <code>list</code>, <code>read</code> and <code>write</code>. <code>read</code> includes <code>list</code>, <code>write</code> includes <code>read</code> (and thus also includes <code>list</code>).</p> <p>Example of a permission file:</p> <pre><code># deny everything to everyone. no need to specify it explicitly,\n# it is the default for a non-empty permission table:\n# deny  user *      list  //*\n\ndeny  user *      list  //secret/   # nobody can see //secret. this line is superfluous\n                                    # because everything is denied by default.\ngrant user hughes write //secret/   # but hughes can write to secret and its subdirs\ngrant user john   read  //secret/   # and john can read the entire directory.\ndeny  user *      list  //secret/supersecret # supersecret is not visible to anyone\ngrant user hughes write //secret/supersecret # but hughes can modify it (john cannot)\ngrant user *      write //local_files/ # everyone can work with 'local_files'\ndeny group remote list //local_files/  # except that the 'remote' group cannot see 'local_files'\n</code></pre> <p>An empty permission table means that no permissions are enforced rendering all files accessible by everyone. As soon as a non-empty permission table is specified, all access is denied to everyone by default.</p> <p>Path patterns may refer to (yet) unexisting files. Users and groups too may refer to unexisting users and groups.</p> <p>The order of the permission file is important as the last lines will take precedence over the preceding lines (if there are conflicts).</p> <p>Admins are not affected by the permission table, they are granted all access.</p> <p>To install a new permission table, use perm set</p> <p>The current permissions can be retrieved using perm get</p>"},{"location":"user-guide/teams/hvui_user_manual.html#tour-of-hvuis-widgets","title":"Tour of hvui\u2019s widgets","text":""},{"location":"user-guide/teams/hvui_user_manual.html#vault-files","title":"Vault files","text":"<p>The \"Vault files\" widget represents the data that's available on the server.</p> <p></p> <p>Since its contents can be very similar to what is shown in the \"Local files\" (depending on whether user\u2019s site is using site filters or not), it has been given differentiating background color, in the hope of not confusing it with that other widget.</p>"},{"location":"user-guide/teams/hvui_user_manual.html#actions","title":"Actions","text":"<ul> <li>Get the latest revision</li> <li>Scan and commit</li> <li>Checkout for edit</li> <li>Add to vault</li> <li>Checkout for delete</li> <li>Checkout for move/rename\u2026\u200b</li> <li>Checkout for copy\u2026\u200b</li> <li>Revert\u2026\u200b</li> <li>Revert if unchanged</li> <li>Open</li> <li>Auto resolve (if no conflicts)\u2026\u200b</li> <li>Auto resolve, prefer local\u2026\u200b</li> <li>Auto resolve, prefer remote\u2026\u200b</li> <li>Interactive merge</li> <li>Use local, discard remote\u2026\u200b</li> <li>Use remote, discard local\u2026\u200b</li> <li>Diff against the local file</li> <li>Diff against previous revision</li> <li>File history</li> <li>Find in vault\u2026\u200b</li> <li>Next search result</li> <li>Previous search result</li> <li>Refresh</li> <li>Show deleted files</li> <li>Show in Vault files/Show in Local files</li> </ul>"},{"location":"user-guide/teams/hvui_user_manual.html#local-files","title":"Local files","text":"<p>The \"Local files\" widget represents the data that's available on the local disk.</p> <p></p> <p>The root of the tree starts at the site\u2019s workdir.</p> <p>Note that this widget honors the <code>hvignore</code> file that\u2019s placed in the installation directory next to <code>hvui</code>, and also any <code>.hvignore</code> file found in the directory structure.</p>"},{"location":"user-guide/teams/hvui_user_manual.html#actions_1","title":"Actions","text":"<ul> <li>Get the latest revision</li> <li>Scan and commit</li> <li>Checkout for edit</li> <li>Add to vault</li> <li>Checkout for delete</li> <li>Checkout for move/rename\u2026\u200b</li> <li>Checkout for copy\u2026\u200b</li> <li>Revert\u2026\u200b</li> <li>Revert if unchanged</li> <li>Open</li> <li>Open the containing folder // local only</li> <li>Auto resolve (if no conflicts)\u2026\u200b</li> <li>Auto resolve, prefer local\u2026\u200b</li> <li>Auto resolve, prefer remote\u2026\u200b</li> <li>Interactive merge</li> <li>Use local, discard remote\u2026\u200b</li> <li>Use remote, discard local\u2026\u200b</li> <li>Diff against the local file</li> <li>Diff against previous revision</li> <li>File history</li> <li>Find in vault\u2026\u200b</li> <li>Next search result</li> <li>Previous search result</li> <li>Refresh</li> <li>Show deleted files</li> <li>Show in Vault files/Show in Local files</li> </ul>"},{"location":"user-guide/teams/hvui_user_manual.html#worklists","title":"Worklists","text":"<p>The \"Worklists\" widget groups all the modifications that are still pending (and are thus not yet visible to other users)</p> <p>Those changes are grouped by \"Worklist\" (i.e., topic). A typical worklist will hold files that are related, and will be made available to all once a worklist is committed.</p> <p>It is possible to move file(s) from a worklist to another, by \"drag &amp; drop\"'ing them, \"cut &amp; paste\"'ing them, or using the Migrate to another worklist\u2026\u200b action.</p> <p>By default, this widget will only show the current user\u2019s worklists, but can be made to show everyone\u2019s worklists, in read-only mode: the current user will still only be able to modify (or commit) his/her own worklists.</p>"},{"location":"user-guide/teams/hvui_user_manual.html#actions_2","title":"Actions","text":"<ul> <li>Open</li> <li>Commit\u2026\u200b</li> <li>Add new worklist\u2026\u200b</li> <li>Edit worklist\u2026\u200b</li> <li>Revert\u2026\u200b</li> <li>Revert if unchanged</li> <li>Delete worklist\u2026\u200b</li> <li>View worklist\u2026\u200b</li> <li>Auto resolve (if no conflicts)\u2026\u200b</li> <li>Auto resolve, prefer local\u2026\u200b</li> <li>Auto resolve, prefer remote\u2026\u200b</li> <li>Interactive merge</li> <li>Use local, discard remote\u2026\u200b</li> <li>Use remote, discard local\u2026\u200b</li> <li>Diff against the local file</li> <li>Migrate to another worklist\u2026\u200b</li> <li>File history</li> <li>Refresh</li> <li>Show other users' worklists</li> </ul>"},{"location":"user-guide/teams/hvui_user_manual.html#commits","title":"Commits","text":"<p>The \"commits\" widget shows a list of previous commits made to the server, in a concise and condensed way.</p> <p>It is possible to request a detailed view for any entry in that list.</p> <p>NOTE: The amount of entries displayed by this widget can be configured through the \"Options\" dialog.</p>"},{"location":"user-guide/teams/hvui_user_manual.html#actions_3","title":"Actions","text":"<ul> <li>Details\u2026\u200b (on \"Commits\" widget)</li> <li>Sync to this revision</li> </ul>"},{"location":"user-guide/teams/hvui_user_manual.html#commit_1","title":"Commit","text":"<p>Using the \"commits\" widget, it is possible to inspect what changes were previously submitted to the vault in a particular commit.</p> <p>Actions</p> <ul> <li>Open this revision</li> <li>Sync to this revision</li> <li>Diff against previous revision</li> <li>Checkout for copy\u2026\u200b</li> <li>File history</li> </ul>"},{"location":"user-guide/teams/hvui_user_manual.html#sites","title":"Sites","text":"<p>The \"Sites\" widget provides the ability for a user (or an admin) to administrate users' sites.</p> <p>Non-admin users will only be able to modify their own site(s), while an admin will have the ability to do so for all users' sites.</p> <p>If you find yourself using more than one site on any specific machine, you will likely have to resort to the Use this site\u2026\u200b to switch between them.</p>"},{"location":"user-guide/teams/hvui_user_manual.html#actions_4","title":"Actions","text":"<ul> <li>Add new site\u2026\u200b</li> <li>Edit site\u2026\u200b</li> <li>Delete site\u2026\u200b</li> <li>Use this site\u2026\u200b</li> </ul>"},{"location":"user-guide/teams/hvui_user_manual.html#users","title":"Users","text":"<p>The \"Users\" widget lists all knows users of the Hex-Rays Vault server.</p> <p>Non-admin users have the possibility to change their password.</p> <p>Users with administrator rights will, in addition, be able to add, remove, modify users - and modify anyone's password.</p>"},{"location":"user-guide/teams/hvui_user_manual.html#actions_5","title":"Actions","text":"<ul> <li>Add new user\u2026\u200b</li> <li>Edit user\u2026\u200b</li> <li>Delete user\u2026\u200b</li> <li>Set password\u2026\u200b</li> </ul>"},{"location":"user-guide/teams/hvui_user_manual.html#log-window","title":"Log window","text":"<p>The logging area is helpful in providing feedback about different types of events:</p> <ul> <li>Details of successful operations</li> <li>Connection state (logins, logout's, network issues, ...)</li> <li>...other various bits of information that the program deems relevant for the user to know</li> </ul>"},{"location":"user-guide/teams/hvui_user_manual.html#actions_6","title":"Actions","text":"<p>The logging area provides typical text-manipulating functions (copying, searching, ...) as well as the ability to turn timestamps on/off.</p>"},{"location":"user-guide/teams/hvui_user_manual.html#file-history","title":"File history","text":"<p>The \"File history\" widget shows all changes ever commited to a single file.</p>"},{"location":"user-guide/teams/hvui_user_manual.html#actions_7","title":"Actions","text":"<ul> <li>Open this revision</li> <li>Sync to this revision</li> <li>Checkout for copy\u2026\u200b</li> <li>Details\u2026\u200b (on \"Commits\" widget)</li> <li>Diff against previous revision</li> <li>Diff against\u2026\u200b</li> </ul>"},{"location":"user-guide/teams/hvui_user_manual.html#user-interface-actions","title":"User interface actions","text":"<p>The following is a list of actions, available in hvui. Note that most actions are \"contextualized\" in the sense that they require certain conditions to be met, in order to work:</p> <ul> <li>the widget being operated on,</li> <li>whether or not a selection is available,</li> <li>the state of the selected file(s),</li> <li>\u2026\u200b</li> </ul> <p>All actions are available from the toplevel menubar's submenus. Those whose operating conditions are not met, will appear disabled.</p> <p>NOTE: Contrary to the toplevel menubar's submenus, context menus (AKA: popup menus, right-click menus, \u2026\u200b) will not feature actions that are disabled. Those menus are created on-the-fly, and it's best not to pollute them with unnecessary noise.</p>"},{"location":"user-guide/teams/hvui_user_manual.html#get-the-latest-revision","title":"Get the latest revision","text":"<p>Sync the selected file(s) (or the entire server contents), to the latest revision.</p> <p>This effectively updates all local copies of the files, except for those that are currently opened for edition, addition or deletion: those will be left untouched in order to not risk losing user modifications made to them.</p>"},{"location":"user-guide/teams/hvui_user_manual.html#commit_2","title":"Commit\u2026\u200b","text":"<p>Prompts the user for a commit description, and submits the files that are part of the current worklist, to the server.</p> <p>Once successfully committed, a worklist will disappear and a new entry will be added to the list of commits.</p> <p>Committed changes (modifications, additions and deletions) are available for all users that can access those files.</p>"},{"location":"user-guide/teams/hvui_user_manual.html#scan-and-commit","title":"Scan and commit","text":"<p>Scan the selected files/folders (or the entire root directory), and create a worklist with all changes that were found: files that have been added, removed, modified, \u2026\u200b</p> <p>Unless you explicitly tell it not to (by checking the \"Do not show this dialog anymore\" checkbox), this action will first offer the possibility to refine what exactly the scan should be looking for:</p> <p></p> <p>Spotting new or deleted files is fairly straightforward, but when it comes to existing files, hvui will also perform a <code>md5</code> checksum comparison.</p> <p>If differences are found, hvui will prepare a new worklist with those.</p> <p>This is especially useful if one had to work on some files while no connection to the server was available (e.g., on a plane).</p> <p>The files found will be filtered by hvignore.</p>"},{"location":"user-guide/teams/hvui_user_manual.html#details-on-commits-widget","title":"Details\u2026\u200b (on \"Commits\" widget)","text":"<p>Opens a detailed view of the commit details, including a list of the files that were modified:</p> <p></p>"},{"location":"user-guide/teams/hvui_user_manual.html#sync-to-this-revision","title":"Sync to this revision","text":"<p>Retrieve the specified revision from the server, and replace the local file with it.</p>"},{"location":"user-guide/teams/hvui_user_manual.html#diff-against-previous-revision","title":"Diff against previous revision","text":"<p>For each selected file, perform a diff of the selected file, against its previous revision.</p> <p>NOTE: If a file is opened and has been modified, those yet-unsubmitted modifications will not be part of the diff: only those between the two recorded revisions, will be visible.</p>"},{"location":"user-guide/teams/hvui_user_manual.html#diff-against","title":"Diff against\u2026\u200b","text":"<p>A more powerful version of diff, that lets the user pick for each \"side\" of the diff:</p> <ul> <li>either the current revision, any revision number, or to the local file on disk</li> <li>the path to the file (it is therefore possible to diff entirely unrelated files together)</li> </ul>"},{"location":"user-guide/teams/hvui_user_manual.html#checkout-for-edit","title":"Checkout for edit","text":"<p>Informs the server that we will be working on those files in the near future.</p> <p>They will be added to the worklist number 1 (which will be created if it doesn't exist), and will turn bold, to draw attention to them.</p>"},{"location":"user-guide/teams/hvui_user_manual.html#add-to-vault","title":"Add to vault","text":"<p>Informs the server that we wish to add the selected file(s) to the list of files managed by the server.</p> <p>They will be added to the worklist number 1 (which will be created if it doesn't exist), and will turn bold, to draw attention to them.</p> <p>The files selected will be filtered by hvignore.</p>"},{"location":"user-guide/teams/hvui_user_manual.html#checkout-for-delete","title":"Checkout for delete","text":"<p>Informs the server that we wish to delete the selected file(s) from the list of files managed by the server.</p> <p>They will be added to the worklist number 1 (which will be created if it doesn't exist), and will turn bold, to draw attention to them.</p>"},{"location":"user-guide/teams/hvui_user_manual.html#checkout-for-moverename","title":"Checkout for move/rename\u2026\u200b","text":"<p>For each selected file (or directory), prompt the user for a new name to rename to.</p> <p>This is the equivalent of executing, followed by.</p>"},{"location":"user-guide/teams/hvui_user_manual.html#checkout-for-copy","title":"Checkout for copy\u2026\u200b","text":"<p>For each selected file or directory, prompt the user for a new name to create a copy into.</p> <p>The copied files will be added to the worklist number 1 (which will be created if it doesn't exist).</p>"},{"location":"user-guide/teams/hvui_user_manual.html#open-this-revision","title":"Open this revision","text":"<p>For each selected file, launch the associated application.</p> <p>NOTE: The file is retrieved from the server, and downloaded into a temporary location. It is cleaned after the application exits.</p>"},{"location":"user-guide/teams/hvui_user_manual.html#file-history_1","title":"File history","text":"<p>For each selected file, open awidget showing the list of modifications that were made to the file.</p>"},{"location":"user-guide/teams/hvui_user_manual.html#revert","title":"Revert\u2026\u200b","text":"<p>Reverts the selection - that is: remove from the worklist(s), and restore the current revision from the server.</p> <p>NOTE: This action will lose all changes made to the selected file(s), and thus will first prompt for confirmation.</p> <p>See also</p>"},{"location":"user-guide/teams/hvui_user_manual.html#revert-if-unchanged","title":"Revert if unchanged","text":"<p>A \"safe\" version of, that will first verify if files have been modified, before reverting them.</p> <p>Files that have not been modified, will be reverted. Those that have been, will remain untouched.</p> <p>Since this is a safe operation (in the sense that no data can be lost), this action will not ask for confirmation.</p> <p>See also</p>"},{"location":"user-guide/teams/hvui_user_manual.html#open","title":"Open","text":"<p>For each entry in the selection, launch the associated \"View\" application.</p> <p>If no association is present for a specific file extension (or if the file does not have an extension), the default <code>*</code> association will be used.</p>"},{"location":"user-guide/teams/hvui_user_manual.html#open-the-containing-folder","title":"Open the containing folder","text":"<p>For each folder in the selection, asks the OS to open a file browser at the corresponding place.</p> <p>What file browser is opened, depends on the OS's settings.</p>"},{"location":"user-guide/teams/hvui_user_manual.html#resolve-actions","title":"Resolve actions","text":"<p>hvui comes with many strategies to resolve files:</p> <ul> <li>Auto resolve (if no conflicts)\u2026\u200b</li> <li>Auto resolve, prefer local\u2026\u200b</li> <li>Auto resolve, prefer remote\u2026\u200b</li> <li>Interactive merge</li> <li>Use local, discard remote\u2026\u200b</li> <li>Use remote, discard local\u2026\u200b</li> </ul> <p>However, hvui only knows how to handle a successful merge operation when IDA is used. Consequently, only the last 2 operations will be available for non-<code>.idb</code>/<code>.i64</code> files.</p> <p>Resolve actions prolog</p> <p>The first thing that happens is that the last revision of the file is retrieved from the server (and stored in a temporary location).</p> <p>Then (for all butand) IDA will be launched in a special mode, and with different set of parameters that depend on the exact nature of the operation.</p> <p>Auto resolve (if no conflicts)\u2026\u200b</p> <p>Perform the \"resolve actions\" prolog, then launch IDA non-interactively: IDA will attempt merging the changes made to the local file with those that were made to the last revision of the file, and succeed if no conflicting changes were found.</p> <p>This is a safe operation in the sense that, should there be any conflict, it will not touch the local file.</p> <p>Auto resolve, prefer local\u2026\u200b</p> <p>Perform the \"resolve actions\" prolog, then launch IDA non-interactively: IDA will merge the changes made to the local file with those that were made to the last revision of the file. Each time a conflict is found, automatically pick the local change.</p> <p>Auto resolve, prefer remote\u2026\u200b</p> <p>Perform the \"resolve actions\" prolog, then launch IDA non-interactively: IDA will merge the changes made to the local file with those that were made to the last revision of the file. Each time a conflict is found, automatically pick the other change.</p> <p>Interactive merge</p> <p>Perform the \"resolve actions\" prolog, then launch IDA interactively: the user will be presented with a 3-panel IDA instance, where it will be possible to manually pick either the local, or the remote change, for each conflict.</p> <p>Once the user is done and exits IDA saving the resulting database, the file will be considered resolved.</p> <p>Use local, discard remote\u2026\u200b</p> <p>Perform the \"resolve actions\" prolog, then just consider that our local version of the file is the correct one.</p> <p>Use remote, discard local\u2026\u200b</p> <p>Perform the \"resolve actions\" prolog, then replace the local version of the file with the other one.</p>"},{"location":"user-guide/teams/hvui_user_manual.html#diff-against-the-local-file","title":"Diff against the local file","text":"<p>Retrieve the specified file(s) from the server (and store them in a temporary location), then launch the associated \"Diff\" application to compare them against their local versions.</p>"},{"location":"user-guide/teams/hvui_user_manual.html#find-in-vault","title":"Find in vault\u2026\u200b","text":"<p>Prompt the user for a pattern/substring to be looking for, and queries the server.</p> <p>If a match is found, it will be selected in the vault files widget. It is then possible to move forward/backward in the search results.</p>"},{"location":"user-guide/teams/hvui_user_manual.html#next-search-result","title":"Next search result","text":"<p>Move forward in the result set of a find operation.</p>"},{"location":"user-guide/teams/hvui_user_manual.html#previous-search-result","title":"Previous search result","text":"<p>Move backward in the result set of a find operation.</p>"},{"location":"user-guide/teams/hvui_user_manual.html#refresh","title":"Refresh","text":"<p>Clears the local caches of all the data that was retrieved from the local filesystem &amp; the Hex-Rays Vault server, and force a refresh of all widgets.</p>"},{"location":"user-guide/teams/hvui_user_manual.html#show-in-vault-filesshow-in-local-files","title":"Show in Vault files/Show in Local files","text":"<p>Find the corresponding selection in the other view, select it, and give focus to that view.</p> <p>This is helpful to navigate between vault files and local files.</p>"},{"location":"user-guide/teams/hvui_user_manual.html#show-deleted-files","title":"Show deleted files","text":"<p>Toggle the visibility of files that have been deleted.</p> <p>When a file is deleted in revision <code>#N</code>, its revisions up to <code>#N-1</code> are still kept on the server (but not visible by default.)</p> <p>This offers the opportunity to view (and possibly resurrect) such deleted files.</p>"},{"location":"user-guide/teams/hvui_user_manual.html#add-new-site","title":"Add new site\u2026\u200b","text":"<p>Create a new site.</p> <p>While logged in as a non-administrator, you won't have the choice but to associate the site to the current user. However, when logged in as an administrator, it is necessary to provide the user's name as well.</p>"},{"location":"user-guide/teams/hvui_user_manual.html#edit-site","title":"Edit site\u2026\u200b","text":"<p>Offers the ability to modify the following properties of a site:</p> <ul> <li>Its root directory</li> <li>The client's host</li> <li>Optional site filters</li> </ul>"},{"location":"user-guide/teams/hvui_user_manual.html#delete-site","title":"Delete site\u2026\u200b","text":"<p>Delete the selected site (after prompting for confirmation.)</p> <p>Naturally, deleting a site will also delete the worklists that were associated with that site. The commits that were made from that site will not be deleted.</p>"},{"location":"user-guide/teams/hvui_user_manual.html#use-this-site","title":"Use this site\u2026\u200b","text":"<p>Have hvui switch to the selected site.</p> <p>This can be useful if you have more than one site on your machine.</p> <p>Switching to a site requires that the client host matches that of the current machine, and that the site belongs to the user who's currently logged-in.</p>"},{"location":"user-guide/teams/hvui_user_manual.html#add-new-user","title":"Add new user\u2026\u200b","text":"<p>Prompts the administrator for various bits of information about the user: login, real name, license ID, password, \u2026\u200b and registers that information on the server.</p>"},{"location":"user-guide/teams/hvui_user_manual.html#edit-user","title":"Edit user\u2026\u200b","text":"<p>Lets an administrator change all information about a particular user, with the exception of their login (immutable) and password (use the dedicated action to do that.)</p>"},{"location":"user-guide/teams/hvui_user_manual.html#delete-user","title":"Delete user\u2026\u200b","text":"<p>Asks the administrator for confirmation, then deletes the user from the server.</p> <p>Deleting a user also deletes the worklists that belonged to the user. The commits made by that user won't be impacted.</p>"},{"location":"user-guide/teams/hvui_user_manual.html#set-password","title":"Set password\u2026\u200b","text":"<p>Prompts for a new password (and its confirmation), and applies the changes on the server.</p>"},{"location":"user-guide/teams/hvui_user_manual.html#add-new-worklist","title":"Add new worklist\u2026\u200b","text":"<p>Prompts the user for a brief worklist description (which can remain empty at this point), and create a new, empty worklist.</p>"},{"location":"user-guide/teams/hvui_user_manual.html#edit-worklist","title":"Edit worklist\u2026\u200b","text":"<p>Shows worklist details, and offers to edit its description.</p> <p>This action can only be performed on worklists that belong to the current user.</p>"},{"location":"user-guide/teams/hvui_user_manual.html#view-worklist","title":"View worklist\u2026\u200b","text":"<p>Shows other users' worklists details, in read-only mode.</p>"},{"location":"user-guide/teams/hvui_user_manual.html#delete-worklist","title":"Delete worklist\u2026\u200b","text":"<p>Prompts for confirmation, and deletes the worklist.</p> <p>All modifications (including additions &amp; deletions of files), will be abandoned/reverted.</p>"},{"location":"user-guide/teams/hvui_user_manual.html#migrate-to-another-worklist","title":"Migrate to another worklist\u2026\u200b","text":"<p>Lets the user pick another one of his pending worklists (or, alternatively, create a new one), then moves the files to that worklist.</p>"},{"location":"user-guide/teams/hvui_user_manual.html#show-other-users-worklists","title":"Show other users' worklists","text":"<p>Toggle between the two following states:</p> <ol> <li>show this user's worklists on this site,</li> <li>show all worklists (from all users, and on all sites)</li> </ol>"},{"location":"user-guide/teams/hvui_user_manual.html#miscellaneous-information","title":"Miscellaneous information","text":""},{"location":"user-guide/teams/hvui_user_manual.html#simplified-site-creation-on-first-connection","title":"Simplified site creation on first connection","text":"<p>In order to do any meaningful work in {hvui}, a user must be using a site.</p> <p>To make it easier to get started using hvui, the first time a user connects to the Hex-Rays Vault server, the application will propose a a simplified site creation dialog, that will query only the \"root directory\".</p> <p>The rest of the site attributes will be guessed (or generated):</p> <ul> <li>the host name will be retrieved automatically from the system</li> <li>the user name is known since the user just logged in</li> <li>the site name will be generated from the <code>user name</code> + <code>host name</code></li> </ul> <p>It is of course still possible to alter that site later, through the \"Sites\" widget.</p>"},{"location":"user-guide/teams/hvui_user_manual.html#technical-information","title":"Technical information","text":"<p>HVUI stores certain bits of information in the registry:</p> <ul> <li>On Windows, this will be located under <code>\\HKEY_CURRENT_USER\\Software\\Hex-Rays\\HVUI</code></li> <li>On Unix systems, HVUI will use a file-backed registry, located at <code>$HOME/.idapro/hvui.reg</code></li> </ul>"},{"location":"user-guide/teams/merge.html","title":"Diffing and Merging Databases with IDA Teams","text":""},{"location":"user-guide/teams/merge.html#overview","title":"Overview","text":"<p>IDA 8.0 introduces IDA Teams - a mechanism that provides revision control for your IDA database files. Perhaps the most essential feature of this new product is the ability to natively diff and merge databases using IDA, allowing multiple reverse engineers to manage work on the same IDA database.</p> <p>This document discusses in detail the steps involved when diffing and merging IDA databases.</p> <p>Before continuing, you might want to take a quick look at the tutorial for HVUI, the GUI client for IDA Teams' revision control functionality. It will be referenced multiple times in this document, although here we will focus specifically on the merging functionality.</p>"},{"location":"user-guide/teams/merge.html#inspecting-changes","title":"Inspecting changes","text":"<p>After having done some reverse-engineering work on an IDA database, it is possible to view those changes in a special mode in IDA: right-click, and choose the diff action:</p> <p>Here a new instance of IDA will be launched in a special \"diff\" mode:</p>"},{"location":"user-guide/teams/merge.html#idas-diff-mode","title":"IDA\u2019s diff mode","text":"<p>This new IDA mode lets the user compare two databases, in a traditional \"diff\" fashion: essentially a two-panel window, showing the unmodified file on the left and the version with your changes on the right.</p>"},{"location":"user-guide/teams/merge.html#the-progress-widget","title":"The \"Progress\" widget","text":"<p>Represents the current step in the diff process.</p>"},{"location":"user-guide/teams/merge.html#the-left-panel","title":"The left panel","text":"<p>Shows the \"untouched\" version of the database (i.e., the one without your changes)</p>"},{"location":"user-guide/teams/merge.html#the-right-panel","title":"The right panel","text":"<p>Shows your version of the database (i.e., featuring your changes)</p>"},{"location":"user-guide/teams/merge.html#diff-region-details","title":"Diff region details","text":"<p>Notice how both panels have a little area at the bottom, that is labeled \"Details\".</p> <p>Details are available on certain steps of the diffing process, and provide additional information about the change that is currently displayed.</p>"},{"location":"user-guide/teams/merge.html#the-diffing-toolbar","title":"The \"diffing\" toolbar","text":"<p>The actions in the toolbar are:</p> <ul> <li>Previous chunk</li> <li>Center chunk</li> <li>Next chunk</li> <li>Proceed to the next step</li> <li>Toggle 'Details'</li> </ul> <p>Using actions in the toolbar, you can now iterate through the differences between the two databases, with each change shown in context as if viewed through a normal IDA window.</p> <p>The ability to view changes in context was a major factor in the decision to use IDA itself as the diffing/merging tool for IDA Teams.</p>"},{"location":"user-guide/teams/merge.html#diff-mode-idas-toolbar-actions","title":"Diff mode IDA\u2019s toolbar actions","text":""},{"location":"user-guide/teams/merge.html#previous-chunk","title":"Previous chunk","text":"<p>Move to the previous change</p>"},{"location":"user-guide/teams/merge.html#center-chunk","title":"Center chunk","text":"<p>Re-center the panels to show the current chunk (useful if you navigated around to get more context)</p>"},{"location":"user-guide/teams/merge.html#next-chunk","title":"Next chunk","text":"<p>Move to the next change</p>"},{"location":"user-guide/teams/merge.html#proceed-to-the-next-step","title":"Proceed to the next step","text":"<p>Move to the next step in the diffing process.</p>"},{"location":"user-guide/teams/merge.html#toggle-details","title":"Toggle 'Details'","text":"<p>Toggle the visibility of the \"Details\" widgets in the various panels (note that some steps do not provide details, so even if the \"Details\" are requested, they might not be currently visible.)</p>"},{"location":"user-guide/teams/merge.html#terminology","title":"Terminology","text":"<p>It is important to note the difference between the terms \"diff\" and \"merge\".</p> <p>This document will sometimes use the two terms interchangeably. This is because to IDA, a diff is just a specialized merge. Both diffing and merging are handled by IDA\u2019s \"merge mode\", which involves up to 3 databases, one of which can be modified to contain the result of the merge.</p> <p>A diff is simply a merge operation that involves only 2 databases, neither of which are modified.</p> <p>This is why often times you will see the term \"merge\" used in the context of a diff. In this case \"merge\" is referring to IDA\u2019s \"merge mode\", rather than the process of merging multiple databases together into a combined database.</p>"},{"location":"user-guide/teams/merge.html#using-ida-as-a-diffing-tool","title":"Using IDA as a diffing tool","text":"<p>We must stress the fact that performing a merge between two IDA databases is quite different than performing a merge between, say, two text files. A change in a chunk of text file will not have an impact over another chunk.</p> <p>IDA databases are not so simple. A change in one place in an idb will often have an impact on another place. For example, if a structure <code>mystruct</code> changed between two databases, it will have an impact not only on the name of the structure, but on cross-references to structure members, function prototypes, etc.</p> <p>This is why IDA\u2019s merge mode is split into a strict series of \"steps\":</p> <p>Within a single step it is possible to go forward &amp; backward between different chunks. But because of possible inter-dependencies between steps, it is not possible to move backwards between steps, you can only go forward:</p> <p>Since IDA\u2019s diff mode is just a variation of its merge mode, diffing databases is also subject to this sequential application of steps in order to view certain bits of information. That is why, in some steps (e.g., the \"Disassembly/Items\") IDA might not report some changes that were performed at another level.</p> <p>For instance, if a user marked a function as <code>noret</code>, the listings that will be shown in \"Disassembly/Items\" step, will not advertise that there was a change at that place (even though the <code>\"Attributes: noreturn\"</code> is visible in the left-hand listing), only the changes to the instructions (and data, \u2026\u200b) are visible in the current step:</p> <p>The change will, however, be visible at a later step (i.e., \"Functions/Registry\"):</p> <p>The changes applied during the \"diff\" process are only temporary. Exiting IDA (at any moment) will not alter the files being compared.</p>"},{"location":"user-guide/teams/merge.html#merging-concurrent-modifications-conflicts","title":"Merging concurrent modifications (conflicts)","text":"<p>As with any collaborative tool, it may happen that two coworkers work on the same dataset (e.g., IDA database), and make modifications to the same areas, resulting in \"conflicts\". Conflicts must be \"resolved\" prior to committing.</p> <p>To do that, right-click and pick one of the \"resolve\" options:</p> <p>IDA Teams provides the following merge strategies.</p>"},{"location":"user-guide/teams/merge.html#interactive-merging","title":"Interactive merging","text":"<p>If the option that was chosen (e.g., Interactive merge mode) requires user interaction due to conflicts, IDA will show in 3-pane \"merge\" mode.</p> <p>When a conflict is encountered, you\u2019ll have the ability to pick, for all conflicts, which change should be kept (yours, or the other). Every time you pick a change (and thus resolve a conflict), IDA will proceed with the merging, applying all the non-conflicting changes it can, until the next conflict - if any. When all conflicts are resolved, you can leave IDA, and the new resulting file is ready to be submitted.</p>"},{"location":"user-guide/teams/merge.html#appendix-a","title":"Appendix A","text":""},{"location":"user-guide/teams/merge.html#merge-steps","title":"Merge Steps","text":"<p>This section provides a detailed overview of the steps involved in the merge process. The list of predefined merge steps is defined in <code>merge.hpp</code> of the IDASDK:</p> <pre><code>enum merge_kind_t\n{\n  MERGE_KIND_NETNODE,           ///&lt; netnode (no merging, to be used in idbunits)\n  MERGE_KIND_AUTOQ,             ///&lt; auto queues\n  MERGE_KIND_INF,               ///&lt; merge the inf variable (global settings)\n  MERGE_KIND_ENCODINGS,         ///&lt; merge encodings\n  MERGE_KIND_ENCODINGS2,        ///&lt; merge default encodings\n  MERGE_KIND_SCRIPTS2,          ///&lt; merge scripts common info\n  MERGE_KIND_SCRIPTS,           ///&lt; merge scripts\n  MERGE_KIND_CUSTDATA,          ///&lt; merge custom data type and formats\n  MERGE_KIND_STRUCTS,           ///&lt; merge structs (globally: add/delete structs entirely)\n  MERGE_KIND_STRMEM,            ///&lt; merge struct members\n  MERGE_KIND_ENUMS,             ///&lt; merge enums\n  MERGE_KIND_TILS,              ///&lt; merge type libraries\n  MERGE_KIND_TINFO,             ///&lt; merge tinfo\n  MERGE_KIND_UDTMEM,            ///&lt; merge UDT members (local types)\n  MERGE_KIND_SELECTORS,         ///&lt; merge selectors\n  MERGE_KIND_STT,               ///&lt; merge flag storage types\n  MERGE_KIND_SEGMENTS,          ///&lt; merge segments\n  MERGE_KIND_SEGGRPS,           ///&lt; merge segment groups\n  MERGE_KIND_SEGREGS,           ///&lt; merge segment registers\n  MERGE_KIND_ORPHANS,           ///&lt; merge orphan bytes\n  MERGE_KIND_BYTEVAL,           ///&lt; merge byte values\n  MERGE_KIND_FIXUPS,            ///&lt; merge fixups\n  MERGE_KIND_MAPPING,           ///&lt; merge manual memory mapping\n  MERGE_KIND_EXPORTS,           ///&lt; merge exports\n  MERGE_KIND_IMPORTS,           ///&lt; merge imports\n  MERGE_KIND_PATCHES,           ///&lt; merge patched bytes\n  MERGE_KIND_FLAGS,             ///&lt; merge flags_t\n  MERGE_KIND_EXTRACMT,          ///&lt; merge extra next or prev lines\n  MERGE_KIND_AFLAGS_EA,         ///&lt; merge aflags for mapped EA\n  MERGE_KIND_IGNOREMICRO,       ///&lt; IM (\"$ ignore micro\") flags\n  MERGE_KIND_HIDDENRANGES,      ///&lt; merge hidden ranges\n  MERGE_KIND_SOURCEFILES,       ///&lt; merge source files ranges\n  MERGE_KIND_FUNC,              ///&lt; merge func info\n  MERGE_KIND_FRAMEMGR,          ///&lt; merge frames (globally: add/delete frames entirely)\n  MERGE_KIND_FRAME,             ///&lt; merge function frame info (frame members)\n  MERGE_KIND_STKPNTS,           ///&lt; merge SP change points\n  MERGE_KIND_FLOWS,             ///&lt; merge flows\n  MERGE_KIND_CREFS,             ///&lt; merge crefs\n  MERGE_KIND_DREFS,             ///&lt; merge drefs\n  MERGE_KIND_BPTS,              ///&lt; merge breakpoints\n  MERGE_KIND_WATCHPOINTS,       ///&lt; merge watchpoints\n  MERGE_KIND_BOOKMARKS,         ///&lt; merge bookmarks\n  MERGE_KIND_TRYBLKS,           ///&lt; merge try blocks\n  MERGE_KIND_DIRTREE,           ///&lt; merge std dirtrees\n  MERGE_KIND_VFTABLES,          ///&lt; merge vftables\n  MERGE_KIND_SIGNATURES,        ///&lt; signatures\n  MERGE_KIND_PROBLEMS,          ///&lt; problems\n  MERGE_KIND_UI,                ///&lt; UI\n  MERGE_KIND_NOTEPAD,           ///&lt; notepad\n  MERGE_KIND_LOADER,            ///&lt; loader data\n  MERGE_KIND_DEBUGGER,          ///&lt; debugger data\n  MERGE_KIND_LAST,              ///&lt; last predefined merge handler type.\n                                ///&lt; please note that there can be more merge handler types,\n                                ///&lt; registered by plugins and processor modules.\n};\n</code></pre> <p>The list of merge steps is not final. If for example there is a conflict in structure members then the new merge phase to resolve this conflict will be created. The same is hold for UDT, functions, frames and so on. In other words in general case the exact number of merge steps is undefined and depends on the databases.</p> <p>Each item in a merge step is assigned to a difference position named <code>diffpos</code>. It may be an EA (effective address), enum id, structure member offset, artificial index and so on. In other words, a <code>diffpos</code> is a way of addressing something in the database.</p> <p>Every merge step starts with the calculation of differences and conflicts between items at the corresponding difference positions. As the result there is a list of <code>diffpos</code> with differences or conflicts. The <code>diffpos`s without differences are not included in the list. Adjacent `diffpos`s are combined into a difference range called `diffrange</code>.</p> <p>The merging process operates on a difference range <code>diffrange</code>. For one <code>diffrange</code>, a single merge policy can be selected.</p>"},{"location":"user-guide/teams/merge.html#global-settingsdatabase-attributes","title":"Global settings/Database attributes","text":"<p>Merging of global database attributes. These attributes are mainly stored in the <code>idainfo</code> structure. This phase has two subphases:</p> <ul> <li>Global settings/Database attributes/Graph mode</li> <li>Global settings/Database attributes/Text mode</li> </ul> <p>The \"Detail\" pane is absent.</p>"},{"location":"user-guide/teams/merge.html#global-settingsprocessor-specific","title":"Global settings/Processor specific","text":"<p>Merging of global processor options. Usually these options are stored in the <code>idpflags</code> netnode.</p> <p>The \"Detail\" pane is absent.</p>"},{"location":"user-guide/teams/merge.html#encodingsregistry","title":"Encodings/Registry","text":"<p>Merging of registered string literal encodings. These encodings are used to properly display string literal in the disassembly listing.</p> <p>The \"Detail\" pane is absent.</p>"},{"location":"user-guide/teams/merge.html#encodingssettings","title":"Encodings/Settings","text":"<p>Merging of default string encodings: what string encoding among the registered ones are considered as the default ones.</p> <p>The \"Detail\" pane is absent.</p>"},{"location":"user-guide/teams/merge.html#scriptsregistry","title":"Scripts/Registry","text":"<p>Merging of embedded script snippets.</p> <p>When merging of embedded script snippets, the script name/language is displayed, and the \"Detail\" pane contains the script source with the highlighted differences:</p>"},{"location":"user-guide/teams/merge.html#scriptssettings","title":"Scripts/Settings","text":"<p>Merging of the default snippet and tabulation size.</p> <p>The \"Detail\" pane is absent.</p>"},{"location":"user-guide/teams/merge.html#custom-datatypes-and-custom-dataformats","title":"Custom data/Types and Custom data/Formats","text":"<p>Merging of the registered custom data types and formats.</p> <p>The \"Detail\" pane is absent.</p>"},{"location":"user-guide/teams/merge.html#typesenums","title":"Types/Enums","text":"<p>Merging of assembler level enums (<code>enum_t</code>). Ghost enums are skipped in this phase, they will be merged when handling local types.</p> <p>To calculate <code>diffpos</code>, IDA Teams matches enum members by name and maps all enums with common member names into one <code>diffpos</code>.</p> <p>An example of enum merging:</p> <pre><code>local_idb\n  ;--------------------------\n  ; enum enum_1, mappedto_1\n  A                = 0\n  B                = 1\n\nremote_idb\n  ;--------------------------\n  ; enum enum_1, mappedto_1\n  A                = 0\n  ;--------------------------\n  ; enum enum_2, mappedto_2\n  B                = 1\n</code></pre> <p>In both idbs, enum constant \"B\" is present. However, in the remote idb \"B\" has a different parent enum, \"enum_2\". Therefore enum_1 in the local idb corresponds to enum_1 and enum_2 in the remote idb. The user can select either enum_1 from the local idb or enum_1 and enum_2 from the remote idb.</p> <p>In other words, IDA will display both enum_1 and enum_2 in the Remote pane, indicating that the difference between the Local and Remote databases corresponds to two separate enums, but they are treated as a single difference location. The \"Detail\" pane will display the full enum definitions, with the differences highlighted:</p>"},{"location":"user-guide/teams/merge.html#typesstructs","title":"Types/Structs","text":"<p>Merging of assembler level structures (<code>struc_t</code>).</p> <p>To calculate <code>diffpos</code>, IDA Teams matches structs by the following attributes, in this order:</p> <ol> <li>the structure name</li> <li>the structure <code>tid</code> and size</li> </ol> <p>If we fail to match a structure, then it will stay unmatched. Such an unmatched structure will have it own <code>diffpos</code>, allowing the user to copy it to the other idb or to delete it altogether.</p> <p>This merge phase deals with the entire structure types and their attributes. Entire structure types may be added or deleted, and/or conflicts in the structure attributes are resolved.</p> <p>If members of matched structures (at the same <code>diffpos</code>) differ, the conflict will be resolved later, during the Types/Struct members/\u2026\u200b merge phase.</p> <p>In the UI, IDA will display the list of structure names, with the \"Detail\" pane showing the structure attributes:</p>"},{"location":"user-guide/teams/merge.html#typestype-libraries","title":"Types/Type libraries","text":"<p>Merging of the loaded type libraries.</p> <p>This merge phase uses the standard \"Type libraries\" widget.</p> <p>The \"Detail\" pane is absent.</p>"},{"location":"user-guide/teams/merge.html#typeslocal-types","title":"Types/Local types","text":"<p>Merging of local types.</p> <p>To calculate <code>diffpos</code>, IDA Teams matches local types by the following attributes, in this order:</p> <ol> <li>the type name</li> <li>the ordinal number and base type</li> </ol> <p>If we fail to match a type, then it will stay unmatched. Such an unmatched type will have it own <code>diffpos</code>, allowing the user to copy it to the other idb or to delete it altogether.</p> <p>This merge phase deals with entire types and their attributes. Entire local types may be added or deleted, and/or conflicts in their attributes are resolved. Differences in type members (e.g., struct members) will be resolved in a separate phase: Types/Local type members</p> <p>This merge phase uses the standard \"Local types\" widget. The \"Detail\" pane displays the type definition and its attributes.</p>"},{"location":"user-guide/teams/merge.html#typesstruct-members-and-typeslocal-type-members","title":"Types/Struct members/\u2026\u200b and Types/Local type members/\u2026\u200b","text":"<p>For example:</p> <ul> <li>Types/Struct members/struct_t</li> <li>Types/Local type members/struct conflict_t</li> </ul> <p>These merge phases merges the conflicting members of a structure or a local type.</p> <p>The \"Detail\" pane displays full information about the current member along with its attributes.</p>"},{"location":"user-guide/teams/merge.html#typesghost-struct-comments","title":"Types/Ghost struct comments","text":"<p>Ghost structs may have comments attached to them.</p> <p>This merge phase handles these comments:</p> <p>We need a separate phase for these comments in order not to lose them during merging because by default ghost types are considered secondary to the corresponding non-ghost type. Normally during merge ghost types may be overwritten. However, local types cannot have comments at all. This is why ghost structure comments, if created, are valuable.</p>"},{"location":"user-guide/teams/merge.html#typesstruct-members-comments","title":"Types/Struct members comments/\u2026\u200b","text":"<p>Similarly to comments attached to entire structures, each structure member may have a comment.</p> <p>The same logic applies to ghost struct member comments:</p>"},{"location":"user-guide/teams/merge.html#addressingselectors","title":"Addressing/Selectors","text":"<p>Merging of selectors.</p> <p>This merge phase uses the standard widget \"Selectors\".</p> <p>The \"Detail\" pane is absent.</p>"},{"location":"user-guide/teams/merge.html#addressingstorage-types","title":"Addressing/Storage types","text":"<p>IDA Pro allocates so-called <code>flags</code> for each program address. These flags describe how to display the corresponding bytes in the disassembly listing: as instruction or data.</p> <p>There are two different storage methods for <code>flags</code>: virtual array (VA) and sparse storage (MM). The virtual array method is the default one, it allocates 32 bits for each program address. However, for huge segments this method is not efficient and may lead to unnecessarily huge databases. Therefore for huge segments IDA Pro uses sparse storage.</p> <p>This merge phase handles the defined program ranges and their storage types.</p> <p>The \"Detail\" pane is absent.</p>"},{"location":"user-guide/teams/merge.html#addressingsegmentation","title":"Addressing/Segmentation","text":"<p>This merge phase handles the program segmentation.</p> <p>When merging segments, IDA combines them into non-overlapping groups. Each group will have its own <code>diffpos</code>. For example, the following segmentations:</p> <pre><code>local_idb\n  seg000:00000000\n  ...\n  seg000:00000020\n  ...\n\nremote_idb\n  seg000:00000000\n  ...\n  seg001:00000010\n  ...\n  seg001:00000020\n</code></pre> <p>will result in a single <code>diffpos</code>:</p> <p>The \"Detail\" pane displays segments in the combined group with their attributes.</p> <p>When merging segment, IDA tries to move the segment boundaries in a way that preserves the segment contents. If it fails to do so, the conflicting segments are deleted and new ones are created.</p>"},{"location":"user-guide/teams/merge.html#addressingsegment-groups","title":"Addressing/Segment groups","text":"<p>Merging of segment groups. Segment groups are used only in OMF files. They correspond to the <code>group</code> keyword in assembler.</p> <p>The \"Detail\" pane is absent.</p>"},{"location":"user-guide/teams/merge.html#addressingsegment-register","title":"Addressing/Segment register/\u2026\u200b","text":"<p>Some processor have so-called segment registers. IDA Pro knows about them and can remember their value (one value per address range).</p> <p>For example, the x86 processor has <code>ds</code>, <code>ss</code>, and many other registers. IDA Pro can remember that, say, <code>ds</code> has the value of 1000 at the range 401000..402000.</p> <p>This merge phase handles segment registers. For each register, a separate merge phase is created. It contains address ranges: inside each address range the value of the segment register stays the same.</p> <p>To prepare <code>diffpos</code>, IDA Teams combines segment register ranges into non-overlapping ranges. <code>diffpos</code> is a range number.</p> <p>The \"Detail\" pane displays segment register ranges in <code>diffpos</code> with the value and the suffix that denotes the range type (u-user defined, a-automatically inherited from the previous range)</p>"},{"location":"user-guide/teams/merge.html#addressingorphan-bytes","title":"Addressing/Orphan bytes","text":"<p>The database may have bytes that do not belong to any segment.</p> <p>To prepare <code>diffpos</code>, IDA Teams groups orphan bytes in the databases into nonintersecting ranges. <code>diffpos</code> is a range number.</p> <p>The \"Detail\" pane is absent.</p>"},{"location":"user-guide/teams/merge.html#addressingpatched","title":"Addressing/Patched","text":"<p>Merging of the patched bytes.</p> <p>The \"Detail\" pane is absent.</p>"},{"location":"user-guide/teams/merge.html#addressingbyte-values","title":"Addressing/Byte values","text":"<p>Byte values in segments may differ even for non-patched addresses, for example if a snapshot of the process memory was taken during a debugger session.</p> <p>IDA Teams combines the sequential bytes in one <code>diffpos</code>.</p> <p>This merge phase uses the standard \"IDA-View\" widget.</p> <p>The \"Detail\" pane displays the conflicting byte values.</p>"},{"location":"user-guide/teams/merge.html#addressingfixups","title":"Addressing/Fixups","text":"<p>Merging of fixup records.</p> <p>The \"Detail\" pane is absent.</p>"},{"location":"user-guide/teams/merge.html#addressingmanual-memory-mapping","title":"Addressing/Manual memory mapping","text":"<p>Merging of memory mappings.</p> <p>The \"Detail\" pane is absent.</p>"},{"location":"user-guide/teams/merge.html#symbolsexports","title":"Symbols/Exports","text":"<p>Merging of exported symbols.</p> <p>Merge phase uses the standard \"Exports\" widget.</p> <p>The \"Detail\" pane is absent.</p>"},{"location":"user-guide/teams/merge.html#symbolsimports","title":"Symbols/Imports","text":"<p>Merging of imported symbols.</p> <p>Merge phase uses the standard \"Imports\" widget.</p> <p>The \"Detail\" pane is absent.</p>"},{"location":"user-guide/teams/merge.html#disassemblyitems","title":"Disassembly/Items","text":"<p>When merging, IDA Teams compares disassembly items (instructions and data). IDA Teams compares disassembly items by length, flags, opinfo, name, comment, and netnode information (NALT_* and NSUP_* flags).</p> <p>This merge step uses the standard \"IDA-View\" widget so that items can be viewed in their context. For example:</p>"},{"location":"user-guide/teams/merge.html#commentsanterior-lines-and-commentsposterior-lines","title":"Comments/Anterior lines and Comments/Posterior lines","text":"<p>Merging of extra comments.</p> <p>This merge phase uses the standard \"IDA-View\" widget.</p> <p>The \"Detail\" pane displays comment content.</p>"},{"location":"user-guide/teams/merge.html#disassemblyea-additional-flags","title":"Disassembly/EA additional flags","text":"<p>Merging of additional flags <code>aflags_t</code>.</p> <p>Each disassembly item may have additional flags that further describe it.</p> <p>This merge phase uses the standard \"IDA-View\" widget.</p> <p>The \"Detail\" pane displays additional flags.</p>"},{"location":"user-guide/teams/merge.html#disasemblyhidden-ranges","title":"Disasembly/Hidden ranges","text":"<p>To prepare <code>diffpos</code>, IDA Teams groups hidden ranges into nonintersecting ranges. <code>diffpos</code> is a range number.</p> <p>The \"Detail\" pane displays the hidden range description.</p>"},{"location":"user-guide/teams/merge.html#disassemblysource-file-ranges","title":"Disassembly/Source file ranges","text":"<p>To prepare <code>diffpos</code>, IDA Teams groups source file ranges into nonintersecting ranges. <code>diffpos</code> is a range number.</p> <p>The \"Detail\" pane displays source file definition.</p>"},{"location":"user-guide/teams/merge.html#functionsregistry","title":"Functions/Registry","text":"<p>Function definitions (<code>func_t</code>) are merged using the standard \"Functions\" widget, while the \"Detail\" pane displays function attributes:</p>"},{"location":"user-guide/teams/merge.html#functionsim-flags","title":"Functions/IM flags","text":"<p>Merging of instruction kinds.</p> <p>To simplify decompilation, IDA has the notion of the instruction kind:</p> <ul> <li>PROLOG instruction</li> <li>EPILOG instruction</li> <li>SWITCH instruction</li> </ul> <p>This merge phase uses the standard \"IDA-View\" widget.</p> <p>The \"Detail\" pane displays instruction kind.</p>"},{"location":"user-guide/teams/merge.html#functionsframes-global","title":"Functions/Frames (global)","text":"<p>This merge phase deals with the entire function frames. Function frame may be added or deleted.</p> <p>If members of the matched function frame differ, the conflict will be resolved later during the Functions/Frame/\u2026\u200b merge phase. Each differing frame will be assigned its own merge step.</p> <p>The \"Detail\" pane is absent.</p>"},{"location":"user-guide/teams/merge.html#functionsframe","title":"Functions/Frame","text":"<p>Merging of function frame details.</p> <p>A separate phase is created for each function. For example:</p> <ul> <li>Functions/Frames/sub_401200 at 401200</li> <li>Functions/Frames/_main at 4014E0</li> </ul> <p>Every of these phases merges the conflicting members of the function frame.</p> <p>The \"Detail\" pane displays the detailed information about the current function frame member.</p>"},{"location":"user-guide/teams/merge.html#functionssp-change-points","title":"Functions/SP change points","text":"<p>Merging of function SP change points.</p> <p>This merge phase uses the standard \"IDA-View\" widget.</p> <p>The \"Detail\" pane displays the SP change point details.</p>"},{"location":"user-guide/teams/merge.html#cross-referencesflow","title":"Cross-references/Flow","text":"<p>Merging of regular execution flow from the previous instruction. IDA stores cross-references that correspond to regular execution flow in a special format, different from other cross-reference types.</p> <p>This merge phase uses the standard \"IDA-View\" widget.</p> <p>The \"Detail\" pane is absent.</p>"},{"location":"user-guide/teams/merge.html#cross-referencescode","title":"Cross-references/Code","text":"<p>Merging of code cross-references.</p> <p>This merge phase uses the standard \"IDA-View\" widget.</p> <p>The \"Detail\" pane displays code references to address (<code>diffpos</code>).</p>"},{"location":"user-guide/teams/merge.html#cross-referencesdata","title":"Cross-references/Data","text":"<p>Merging of data cross-references.</p> <p>This merge phase uses the standard \"IDA-View\" widget.</p> <p>The \"Detail\" pane displays data references to address (<code>diffpos</code>).</p>"},{"location":"user-guide/teams/merge.html#marked-positions","title":"Marked positions/\u2026\u200b","text":"<p>The following merge phases exist:</p> <ul> <li>Marked positions/structplace_t</li> <li>Marked positions/enumplace_t</li> <li>Marked position/idaplace_t</li> </ul> <p>They deal with merging of bookmarks for:</p> <ul> <li>structures</li> <li>enums</li> <li>addresses</li> </ul> <p>The \"Detail\" pane is absent.</p>"},{"location":"user-guide/teams/merge.html#debugbreakpoints","title":"Debug/Breakpoints/\u2026\u200b","text":"<p>The following merge phases exist:</p> <ul> <li>Breakpoints/Absolute bpts</li> <li>Breakpoints/Relative bpts</li> <li>Breakpoints/Symbolic bpts</li> <li>Breakpoints/Source level bpts</li> </ul> <p>They deal with merging of various debugger breakpoints.</p> <p>The \"Detail\" pane is absent.</p>"},{"location":"user-guide/teams/merge.html#debugwatchpoints","title":"Debug/Watchpoints","text":"<p>Merging of watch points.</p> <p>The \"Detail\" pane is absent.</p>"},{"location":"user-guide/teams/merge.html#dirtree-dirtree","title":"Dirtree/$ dirtree/\u2026\u200b","text":"<p>The following merge phases exist:</p> <ul> <li>Dirtree/$ dirtree/tinfos</li> <li>Dirtree/$ dirtree/structs</li> <li>Dirtree/$ dirtree/enums</li> <li>Dirtree/$ dirtree/funcs</li> <li>Dirtree/$ dirtree/names</li> <li>Dirtree/$ dirtree/imports</li> <li>Dirtree/$ dirtree/bookmarks_idaplace_t</li> <li>Dirtree/$ dirtree/bookmarks_structplace_t</li> <li>Dirtree/$ dirtree/bookmarks_enumplace_t</li> <li>Dirtree/$ dirtree/bpts</li> </ul> <p>They deal with merging of the standard dirtrees.</p> <p>The \"Detail\" pane is absent.</p>"},{"location":"user-guide/teams/merge.html#misctry-blocks","title":"Misc/Try blocks","text":"<p>Merging of try and catch block info.</p> <p>The \"Detail\" pane describes try block.</p>"},{"location":"user-guide/teams/merge.html#miscvirtual-function-tables","title":"Misc/Virtual function tables","text":"<p>Merging of virtual function tables.</p> <p>The \"Detail\" pane is absent.</p>"},{"location":"user-guide/teams/merge.html#miscnotepad","title":"Misc/Notepad","text":"<p>Merging of database notepads. Each line of text is a <code>diffpos</code>.</p> <p>The \"Detail\" pane is absent.</p>"},{"location":"user-guide/teams/merge.html#processor-specific","title":"Processor specific/\u2026\u200b","text":"<p>Each processor plugin creates its own merge steps to handle the processor plugin\u2019s specific data.</p> <p>For example, the PC processor module adds the following merge steps:</p> <ul> <li>Processor specific/Analyze ea for a possible offset</li> <li>Processor specific/Frame pointer info</li> <li>Processor specific/Pushinfo</li> <li>Processor specific/VXD info 2</li> <li>Processor specific/Callee EA|AH value</li> <li>\u2026\u200b</li> </ul>"},{"location":"user-guide/teams/merge.html#pluginsdecompiler","title":"Plugins/Decompiler/\u2026\u200b","text":"<p>Merging of the decompiler data starts with the global configuration parameters from hexrays.cfg:</p> <p>To handle decompilation of specific functions, IDA stores the decompilation data in a database netnode named Hexrays node.</p> <p>The merge step Plugins/Decompiler/Hexrays nodes adds or deletes netnodes, indicating which functions have or haven\u2019t been decompiled in each databases:</p> <p>The decompilation data for matching functions is compared using the following attributes:</p> <ul> <li>Plugins/Decompiler/\u2026\u200b/Numforms</li> <li>Plugins/Decompiler/\u2026\u200b/mflags</li> <li>Plugins/Decompiler/\u2026\u200b/User-defined funcargs</li> <li>Plugins/Decompiler/\u2026\u200b/User-defined variable mapping</li> <li>Plugins/Decompiler/\u2026\u200b/User-defined lvar info</li> <li>Plugins/Decompiler/\u2026\u200b/lvar settings</li> <li>Plugins/Decompiler/\u2026\u200b/IFLAGS</li> <li>Plugins/Decompiler/\u2026\u200b/User labels</li> <li>Plugins/Decompiler/\u2026\u200b/User unions</li> <li>Plugins/Decompiler/\u2026\u200b/User comments</li> <li>Plugins/Decompiler/\u2026\u200b/User-defined call</li> </ul> <p>If there is a difference, each comparison criteria will be assigned its own merge step. Each step will use the standard \"Pseudocode\" widget so that differences can be viewed in-context with the full pseudocode:</p>"},{"location":"user-guide/teams/merge.html#loader-data-merge-phases","title":"Loader data merge phases","text":"<p>The file loader that was used to create the database may have stored some data in the database that is specific to the loader itself.</p> <p>There are merge phases for each loader, for example:</p> <ul> <li>Loader/PE file/\u2026\u200b</li> <li>Loader/NE file/\u2026\u200b</li> <li>Loader/ELF file/\u2026\u200b</li> <li>Loader/TLS/\u2026\u200b</li> <li>Loader/ARM segment flags/\u2026\u200b</li> </ul>"},{"location":"user-guide/teams/merge.html#debugger-data-merge-phases","title":"Debugger data merge phases","text":"<p>To handle the differences in debugger data the following merge steps may be created:</p> <ul> <li>Debugger/pin</li> <li>Debugger/gdb</li> <li>Debugger/xnu</li> <li>Debugger/ios</li> <li>Debugger/bochs</li> <li>Debugger/windbg</li> <li>Debugger/rmac_arm</li> <li>Debugger/lmac_arm</li> <li>Debugger/rmac</li> <li>Debugger/lmac</li> </ul> <p>As can be deduced by their names, they handle debugger-specific data in the database.</p>"},{"location":"user-guide/teams/merge.html#other-plugins-merge-phases","title":"Other plugins merge phases","text":"<p>There are a number of IDA plugins that need to merge their data.</p> <p>For example:</p> <ul> <li>Plugins/PDB</li> <li>Plugins/golang</li> <li>Plugins/EH_PARSE</li> <li>Plugins/Callgraph</li> <li>Plugins/swift</li> </ul> <p>Any third party plugin may add merge phases using the IDA SDK. We provide sample plugins that illustrate how to add support for merging into third party plugins.</p>"},{"location":"user-guide/teams/merge.html#appendix-b","title":"Appendix B","text":""},{"location":"user-guide/teams/merge.html#using-idasdk-to-add-merge-functionality-to-plugin","title":"Using IDASDK to add merge functionality to plugin","text":""},{"location":"user-guide/teams/merge.html#overview_1","title":"Overview","text":"<p>Any plugin that stores its data in the database must implement the logic for merging its data. For that, the plugin must provide the description of its data and ask the kernel to create merge handlers based on these descriptions.</p> <p>The kernel will use the created handlers to perform merging and to display merged data to the users. The plugin can implement callback functions to modify some aspects of merging, if necessary.</p> <p>The plugin may have two kinds of data with permanent storage:</p> <ol> <li>Data that applies to entire database (e.g. the options). To describe this data, the <code>idbattr_info_t</code> type is used.</li> <li>Data that is tied to a particular address. To describe this data, the <code>merge_node_info_t</code> type is used.</li> </ol> <p>The kernel will notify the plugin using the <code>processor_t::ev_create_merge_handlers</code> event. On receiving it, the plugin should create the merge handlers, usually by calling the <code>create_merge_handlers()</code> function.</p>"},{"location":"user-guide/teams/merge.html#plugin","title":"Plugin","text":"<p>The IDA SDK provides several sample plugins to demonstrate how to add merge functionality to third party plugins:</p> <ul> <li>mex1/</li> <li>mex2/</li> <li>mex3/</li> <li>mex4/</li> </ul> <p>The sample plugin without the merge functionality consists of two files:</p> <ul> <li>mex.hpp</li> <li>mex_impl.cpp</li> </ul> <p>It is a regular implementation of a plugin that stores some data in the database. Please check the source files for more info.</p> <p>We demonstrate several approaches to add the merge functionality. They are implemented in different directories mex1/, mex2/, and so on.</p> <p>The <code>MEX_N</code> macros that are defined in makefile are used to parameterize the plugin implementation, so that all plugin examples may be used simultaneously.</p> <p>You may check the merge results for the plugins in one session of IDA Teams. Naturally, you should prepare databases by running plugins before launching of IDA Teams session.</p>"},{"location":"user-guide/teams/merge.html#merge-functionality","title":"Merge functionality","text":"<p>The merge functionality is implemented in the merge.cpp file. It contains <code>create_merge_handlers()</code>, which is responsible for the creation of the merge handlers.</p> <p>Variants:</p> <p>mex1/\\ Merge values are stored in netnodes. The kernel will read the values directly from netnodes, merge them, and write back. No further actions are required from the plugin. If the data is stored in a simple way using altvals or supvals, this simple approach is recommended.</p> <p>mex2/\\ Merge values are stored in variables (in the memory). For more complex data that is not stored in a simple way in netnodes, (for example, data that uses database blobs), the previous approach cannot be used. This example shows how to merge the data that is stored in variables, like fields of the plugin context structure. The plugin provides the field descriptions to the kernel, which will use them to merge the data in the memory. After merging, the plugin must save the merged data to the database.</p> <p>mex3/\\ Uses mex1 example and illustrates how to improve the UI look.</p> <p>mex4/\\ Merge data that is stored in a netnode blob. Usually blob data is displayed as a sequence of hexadecimal digits in a merge chooser column. We show how to display blob contents in detail pane.</p>"},{"location":"user-guide/teams/merge.html#resolving-conflicts-in-a-file","title":"Resolving conflicts in a file","text":"<p>When a user needs to commit changes made to a file, but that same file has received other modifications (likely from other users) in the meantime, it is necessary to first \"merge\" the two sets of modifications together.</p> <p>When the two sets of modifications do not overlap, merging is trivial - at least conceptually. But when they do overlap, they produce conflict(s).</p> <p>Since IDA Teams focuses on collaboration over IDA database files, the rest of this section will focus on the different strategies that are available for resolving conflicts among those.</p> <p>IDA Teams comes with multiple strategies to help in conflict resolution of IDA database files:</p> <ul> <li>Auto-resolve (if no conflicts)</li> <li>Auto-resolve, prefer local</li> <li>Auto-resolve, prefer remote</li> <li>Interactive merge mode</li> <li>Use local, discard remote</li> <li>Use remote, discard local</li> </ul>"},{"location":"user-guide/teams/merge.html#auto-resolve-if-no-conflicts","title":"Auto-resolve (if no conflicts)","text":"<p>Launch IDA in a non-interactive batch mode, attempting to perform all merging automatically.</p> <p>If any conflict is discovered, bail out of the merge process, and don\u2019t modify the local database.</p>"},{"location":"user-guide/teams/merge.html#auto-resolve-prefer-local","title":"Auto-resolve, prefer local","text":"<p>Launch IDA in a non-interactive batch mode, attempting to perform all merging automatically.</p> <p>If a conflict is discovered, assume that the \"local\" change (i.e., the current user\u2019s change) is the correct one, and apply that.</p> <p>Once all merging is done and conflicts are resolved, write those to the local database and exit IDA</p>"},{"location":"user-guide/teams/merge.html#auto-resolve-prefer-remote","title":"Auto-resolve, prefer remote","text":"<p>Launch IDA in a non-interactive batch mode, attempting to perform all merging automatically.</p> <p>If a conflict is discovered, assume that the \"remote\" change (i.e., the change made by another user) is the correct one, and apply that.</p> <p>Once all merging is done and conflicts are resolved, write those to the local database and exit IDA</p>"},{"location":"user-guide/teams/merge.html#interactive-merge-mode","title":"Interactive merge mode","text":"<p>Manual merge mode.</p> <p>This will launch IDA in an interactive, 3-pane mode, allowing the user to decide how to resolve each conflict.</p> <p>Once all merging is done and conflicts are resolved, exit IDA and write the changes to the local database.</p>"},{"location":"user-guide/teams/merge.html#use-local-discard-remote","title":"Use local, discard remote","text":"<p>Select the local database, ignoring all changes in the remote database.</p> <p>No IDA process is run.</p>"},{"location":"user-guide/teams/merge.html#use-remote-discard-local","title":"Use remote, discard local","text":"<p>Select the remote database, ignoring all changes in the local database.</p> <p>No IDA process is run.</p>"},{"location":"user-guide/teams/teams-lc-command-reference-manual.html","title":"Teams lc command reference manual","text":""},{"location":"user-guide/teams/hv_user_manual.md.in/admin.html","title":"Administrative commands","text":"<p>These commands require that the user executing them has admin privileges.</p>"},{"location":"user-guide/teams/hv_user_manual.md.in/admin.html#managing-users","title":"Managing users","text":"<p>$sub2(refs/user-add.md) $sub2(refs/user-edit.md) $sub2(refs/user-del.md)</p>"},{"location":"user-guide/teams/hv_user_manual.md.in/admin.html#managing-groups","title":"Managing groups","text":"<p>$sub2(refs/group-add.md) $sub2(refs/group-edit.md) $sub2(refs/group-del.md)</p>"},{"location":"user-guide/teams/hv_user_manual.md.in/admin.html#managing-permissions","title":"Managing permissions","text":"<p>$sub2(refs/perm-get.md) $sub2(refs/perm-set.md) $sub2(refs/perm-check.md)</p>"},{"location":"user-guide/teams/hv_user_manual.md.in/admin.html#others","title":"Others","text":"<p>$sub2(refs/sessions.md) $sub2(refs/purge.md)</p>"},{"location":"user-guide/teams/hv_user_manual.md.in/file.html","title":"File manipulation","text":"<p>$sub1(refs/add.md) $sub1(refs/copy.md) $sub1(refs/move.md) $sub1(refs/del.md) $sub1(refs/edit.md) $sub1(refs/scan.md)</p>"},{"location":"user-guide/teams/hv_user_manual.md.in/hv_credentials.html","title":"hv credentials","text":"<p>In order to connect to the vault server, hv must at least have:</p> <ul> <li>a username</li> <li>a password</li> <li>a hostname</li> </ul> <p>For example:</p> <pre><code>$ hv -hhexvault.acme.com:65433 -uadmin -psecret users\nLastActive Adm    Login        Email\n---------- --- ------------ ------------\n2022-06-27  *  admin\n2022-06-22     alice       Alice &lt;alice@acme.com&gt;\nNever          bob         Bob &lt;bob@acme.com&gt;\n...\n</code></pre> <p>There are 3 ways to specify credentials (in decreasing order of priority):</p> <ul> <li>providing them as command-line arguments (as in the example above)</li> <li>storing them in environment variables</li> <li>storing them in the registry+keychain (recommended)</li> </ul> <p>All credentials, including usernames, are case-senstive, meaning that \"Joe\" and \"joe\" would be different users.</p>"},{"location":"user-guide/teams/hv_user_manual.md.in/hv_credentials.html#command-line","title":"Command line","text":"<p>Passing credentials on the command line will always take precedence over environment variables and registry+keychain.</p> <code>-uUSERNAME</code> specify username <code>-pPASSWORD</code> specify password <code>-hHOST</code> specify host (server:port) (if port is omitted, defaults to 65433) <code>-sSITENAME</code> specify site <code>--set</code> remember credentials. This option doesn\u2019t require the credentials to be passed through the command line, credentials passed through environment variables will work as well"},{"location":"user-guide/teams/hv_user_manual.md.in/hv_credentials.html#environment-variables","title":"Environment variables","text":"<p>Credentials can also be passed through environment variables. They will take precedence over those possibly found in the registry+keychain.</p> <code>VAULT_HOST</code> the server host name <code>VAULT_PORT</code> the server port <code>VAULT_USER</code> the username to connect to the server <code>VAULT_PASS</code> the user\u2019s password <code>VAULT_SITE</code> the site to use (most commands need a site to operate)"},{"location":"user-guide/teams/hv_user_manual.md.in/hv_credentials.html#registry-keychain","title":"Registry + keychain","text":"<p>Unless environment variables or command-line arguments are provided, <code>hv</code> will look for credentials in the registry (and the OS\u2019s keychain for passwords.)</p> <p>Credentials can be stored in the registry (and keychain) like so:</p> <pre><code>alice@alice_PC$ hv --set -ualice -palice -hvaultserver -salice_on_alicepc\n</code></pre> <p>The user, host (and optional site) will be persisted in the registry, while the password will be saved to the OS\u2019s keychain.</p> <p>For this operation to succeed, at least a user and host must be provided</p> <p>In order to keep the various commands' syntax as clear as possible, we will assume that the user has stored credentials (in either the registry+keychain or environment variables) for the rest of this manual.</p>"},{"location":"user-guide/teams/hv_user_manual.md.in/hv_credentials.html#best-practices","title":"Best practices","text":"<p>We recommend persisting credentials using the registry+keychain method.</p> <p>Once that is done, commands will become cleaner:</p> <pre><code>&gt;./hv info\n\nHex-Rays Vault Server v1\nVault time: 2022-04-14 15:36:29, up since 2022-04-14 15:17:25\n...\n</code></pre> <p>if you login to the server using <code>hvui</code> and save the login information, it will end up in the the registry+keychain method, and thus <code>hv</code> will then be able to use that information as well.</p>"},{"location":"user-guide/teams/hv_user_manual.md.in/hv_user_manual.html","title":"hv command reference manual","text":"<p>$sub1(hv_credentials.md)</p>"},{"location":"user-guide/teams/hv_user_manual.md.in/hv_user_manual.html#path-formats","title":"Path formats","text":"<p>Local paths refer to a file on the host file system.</p> <p>Vault paths refer to a file mapped on the vault. They can start with <code>//</code> to refer to the root of the vault.</p> <p>Some vault paths can optionally specify the revision of the path.</p> <p>Special symbols were created to access specific revisions:</p> <code>^</code> last revision available on the vault <code>=</code> current revision, that is synced on the site <code>*</code> all revisions <p>Special file revision symbols</p> <code>subdir/</code> means all files in all subdirectories <code>subdir</code> means all files in all subdirectories (same as subdir/) <code>subdir/*</code> means all files in the directory <p>Directories and wildcards</p>"},{"location":"user-guide/teams/hv_user_manual.md.in/hv_user_manual.html#examples","title":"Examples","text":"<p>Get the first revision of a file:</p> <pre><code>$ hv sync //malware/Ransomware.WannaCry/41aa.exe.i64#1\nok synced //malware/Ransomware.WannaCry/41aa.exe.i64#1 (838724 bytes)\nok sync completed\n</code></pre> <p>Sync to the last version of a file:</p> <pre><code>$ hv sync malware/Ransomware.WannaCry/41aa.exe.i64#^\nok synced //malware/Ransomware.WannaCry/41aa.exe.i64#3 (846916 bytes)\nok sync completed\n</code></pre> <p>Force sync to the current revision (we must specify -f to force a file transfer):</p> <pre><code>$ hv sync -f malware/Ransomware.WannaCry/41aa.exe.i64#=\nok synced //malware/Ransomware.WannaCry/41aa.exe.i64#2 (846916 bytes)\nok sync completed\n</code></pre> <p>Display md5 checksums of all revisions of a file:</p> <pre><code>$ hv md5 malware/Ransomware.WannaCry/41aa.exe.i64#*\nok 8F464140FA3DA4A20B03166F2E80325B //malware/Ransomware.WannaCry/41aa.exe.i64#1\nok E0F7B984151FEF497985F375C64FA5C7 //malware/Ransomware.WannaCry/41aa.exe.i64#2\nok 5C3B88306CF0D93DC35FFD67A710AE3B //malware/Ransomware.WannaCry/41aa.exe.i64#3\n</code></pre> <p>List Hex-Rays Vault server\u2019s toplevel directory contents:</p> <pre><code>$ hv dir //\n2022-06-02 10:29:30       140267 CL29/edit //malware/cppobj_virtcall.i64#9\n2022-06-14 16:44:19      2173541 CL36/edit //iOS/dyld_ios16.i64#3\n</code></pre> <p>Plan to add a file to the vault:</p> <pre><code>$ hv add /path/to/local_rootdir/enable.png\nok added '//enabled.png'\n</code></pre> <p>Plan to add a directory:</p> <pre><code>$ hv add /path/to/local_rootdir/REsearch\nok added '//REsearch/vm2vm.dat'\nok added '//REsearch/vm2vm.exe'\nok added '//REsearch/vm2vm.i64'\n</code></pre> <p>Plan to delete a file:</p> <pre><code>$ hv del /path/to/local_rootdir/REsearch/*.dat\nok checked out '//REsearch/vm2vm.dat' for 'del' (worklist 1)\n</code></pre> <p>Show worklist to which files were added:</p> <pre><code>$ hv worklist show\nWL 1 add  //REsearch/vm2vm.exe#0\nWL 1 add  //REsearch/vm2vm.i64#0\nWL 1 edit //cppobj_virtcall.i64#9\nWL 1 add  //enabled.png#0\n</code></pre> <p>It is safe to interrupt a command using Ctrl-C. The file transfers in action will be gracefully terminated, so that no partially received files will be left on the disk. However, the requests that were delivered to the server will still be carried out up to the completion. For example, if the user asked to check out thousands of files for editing, this will be performed even if the user presses Ctrl-C after invoking the command.</p> <p>If the command syntax specifies ellipsis (\u2026\u200b), it means that multiple path patterns can be specified. The path patterns can be specified using local paths or vault paths, which start with a double slash (<code>//</code>).</p>"},{"location":"user-guide/teams/hv_user_manual.md.in/hv_user_manual.html#commands","title":"Commands","text":"<p>$sub2(site.md)</p> <p>$sub2(file.md)</p> <p>$sub2(worklist.md)</p> <p>$sub2(info.md)</p> <p>$sub2(misc.md)</p> <p>$sub2(admin.md)</p>"},{"location":"user-guide/teams/hv_user_manual.md.in/hv_user_manual.html#concepts","title":"Concepts","text":"<p>$sub2(../../../shared.in/teams/concepts/site.md) $sub2(../../../shared.in/teams/concepts/resolving.md) $sub2(../../../shared.in/teams/concepts/hvignore.md) $sub2(../../../shared.in/teams/concepts/registry.md) $sub2(../../../shared.in/teams/concepts/keychain.md) $sub2(../../../shared.in/teams/concepts/permissions.md)</p>"},{"location":"user-guide/teams/hv_user_manual.md.in/info.html","title":"Various information","text":"<p>$sub1(refs/files.md) $sub1(refs/dir.md) $sub1(refs/show.md) $sub1(refs/diff.md) $sub1(refs/md5.md) $sub1(refs/info.md) $sub1(refs/changes.md)</p> <p>$sub1(refs/users.md)</p> <p>$sub1(refs/groups.md) $sub1(refs/group-show.md)</p> <p>$sub1(refs/user-show.md)</p> <p>$sub1(refs/commit-show.md)</p>"},{"location":"user-guide/teams/hv_user_manual.md.in/misc.html","title":"Misc.","text":"<p>$sub1(refs/passwd.md) $sub1(refs/commit-edit.md) $sub1(refs/licenses.md) $sub1(refs/borrow.md) $sub1(refs/return.md) $sub1(refs/gc.md)</p>"},{"location":"user-guide/teams/hv_user_manual.md.in/readme.html","title":"HV Command Reference","text":""},{"location":"user-guide/teams/hv_user_manual.md.in/readme.html#generation-of-the-reference","title":"generation of the reference","text":"<p>Since the commands share a very similar format, it was decided to use a common small DSL (domain-specific language) to simplify the input of each command's details. A command's documentation is described in a <code>.cd</code> file (located in <code>refs.in/</code>), we then pass it through <code>build.py</code> which will generate a corresponding <code>.md</code> file (in <code>refs/</code>). This <code>.md</code> file is then included into a larger document.</p>"},{"location":"user-guide/teams/hv_user_manual.md.in/readme.html#syntax-of-cd-command-doc-files","title":"Syntax of <code>.cd</code> (command doc) files","text":"<p>The order must be respected:</p> <ol> <li>parameters (if any)</li> <li>description</li> <li>example(s)</li> </ol>"},{"location":"user-guide/teams/hv_user_manual.md.in/readme.html#parameters","title":"parameters","text":"<p>A parameter represents either an option (e.g. \"-a\") or an argument (e.g. \"//cat.i64\") a parameter is split into two parts, the name - which will be used for the synopsis and the text - which will be used for the parameter description</p> <p>each parameter entry must begin with <code>.</code> <code>.SITENAME</code></p> <p>a parameter can be optional <code>.[WORKLIST_ID]</code></p> <p>the name of a parameter can be composed of multiple tokens</p> <p><code>.[-u USERNAME]</code></p> <p>The syntax is the following:</p> <p>regular parameter <code>.&lt;SINGLE_TOKEN&gt; &lt;description&gt;</code> <code>.\"&lt;MULTIPLE TOKENS&gt;\" &lt;description&gt;</code> optional parameter <code>.[SINGLE_TOKEN] &lt;description&gt;</code> <code>.[MULTIPLE TOKEN] &lt;description&gt;</code></p>"},{"location":"user-guide/teams/hv_user_manual.md.in/readme.html#substitutions","title":"Substitutions","text":"<p>Some parameters are heavily shared among commands. Macros were created to enhance their descriptions.</p>"},{"location":"user-guide/teams/hv_user_manual.md.in/readme.html#path-macros","title":"PATH macros","text":"<p>a parameter with <code>$NCAT_VAULT_PATH:&lt;name&gt; &lt;description&gt;</code> will create a <code>&lt;name&gt;</code> synopsis parameter with an xref to the vault path anchor and a parameter entry <code>&lt;name&gt;:: &lt;description&gt;</code></p> <p><code>*VAULT_PATH*</code> macros will create an xref to the \"paths-vaultpath\" anchor <code>*LOCAL_PATH*</code> macros will create an xref to the \"paths-localpath\" anchor <code>VAULT_PATH_WITH_REV</code> will append the <code>[=REVISION]</code> specifier to the name macros ending in <code>...</code> will add an ellipsis to the name to indicate that the parameter can be repeated</p>"},{"location":"user-guide/teams/hv_user_manual.md.in/readme.html#description","title":"Description","text":"<p>The description begins with an answer to: \"What does the command do?\" Following that, it can give more detail on the behaviour of the command.</p> <p>The description begins right after a line beginning with <code>&gt;</code></p>"},{"location":"user-guide/teams/hv_user_manual.md.in/readme.html#examples","title":"Examples","text":"<p>Examples are meant to display how the command can be used.</p> <p>Examples start after a line beginning with '!' A line beginning with <code>$</code> will be made interpreted as a listing and the <code>$</code> will be replaced by a prompt string</p>"},{"location":"user-guide/teams/hv_user_manual.md.in/readme.html#conventions","title":"Conventions","text":"<ul> <li>Parameter descriptions begin with a capital letter and end with a period.</li> </ul>"},{"location":"user-guide/teams/hv_user_manual.md.in/site.html","title":"Sites","text":"<p>Commands in this section manipulate sites.</p> <p>A user must be using a site in order for most commands to work correctly.</p> <p>$sub1(refs/site-add.md) $sub1(refs/site-del.md) $sub1(refs/site-edit.md) $sub1(refs/sites.md)</p>"},{"location":"user-guide/teams/hv_user_manual.md.in/site.html#site-filters","title":"Site filters","text":"<p>$sub2(refs/filt-get.md) $sub2(refs/filt-set.md)</p>"},{"location":"user-guide/teams/hv_user_manual.md.in/worklist.html","title":"Working with worklists","text":"<p>$sub1(refs/worklists.md)</p>"},{"location":"user-guide/teams/hv_user_manual.md.in/worklist.html#manipulating-a-worklist","title":"Manipulating a worklist","text":"<p>The following <code>worklist</code> commands will also work with the shorter <code>wk</code> alias.</p> <p>$sub2(refs/worklist-add.md) $sub2(refs/worklist-show.md) $sub2(refs/worklist-edit.md) $sub2(refs/worklist-del.md)</p>"},{"location":"user-guide/teams/hv_user_manual.md.in/worklist.html#committing-a-worklist-to-the-server","title":"Committing a worklist to the server","text":"<p>$sub2(refs/commit.md)</p>"},{"location":"user-guide/teams/hv_user_manual.md.in/worklist.html#syncing-files-resolving-reverting","title":"Syncing files, resolving &amp; reverting","text":"<p>$sub2(refs/sync.md) $sub2(refs/resolve.md) $sub2(refs/revert.md) $sub2(refs/migrate.md)</p>"},{"location":"user-guide/teams/hvui_user_manual.md.in/actions.html","title":"User interface actions","text":"<p>The following is a list of actions, available in hvui. Note that most actions are \"contextualized\" in the sense that they require certain conditions to be met, in order to work:</p> <ul> <li>the widget being operated on,</li> <li>whether or not a selection is available,</li> <li>the state of the selected file(s),</li> <li>\u2026\u200b</li> </ul> <p>All actions are available from the toplevel menubar's submenus. Those whose operating conditions are not met, will appear disabled.</p> <p>NOTE: Contrary to the toplevel menubar's submenus, context menus (AKA: popup menus, right-click menus, \u2026\u200b) will not feature actions that are disabled. Those menus are created on-the-fly, and it's best not to pollute them with unnecessary noise.</p>"},{"location":"user-guide/teams/hvui_user_manual.md.in/actions.html#get-the-latest-revision","title":"Get the latest revision","text":"<p>Sync the selected file(s) (or the entire server contents), to the latest revision.</p> <p>This effectively updates all local copies of the files, except for those that are currently opened for edition, addition or deletion: those will be left untouched in order to not risk losing user modifications made to them.</p>"},{"location":"user-guide/teams/hvui_user_manual.md.in/actions.html#commit","title":"Commit\u2026\u200b","text":"<p>Prompts the user for a commit description, and submits the files that are part of the current worklist, to the server.</p> <p>Once successfully committed, a worklist will disappear and a new entry will be added to the list of commits.</p> <p>Committed changes (modifications, additions and deletions) are available for all users that can access those files.</p>"},{"location":"user-guide/teams/hvui_user_manual.md.in/actions.html#scan-and-commit","title":"Scan and commit","text":"<p>Scan the selected files/folders (or the entire root directory), and create a worklist with all changes that were found: files that have been added, removed, modified, \u2026\u200b</p> <p>Unless you explicitly tell it not to (by checking the \"Do not show this dialog anymore\" checkbox), this action will first offer the possibility to refine what exactly the scan should be looking for:</p> <p></p> <p>Spotting new or deleted files is fairly straightforward, but when it comes to existing files, hvui will also perform a <code>md5</code> checksum comparison.</p> <p>If differences are found, hvui will prepare a new worklist with those.</p> <p>This is especially useful if one had to work on some files while no connection to the server was available (e.g., on a plane).</p> <p>The files found will be filtered by hvignore.</p>"},{"location":"user-guide/teams/hvui_user_manual.md.in/actions.html#details-on-commits-widget","title":"Details\u2026\u200b (on \"Commits\" widget)","text":"<p>Opens a detailed view of the commit details, including a list of the files that were modified:</p> <p></p>"},{"location":"user-guide/teams/hvui_user_manual.md.in/actions.html#sync-to-this-revision","title":"Sync to this revision","text":"<p>Retrieve the specified revision from the server, and replace the local file with it.</p>"},{"location":"user-guide/teams/hvui_user_manual.md.in/actions.html#diff-against-previous-revision","title":"Diff against previous revision","text":"<p>For each selected file, perform a diff of the selected file, against its previous revision.</p> <p>NOTE: If a file is opened and has been modified, those yet-unsubmitted modifications will not be part of the diff: only those between the two recorded revisions, will be visible.</p>"},{"location":"user-guide/teams/hvui_user_manual.md.in/actions.html#diff-against","title":"Diff against\u2026\u200b","text":"<p>A more powerful version of diff, that lets the user pick for each \"side\" of the diff:</p> <ul> <li>either the current revision, any revision number, or to the local   file on disk</li> <li>the path to the file (it is therefore possible to diff entirely   unrelated files together)</li> </ul>"},{"location":"user-guide/teams/hvui_user_manual.md.in/actions.html#checkout-for-edit","title":"Checkout for edit","text":"<p>Informs the server that we will be working on those files in the near future.</p> <p>They will be added to the worklist number 1 (which will be created if it doesn't exist), and will turn bold, to draw attention to them.</p>"},{"location":"user-guide/teams/hvui_user_manual.md.in/actions.html#add-to-vault","title":"Add to vault","text":"<p>Informs the server that we wish to add the selected file(s) to the list of files managed by the server.</p> <p>They will be added to the worklist number 1 (which will be created if it doesn't exist), and will turn bold, to draw attention to them.</p> <p>The files selected will be filtered by hvignore.</p>"},{"location":"user-guide/teams/hvui_user_manual.md.in/actions.html#checkout-for-delete","title":"Checkout for delete","text":"<p>Informs the server that we wish to delete the selected file(s) from the list of files managed by the server.</p> <p>They will be added to the worklist number 1 (which will be created if it doesn't exist), and will turn bold, to draw attention to them.</p>"},{"location":"user-guide/teams/hvui_user_manual.md.in/actions.html#checkout-for-moverename","title":"Checkout for move/rename\u2026\u200b","text":"<p>For each selected file (or directory), prompt the user for a new name to rename to.</p> <p>This is the equivalent of executing , followed by .</p>"},{"location":"user-guide/teams/hvui_user_manual.md.in/actions.html#checkout-for-copy","title":"Checkout for copy\u2026\u200b","text":"<p>For each selected file or directory, prompt the user for a new name to create a copy into.</p> <p>The copied files will be added to the worklist number 1 (which will be created if it doesn't exist).</p>"},{"location":"user-guide/teams/hvui_user_manual.md.in/actions.html#open-this-revision","title":"Open this revision","text":"<p>For each selected file, launch the associated application.</p> <p>NOTE: The file is retrieved from the server, and downloaded into a temporary location. It is cleaned after the application exits.</p>"},{"location":"user-guide/teams/hvui_user_manual.md.in/actions.html#file-history","title":"File history","text":"<p>For each selected file, open a  widget showing the list of modifications that were made to the file.</p>"},{"location":"user-guide/teams/hvui_user_manual.md.in/actions.html#revert","title":"Revert\u2026\u200b","text":"<p>Reverts the selection - that is: remove from the worklist(s), and restore the current revision from the server.</p> <p>NOTE: This action will lose all changes made to the selected file(s), and thus will first prompt for confirmation.</p> <p>See also </p>"},{"location":"user-guide/teams/hvui_user_manual.md.in/actions.html#revert-if-unchanged","title":"Revert if unchanged","text":"<p>A \"safe\" version of , that will first verify if files have been modified, before reverting them.</p> <p>Files that have not been modified, will be reverted. Those that have been, will remain untouched.</p> <p>Since this is a safe operation (in the sense that no data can be lost), this action will not ask for confirmation.</p> <p>See also </p>"},{"location":"user-guide/teams/hvui_user_manual.md.in/actions.html#open","title":"Open","text":"<p>For each entry in the selection, launch the associated \"View\" application.</p> <p>If no association is present for a specific file extension (or if the file does not have an extension), the default <code>*</code> association will be used.</p>"},{"location":"user-guide/teams/hvui_user_manual.md.in/actions.html#open-the-containing-folder","title":"Open the containing folder","text":"<p>For each folder in the selection, asks the OS to open a file browser at the corresponding place.</p> <p>What file browser is opened, depends on the OS's settings.</p>"},{"location":"user-guide/teams/hvui_user_manual.md.in/actions.html#resolve-actions","title":"Resolve actions","text":"<p>hvui comes with many strategies to resolve files:</p> <ul> <li>Auto resolve (if no conflicts)\u2026\u200b</li> <li>Auto resolve, prefer local\u2026\u200b</li> <li>Auto resolve, prefer remote\u2026\u200b</li> <li>Interactive merge</li> <li>Use local, discard remote\u2026\u200b</li> <li>Use remote, discard local\u2026\u200b</li> </ul> <p>However, hvui only knows how to handle a successful merge operation when IDA is used. Consequently, only the last 2 operations will be available for non-<code>.idb</code>/<code>.i64</code> files.</p>"},{"location":"user-guide/teams/hvui_user_manual.md.in/actions.html#resolve-actions-prolog","title":"Resolve actions prolog","text":"<p>The first thing that happens is that the last revision of the file is retrieved from the server (and stored in a temporary location).</p> <p>Then (for all but  and ) IDA will be launched in a special mode, and with different set of parameters that depend on the exact nature of the operation.</p>"},{"location":"user-guide/teams/hvui_user_manual.md.in/actions.html#auto-resolve-if-no-conflicts","title":"Auto resolve (if no conflicts)\u2026\u200b","text":"<p>Perform the \"resolve actions\" prolog, then launch IDA non-interactively: IDA will attempt merging the changes made to the local file with those that were made to the last revision of the file, and succeed if no conflicting changes were found.</p> <p>This is a safe operation in the sense that, should there be any conflict, it will not touch the local file.</p>"},{"location":"user-guide/teams/hvui_user_manual.md.in/actions.html#auto-resolve-prefer-local","title":"Auto resolve, prefer local\u2026\u200b","text":"<p>Perform the \"resolve actions\" prolog, then launch IDA non-interactively: IDA will merge the changes made to the local file with those that were made to the last revision of the file. Each time a conflict is found, automatically pick the local change.</p>"},{"location":"user-guide/teams/hvui_user_manual.md.in/actions.html#auto-resolve-prefer-remote","title":"Auto resolve, prefer remote\u2026\u200b","text":"<p>Perform the \"resolve actions\" prolog, then launch IDA non-interactively: IDA will merge the changes made to the local file with those that were made to the last revision of the file. Each time a conflict is found, automatically pick the other change.</p>"},{"location":"user-guide/teams/hvui_user_manual.md.in/actions.html#interactive-merge","title":"Interactive merge","text":"<p>Perform the \"resolve actions\" prolog, then launch IDA interactively: the user will be presented with a 3-panel IDA instance, where it will be possible to manually pick either the local, or the remote change, for each conflict.</p> <p>Once the user is done and exits IDA saving the resulting database, the file will be considered resolved.</p>"},{"location":"user-guide/teams/hvui_user_manual.md.in/actions.html#use-local-discard-remote","title":"Use local, discard remote\u2026\u200b","text":"<p>Perform the \"resolve actions\" prolog, then just consider that our local version of the file is the correct one.</p>"},{"location":"user-guide/teams/hvui_user_manual.md.in/actions.html#use-remote-discard-local","title":"Use remote, discard local\u2026\u200b","text":"<p>Perform the \"resolve actions\" prolog, then replace the local version of the file with the other one.</p>"},{"location":"user-guide/teams/hvui_user_manual.md.in/actions.html#diff-against-the-local-file","title":"Diff against the local file","text":"<p>Retrieve the specified file(s) from the server (and store them in a temporary location), then launch the associated \"Diff\" application to compare them against their local versions.</p>"},{"location":"user-guide/teams/hvui_user_manual.md.in/actions.html#find-in-vault","title":"Find in vault\u2026\u200b","text":"<p>Prompt the user for a pattern/substring to be looking for, and queries the server.</p> <p>If a match is found, it will be selected in the vault files widget. It is then possible to move forward/backward in the search results.</p>"},{"location":"user-guide/teams/hvui_user_manual.md.in/actions.html#next-search-result","title":"Next search result","text":"<p>Move forward in the result set of a find operation.</p>"},{"location":"user-guide/teams/hvui_user_manual.md.in/actions.html#previous-search-result","title":"Previous search result","text":"<p>Move backward in the result set of a find operation.</p>"},{"location":"user-guide/teams/hvui_user_manual.md.in/actions.html#refresh","title":"Refresh","text":"<p>Clears the local caches of all the data that was retrieved from the local filesystem &amp; the Hex-Rays Vault server, and force a refresh of all widgets.</p>"},{"location":"user-guide/teams/hvui_user_manual.md.in/actions.html#show-in-vault-filesshow-in-local-files","title":"Show in Vault files/Show in Local files","text":"<p>Find the corresponding selection in the other view, select it, and give focus to that view.</p> <p>This is helpful to navigate between vault files and local files.</p>"},{"location":"user-guide/teams/hvui_user_manual.md.in/actions.html#show-deleted-files","title":"Show deleted files","text":"<p>Toggle the visibility of files that have been deleted.</p> <p>When a file is deleted in revision <code>#N</code>, its revisions up to <code>#N-1</code> are still kept on the server (but not visible by default.)</p> <p>This offers the opportunity to view (and possibly resurrect) such deleted files.</p>"},{"location":"user-guide/teams/hvui_user_manual.md.in/actions.html#add-new-site","title":"Add new site\u2026\u200b","text":"<p>Create a new site.</p> <p>While logged in as a non-administrator, you won't have the choice but to associate the site to the current user. However, when logged in as an administrator, it is necessary to provide the user's name as well.</p>"},{"location":"user-guide/teams/hvui_user_manual.md.in/actions.html#edit-site","title":"Edit site\u2026\u200b","text":"<p>Offers the ability to modify the following properties of a site:</p> <ul> <li>Its root directory</li> <li>The client's host</li> <li>Optional site filters</li> </ul>"},{"location":"user-guide/teams/hvui_user_manual.md.in/actions.html#delete-site","title":"Delete site\u2026\u200b","text":"<p>Delete the selected site (after prompting for confirmation.)</p> <p>Naturally, deleting a site will also delete the worklists that were associated with that site. The commits that were made from that site will not be deleted.</p>"},{"location":"user-guide/teams/hvui_user_manual.md.in/actions.html#use-this-site","title":"Use this site\u2026\u200b","text":"<p>Have hvui switch to the selected site.</p> <p>This can be useful if you have more than one site on your machine.</p> <p>Switching to a site requires that the client host matches that of the current machine, and that the site belongs to the user who's currently logged-in.</p>"},{"location":"user-guide/teams/hvui_user_manual.md.in/actions.html#add-new-user","title":"Add new user\u2026\u200b","text":"<p>Prompts the administrator for various bits of information about the user: login, real name, license ID, password, \u2026\u200b and registers that information on the server.</p>"},{"location":"user-guide/teams/hvui_user_manual.md.in/actions.html#edit-user","title":"Edit user\u2026\u200b","text":"<p>Lets an administrator change all information about a particular user, with the exception of their login (immutable) and password (use the dedicated action to do that.)</p>"},{"location":"user-guide/teams/hvui_user_manual.md.in/actions.html#delete-user","title":"Delete user\u2026\u200b","text":"<p>Asks the administrator for confirmation, then deletes the user from the server.</p> <p>Deleting a user also deletes the worklists that belonged to the user. The commits made by that user won't be impacted.</p>"},{"location":"user-guide/teams/hvui_user_manual.md.in/actions.html#set-password","title":"Set password\u2026\u200b","text":"<p>Prompts for a new password (and its confirmation), and applies the changes on the server.</p>"},{"location":"user-guide/teams/hvui_user_manual.md.in/actions.html#add-new-worklist","title":"Add new worklist\u2026\u200b","text":"<p>Prompts the user for a brief worklist description (which can remain empty at this point), and create a new, empty worklist.</p>"},{"location":"user-guide/teams/hvui_user_manual.md.in/actions.html#edit-worklist","title":"Edit worklist\u2026\u200b","text":"<p>Shows worklist details, and offers to edit its description.</p> <p>This action can only be performed on worklists that belong to the current user.</p>"},{"location":"user-guide/teams/hvui_user_manual.md.in/actions.html#view-worklist","title":"View worklist\u2026\u200b","text":"<p>Shows other users' worklists details, in read-only mode.</p>"},{"location":"user-guide/teams/hvui_user_manual.md.in/actions.html#delete-worklist","title":"Delete worklist\u2026\u200b","text":"<p>Prompts for confirmation, and deletes the worklist.</p> <p>All modifications (including additions &amp; deletions of files), will be abandoned/reverted.</p>"},{"location":"user-guide/teams/hvui_user_manual.md.in/actions.html#migrate-to-another-worklist","title":"Migrate to another worklist\u2026\u200b","text":"<p>Lets the user pick another one of his pending worklists (or, alternatively, create a new one), then moves the files to that worklist.</p>"},{"location":"user-guide/teams/hvui_user_manual.md.in/actions.html#show-other-users-worklists","title":"Show other users' worklists","text":"<p>Toggle between the two following states:</p> <ol> <li>show this user's worklists on this site,</li> <li>show all worklists (from all users, and on all sites)</li> </ol>"},{"location":"user-guide/teams/hvui_user_manual.md.in/diffing_and_merging.html","title":"Inspecting changes","text":"<p>After having done some reverse-engineering work on an IDA database, it is possible to view those changes in a special mode in IDA: right-click, and choose the diff action:</p> <p></p> <p>Here a new instance of IDA will be launched in a special \"diff\" mode:</p> <p></p>"},{"location":"user-guide/teams/hvui_user_manual.md.in/diffing_and_merging.html#idas-diff-mode","title":"IDA's diff mode","text":"<p>This new IDA mode lets the user compare two databases, in a traditional \"diff\" fashion: essentially a two-panel window, showing the unmodified file on the left and the version with your changes on the right.</p>"},{"location":"user-guide/teams/hvui_user_manual.md.in/diffing_and_merging.html#the-progress-widget","title":"The \"Progress\" widget","text":"<p>Represents the current step in the diff process.</p>"},{"location":"user-guide/teams/hvui_user_manual.md.in/diffing_and_merging.html#the-left-panel","title":"The left panel","text":"<p>Shows the \"untouched\" version of the database (i.e., the one without your changes)</p>"},{"location":"user-guide/teams/hvui_user_manual.md.in/diffing_and_merging.html#the-right-panel","title":"The right panel","text":"<p>Shows your version of the database (i.e., featuring your changes)</p>"},{"location":"user-guide/teams/hvui_user_manual.md.in/diffing_and_merging.html#diff-region-details","title":"Diff region details","text":"<p>Notice how both panels have a little area at the bottom, that is labeled \"Details\".</p> <p>Details are available on certain steps of the diffing process, and provide additional information about the change that is currently displayed.</p>"},{"location":"user-guide/teams/hvui_user_manual.md.in/diffing_and_merging.html#the-diffing-toolbar","title":"The \"diffing\" toolbar","text":"<p>The actions in the toolbar are:</p> <ul> <li>Previous chunk</li> <li>Center chunk</li> <li>Next chunk</li> <li>Proceed to the next step</li> <li>Toggle 'Details'</li> </ul> <p>Using actions in the toolbar, you can now iterate through the differences between the two databases, with each change shown in context as if viewed through a normal IDA window.</p> <p>The ability to view changes in context was a major factor in the decision to use IDA itself as the diffing/merging tool for IDA Teams.</p>"},{"location":"user-guide/teams/hvui_user_manual.md.in/diffing_and_merging.html#diff-mode-idas-toolbar-actions","title":"Diff mode IDA's toolbar actions","text":""},{"location":"user-guide/teams/hvui_user_manual.md.in/diffing_and_merging.html#previous-chunk","title":"Previous chunk","text":"<p>Move to the previous change</p>"},{"location":"user-guide/teams/hvui_user_manual.md.in/diffing_and_merging.html#center-chunk","title":"Center chunk","text":"<p>Re-center the panels to show the current chunk (useful if you navigated around to get more context)</p>"},{"location":"user-guide/teams/hvui_user_manual.md.in/diffing_and_merging.html#next-chunk","title":"Next chunk","text":"<p>Move to the next change</p>"},{"location":"user-guide/teams/hvui_user_manual.md.in/diffing_and_merging.html#proceed-to-the-next-step","title":"Proceed to the next step","text":"<p>Move to the next step in the diffing process.</p>"},{"location":"user-guide/teams/hvui_user_manual.md.in/diffing_and_merging.html#toggle-details","title":"Toggle 'Details'","text":"<p>Toggle the visibility of the \"Details\" widgets in the various panels (note that some steps do not provide details, so even if the \"Details\" are requested, they might not be currently visible.)</p>"},{"location":"user-guide/teams/hvui_user_manual.md.in/diffing_and_merging.html#terminology","title":"Terminology","text":"<p>It is important to note the difference between the terms \"diff\" and \"merge\".</p> <p>This document will sometimes use the two terms interchangeably. This is because to IDA, a diff is just a specialized merge. Both diffing and merging are handled by IDA's \"merge mode\", which involves up to 3 databases, one of which can be modified to contain the result of the merge.</p> <p>A diff is simply a merge operation that involves only 2 databases, neither of which are modified.</p> <p>This is why often times you will see the term \"merge\" used in the context of a diff. In this case \"merge\" is referring to IDA's \"merge mode\", rather than the process of merging multiple databases together into a combined database.</p>"},{"location":"user-guide/teams/hvui_user_manual.md.in/diffing_and_merging.html#using-ida-as-a-diffing-tool","title":"Using IDA as a diffing tool","text":"<p>We must stress the fact that performing a merge between two IDA databases is quite different than performing a merge between, say, two text files. A change in a chunk of text file will not have an impact over another chunk.</p> <p>IDA databases are not so simple. A change in one place in an idb will often have an impact on another place. For example, if a structure <code>mystruct</code> changed between two databases, it will have an impact not only on the name of the structure, but on cross-references to structure members, function prototypes, etc.</p> <p>This is why IDA's merge mode is split into a strict series of \"steps\":</p> <p></p> <p>Within a single step it is possible to go forward &amp; backward between different chunks. But because of possible inter-dependencies between steps, it is not possible to move backwards between steps, you can only go forward:</p> <p></p> <p>Since IDA's diff mode is just a variation of its merge mode, diffing databases is also subject to this sequential application of steps in order to view certain bits of information. That is why, in some steps (e.g., the \"Disassembly/Items\") IDA might not report some changes that were performed at another level.</p> <p>For instance, if a user marked a function as <code>noret</code>, the listings that will be shown in \"Disassembly/Items\" step, will not advertise that there was a change at that place (even though the <code>\"Attributes: noreturn\"</code> is visible in the left-hand listing), only the changes to the instructions (and data, ...) are visible in the current step:</p> <p></p> <p>The change will, however, be visible at a later step (i.e., \"Functions/Registry\"):</p> <p></p> <p>NOTE: The changes applied during the \"diff\" process are only temporary. Exiting IDA (at any moment) will not alter the files being compared.</p>"},{"location":"user-guide/teams/hvui_user_manual.md.in/diffing_and_merging.html#merging-concurrent-modifications-conflicts","title":"Merging concurrent modifications (conflicts)","text":"<p>As with any collaborative tool, it may happen that two coworkers work on the same dataset (e.g., IDA database), and make modifications to the same areas, resulting in \"conflicts\". Conflicts must be \"resolved\" prior to committing.</p> <p></p> <p>To do that, right-click and pick one of the \"resolve\" options:</p> <p></p> <p>IDA Teams provides the following merge strategies.</p>"},{"location":"user-guide/teams/hvui_user_manual.md.in/diffing_and_merging.html#interactive-merging","title":"Interactive merging","text":"<p>If the option that was chosen (e.g., Interactive merge mode) requires user interaction due to conflicts, IDA will show in 3-pane \"merge\" mode.</p> <p></p> <p>When a conflict is encountered, you'll have the ability to pick, for all conflicts, which change should be kept (yours, or the other). Every time you pick a change (and thus resolve a conflict), IDA will proceed with the merging, applying all the non-conflicting changes it can, until the next conflict - if any. When all conflicts are resolved, you can leave IDA, and the new resulting file is ready to be submitted.</p>"},{"location":"user-guide/teams/hvui_user_manual.md.in/getting_started.html","title":"Getting started","text":"<p>In order to function, HVUI will need to connect to a Hex-Rays Vault server.</p> <p>This guide assumes that such a server is running, accessible, and an account is available:</p> Connection attributes Host vaultserver Port 65433 User name joe User password secret"},{"location":"user-guide/teams/hvui_user_manual.md.in/getting_started.html#starting-hvui","title":"Starting HVUI","text":"<p>The first time the user starts the application, credentials will need to be input:</p> <p></p> <p>NOTE: Checking the checkbox at the bottom of the form, will cause HVUI to store credentials in the registry, password(s) will be stored in the OS's keychain.</p> <p>If this is the first time a login is performed from this machine, the user will have to specify a directory where files will be locally stored:</p> <p></p> <p>This will a site (that is, a mapping of the server files on the local disk) for use on this computer.</p> <p>After accepting the dialog, you will be presented with the main view:</p> <p></p>"},{"location":"user-guide/teams/hvui_user_manual.md.in/getting_started.html#getting-the-latest-revision","title":"Getting the latest revision","text":"<p>The widget now shows what files are available.</p> <p>Notice the <code>#0/1</code> suffixes: it means we currently have revision number 0 (i.e., no revision at all) of those files.</p> <p>Let's sync those files to their latest revision, from the server:</p> <p></p> <p>And the files are now up-to-date:</p> <p></p>"},{"location":"user-guide/teams/hvui_user_manual.md.in/hvui_user_manual.html","title":"Hex-Rays Vault\u2019s visual client user manual","text":"<p>$sub1(preface.md) $sub1(getting_started.md) $sub1(working_with_files.md) $sub1(diffing_and_merging.md) $sub1(../../../shared.in/teams/concepts/all.md) $sub1(widgets.md) $sub1(misc.md)</p>"},{"location":"user-guide/teams/hvui_user_manual.md.in/misc.html","title":"Miscellaneous information","text":""},{"location":"user-guide/teams/hvui_user_manual.md.in/misc.html#simplified-site-creation-on-first-connection","title":"Simplified site creation on first connection","text":"<p>In order to do any meaningful work in {hvui}, a user must be using a site.</p> <p>To make it easier to get started using hvui, the first time a user connects to the Hex-Rays Vault server, the application will propose a a simplified site creation dialog, that will query only the \"root directory\".</p> <p>The rest of the site attributes will be guessed (or generated):</p> <ul> <li>the host name will be retrieved automatically from the system</li> <li>the user name is known since the user just logged in</li> <li>the site name will be generated from the <code>user name</code> + <code>host name</code></li> </ul> <p>It is of course still possible to alter that site later, through the \"Sites\" widget.</p>"},{"location":"user-guide/teams/hvui_user_manual.md.in/misc.html#technical-information","title":"Technical information","text":"<p>HVUI stores certain bits of information in the registry:</p> <ul> <li>On Windows, this will be located under <code>\\HKEY_CURRENT_USER\\Software\\Hex-Rays\\HVUI</code></li> <li>On Unix systems, HVUI will use a file-backed registry, located at <code>$HOME/.idapro/hvui.reg</code></li> </ul>"},{"location":"user-guide/teams/hvui_user_manual.md.in/preface.html","title":"About this manual","text":"<p>This user guide provides information about HVUI, the Hex-Rays Vault visual client.</p> <p>HVUI is provided in addition to the command-line client, HV.</p> <p>This manual assumes that the reader has an understanding of the IDA Teams general concepts.</p> <p>NOTE: Although Hex-Rays Vault will host any file you want, its primary use-case is to allow users to keep a history, and allow collaborative work on, IDA databases (i.e., <code>.idb</code> and <code>.i64</code> files.) Throughout this manual, we will be using the terms \"idbs\" and \"files\" interchangeably.</p>"},{"location":"user-guide/teams/hvui_user_manual.md.in/readme.html","title":"How to make manuals","text":"<p>Text modifications should be done in the <code>.adoc</code> files.</p> <p>Screenshots, on the other hand, are not taken manually: they are taken by the <code>screenshots-*</code> \"tests\".</p> <p>The <code>makefile</code>s do use tools (<code>../tools/*.py</code>) in order to:  - list the <code>.adoc</code> dependencies (that lets us have nicely structured    documentation, split across multiple folders)  - \"map\" the screenshots from their path in the <code>.adoc</code> file, to an    actual place within the tests results (this implies tests must be    run before re-generating the documentation.)</p> <p>This means the makefiles have proper, \"hard\" (albeit generated) dependencies to screenshots that must have been produced by corresponding test(s).</p>"},{"location":"user-guide/teams/hvui_user_manual.md.in/readme.html#building","title":"Building","text":"<ul> <li>First, run all <code>screenshots-*</code> tests.</li> <li><code>vault/docs/hvui $ p4 edit ...</code></li> <li><code>vault/docs/hvui $ make</code></li> <li>(make sure the document looks good)</li> <li><code>vault/docs/hvui $ p4 revert -a ...</code></li> </ul> <p>NOTE: If you happen to be running tests in a non-standard folder, you have to specify that to the makefile: <code>make TESTS_DIR=~/tmp</code></p>"},{"location":"user-guide/teams/hvui_user_manual.md.in/readme.html#conventions","title":"Conventions","text":""},{"location":"user-guide/teams/hvui_user_manual.md.in/readme.html#screenshots-paths","title":"Screenshots paths","text":"<p>Asciidoc is ... not perfect. When it comes to screenshots, it has what some would consider broken rules for resolving relative paths.</p> <p>Consequently, it can be necessary to set the <code>imagesdir</code> when working across folders.</p>"},{"location":"user-guide/teams/hvui_user_manual.md.in/readme.html#xrefs-identifiers","title":"XREFs &amp; identifiers","text":"<p>Similarly, although Asciidoc provides a supposedly neat way of cross-referencing sections in sub-documents (i.e., other <code>.adoc</code> files), the reality is that it won't work if you are trying to reach identifiers placed in a file that's not within the directory [sub-]tree as the toplevel <code>.adoc</code> file (e.g., when referencing shared \"concepts\".)</p> <p>Thus, this: https://docs.asciidoctor.org/asciidoc/latest/macros/inter-document-xref/ simply doesn't work for us (see CL#131224)</p> <p>We have to resort to our own, somewhat loosely defined, \"qualified identifier format\", consisting of <code>&lt;identifier&gt;[.&lt;identifier&gt;]*</code>.</p> <p>E.g., <code>[[site.top]]</code></p>"},{"location":"user-guide/teams/hvui_user_manual.md.in/readme.html#action-identifiers","title":"Action identifiers","text":"<p>Actions IDs should consist of <code>actions.&lt;name_in_actions_list.cpp&gt;</code> e.g., <code>actions.diff_vault_local</code></p>"},{"location":"user-guide/teams/hvui_user_manual.md.in/readme.html#actions-with-personality-disorders","title":"Actions# with personality disorders","text":"<p>Some actions have completely different labels, and will perform [slightly or vastly] differently in different contexts:</p> <ul> <li>\"Commit\"</li> <li>\"Scan and commit\"</li> </ul> <p>\u2026but are actually the very same action.</p> <p>Those 2 labels will be set to the same action (because it makes sense to consider those as the same actions in terms of code), but for the user they look like entirely different, and do different things.</p> <p>Since we must document the 2 facets of that action, we must have 2 entries in the actions documentation, with possible IDs:</p> <p><code>actions.commit</code> <code>actions.scan_and_commit</code></p>"},{"location":"user-guide/teams/hvui_user_manual.md.in/widgets.html","title":"Tour of hvui\u2019s widgets","text":"<p>$sub1(widgets/vault_files.md) $sub1(widgets/local_files.md) $sub1(widgets/worklists.md) $sub1(widgets/commits.md) $sub1(widgets/sites.md) $sub1(widgets/users.md) $sub1(widgets/log.md) $sub1(widgets/file_history.md) $sub1(actions.md)</p>"},{"location":"user-guide/teams/hvui_user_manual.md.in/working_with_files.html","title":"Working with files","text":"<p>In the previous chapter, we have introduced the notion of \"syncing to the latest revision\".</p> <p>This chapter will go a bit further, and introduce the most common, day-to-day operations users will want to perform on their files.</p>"},{"location":"user-guide/teams/hvui_user_manual.md.in/working_with_files.html#what-are-worklists-and-commits","title":"What are worklists, and commits?","text":"<p>Any work done in HVUI will involve worklists, and commits.</p>"},{"location":"user-guide/teams/hvui_user_manual.md.in/working_with_files.html#worklist","title":"Worklist","text":"<p>A worklist holds files that have been</p> <ul> <li>modified,</li> <li>marked for addition or</li> <li>deletion,</li> <li>\u2026\u200b</li> </ul> <p>Those modifications are local to the user\u2019s site. They will only be made available for everyone after the user commits the worklist.</p>"},{"location":"user-guide/teams/hvui_user_manual.md.in/working_with_files.html#commit","title":"Commit","text":"<p>Once a worklist is committed, it becomes a commit, and makes its modifications available for everyone.</p> <p>In comparison to a worklist, a commit holds \"published\" modifications, and any user syncing to that commit will benefit from those.</p> <p>Let\u2019s look at a concrete example illustrating worklists and commits: adding a file to the Hex-Rays Vault!</p>"},{"location":"user-guide/teams/hvui_user_manual.md.in/working_with_files.html#adding-files-to-the-vault","title":"Adding files to the vault","text":"<p>From the \"Local files\" widget, I can add a file that is not yet present in the Hex-Rays Vault server:</p> <p></p> <p>That file will now be added to the current worklist (one will be created if needed):</p> <p></p> <p>For this new file to become available for everyone, the user will need to \"commit\" the worklist:</p> <p></p> <p>Once the worklist is committed, it becomes a commit, and the modifications are then available for everyone:</p> <p></p> <p>TIP: Notice how our commit isn\u2019t the first one in the system: another user submitted a commit before us\u2009\u2014\u2009it\u2019s that commit that added the files we\u2019ve seen in the getting-started portion of this guide.</p>"},{"location":"user-guide/teams/hvui_user_manual.md.in/working_with_files.html#modifying-files","title":"Modifying files","text":"<p>When working on a file, a user must first check it out for modification:</p> <p></p> <p>Just like with the adding, the file will now show in a worklist:</p> <p></p> <p>\u2026\u200band just like with the adding, whatever modification you make to the file, will only be visible to coworkers after committing that worklist.</p>"},{"location":"user-guide/teams/hvui_user_manual.md.in/working_with_files.html#committing","title":"Committing","text":"<p>Files that have been checked out (e.g. for modification) or opened for adding will go into a worklist until they are committed, which then turns the worklist into a commit. A worklist can be committed to make its changes available to other users: right-click, commit</p> <p></p> <p>The worklist becomes a commit:</p> <p></p> <p>\u2026\u200band the worklist is gone:</p> <p></p>"},{"location":"user-guide/teams/hvui_user_manual.md.in/working_with_files.html#synchronizing-files","title":"Synchronizing files","text":"<p>To fetch the latest set of the changes (changes/additions/deletions), use \"Get latest revision\".</p>"},{"location":"user-guide/teams/hvui_user_manual.md.in/working_with_files.html#viewing-the-history-of-a-file","title":"Viewing the history of a file","text":"<p>To get an overview of all of the changes made to a file: right-click, File history</p> <p></p> <p></p> <p>From the \"History of \u2026\u200b\" widget, you can view any revision of a file.</p> <p></p> <p>It\u2019s also possible to synchronize files to older revisions, from this widget.</p> <p></p> <p>When asked to do that, HVUI will retrieve that older revision of the file from the server. This is what will now be present on your filesystem.</p> <p>Notice how the file now shows as 'outdated':</p> <p></p>"},{"location":"user-guide/teams/hvui_user_manual.md.in/working_with_files.html#opening-files","title":"Opening files","text":"<p>On many widgets, it's possible to view/open a file. If the file extension has a corresponding association it will be used to open the file.</p>"},{"location":"user-guide/teams/hvui_user_manual.md.in/working_with_files.html#file-associations","title":"File associations","text":"<p>Out-of-the-box, HVUI associates <code>.i64</code> files with IDA. In addition to that, it provides a default \"fallback\" <code>\"*\"</code> association that will cause matching files to be opened in IDA.</p> <p>Users can specify their file extension associations via a form available from the View menu.</p> <p></p>"},{"location":"user-guide/teams/hvui_user_manual.md.in/working_with_files.html#deleting-files","title":"Deleting files","text":"<p>Files can be removed from the server (if they have become unnecessary for example): right-click, delete.</p> <p></p> <p>Just like other file actions, the change (deletion) needs to be committed for its effects to be visible on the server.</p>"},{"location":"user-guide/teams/hvui_user_manual.md.in/working_with_files.html#reverting-changes-to-files","title":"Reverting changes to files","text":"<p>To revert unwanted changes to a file: right-click, Revert</p> <p></p> <p>It is also possible to use \"Revert if unchanged\" to only revert files that were checked out without actual changes. This is especially useful when used on a selection of files or a directory.</p>"},{"location":"user-guide/teams/hvui_user_manual.md.in/working_with_files.html#renaming-and-moving-files-or-folders","title":"Renaming and Moving Files or Folders","text":"<p>One may wish to rename and/or move around files/folders in their workspace, for that \"Checkout for move/rename...\" can be used.</p> <p></p> <p></p>"},{"location":"user-guide/teams/hvui_user_manual.md.in/working_with_files.html#copying-files-or-folders","title":"Copying Files or Folders","text":"<p>{hvui_app} provides an action to copy files or directories easily. Use \"Checkout for copy...\".</p> <p></p> <p></p>"},{"location":"user-guide/teams/hvui_user_manual.md.in/working_with_files.html#finding-a-file-in-the-vault","title":"Finding a file in the vault","text":"<p>When a vault contains a lot of files, manually searching for a file in the directory tree becomes inefficient. To help you locate files easily, you can use the Find in vault\u2026\u200b action.</p> <p></p> <p></p> <p></p> <p>You can navigate between the search results by using Next search result and Previous search result, located next to Find in vault\u2026\u200b both in the toolbar, and in the \"Search\" menu.</p>"},{"location":"user-guide/teams/hvui_user_manual.md.in/working_with_files.html#font-styles","title":"Font styles","text":"<p>As you may have noticed by now, files are shown with different font styles in different circumstances.</p> <p>A gray font denotes a file that is not in the vault. It has been added or renamed and not yet commited.</p> <p>A bold font means that this file is being worked on, or has been changed.</p> <p>An italic font means that it\u2019s not the latest version of this file.</p> <p>Some combinations are possible, for example a file being resolved (not latest version and being worked on) will have a bold and italic font style. The combination gray (not in vault) and italic (not latest version) is for example not possible.</p>"},{"location":"user-guide/teams/hvui_user_manual.md.in/widgets/commit.html","title":"Commit","text":"<p>Using the \"commits\" widget, it is possible to inspect what changes were previously submitted to the vault in a particular commit.</p>"},{"location":"user-guide/teams/hvui_user_manual.md.in/widgets/commit.html#actions","title":"Actions","text":"<ul> <li>Open this revision</li> <li>Sync to this revision</li> <li>Diff against previous revision</li> <li>Checkout for copy\u2026\u200b</li> <li>File history</li> </ul>"},{"location":"user-guide/teams/hvui_user_manual.md.in/widgets/commits.html","title":"Commits","text":"<p>The \"commits\" widget shows a list of previous commits made to the server, in a concise and condensed way.</p> <p>It is possible to request a detailed view for any entry in that list.</p> <p>NOTE: The amount of entries displayed by this widget can be configured through the \"Options\" dialog.</p>"},{"location":"user-guide/teams/hvui_user_manual.md.in/widgets/commits.html#actions","title":"Actions","text":"<ul> <li>Details\u2026\u200b (on \"Commits\" widget)</li> <li>Sync to this revision</li> </ul> <p>$sub1(commit.md)</p>"},{"location":"user-guide/teams/hvui_user_manual.md.in/widgets/file_history.html","title":"File history","text":"<p>The \"File history\" widget shows all changes ever commited to a single file.</p>"},{"location":"user-guide/teams/hvui_user_manual.md.in/widgets/file_history.html#actions","title":"Actions","text":"<ul> <li>Open this revision</li> <li>Sync to this revision</li> <li>Checkout for copy\u2026\u200b</li> <li>Details\u2026\u200b (on \"Commits\" widget)</li> <li>Diff against previous revision</li> <li>Diff against\u2026\u200b</li> </ul>"},{"location":"user-guide/teams/hvui_user_manual.md.in/widgets/local_files.html","title":"Local files","text":"<p>The \"Local files\" widget represents the data that's available on the local disk.</p> <p></p> <p>The root of the tree starts at the site\u2019s workdir.</p> <p>Note that this widget honors the <code>hvignore</code> file that\u2019s placed in the installation directory next to <code>hvui</code>, and also any <code>.hvignore</code> file found in the directory structure.</p>"},{"location":"user-guide/teams/hvui_user_manual.md.in/widgets/local_files.html#actions","title":"Actions","text":"<ul> <li>Get the latest revision</li> <li>Scan and commit</li> <li>Checkout for edit</li> <li>Add to vault</li> <li>Checkout for delete</li> <li>Checkout for move/rename\u2026\u200b</li> <li>Checkout for copy\u2026\u200b</li> <li>Revert\u2026\u200b</li> <li>Revert if unchanged</li> <li>Open</li> <li>Open the containing folder // local only</li> <li>Auto resolve (if no conflicts)\u2026\u200b</li> <li>Auto resolve, prefer local\u2026\u200b</li> <li>Auto resolve, prefer remote\u2026\u200b</li> <li>Interactive merge</li> <li>Use local, discard remote\u2026\u200b</li> <li>Use remote, discard local\u2026\u200b</li> <li>Diff against the local file</li> <li>Diff against previous revision</li> <li>File history</li> <li>Find in vault\u2026\u200b</li> <li>Next search result</li> <li>Previous search result</li> <li>Refresh</li> <li>Show deleted files</li> <li>Show in Vault files/Show in Local files</li> </ul>"},{"location":"user-guide/teams/hvui_user_manual.md.in/widgets/log.html","title":"Log window","text":"<p>The logging area is helpful in providing feedback about different types of events:</p> <ul> <li>Details of successful operations</li> <li>Connection state (logins, logout's, network issues, ...)</li> <li>...other various bits of information that the program deems   relevant for the user to know</li> </ul>"},{"location":"user-guide/teams/hvui_user_manual.md.in/widgets/log.html#actions","title":"Actions","text":"<p>The logging area provides typical text-manipulating functions (copying, searching, ...) as well as the ability to turn timestamps on/off.</p>"},{"location":"user-guide/teams/hvui_user_manual.md.in/widgets/sites.html","title":"Sites","text":"<p>The \"Sites\" widget provides the ability for a user (or an admin) to administrate users' sites.</p> <p>Non-admin users will only be able to modify their own site(s), while an admin will have the ability to do so for all users' sites.</p> <p>If you find yourself using more than one site on any specific machine, you will likely have to resort to the Use this site\u2026\u200b to switch between them.</p>"},{"location":"user-guide/teams/hvui_user_manual.md.in/widgets/sites.html#actions","title":"Actions","text":"<ul> <li>Add new site\u2026\u200b</li> <li>Edit site\u2026\u200b</li> <li>Delete site\u2026\u200b</li> <li>Use this site\u2026\u200b</li> </ul>"},{"location":"user-guide/teams/hvui_user_manual.md.in/widgets/users.html","title":"Users","text":"<p>The \"Users\" widget lists all knows users of the Hex-Rays Vault server.</p> <p>Non-admin users have the possibility to change their password.</p> <p>Users with administrator rights will, in addition, be able to add, remove, modify users - and modify anyone's password.</p>"},{"location":"user-guide/teams/hvui_user_manual.md.in/widgets/users.html#actions","title":"Actions","text":"<ul> <li>Add new user\u2026\u200b</li> <li>Edit user\u2026\u200b</li> <li>Delete user\u2026\u200b</li> <li>Set password\u2026\u200b</li> </ul>"},{"location":"user-guide/teams/hvui_user_manual.md.in/widgets/vault_files.html","title":"Vault files","text":"<p>The \"Vault files\" widget represents the data that's available on the server.</p> <p></p> <p>Since its contents can be very similar to what is shown in the \"Local files\" (depending on whether user\u2019s site is using site filters or not), it has been given differentiating background color, in the hope of not confusing it with that other widget.</p>"},{"location":"user-guide/teams/hvui_user_manual.md.in/widgets/vault_files.html#actions","title":"Actions","text":"<ul> <li>Get the latest revision</li> <li>Scan and commit</li> <li>Checkout for edit</li> <li>Add to vault</li> <li>Checkout for delete</li> <li>Checkout for move/rename\u2026\u200b</li> <li>Checkout for copy\u2026\u200b</li> <li>Revert\u2026\u200b</li> <li>Revert if unchanged</li> <li>Open</li> <li>Auto resolve (if no conflicts)\u2026\u200b</li> <li>Auto resolve, prefer local\u2026\u200b</li> <li>Auto resolve, prefer remote\u2026\u200b</li> <li>Interactive merge</li> <li>Use local, discard remote\u2026\u200b</li> <li>Use remote, discard local\u2026\u200b</li> <li>Diff against the local file</li> <li>Diff against previous revision</li> <li>File history</li> <li>Find in vault\u2026\u200b</li> <li>Next search result</li> <li>Previous search result</li> <li>Refresh</li> <li>Show deleted files</li> <li>Show in Vault files/Show in Local files</li> </ul>"},{"location":"user-guide/teams/hvui_user_manual.md.in/widgets/worklists.html","title":"Worklists","text":"<p>The \"Worklists\" widget groups all the modifications that are still pending (and are thus not yet visible to other users)</p> <p>Those changes are grouped by \"Worklist\" (i.e., topic). A typical worklist will hold files that are related, and will be made available to all once a worklist is committed.</p> <p>It is possible to move file(s) from a worklist to another, by \"drag &amp; drop\"'ing them, \"cut &amp; paste\"'ing them, or using the Migrate to another worklist\u2026\u200b action.</p> <p>By default, this widget will only show the current user\u2019s worklists, but can be made to show everyone\u2019s worklists, in read-only mode: the current user will still only be able to modify (or commit) his/her own worklists.</p>"},{"location":"user-guide/teams/hvui_user_manual.md.in/widgets/worklists.html#actions","title":"Actions","text":"<ul> <li>Open</li> <li>Commit\u2026\u200b</li> <li>Add new worklist\u2026\u200b</li> <li>Edit worklist\u2026\u200b</li> <li>Revert\u2026\u200b</li> <li>Revert if unchanged</li> <li>Delete worklist\u2026\u200b</li> <li>View worklist\u2026\u200b</li> <li>Auto resolve (if no conflicts)\u2026\u200b</li> <li>Auto resolve, prefer local\u2026\u200b</li> <li>Auto resolve, prefer remote\u2026\u200b</li> <li>Interactive merge</li> <li>Use local, discard remote\u2026\u200b</li> <li>Use remote, discard local\u2026\u200b</li> <li>Diff against the local file</li> <li>Migrate to another worklist\u2026\u200b</li> <li>File history</li> <li>Refresh</li> <li>Show other users' worklists</li> </ul>"},{"location":"user-guide/type-libraries/tilib.html","title":"TILIB","text":"<p>TILIB is a utility to create custom type libraries for IDA Pro. Since IDA 9.1, TILIB is shipped with IDA, in the <code>tools</code> folder within the main IDA installation directory.</p> <p>This small utility creates type library (til) files for IDA Pro. Its functionality overlaps with \"Parse C header file...\" from IDA Pro. However, this utility is easier to use and provides more control over the output. Also, it can handle the preprocessor symbols, while the built-in command ignores them.</p> <p>The utility takes a C header file and extracts all type information from it. The extracted type information is stored in an internal format as a type library file. Type library files can be loaded and used in IDA Pro by opening the Type Library Window and pressing Insert.</p> <p>TILIB support only C header files. C++ files (classes, templates, etc) are not supported, but some popular C++ keywords are recognized and properly handled. For example, TILIB knows about the inline keyword and properly skips the definition of the inline function.</p>"},{"location":"user-guide/type-libraries/tilib.html#installation","title":"Installation","text":"<ol> <li>Just copy the tilib executable file into the IDA Pro directory.</li> </ol> <p>If you prefer to keep it in another directory, you will need to specify the location of the ida.hlp file using the NLSPATH variable:</p> <pre><code>set NLSPATH=c:\\program files\\ida\n</code></pre> <p>Please note that you do not need to define this variable if you just copy the tilib executable file to the IDA Pro directory.</p>"},{"location":"user-guide/type-libraries/tilib.html#usage","title":"Usage","text":"<p>If started without parameters, the utility displays a short explanation. Below are some command line samples.</p> <p>Parse a header file and create a new type library:</p> <pre><code>tilib -c -hinput_header_file output_til_file\n</code></pre> <ul> <li><code>-c</code> means to create a new type library</li> <li><code>-h</code> denotes the name of the input file to read</li> </ul> <p>If you need to parse multiple files into one type library, you may create a text file with #include directives and specify it as the input.</p> <p>TILIB can handle input files for Visual Studio, Borland, GCC out of the box. Please check the configuration files for them in the archive (*.cfg).</p> <p>If you need to fine-tune TILIB for another compiler (or unusual compiler settings), feel free to copy the provided configuration files and modify them.</p> <p>TILIB is not very good at error handling and some error messages may be quite unhelpful (e.g. syntax error). To alleviate this problem, use the <code>-z</code> switch. If this switch is specified, TILIB will create a .i file with the preprocessed contents. All recognized type names are prepended with @, like this: @my_type_name.</p> <p>In some urgent cases, the <code>-e</code> switch may be used to ignore any parsing errors. Please note that the problematic type definitions will be skipped in this mode. This switch may be used together with the -R switch to allow type redeclarations.</p> <p>If your input file uses another header file (e.g. windows.h), you may opt to use the vc6win.til file instead of parsing it again. For that, just use the <code>-b</code> switch and specify vc6win.til as the base til. TILIB will load the contents of the specified file into the memory and parse the input file. All definitions from windows.h, including the preprocessor definitions, will be avaible:</p> <pre><code>tilib -c -hinput_header_file -bbase_til_file output_til_file\n</code></pre> <p>TILIB can also be used to list the contents of a til file:</p> <pre><code>tilib -l input_til_file\n</code></pre> <p>If the <code>-c</code> switch is not specified, TILIB uses the specified til file as the input and as the output file. This mode allows you to modify existing til files.</p>"},{"location":"user-guide/type-libraries/tilib.html#how-to-create-preprocessor-macro-enums","title":"How to create preprocessor macro enums?","text":"<p>TILIB can also convert selected preprocessor macros into enums. If the input file has lines like the following:</p> <pre><code>#define MY_SYMBOL_ONE   1\n#define MY_SYMBOL_TWO   2\n#define MY_SYMBOL_THREE 3\n</code></pre> <p>they can be converted to enum and used in IDA Pro. This is a three step process. At the first step, we create a .mac file (note the <code>-M</code> switch):</p> <pre><code>tilib -c -Moutput_mac_file -hinput_header_file output_til_file\n</code></pre> <p>The second step is to edit the generated MAC file: to remove undesired macro definitions and regroup macros if necessary. Macro group names start at the beginning of a line, symbol definitions are indented:</p> <pre><code>MY_SYMBOL\n  MY_SYMBOL_ONE   1\n  MY_SYMBOL_TWO   2\n  MY_SYMBOL_THREE 3\n</code></pre> <p>Feel free to edit the macro file to your taste.</p> <p>It is also possible to describe the changes to the macro group names and rerun TILIB to regenerate the macro file. There are two ways to describe the changes:</p> <ol> <li> <p>Through the -g[nb]X:Y command-line options. If the regex X matches the macro    name (n) or the macro body (b), the group is set to Y. For example:</p> <p><code>tilib -gnFOO_:ERRORS -gbERR:ERRORS -c -Moutput_mac_file -hinput_header_file output_til_file</code></p> <p>with this header file:</p> <p>```</p> </li> <li> <p>Adding a tilib-specific #pragma to the header files:</p> <p>``` </p>"},{"location":"user-guide/type-libraries/tilib.html#define-errx-x","title":"define ERR(x)  x","text":""},{"location":"user-guide/type-libraries/tilib.html#define-foo_ok-0","title":"define FOO_OK  0","text":""},{"location":"user-guide/type-libraries/tilib.html#define-foo_bad-1","title":"define FOO_BAD 1","text":""},{"location":"user-guide/type-libraries/tilib.html#define-bar_bad-err-1","title":"define BAR_BAD ERR(-1)","text":"<p>```</p> <p>produces this macro file:</p> <p><code>ERRORS FOO_OK 0 FOO_BAD 1 BAR_BAD -1</code></p> <p>Using an empty regex will prevent the group from being created (useful when you want to leave a group name available from a base til).</p>"},{"location":"user-guide/type-libraries/tilib.html#pragma-tilib-group-errno","title":"pragma tilib-group ERRNO","text":"<p>// all macros before resetting tilib-group will be added to the ERRNO group</p>"},{"location":"user-guide/type-libraries/tilib.html#include","title":"include","text":""},{"location":"user-guide/type-libraries/tilib.html#pragma-tilib-group","title":"pragma tilib-group <p>```</p>  <li> <p>The third and last step is to specify the macro file as the input for TILIB:</p> <p><code>tilib -c -minput_mac_file -hinput_header_file output_til_file</code></p> </li>  <p>The generated til file will have all normal type definitions and all macro definitions from the .mac file.</p>","text":""},{"location":"user-guide/type-libraries/tilib.html#list-of-supported-keywords","title":"List of supported keywords","text":"<p>Below is the list of supported keywords. If your header files happen to have an unsupported keyword, you take one of the following actions:</p> <ul> <li>edit the input files and remove the unsupported keywords</li> <li>use #define to replace or hide the unsupported keywords</li> <li>use the -D command line switch for the same purpose</li> </ul> <pre><code>__cdecl     do       goto      return     protected      __ptr32\n__pascal    if       long      signed     __unaligned    __ptr64\n__stdcall   _es      cpp_this  sizeof     __userpurge    __restrict\n__fastcall  _cs      void      static     _BYTE          __hidden\n__thiscall  _ss      break     struct     _WORD          __array_ptr\n__usercall  _ds      catch     switch     _DWORD         __struct_ptr\n__export    asm      class     default    _QWORD         __return_ptr\n__import    for      const     mutable    _OWORD\n__thread    int      float     private    _TBYTE\n__declspec  new      short     typedef    _UNKNOWN\n__far       try      throw     virtual    _BOOL1\n__near      auto     union     continue   _BOOL2\n__huge      bool     while     register   _BOOL4\n__int8      case     double    template   __spoils\n__int16     char     extern    unsigned   __attribute__\n__int32     else     friend    volatile   __pure\n__int64     enum     inline    interrupt  __noreturn\n__int128    flat     public    namespace  __cppobj\n</code></pre>"},{"location":"user-guide/type-libraries/tilib.html#whats-next","title":"What's next?","text":"<p>Learn more about TILIB utility and check Igor's tip of the week about creating custom libraries.</p>"},{"location":"user-guide/type-libraries/type-libraries.html","title":"Type Libraries","text":"<p>Type libraries are collections of high-level, predefined information types for specific platform or programming languages. </p> <p>Type library may contain: - function prototypes - typedefs - structure and enum definitions</p> <p>For details about type libraries, check (Igor's tip of the week)[https://hex-rays.com/blog/igors-tip-of-the-week-60-type-libraries/]</p>"},{"location":"user-guide/type-libraries/idaclang/idaclang_tutorial.html","title":"Using the IDAClang plugin for IDA Pro","text":""},{"location":"user-guide/type-libraries/idaclang/idaclang_tutorial.html#overview","title":"Overview","text":"<p>The IDAClang plugin integrates the clang compiler frontend into IDA itself. This allows IDA to parse type information from complex C/C++/Objective-C source code and import it directly into an IDA database.</p>"},{"location":"user-guide/type-libraries/idaclang/idaclang_tutorial.html#libclang","title":"Libclang","text":"<p>IDAClang utilizes a specialized build of libclang - the opensource C API for the clang compiler. This custom library is also shipped with IDA alongside the plugin itself, so you do not need to worry about it. The plugin will find and load libclang automatically.</p> <p>Our build of libclang is from Clang v13.0, so it can handle any Objective-C syntax and anything from C++20 and earlier.</p>"},{"location":"user-guide/type-libraries/idaclang/idaclang_tutorial.html#motivation","title":"Motivation","text":"<p>IDAClang was introduced as a more robust alternative to IDA\u2019s built-in source code parser. The built-in parser can handle simple C source code, but naturally it struggles to handle complex C++ and Objective-C syntax. IDAClang solves this problem by outsourcing all the heavy lifting to a third-party library that can handle the ugly parsing operations. The plugin needs only to parse the abstract syntax tree generated by clang.</p> <p>As a result, IDAClang should be much more flexible. You can even feed it complete .cpp source files. The plugin will extract whatever useful type information it can find, and ignore the rest.</p>"},{"location":"user-guide/type-libraries/idaclang/idaclang_tutorial.html#vtables","title":"VTables","text":"<p>One big advantage of using libclang is that we can take advantage of clang\u2019s internal C++ VTable management. For example, when IDAClang parses a C++ class that looks like this:</p> <pre><code>class C\n{\n  virtual void func(void);\n};\n</code></pre> <p>The following types will be generated in the database:</p> <pre><code>struct __cppobj C\n{\n  C_vtbl *__vftable /*VFT*/;\n};\n\nstruct /*VFT*/ C_vtbl\n{\n  void (__cdecl *func)(C *this);\n};\n</code></pre> <p>To create the C_vtbl type, IDAClang traverses clang\u2019s internal VTableLayout data structure. This data structure is the same mechanism that the clang compiler uses during the actual code generation. Thus, we can be very confident that IDAClang is producing correct vtable types - even in much more complex situations. After all, clang knows what it\u2019s doing in this regard.</p> <p>Moreover, when using IDAClang to generate a type library (see Building Type Libraries with IDAClang below), the plugin will take advantage of clang\u2019s name mangling to populate the symbol table:</p> <pre><code>SYMBOLS\nFFFFFFFF 00000000 void __cdecl _ZN1C4funcEv(C *this);\n00000018 00000000 C_vtbl_layout _ZTV1C;\n\nTYPES\nstruct C_vtbl_layout\n{\n  __int64 thisOffset;\n  void *rtti;\n  void (__cdecl *func)(C *this);\n};\n</code></pre> <p>Here IDAClang created symbols for the C::func member function, as well as the mangled VTable symbol for the C class.</p>"},{"location":"user-guide/type-libraries/idaclang/idaclang_tutorial.html#templates","title":"Templates","text":"<p>Another notable advantage of using libclang is it allows us to gracefully handle C++ templates.</p> <p>For example, consider the following template declarations:</p> <pre><code>template &lt;typename T, typename V&gt; struct S\n{\n  T x;\n  V y;\n};\n\ntypedef S&lt;int, void *&gt; instance_t;\n</code></pre> <p>When clang parses the instance_t declaration, internally it will generate a structure that represents the specialized template S\\. The IDAClang plugin will then use this internal representation to generate a valid type for S\\ in IDA\u2019s type system: <pre><code>struct S&lt;int, void *&gt;\n{\n  int x;\n  void *y;\n};\n\ntypedef S&lt;int, void *&gt; instance_t;\n</code></pre> <p>The type with name S\\ represents the fully resolved structure, with all template arguments replaced. This all happens automatically, and it is especially useful in more complex situations - such as template classes containing virtual methods that depend on template parameters, resulting in specialized VTables."},{"location":"user-guide/type-libraries/idaclang/idaclang_tutorial.html#the-idaclang-ui","title":"The IDAClang UI","text":""},{"location":"user-guide/type-libraries/idaclang/idaclang_tutorial.html#enabling-the-idaclang-parser","title":"Enabling the IDAClang Parser","text":"<p>To provide support for third-party parsers, IDA now has a new Source parser field in the Options&gt;Compiler dialog:</p> <p>To enable the IDAClang parser, select the clang parser from the dropdown menu:</p> <p>As a quick sanity check, try saving the following declaration in a file called test.h:</p> <pre><code>typedef int myint_t;\n</code></pre> <p>Parse the file using menu File&gt;Load file&gt;Parse C header file. IDA should print this to the output window:</p> <pre><code>/private/tmp/test.h: successfully compiled\n</code></pre> <p>The type should now be present in the Local Types view:</p>"},{"location":"user-guide/type-libraries/idaclang/idaclang_tutorial.html#configuring-idaclang","title":"Configuring IDAClang","text":"<p>Of course, IDAClang is capable of parsing source code that is much more complex. Often times this requires more detailed configuration of the parser invocations.</p> <p>To support this, the Compiler&gt;Options dialog provides the Arguments field:</p> <p>In this field you can provide any argument you would typically provide to the clang compiler when invoking it from the command line. For example:</p> <p>One of the more important clang arguments is the -target option, which specifies the target architecture and platform. This allows clang to properly configure itself to parse macOS/Windows/Linux system headers. Clang calls this the target \"triple\" because it is often given in the form of:</p> <pre><code>-target &lt;arch&gt;-&lt;vendor&gt;-&lt;platform&gt;\n</code></pre> <p>Some examples:</p> <pre><code>-target arm64-apple-darwin\n-target x86_64-pc-win32\n-target i386-pc-linux\n</code></pre> <p>The various combinations of supported targets is documented in more detail here.</p> <p>Note that in the simple test.h example above, we did not specify a target platform. In this case clang will assume that the target platform is the same as the host machine IDA is currently running on. You can print the exact target used by clang by opening Options&gt;Compiler&gt;Parser specific options and enable the following option:</p> <p>Now when we use IDAClang to parse the test.h file, it will print a message:</p> <pre><code>IDACLANG: triple: x86_64-apple-macosx10.15.0\n</code></pre> <p>Which would be the typical output when IDA is running on macOS. On Windows the default will look something like:</p> <pre><code>IDACLANG: triple: x86_64-pc-windows-msvc19.29.30137\n</code></pre> <p>And on Linux:</p> <pre><code>IDACLANG: triple: x86_64-unknown-linux-gnu\n</code></pre> <p>Such is the default behavior within libclang, but clang supports a wide variety of platforms and architectures. You can almost always specify a target that will match the input binary in the current database.</p>"},{"location":"user-guide/type-libraries/idaclang/idaclang_tutorial.html#example-files-package","title":"Example Files Package","text":"<p>You can download all the examples referenced in this tutorial from here:</p> <p>{% file src=\"assets/examples.zip\" %}</p>"},{"location":"user-guide/type-libraries/idaclang/idaclang_tutorial.html#stl-example","title":"STL Example","text":"<p>Now let\u2019s try invoking IDAClang on some more real-world source code.</p> <p>In this example, assume we are analyzing an x64 binary that makes heavy use of the C++ Standard Template Library. Then assume that at some point we want to create a structure that looks like this:</p> <pre><code>#include &lt;string&gt;\n#include &lt;vector&gt;\n#include &lt;map&gt;\n#include &lt;set&gt;\n\nstruct stl_example_t\n{\n  std::string str;\n  std::vector&lt;int&gt; vec;\n  std::map&lt;std::string, int&gt; map;\n  std::set&lt;char&gt; set;\n};\n</code></pre> <p>This is the contents of stl/stl_example.h from examples.zip. IDA\u2019s default parser cannot handle such complex C++ syntax, so IDAClang is our only hope of importing this type. The precise configuration of IDAClang will vary between platforms, so we\u2019ll demonstrate them all separately.</p> <p>To parse stl_example.h on macOS, we\u2019ll have to point IDAClang to the macOS SDK as well as the STL system headers:</p> <pre><code>-target x86_64-apple-darwin\n-x c++\n-isysroot /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk\n-I/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1\n-I/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/11.0.3/include\n</code></pre> <p>Copy the text above into the Options&gt;Compiler&gt;Arguments field.</p> <p>Note that we point IDAClang to the macOS SDK with the -isysroot option and use the -I option to allow IDAClang to find the proper system headers in the Xcode toolchain. Be wary of the last option (ending with usr/lib/clang/11.0.3/include). This path contains the clang version number, so it might be different on your machine. Also make special note of the -x c++ option. This is used to inform libclang that the input source will not be plain C, which is the default syntax for .h files in libclang.</p> <p>Now we can use File&gt;Load file&gt;Parse C header file to parse stl_example.h. This will generate a useful type for stl_example_t in our database:</p> <p>On Windows the configuration is a bit different. If you\u2019re using Visual Studio, libclang is normally able to detect common header paths automatically.</p> <p>Thus you will likely only need to specify the following arguments in Options&gt;Compiler&gt;Arguments:</p> <pre><code>-target x86_64-pc-win32 -x c++\n</code></pre> <p>Ideally this will be enough to parse stl_example.h and generate some useful type info:</p> <p>If for whatever reason the heuristics within libclang fail to find the headers on your system, it is very easy to specify the header paths manually. Simply open a Visual Studio x64 Command Prompt and run the following command:</p> <pre><code>echo %INCLUDE%\n</code></pre> <p>This will print a semicolon-separated list of the header paths used on your system:</p> <p>This list can be copied directly into the Options&gt;Compiler&gt;Include directories field in IDA. IDAClang will automatically process this list and pass the header paths to clang upon invocation of the parser. This is likely enough to handle most Windows-based source code.</p> <p>On Linux you can determine the header paths used your system by running the following command:</p> <pre><code>cpp -v\n</code></pre> <p>This will print something like:</p> <pre><code>#include &lt;...&gt; search starts here:\n /usr/lib/gcc/x86_64-linux-gnu/6/include\n /usr/local/include\n /usr/lib/gcc/x86_64-linux-gnu/6/include-fixed\n /usr/include/x86_64-linux-gnu\n /usr/include\n</code></pre> <p>You can then use these arguments in the Options&gt;Compiler&gt;Arguments field in IDA:</p> <pre><code>-target x86_64-pc-linux-gnu\n-x c++\n-I/usr/lib/gcc/x86_64-linux-gnu/6/include\n-I/usr/local/include\n-I/usr/lib/gcc/x86_64-linux-gnu/6/include-fixed\n-I/usr/include/x86_64-linux-gnu\n-I/usr/include\n</code></pre> <p>Then use File&gt;Load file&gt;Parse C header file to parse stl_example.h.</p>"},{"location":"user-guide/type-libraries/idaclang/idaclang_tutorial.html#invoking-idaclang-from-idapython","title":"Invoking IDAClang from IDAPython","text":"<p>Like any good IDA feature, IDAClang can also be invoked from an IDAPython script.</p> <p>IDA 7.7 introduced the ida_srclang module to provide simple support for invoking third-party parsers from IDAPython. Use the following IDAPython commands for an overview of this new module:</p> <pre><code>import ida_srclang\n? ida_srclang\n? ida_srclang.parse_decls_with_parser\n? ida_srclang.set_parser_argv\n</code></pre> <p>The function ida_srclang.parse_decls_with_parser can notably be used to parse source code snippets:</p> <pre><code>Python&gt;? ida_srclang.parse_decls_with_parser\nHelp on function parse_decls_with_parser in module ida_srclang:\nparse_decls_with_parser(*args) -&gt; 'int'\n    Parse type declarations using the parser with the specified name\n    @param parser_name: (C++: const char *) name of the target parser\n    @param til: (C++: til_t *) type library to store the types\n    @param input: (C++: const char *) input source. can be a file path or decl string\n    @param is_path: (C++: bool) true if input parameter is a path to a source file, false if the\n                    input is an in-memory source snippet\n    @retval -1: no parser was found with the given name\n    @retval else: the number of errors encountered in the input source\n</code></pre> <p>If the is_path argument is False, this function will assume the input argument is a string that represents a source code snippet. Otherwise it will be considered a path to a source file on disk. Also note the til parameter, which will often times be None. This ensures the parsed types are imported directly into the current database.</p>"},{"location":"user-guide/type-libraries/idaclang/idaclang_tutorial.html#examples","title":"Examples","text":"<p>IMPORANT NOTE: when libclang parses in-memory strings, it makes no assumptions about the expected syntax. Thus, you must specify the -x option to tell clang which syntax to expect before invoking the parser. Here are the the known syntax directives:</p> <pre><code>-x c\n-x c++\n-x objective-c\n-x objective-c++\n</code></pre> <p>For example, this is how you would use ida_srclang to parse a simple C source string with IDAClang:</p> <pre><code>import ida_srclang\n# tell clang the expected syntax\nida_srclang.set_parser_argv(\"clang\", \"-x c\")\n# parse a type string\nida_srclang.parse_decls_with_parser(\"clang\", None, \"typedef int myint_t;\", False)\n</code></pre>"},{"location":"user-guide/type-libraries/idaclang/idaclang_tutorial.html#stl-example-revisited","title":"STL Example Revisited","text":"<p>We can also handle the same STL example discussed previously, but this time parse stl_example_t as a source snippet:</p> <pre><code>import ida_srclang\n\nclang_argv = [\n  \"-target x86_64-apple-darwin\",\n  \"-x c++\",\n  \"-isysroot /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk\",\n  \"-I/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1\",\n  \"-I/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/11.0.3/include\",\n  ]\nida_srclang.set_parser_argv(\"clang\", \" \".join(clang_argv))\n\ndecl = \"\"\"\n#include &lt;string&gt;\n#include &lt;vector&gt;\n#include &lt;map&gt;\n#include &lt;set&gt;\n\nstruct stl_example_t\n{\n  std::string str;\n  std::vector&lt;int&gt; vec;\n  std::map&lt;std::string, int&gt; map;\n  std::set&lt;char&gt; set;\n};\n\"\"\"\nida_srclang.parse_decls_with_parser(\"clang\", None, decl, False)\n</code></pre> <p>This should produce an identical result as before when we used File&gt;Load file&gt;Parse C header file for stl_example.h.</p>"},{"location":"user-guide/type-libraries/idaclang/idaclang_tutorial.html#boost-example","title":"Boost Example","text":"<p>In this example we will show how IDAClang can be used in batch mode to improve the analysis of a binary compiled from Boost headers. The experiment will be performed on Debian Linux with gcc 6.3.0.</p> <p>Consider the following source files from the boost/ directory in examples.zip:</p> <ul> <li>chat_server.cpp</li> <li>chat_message.hpp</li> </ul> <p>These sources were taken directly from the Boost 1.77 examples, and we\u2019ll use them to compile a test binary. Begin by downloading the Boost 1.77.0 headers, then compile the chat_server application:</p> <pre><code>g++ -I boost_1_77_0 -std=c++11 -o chat_server.elf chat_server.cpp -lpthread\n</code></pre> <p>Since Boost is a template library, it will generate a bloated binary that contains thousands of instantiated template functions. Thus, IDA\u2019s initial analysis of chat_server.elf will likely not be very pretty. How can IDAClang help us with this? Consider boost/chat_server.py from examples.zip:</p> <pre><code>import sys\nimport ida_pro\nimport ida_auto\nimport ida_srclang\n\nclang_argv = {\n  \"-target x86_64-pc-linux\",\n  \"-x c++\",\n  \"-std=c++11\",\n  \"-I./boost_1_77_0\",\n  # NOTE: include paths were copied from the output of `cpp -v`. they might differ on your machine.\n  \"-I/usr/lib/gcc/x86_64-linux-gnu/6/include\",\n  \"-I/usr/local/include\",\n  \"-I/usr/lib/gcc/x86_64-linux-gnu/6/include-fixed\",\n  \"-I/usr/include/x86_64-linux-gnu\",\n  \"-I/usr/include\",\n}\n\n# invoke the clang parser\nida_srclang.set_parser_argv(\"clang\", \" \".join(clang_argv))\nida_srclang.parse_decls_with_parser(\"clang\", None, \"./chat_server.cpp\", True)\n\n# analyze the input file\nida_auto.auto_mark_range(0, BADADDR, AU_FINAL)\nida_auto.auto_wait()\n\n# save and exit\nida_pro.qexit(0)\n</code></pre> <p>This script will configure IDAClang to parse the chat_server.cpp source file and extract any type information it finds, then analyze the input with the imported type info, and saves the resulting database in chat_server.i64. You can run the script like this:</p> <pre><code>idat64 -c -A -Schat_server.py -Oidaclang:t -ochat_server.i64 -Lchat_server.log chat_server.elf\n</code></pre> <p>You may have noticed this option:</p> <pre><code>-Oidaclang:t\n</code></pre> <p>This option is passed to the IDAClang plugin and it enables CLANG_APPLY_TINFO (see idaclang.cfg for more info).</p> <p>Now let\u2019s open the resulting database chat_server.i64 in IDA, and try decompiling some functions. Immediately we see that the analysis does benefit from the imported type info. For example chat_session::do_write seems somewhat intelligible after some minor simplifications:</p> <p>Since IDAClang parsed the chat_session class, we now have a correct prototype for chat_session:do_write, as well as a valid chat_session structure. Note that references to chat_session.write_msgs_ (std::deque\\) and chat_session.socket (boost::asio::ip::tcp::socket) were correctly resolved. <p>Granted, this is not the most realistic example. It\u2019s not often we have access to the full source code of the target binary, but hopefully this shows that whenever any relevant source code is available, IDAClang can take full advantage.</p>"},{"location":"user-guide/type-libraries/idaclang/idaclang_tutorial.html#building-type-libraries-with-idaclang","title":"Building Type Libraries with IDAClang","text":"<p>The IDAClang plugin is useful for enriching your database with complex type information, but often times the imported types are relevant to more than just one database. In this section we discuss how you can use IDAClang to generate rich, generic type libraries for IDA Pro.</p> <p>Hex-Rays also provides a command-line version of IDAClang(which you can download from our Customer Portal), specifically designed for building custom Type Information Libraries (TILs) that can be loaded into any IDA database.</p> <p>After downloading the idaclang binary, copy it to the idabin/ directory of your IDA installation (next to the libclang dll).</p> <p>For an overview of idaclang\u2019s functionality, run:</p> <pre><code>idaclang -h\n</code></pre> <p>For a quick demonstration, save the following source in a file named test.h:</p> <pre><code>class C\n{\n  virtual void func(void);\n};\n</code></pre> <p>You can compile this header into a type library by invoking idaclang the same way you would typically invoke the clang compiler from the command line:</p> <pre><code>idaclang -x c++ -target x86_64-pc-linux test.h\n</code></pre> <p>This will generate a file called test.til that contains all types that were parsed in test.h. Try dumping the TIL with the tilib utility.</p> <pre><code>tilib -l /tmp/test.til\n\nTYPE INFORMATION LIBRARY CONTENTS\nDescription:\nFlags      : 0107 compressed macro_table_present extended_sizeof_info sizeof_long_double\nBase tils  :\nCompiler   : GNU C++\nsizeof(near*) = 8 sizeof(far*) = 8 near code, near data, cdecl\ndefault_align = 0 sizeof(bool) = 1 sizeof(long)  = 8 sizeof(llong) = 8\nsizeof(enum) = 4 sizeof(int) = 4 sizeof(short) = 2\nsizeof(long double) = 16\nSYMBOLS\nFFFFFFFF 00000000 void __cdecl ZN1C4funcEv(C *__hidden this);\n00000018 00000000 C_vtbl_layout ZTV1C;\nTYPES\n00000008 struct __cppobj C {C_vtbl *__vftable /*VFT*/;};\n00000008 struct /*VFT*/ C_vtbl {void (__cdecl *func)(C *__hidden this);};\n00000018 struct C_vtbl_layout {__int64 thisOffset;void *rtti;void (__cdecl *func)(C *__hidden this);};\nMACROS\nTotal 2 symbols, 3 types, 0 macros\n</code></pre> <p>The tool also provides extra arguments to configure the til generation. They are given the --idaclang- prefix so they can be easily separated from the clang arguments. For example:</p> <pre><code>idaclang --idaclang-tilname /tmp/test2.til -x c++ -target x86_64-pc-linux test.h\n</code></pre> <p>This will create the library at /tmp/test2.til, instead of the default location.</p> <p>Now let\u2019s try building some type libraries from real-world code. The examples in this section will demonstrate the power of IDAClang by creating TILs from many different opensource C++ projects. They cover a large variety of platforms, architectures, and codebases, so it is best to unify the build system using makefiles.</p> <p>At the top level of examples.zip there should be a makefile named idaclang.mak:</p> <pre><code>IDACLANG_ARGS += --idaclang-log-all\nIDACLANG_ARGS += --idaclang-tilname $(TIL_NAME)\nIDACLANG_ARGS += --idaclang-tildesc $(TIL_DESC)\n\nCLANG_ARGV += -ferror-limit=50\n\nall: $(TIL_NAME)\n.PHONY: all $(TIL_NAME) clean\n$(TIL_NAME): $(TIL_NAME).til\n\n$(TIL_NAME).til: $(TIL_NAME).mak $(INPUT_FILE)\n    idaclang $(IDACLANG_ARGS) $(CLANG_ARGV) $(INPUT_FILE) &gt; $(TIL_NAME).log\n    tilib64 -ls $(TIL_NAME).til &gt; $(TIL_NAME).til.txt\n\nclean:\n    rm -rf *.til *.txt *.log\n</code></pre> <p>This makefile defines a simple rule for building a TIL using the idaclang command-line utility. It will be used extensively in the following examples.</p>"},{"location":"user-guide/type-libraries/idaclang/idaclang_tutorial.html#idasdk","title":"IDASDK","text":"<p>Hex-Rays publishes an SDK for developing custom IDA plugins, which is comprised mostly of C++ header files. Thus, it is a perfect use case for IDAClang. In this example we will build a type library for IDA itself, using IDA SDK, which the latest version you can download from Customer Portal.</p> <p>After downloading idasdk.zip, unzip it into the idasdk subdirectory of examples.zip.</p> <p>To build this TIL we only need to create a single header file that includes all headers from the IDA SDK, and then parse this file with idaclang. See examples/idasdk/idasdk.h, which contains include directives for all files in idasdk77/include (they happen to be in alphabetical order, but the order shouldn\u2019t matter much):</p> <pre><code>#include &lt;auto.hpp&gt;\n#include &lt;bitrange.hpp&gt;\n#include &lt;bytes.hpp&gt;\n// ... etc\n#include &lt;typeinf.hpp&gt;\n#include &lt;ua.hpp&gt;\n#include &lt;xref.hpp&gt;\n</code></pre> <p>The IDAClang configuration required to parse idasdk.h is highly platform-dependent, so we provide separate makefiles for each of IDA\u2019s supported platforms.</p> <p>To demonstrate how we might build idasdk.h on MacOSX, see examples/idasdk/idasdk_mac_x64.mak:</p> <pre><code>TIL_NAME = idasdk_mac_x64\nTIL_DESC = \"IDA SDK headers for MacOSX\"\nINPUT_FILE = idasdk.h\nSDK = /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.15.sdk\nTOOLCHAIN = /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain\nCLANG_ARGV = -target x86_64-apple-darwin                 \\\n             -x objective-c++                            \\\n             -isysroot $(SDK)                            \\\n             -I$(TOOLCHAIN)/usr/include/c++/v1           \\\n             -I$(TOOLCHAIN)/usr/lib/clang/11.0.3/include \\\n             -I./idasdk77/include/                       \\\n             -D__MAC__                                   \\\n             -D__EA64__                                  \\\n             -Wno-nullability-completeness\n\ninclude ../idaclang.mak\n</code></pre> <p>You can build the TIL with:</p> <pre><code>make -f idasdk_mac_x64.mak\n</code></pre> <p>This will generate a type library named idasdk_mac_x64.til, along with a dump of the til contents in idasdk_mac_x64.til.txt. In the text dump we might notice some familiar types:</p> <pre><code>00000010 struct __cppobj range_t\n{\n  ea_t start_ea;\n  ea_t end_ea;\n};\n//  0. 0000 0008 effalign(8) fda=0 bits=0000 range_t.start_ea ea_t;\n//  1. 0008 0008 effalign(8) fda=0 bits=0000 range_t.end_ea ea_t;\n//          0010 effalign(8) sda=0 bits=0080 range_t struct packalign=0\n\n00000050 struct __cppobj memory_info_t : range_t\n{\n  qstring name;\n  qstring sclass;\n  ea_t sbase;\n  uchar bitness;\n  uchar perm;\n};\n//  0. 0000 0010 effalign(8) fda=0 bits=0020 memory_info_t.range_t range_t;\n//  1. 0010 0018 effalign(8) fda=0 bits=0000 memory_info_t.name qstring;\n//  2. 0028 0018 effalign(8) fda=0 bits=0000 memory_info_t.sclass qstring;\n//  3. 0040 0008 effalign(8) fda=0 bits=0000 memory_info_t.sbase ea_t;\n//  4. 0048 0001 effalign(1) fda=0 bits=0000 memory_info_t.bitness uchar;\n//  5. 0049 0001 effalign(1) fda=0 bits=0000 memory_info_t.perm uchar;\n//          004A unpadded_size\n//          0050 effalign(8) sda=0 bits=0080 memory_info_t struct packalign=0\n</code></pre> <p>It\u2019s worth building a separate til for both x64 and arm64 macOS. IDA\u2019s source code is not very architecture dependent, but many system headers might be. So it\u2019s best to be as precise as possible.</p> <p>To build this TIL on macOS12 for Apple Silicon, the approach is very similar:</p> <pre><code>TIL_NAME = idasdk_mac_arm64\nTIL_DESC = \"IDA SDK headers for arm64 macOS 12\"\nINPUT_FILE = idasdk.h\nSDK = /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.0.sdk\nTOOLCHAIN = /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain\nCLANG_ARGV = -target arm64-apple-darwin                  \\\n             -x objective-c++                            \\\n             -isysroot $(SDK)                            \\\n             -I$(TOOLCHAIN)/usr/lib/clang/13.0.0/include \\\n             -I./idasdk77/include/                       \\\n             -D__MAC__                                   \\\n             -D__EA64__                                  \\\n             -D__ARM__                                   \\\n             -Wno-nullability-completeness\n\ninclude ../idaclang.mak\n</code></pre> <p>Note that we did not provide the path to the C++ STL headers like we did in idasdk_mac_x64.mak. On macOS12 the C++ headers are shipped within MacOSX12.0.sdk, so there is no need to explicitly tell idaclang where to find them.</p> <p>To parse idasdk.h on Windows, use examples/idasdk/idasdk_win.mak:</p> <pre><code>TIL_NAME = idasdk_win\nTIL_DESC = \"IDA SDK headers for x64 Windows\"\nINPUT_FILE = idasdk.h\nCLANG_ARGV = -target x86_64-pc-win32       \\\n             -x c++                        \\\n             -I./idasdk77/include          \\\n             -D__NT__                      \\\n             -D__EA64__                    \\\n             -Wno-nullability-completeness\n\ninclude ../idaclang.mak\n</code></pre> <p>Normally we do not need to specify any include paths, since idaclang can find the Visual Studio headers automatically. If it can\u2019t, you can always explicitly provide include paths with the -I option.</p> <p>Building idasdk.h on Linux is also fairly straightforward. See idasdk_linux.mak:</p> <pre><code>TIL_NAME = idasdk_linux\nTIL_DESC = \"IDA SDK headers for x64 linux\"\nINPUT_FILE = idasdk.h\nGCC_VERSION = $(shell expr `gcc -dumpversion | cut -f1 -d.`)\nCLANG_ARGV = -target x86_64-pc-linux                                      \\\n             -x c++                                                       \\\n             -I/usr/lib/gcc/x86_64-linux-gnu/$(GCC_VERSION)/include       \\\n             -I/usr/local/include                                         \\\n             -I/usr/lib/gcc/x86_64-linux-gnu/$(GCC_VERSION)/include-fixed \\\n             -I/usr/include/x86_64-linux-gnu                              \\\n             -I/usr/include                                               \\\n             -I./idasdk77/include/                                        \\\n             -D__LINUX__                                                  \\\n             -D__EA64__                                                   \\\n             -Wno-nullability-completeness\n\ninclude ../idaclang.mak\n</code></pre> <p>You can also include the decompiler types from the hexrays SDK in the type library for your version of idasdk. Simply copy hexrays.hpp from hexrays_sdk/ in your IDA installation to idasdkXX/include/, then add this line to idasdk.h:</p> <pre><code>#include &lt;hexrays.hpp&gt;\n</code></pre> <p>Then rebuild the TIL. It will likely yield some useful decompiler types:</p> <pre><code>00000050 struct __cppobj minsn_t\n{\n  mcode_t opcode;\n  int iprops;\n  minsn_t *next;\n  minsn_t *prev;\n  ea_t ea;\n  mop_t l;\n  mop_t r;\n  mop_t d;\n};\n//  0. 0000 0004 effalign(4) fda=0 bits=0000 minsn_t.opcode mcode_t;\n//  1. 0004 0004 effalign(4) fda=0 bits=0000 minsn_t.iprops int;\n//  2. 0008 0008 effalign(8) fda=0 bits=0000 minsn_t.next minsn_t *;\n//  3. 0010 0008 effalign(8) fda=0 bits=0000 minsn_t.prev minsn_t *;\n//  4. 0018 0008 effalign(8) fda=0 bits=0000 minsn_t.ea ea_t;\n//  5. 0020 0010 effalign(8) fda=0 bits=0000 minsn_t.l mop_t;\n//  6. 0030 0010 effalign(8) fda=0 bits=0000 minsn_t.r mop_t;\n//  7. 0040 0010 effalign(8) fda=0 bits=0000 minsn_t.d mop_t;\n//          0050 effalign(8) sda=0 bits=0080 minsn_t struct packalign=0\n\n00000028 struct __cppobj minsn_visitor_t : op_parent_info_t\n{\n  minsn_visitor_t_vtbl *__vftable /*VFT*/;\n};\n//  0. 0000 0008 effalign(8) fda=0 bits=0100 minsn_visitor_t.__vftable minsn_visitor_t_vtbl *;\n//  1. 0008 0020 effalign(8) fda=0 bits=0020 minsn_visitor_t.op_parent_info_t op_parent_info_t;\n//          0028 effalign(8) sda=0 bits=0080 minsn_visitor_t struct packalign=0\n</code></pre>"},{"location":"user-guide/type-libraries/idaclang/idaclang_tutorial.html#qt","title":"Qt","text":"<p>In this example we will build a type library for the Qt Opensource UI Framework. The example uses Qt 5.15.2, but theoretically it can work for any Qt version. We assume you already have a Qt installation present on your system (See the QTDIR variable in the following makefiles).</p> <p>Let\u2019s start by creating a file that includes as many Qt headers as we can. Qt makes this easy because they ship \"umbrella\" headers for the various sub-frameworks, which take care of including most of the critical Qt header files.</p> <p>See examples/qt/qt.h from examples.zip:</p> <pre><code>#include &lt;QtCore&gt;\n#include &lt;QtGui&gt;\n#include &lt;QtWidgets&gt;\n#include &lt;QtPrintSupport&gt;\n#include &lt;QtNetwork&gt;\n#include &lt;QtConcurrent&gt;\n#include &lt;QtDBus&gt;\n#include &lt;QtDesigner&gt;\n#include &lt;QtDesignerComponents&gt;\n#include &lt;QtHelp&gt;\n#include &lt;QtOpenGL&gt;\n#include &lt;QtSql&gt;\n#include &lt;QtTest&gt;\n#include &lt;QtUiPlugin&gt;\n#include &lt;QtXml&gt;\n</code></pre> <p>This will be more than enough to get started.</p> <p>To build qt.h on macOS, consider examples/qt/qt_mac.mak:</p> <pre><code>TIL_NAME = qt_mac\nTIL_DESC = \"Qt 5.15.2 headers for x64 macOS\"\nINPUT_FILE = qt.h\nQTDIR = /Users/Shared/Qt/5.15.2-x64\nSDK = /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.15.sdk\nTOOLCHAIN = /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/\nCLANG_ARGV = -target x86_64-apple-darwin                           \\\n             -x objective-c++                                      \\\n             -isysroot $(SDK)                                      \\\n             -I$(TOOLCHAIN)/usr/include/c++/v1                     \\\n             -I$(TOOLCHAIN)/usr/lib/clang/11.0.3/include           \\\n             -F$(QTDIR)/lib/                                       \\\n             -I$(QTDIR)/lib/QtCore.framework/Headers               \\\n             -I$(QTDIR)/lib/QtGui.framework/Headers                \\\n             -I$(QTDIR)/lib/QtWidgets.framework/Headers            \\\n             -I$(QTDIR)/lib/QtPrintSupport.framework/Headers       \\\n             -I$(QTDIR)/lib/QtNetwork.framework/Headers            \\\n             -I$(QTDIR)/lib/QtCLucene.framework/Headers            \\\n             -I$(QTDIR)/lib/QtConcurrent.framework/Headers         \\\n             -I$(QTDIR)/lib/QtDBus.framework/Headers               \\\n             -I$(QTDIR)/lib/QtDesigner.framework/Headers           \\\n             -I$(QTDIR)/lib/QtDesignerComponents.framework/Headers \\\n             -I$(QTDIR)/lib/QtHelp.framework/Headers               \\\n             -I$(QTDIR)/lib/QtOpenGL.framework/Headers             \\\n             -I$(QTDIR)/lib/QtSql.framework/Headers                \\\n             -I$(QTDIR)/lib/QtTest.framework/Headers               \\\n             -I$(QTDIR)/lib/QtUiPlugin.framework/Headers           \\\n             -I$(QTDIR)/lib/QtXml.framework/Headers\n\ninclude ../idaclang.mak\n</code></pre> <p>For the Qt build we must explicitly add the Headers/ directory for each Qt framework to the include paths. Also pay special attention to the -F$(QTDIR)/lib/ option. This option is specific to macOS and informs libclang that the given directory contains .framework bundles. This is necessary for some include directives to be resolved correctly, e.g.:</p> <pre><code>#include &lt;QtCore/QtCoreDepends&gt;\n</code></pre> <p>Now we can build the TIL with:</p> <pre><code>make -f qt_mac.mak\n</code></pre> <p>We might want to check qt_mac.til.txt to see if some core Qt types were correctly added to the TIL:</p> <pre><code>00000010 struct __cppobj QObject\n{\n  QObject_vtbl *__vftable /*VFT*/;\n  QScopedPointer&lt;QObjectData&gt; d_ptr;\n};\n//  0. 0000 0008 effalign(8) fda=0 bits=0100 QObject.__vftable QObject_vtbl *;\n//  1. 0008 0008 effalign(8) fda=0 bits=0000 QObject.d_ptr QScopedPointer&lt;QObjectData&gt;;\n//          0010 effalign(8) sda=0 bits=0080 QObject struct packalign=0\n\n00000030 struct __cppobj QWidget : QObject, QPaintDevice\n{\n  QWidgetData *data;\n};\n//  0. 0000 0010 effalign(8) fda=0 bits=0020 QWidget.QObject QObject;\n//  1. 0010 0018 effalign(8) fda=0 bits=0020 QWidget.QPaintDevice QPaintDevice;\n//  2. 0028 0008 effalign(8) fda=0 bits=0000 QWidget.data QWidgetData *;\n//          0030 effalign(8) sda=0 bits=0080 QWidget struct packalign=0\n</code></pre> <p>To build the Qt type library on Windows, use examples/qt/qt_win.mak:</p> <pre><code>TIL_NAME = qt_win\nTIL_DESC = \"Qt 5.15.2 headers for x64 Windows\"\nINPUT_FILE = qt.h\nQTDIR = C:\\Qt\\5.15.2-x64\nCLANG_ARGV = -target x86_64-pc-win32                   \\\n             -x c++                                    \\\n             -I\"$(QTDIR)\\include\"                      \\\n             -I\"$(QTDIR)\\include\\QtCore\"               \\\n             -I\"$(QTDIR)\\include\\QtGui\"                \\\n             -I\"$(QTDIR)\\include\\QtWidgets\"            \\\n             -I\"$(QTDIR)\\include\\QtPrintSupport\"       \\\n             -I\"$(QTDIR)\\include\\QtNetwork\"            \\\n             -I\"$(QTDIR)\\include\\QtConcurrent\"         \\\n             -I\"$(QTDIR)\\include\\QtDBus\"               \\\n             -I\"$(QTDIR)\\include\\QtDesigner\"           \\\n             -I\"$(QTDIR)\\include\\QtDesignerComponents\" \\\n             -I\"$(QTDIR)\\include\\QtHelp\"               \\\n             -I\"$(QTDIR)\\include\\QtOpenGL\"             \\\n             -I\"$(QTDIR)\\include\\QtSql\"                \\\n             -I\"$(QTDIR)\\include\\QtTest\"               \\\n             -I\"$(QTDIR)\\include\\QtUiPlugin\"           \\\n             -I\"$(QTDIR)\\include\\QtXml\"\n\ninclude ../idaclang.mak\n</code></pre> <p>And on Linux, use examples/qt/qt_linux.mak:</p> <pre><code>TIL_NAME = qt_linux\nTIL_DESC = \"Qt 5.15.2 headers for x64 Linux\"\nINPUT_FILE = qt.h\nQTDIR = /usr/local/Qt/5.15.2-x64\nGCC_VERSION = $(shell expr `gcc -dumpversion | cut -f1 -d.`)\nCLANG_ARGV = -target x86_64-pc-linux                                      \\\n             -x c++                                                       \\\n             -I/usr/lib/gcc/x86_64-linux-gnu/$(GCC_VERSION)/include       \\\n             -I/usr/local/include                                         \\\n             -I/usr/lib/gcc/x86_64-linux-gnu/$(GCC_VERSION)/include-fixed \\\n             -I/usr/include/x86_64-linux-gnu                              \\\n             -I/usr/include                                               \\\n             -I$(QTDIR)/include                                           \\\n             -I$(QTDIR)/include/QtCore                                    \\\n             -I$(QTDIR)/include/QtGui                                     \\\n             -I$(QTDIR)/include/QtWidgets                                 \\\n             -I$(QTDIR)/include/QtPrintSupport                            \\\n             -I$(QTDIR)/include/QtNetwork                                 \\\n             -I$(QTDIR)/include/QtConcurrent                              \\\n             -I$(QTDIR)/include/QtDBus                                    \\\n             -I$(QTDIR)/include/QtDesigner                                \\\n             -I$(QTDIR)/include/QtDesignerComponents                      \\\n             -I$(QTDIR)/include/QtHelp                                    \\\n             -I$(QTDIR)/include/QtOpenGL                                  \\\n             -I$(QTDIR)/include/QtSql                                     \\\n             -I$(QTDIR)/include/QtTest                                    \\\n             -I$(QTDIR)/include/QtUiPlugin                                \\\n             -I$(QTDIR)/include/QtXml\n\ninclude ../idaclang.mak\n</code></pre>"},{"location":"user-guide/type-libraries/idaclang/idaclang_tutorial.html#linux-kernel","title":"Linux Kernel","text":"<p>This section demonstrates how to build a type library from the Linux Kernel headers.</p> <p>First you must ensure that you have the kernel headers installed on your system:</p> <pre><code>apt-get install linux-headers-`uname -r`\n</code></pre> <p>As well as the tools necessary to build against them:</p> <pre><code>apt-get install build-essential\n</code></pre> <p>The tricky part about building a TIL for the Linux kernel is configuring the correct include paths. The kernel header directory structure is not consistent between different distros, so there is no one configuration that works on all machines. We\u2019ve found that the easiest way to discover the correct kernel header paths on your system is to build a trivial Linux kernel module, then copy the paths used within the kernel build system.</p> <p>Consider examples/linux/lkm_example/lkm_example.c from examples.zip:</p> <pre><code>#include &lt;linux/init.h&gt;\n#include &lt;linux/module.h&gt;\n#include &lt;linux/kernel.h&gt;\n\nMODULE_LICENSE(\"GPL\");\nMODULE_AUTHOR(\"Robert W. Oliver II\");\nMODULE_DESCRIPTION(\"A simple example Linux module.\");\nMODULE_VERSION(\"0.01\");\n\nstatic int __init lkm_example_init(void)\n{\n  printk(KERN_INFO \"Hello, world!\\n\");\n  return 0;\n}\n\nstatic void __exit lkm_example_exit(void)\n{\n  printk(KERN_INFO \"Goodbye, world\\n\");\n}\n\nmodule_init(lkm_example_init);\nmodule_exit(lkm_example_exit);\n</code></pre> <p>This is a simple kernel module taken from this tutorial. It can be built with:</p> <pre><code>cd lkm_example/\nmake\n</code></pre> <p>After building, you may notice that the kernel build system added many hidden files to the build directory. One of them being .lkm_example.o.cmd. This file contains the gcc command used to compile the kernel module source file. It will contain many important compiler switches that we will need to copy over to idaclang, including the proper include paths:</p> <pre><code>-I./arch/x86/include -I./arch/x86/include/generated  -I./include -I./arch/x86/include/uapi\n</code></pre> <p>These paths are relative to the directory:</p> <pre><code>/usr/src/linux-headers-$(uname -r)\n</code></pre> <p>We will need to copy them to idaclang as absolute paths. For example, consider examples/linux/linux_kernel_5_11.mak:</p> <pre><code>TIL_NAME = linux_kernel_5_11\nTIL_DESC = \"Linux kernel headers for 5.11.0-41-generic (Ubuntu 20.04)\"\nINPUT_FILE = linux.h\nKERNEL_HEADERS = /usr/src/linux-headers-5.11.0-41-generic\nCLANG_ARGV = -target x86_64-pc-linux-gnu                               \\\n             -nostdinc                                                 \\\n             -isystem /usr/lib/gcc/x86_64-linux-gnu/9/include          \\\n             -I$(KERNEL_HEADERS)/arch/x86/include                      \\\n             -I$(KERNEL_HEADERS)/arch/x86/include/generated            \\\n             -I$(KERNEL_HEADERS)/include                               \\\n             -I$(KERNEL_HEADERS)/arch/x86/include/uapi                 \\\n             -I$(KERNEL_HEADERS)/arch/x86/include/generated/uapi       \\\n             -I$(KERNEL_HEADERS)/include/uapi                          \\\n             -I$(KERNEL_HEADERS)/include/generated/uapi                \\\n             -include $(KERNEL_HEADERS)/include/linux/compiler_types.h \\\n             -D__KERNEL__                                              \\\n             -O2                                                       \\\n             -mfentry                                                  \\\n             -DCC_USING_FENTRY                                         \\\n             -Wno-gnu-variable-sized-type-not-at-end\n\ninclude ../idaclang.mak\n</code></pre> <p>This is a makefile we used to successfully generate a Linux kernel TIL on Ubuntu 20.04. The input file linux.h contains include directives for a few interesting kernel header files:</p> <pre><code>#include &lt;linux/kconfig.h&gt;\n#include &lt;linux/init.h&gt;\n#include &lt;linux/module.h&gt;\n#include &lt;linux/kernel.h&gt;\n#include &lt;linux/acpi.h&gt;\n#include &lt;linux/fs.h&gt;\n#include &lt;linux/efi.h&gt;\n#include &lt;linux/bpf.h&gt;\n#include &lt;linux/usb.h&gt;\n#include &lt;linux/kmod.h&gt;\n#include &lt;linux/device.h&gt;\n#include &lt;linux/blkdev.h&gt;\n</code></pre> <p>It is not an exhaustive list. You can easily make the TIL more robust by adding more headers to linux.h, but for demonstration purposes this is enough to get the ball rolling.</p> <p>Inspecting the dump of the til we can see some important kernel types have already been added:</p> <pre><code>struct kobject\n{\n  const char *name;\n  list_head entry;\n  kobject *parent;\n  kset *kset;\n  kobj_type *ktype;\n  kernfs_node *sd;\n  kref kref;\n  unsigned __int32 state_initialized : 1;\n  unsigned __int32 state_in_sysfs : 1;\n  unsigned __int32 state_add_uevent_sent : 1;\n  unsigned __int32 state_remove_uevent_sent : 1;\n  unsigned __int32 uevent_suppress : 1;\n};\n\nstruct kset\n{\n  list_head list;\n  spinlock_t list_lock;\n  kobject kobj;\n  const kset_uevent_ops *uevent_ops;\n};\n</code></pre> <p>On Debian Linux the configuration is slightly different. The kernel header package tends to be split across multiple root directories. We must let idaclang know about both of them. See examples/linux/linux_kernel_4_9.mak:</p> <pre><code>TIL_NAME = linux_kernel_4_9\nTIL_DESC = \"Linux kernel headers for 4.9.0-16-amd64 (Debian 9.13)\"\nINPUT_FILE = linux.h\nKERNEL_HEADERS1 = /usr/src/linux-headers-4.9.0-16-common\nKERNEL_HEADERS2 = /usr/src/linux-headers-4.9.0-16-amd64\nCLANG_ARGV = -target x86_64-pc-linux-gnu                          \\\n             -nostdinc                                            \\\n             -isystem /usr/lib/gcc/x86_64-linux-gnu/6/include     \\\n             -I$(KERNEL_HEADERS1)/arch/x86/include                \\\n             -I$(KERNEL_HEADERS1)/include                         \\\n             -I$(KERNEL_HEADERS1)/arch/x86/include/uapi           \\\n             -I$(KERNEL_HEADERS1)/include/uapi                    \\\n             -I$(KERNEL_HEADERS2)/arch/x86/include/generated/uapi \\\n             -I$(KERNEL_HEADERS2)/arch/x86/include/generated      \\\n             -I$(KERNEL_HEADERS2)/include                         \\\n             -I$(KERNEL_HEADERS2)/include/generated/uapi          \\\n             -D__KERNEL__                                         \\\n             -O2                                                  \\\n             -mfentry                                             \\\n             -DCC_USING_FENTRY                                    \\\n             -Wno-gnu-variable-sized-type-not-at-end\n\ninclude ../idaclang.mak\n</code></pre> <p>We used this makefile to generate a Linux kernel TIL on Debian 9.13. It should produce almost the same result as the Ubuntu example discussed above.</p>"},{"location":"user-guide/type-libraries/idaclang/idaclang_tutorial.html#xnu-kernel","title":"XNU Kernel","text":"<p>The XNU kernel for macOS and iOS relies heavily on C++ object-oriented development via the IOKit framework. The goal of this section is to create a type library for the XNU kernel, focusing specifically on the C++ type information in the IOKit headers.</p> <p>Apple publishes the kernel SDK via Kernel.framework in the macOS SDK:</p> <pre><code>MacOSX12.0.sdk/System/Library/Frameworks/Kernel.framework\n</code></pre> <p>The IOKit C++ headers are usually present at:</p> <pre><code>MacOSX12.0.sdk/System/Library/Frameworks/Kernel.framework/Headers/IOKit\n</code></pre> <p>See examples/xnu/xnu.h in examples.zip, which includes some of the important header files from the IOKit/ directory. We\u2019ll use this file to generate our type library.</p> <p>Now consider examples/xnu/xnu_x64.mak:</p> <pre><code>TIL_NAME = xnu_x64\nTIL_DESC = \"Darwin Kernel Headers for x64 macOS\"\nINPUT_FILE = xnu.h\nSDK = /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.0.sdk\nCLANG_ARGV = -target x86_64-apple-macos12.0                              \\\n             -x c++                                                      \\\n             -isysroot $(SDK)                                            \\\n             -I$(SDK)/System/Library/Frameworks/Kernel.framework/Headers \\\n             -nostdinc                                                   \\\n             -std=gnu++1z                                                \\\n             -stdlib=libc++                                              \\\n             -mkernel                                                    \\\n             -DKERNEL                                                    \\\n             -DAPPLE                                                     \\\n             -DNeXT\n\ninclude ../idaclang.mak\n</code></pre> <p>We can use this makefile to generate an XNU TIL:</p> <pre><code>make -f xnu_x64.mak\n</code></pre> <p>Now let\u2019s have a look at the OSMetaClassBase class in the text dump xnu_x64.til.txt:</p> <pre><code>00000008 struct __cppobj OSMetaClassBase\n{\n  OSMetaClassBase_vtbl *__vftable /*VFT*/;\n};\n//  0. 0000 0008 effalign(8) fda=0 bits=0100 OSMetaClassBase.__vftable OSMetaClassBase_vtbl *;\n//          0008 effalign(8) sda=0 bits=0080 OSMetaClassBase struct packalign=0\n</code></pre> <p>More specifically the OSMetaClassBase_vtbl type, which has some peculiar members at the end of it:</p> <pre><code>00000088 struct /*VFT*/ OSMetaClassBase_vtbl\n{\n  ...\n  void (__cdecl *_RESERVEDOSMetaClassBase4)(OSMetaClassBase *__hidden this);\n  void (__cdecl *_RESERVEDOSMetaClassBase5)(OSMetaClassBase *__hidden this);\n  void (__cdecl *_RESERVEDOSMetaClassBase6)(OSMetaClassBase *__hidden this);\n  void (__cdecl *_RESERVEDOSMetaClassBase7)(OSMetaClassBase *__hidden this);\n}\n</code></pre> <p>Apple added several dummy virtual methods to this class so that they can add new methods without breaking binary compatibility. This is a common paradigm in the XNU kernel source, but we must be very careful with it. From the original source code in OSMetaClass.h, we can see that it is heavily platform dependent:</p> <pre><code>#if APPLE_KEXT_VTABLE_PADDING\n// Virtual Padding\n#if defined(__arm64__) || defined(__arm__)\n    virtual void _RESERVEDOSMetaClassBase0();\n    virtual void _RESERVEDOSMetaClassBase1();\n    virtual void _RESERVEDOSMetaClassBase2();\n    virtual void _RESERVEDOSMetaClassBase3();\n#endif /* defined(__arm64__) || defined(__arm__) */\n    virtual void _RESERVEDOSMetaClassBase4();\n    virtual void _RESERVEDOSMetaClassBase5();\n    virtual void _RESERVEDOSMetaClassBase6();\n    virtual void _RESERVEDOSMetaClassBase7();\n#endif /* APPLE_KEXT_VTABLE_PADDING */\n</code></pre> <p>Note that the APPLE_KEXT_VTABLE_PADDING macro is not defined for iOS builds. The iOS kernel does not pad its vtables in order to conserve memory, so these extra vtable members will only be present for macOS builds. Moreover, from the above source we can see that arm64 macOS uses more vtable padding than on x64.</p> <p>Why is this a big deal? Because almost every single important C++ class in IOKit inherits from OSMetaClassBase. Thus if the vtable type for OSMetaClassBase is not 100% correct, all of our vtable types will be useless. We have no choice but to build separate TILs for each of x64 macOS, arm64 macOS, and iOS, to ensure that we\u2019re working with precise vtables.</p> <p>See examples/xnu/xnu_m1.mak, which builds the XNU TIL for arm64 macOS:</p> <pre><code>TIL_NAME = xnu_m1\nTIL_DESC = \"Darwin Kernel Headers for arm64 macOS\"\nINPUT_FILE = xnu.h\nSDK = /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.0.sdk\nCLANG_ARGV = -target arm64e-apple-macos12.0                              \\\n             -x c++                                                      \\\n             -isysroot $(SDK)                                            \\\n             -I$(SDK)/System/Library/Frameworks/Kernel.framework/Headers \\\n             -nostdinc                                                   \\\n             -std=gnu++1z                                                \\\n             -stdlib=libc++                                              \\\n             -mkernel                                                    \\\n             -DKERNEL                                                    \\\n             -DAPPLE                                                     \\\n             -DNeXT\n\ninclude ../idaclang.mak\n</code></pre> <p>From the text dump we can see that OSMetaClassBase_vtbl is a bit larger, as expected:</p> <pre><code>000000A8 struct /*VFT*/ OSMetaClassBase_vtbl\n{\n  ...\n  void (__cdecl *_RESERVEDOSMetaClassBase0)(OSMetaClassBase *__hidden this);\n  void (__cdecl *_RESERVEDOSMetaClassBase1)(OSMetaClassBase *__hidden this);\n  void (__cdecl *_RESERVEDOSMetaClassBase2)(OSMetaClassBase *__hidden this);\n  void (__cdecl *_RESERVEDOSMetaClassBase3)(OSMetaClassBase *__hidden this);\n  void (__cdecl *_RESERVEDOSMetaClassBase4)(OSMetaClassBase *__hidden this);\n  void (__cdecl *_RESERVEDOSMetaClassBase5)(OSMetaClassBase *__hidden this);\n  void (__cdecl *_RESERVEDOSMetaClassBase6)(OSMetaClassBase *__hidden this);\n  void (__cdecl *_RESERVEDOSMetaClassBase7)(OSMetaClassBase *__hidden this);\n}\n</code></pre> <p>To build the TIL for iOS, use xnu_ios.mak:</p> <pre><code>TIL_NAME = xnu_ios\nTIL_DESC = \"Darwin Kernel Headers for arm64e iOS\"\nINPUT_FILE = xnu.h\nSDK = /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.0.sdk\nCLANG_ARGV = -target arm64e-apple-ios15-macabi                           \\\n             -x c++                                                      \\\n             -isysroot $(SDK)                                            \\\n             -I$(SDK)/System/Library/Frameworks/Kernel.framework/Headers \\\n             -nostdinc                                                   \\\n             -std=gnu++1z                                                \\\n             -stdlib=libc++                                              \\\n             -mkernel                                                    \\\n             -DKERNEL                                                    \\\n             -DAPPLE                                                     \\\n             -DNeXT\n\ninclude ../idaclang.mak\n</code></pre> <p>Which yields smaller vtables without any padding, as expected:</p> <pre><code>00000068 struct /*VFT*/ OSMetaClassBase_vtbl\n</code></pre> <p>Hopefully this section demonstrates how easy it is to get in trouble when building type libraries from C++ source, and how the precision of idaclang can help deal with it.</p>"},{"location":"user-guide/type-libraries/idaclang/idaclang_tutorial.html#mfc","title":"MFC","text":"<p>The makefile examples/mfc/mfc.mak from examples.zip demonstrates how to build a type library for the Microsoft Foundation Class Library (MFC) on Windows:</p> <pre><code>TIL_NAME = mfc\nTIL_DESC = \"Microsoft Foundation Class library for x86\"\nINPUT_FILE = mfc.h\nCLANG_ARGV = -x c++ -target i386-pc-win32\ninclude ../idaclang.mak\n</code></pre> <p>This makefile instructs idaclang to parse examples/mfc/mfc.h, which contains some essential MFC headers:</p> <pre><code>#include &lt;afxwin.h&gt;         // MFC core and standard components\n#include &lt;afxext.h&gt;         // MFC extensions\n#include &lt;afxdisp.h&gt;        // MFC OLE automation classes\n#include &lt;afxcmn.h&gt;         // MFC support for Windows Common Controls\n#include &lt;atlbase.h&gt;\n#include &lt;atlcom.h&gt;\n</code></pre> <p>This is enough to generate a solid type library for MFC. You can build it with:</p> <pre><code>make -f mfc.mak\n</code></pre> <p>From the dump of the til in mfc.til.txt, it appears some essential types are successfully created:</p> <pre><code>00000004 #pragma pack(push, 8)\nstruct __cppobj CObject\n{\n  CObject_vtbl *__vftable /*VFT*/;\n};\n#pragma pack(pop)\n//  0. 0000 0004 effalign(4) fda=0 bits=0100 CObject.__vftable CObject_vtbl *;\n//          0004 effalign(4) sda=0 bits=0080 CObject struct packalign=4\n\n00000014 #pragma pack(push, 8)\nstruct __cppobj CFile : CObject\n{\n  HANDLE m_hFile;\n  BOOL m_bCloseOnDelete;\n  CString m_strFileName;\n  ATL::CAtlTransactionManager *m_pTM;\n};\n#pragma pack(pop)\n//  0. 0000 0004 effalign(4) fda=0 bits=0020 CFile.CObject CObject;\n//  1. 0004 0004 effalign(4) fda=0 bits=0000 CFile.m_hFile HANDLE;\n//  2. 0008 0004 effalign(4) fda=0 bits=0000 CFile.m_bCloseOnDelete BOOL;\n//  3. 000C 0004 effalign(4) fda=0 bits=0000 CFile.m_strFileName CString;\n//  4. 0010 0004 effalign(4) fda=0 bits=0000 CFile.m_pTM ATL::CAtlTransactionManager *;\n//          0014 effalign(4) sda=0 bits=0080 CFile struct packalign=4\n</code></pre> <p>There are many more headers that could be included in the build, so don\u2019t hesitate to add more headers to mfc.h if you think they might contain relevant types.</p>"},{"location":"user-guide/type-libraries/idaclang/idaclang_tutorial.html#macosios-sdk","title":"macOS/iOS SDK","text":"<p>One advantage of using libclang is that we can parse the complex Objective-C syntax used in macOS and iOS Frameworks. Thus we can create type libraries from Apple\u2019s SDKs without much issue.</p> <p>See examples/macsdk/macos12_sdk.mak in examples.zip, which creates a TIL from the macOS12 SDK:</p> <pre><code>TIL_NAME = macos12_sdk\nTIL_DESC = \"MacOSX12.0.sdk headers for x64\"\nINPUT_FILE = macos12_sdk.h\nSDK = /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.0.sdk\nTOOLCHAIN = /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain\nCLANG_ARGV = -target x86_64-apple-darwin                 \\\n             -x objective-c++                            \\\n             -isysroot $(SDK)                            \\\n             -I$(TOOLCHAIN)/usr/lib/clang/13.0.0/include\n\ninclude ../idaclang.mak\n</code></pre> <p>The input file used here is examples/macsdk/macos12_sdk.h, which simply includes the umbrella header from every Framework present in the SDK:</p> <pre><code>#include &lt;CoreFoundation/CoreFoundation.h&gt;\n#include &lt;CoreServices/CoreServices.h&gt;\n#include &lt;CoreText/CoreText.h&gt;\n// ... etc\n#include &lt;WidgetKit/WidgetKit.h&gt;\n#include &lt;SystemExtensions/SystemExtensions.h&gt;\n#include &lt;Virtualization/Virtualization.h&gt;\n</code></pre> <p>The Frameworks that have an umbrella header can be easily identified by their module.modulemap file. For example:</p> <pre><code>$ cat MacOSX12.0.sdk/System/Library/Frameworks/Network.framework/Modules/module.modulemap\nframework module Network [system] [extern_c] {\n    umbrella header \"Network.h\"\n    export *\n}\n</code></pre> <p>Some Frameworks don\u2019t have an umbrella header and they were left out, but this still gives us plenty of useful type info. From macos12_sdk.til.txt we can see that many Objective-C types were successfully parsed:</p> <pre><code>00000030 struct NSCalendarDate\n{\n  NSDate super;\n  NSUInteger refCount;\n  NSTimeInterval _timeIntervalSinceReferenceDate;\n  NSTimeZone *_timeZone;\n  NSString *_formatString;\n  void *_reserved;\n};\n//  0. 0000 0008 effalign(8) fda=0 bits=0000 NSCalendarDate.super NSDate;\n//  1. 0008 0008 effalign(8) fda=0 bits=0000 NSCalendarDate.refCount NSUInteger;\n//  2. 0010 0008 effalign(8) fda=0 bits=0000 NSCalendarDate._timeIntervalSinceReferenceDate NSTimeInterval;\n//  3. 0018 0008 effalign(8) fda=0 bits=0000 NSCalendarDate._timeZone NSTimeZone *;\n//  4. 0020 0008 effalign(8) fda=0 bits=0000 NSCalendarDate._formatString NSString *;\n//  5. 0028 0008 effalign(8) fda=0 bits=0000 NSCalendarDate._reserved void *;\n//          0030 effalign(8) sda=0 bits=0000 NSCalendarDate struct packalign=0\n</code></pre> <p>Also the prototypes for many Objective-C methods were added to the symbol table:</p> <pre><code>NWHostEndpoint *__cdecl +[NWHostEndpoint endpointWithHostname:port:](id, SEL, NSString *hostname, NSString *port.html);\n</code></pre> <p>Having such detailed and accurate prototypes for Objective-C Frameworks is particularly useful when analyzing dyld_shared_cache files. The type information parsed in the source headers is much more detailed than the Objective-C type information embedded in the module binaries.</p> <p>Note that you can build the same TIL for Apple Silicon by simply changing the -target argument to:</p> <pre><code>-target arm64-apple-darwin\n</code></pre> <p>Building a TIL for the iPhoneOS.sdk is just as easy. See ios15_sdk.mak and ios15_sdk.h:</p> <pre><code>TIL_NAME = ios15_sdk\nTIL_DESC = \"iPhoneOS15.0.sdk headers for arm64\"\nINPUT_FILE = ios15_sdk.h\nSDK = /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS15.0.sdk\nTOOLCHAIN = /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain\nCLANG_ARGV = -target arm64-apple-darwin                  \\\n             -x objective-c++                            \\\n             -isysroot $(SDK)                            \\\n             -I$(TOOLCHAIN)/usr/lib/clang/13.0.0/include\n\ninclude ../idaclang.mak\n</code></pre>"},{"location":"user-guide/user-interface/command-line.html","title":"Command line","text":"<p>In IDA, the command-line input field is located at the bottom of the Output window, just above the status bar. It can be used to enter various commands. By default, it accepts IDC and Python commands (if the Python installation has been found), but plugins may register themselves as command language providers.</p> <p></p> <p>Currently, the following command line providers exist:</p> <ul> <li>IDC</li> <li>Python</li> <li>Bochs debugger</li> <li>WinDbg debugger</li> <li>GDB debugger</li> </ul> <p>When these plugins are active, they will process the entered commands. The current command language can be changed by clicking the button to the left of the input field. The current language can be set as default by choosing \"Default CLI\" from the context menu of the command line.</p> <p>The command-line input field can be activated by pressing ., while Esc switches back to the previous window.</p>"},{"location":"user-guide/user-interface/database-conversion-from-idb-to-i64.html","title":"Database conversion from idb to i64","text":""},{"location":"user-guide/user-interface/database-conversion-from-idb-to-i64.html#database-conversion-from-idb-to-i64_1","title":"Database conversion from idb to i64","text":"<p>Historically, there were ida and idat to deal with 32 bits binaries. Then 64 bits binaries make an appearance to our world and this is how ida64 and idat64 were born.</p> <p>Hex-rays decided to remove ida, mainly to simplify the product and the code base. It was done in two steps</p> <ul> <li>make ida64 fully usable with 32 bits binaries</li> <li>offer a tool to migrate dabase from idb (32 bits) to i64 (64 bits) format</li> </ul> <p>As from version 9.0 the 64 suffix in the binaries name has been removed.</p>"},{"location":"user-guide/user-interface/database-conversion-from-idb-to-i64.html#main-usage","title":"Main usage","text":"<pre><code>  ida foo.idb\n</code></pre> <p>This command converts foo.idb to foo.i64 on the fly. The user can immediately start working with the database. If foo.i64 already exists, IDA will ask if it should be overwritten or not. Please note foo.idb is left untouched by the upgrade.</p>"},{"location":"user-guide/user-interface/database-conversion-from-idb-to-i64.html#list-of-the-available-command-line-switches","title":"List of the available command line switches","text":"<pre><code>  --cvt64 automatically confirms the following question:\n        'You passed 32bit IDB file foo.idb to ida64.\n        Do you wish to convert it to 64bit database?'\n\n  -Ocvt64 options:\n        overwrite=yes/no/ask -yes: overwrite the existing i64 database\n                              no: immediately exit if the i64 database exists\n                              ask: ask the user what to do if the i64 database exists\n                              default: ask\n        restart=yes/no/ask  - yes: automatically open the converted database in IDA\n                              no: exit after the conversion\n                              ask: ask the user if the converted database should be opened\n                              default: yes\n        privmove=yes/no/ask - move privrange beyond 32bit addrspace after\n                              conversion?\n                              default: yes, which means to automatically move\n                              the privrange to 0xFF00000000000000\n</code></pre>"},{"location":"user-guide/user-interface/database-conversion-from-idb-to-i64.html#example","title":"Example","text":"<pre><code>  idat --cvt64 -Ocvt64:overwrite=no:restart=no\n</code></pre> <p>This command automatically converts foo.idb and exits at the end of the conversion. If foo.i64 already exists, the conversion will not be performed. Since this command uses idat64, it can be used for batch processing.</p>"},{"location":"user-guide/user-interface/desktops.html","title":"Desktops","text":"<p>IDA saves different settings in desktops: the main window configuration, the toolbars configuration, and the configuration of all database windows.</p> <p>Different desktops are available:</p> <pre><code> &lt;Database&gt;\n     this desktop configuration is stored in the database itself,\n     and is automatically loaded each time you open this database.\n     IDA also automatically saves the current desktop configuration\n     to this desktop if you close and save the database.\n\n &lt;Database debugger&gt;\n     this desktop configuration is also stored in the database,\n     and is loaded each time you start the debugger.\n     As for the &lt;Database&gt; desktop, IDA automatically saves the current\n     desktop configuration to this desktop once the debugger stops.\n\n &lt;Default&gt;\n     this desktop configuration is stored in the registry,\n     and is loaded each time you start IDA without opening a database,\n     or the first time you create a new database.\n\n &lt;Default debugger&gt;\n     this desktop configuration is stored in the registry,\n     and is loaded the first time you start the debugger.\n\n  named desktops\n     these desktop configurations are stored in the registry,\n     and can be loaded manually by the user during the disassembly\n     or the debugging.\n</code></pre> <p>Notice IDA will use a default configuration for main windows and toolbars if the screen resolution changed.</p>"},{"location":"user-guide/user-interface/desktops.html#desktop-commands","title":"Desktop commands","text":"<ul> <li>Load desktop... command </li> <li>Save desktop... command </li> <li>Delete desktop... command </li> <li>Reset desktop command</li> </ul>"},{"location":"user-guide/user-interface/desktops.html#load-desktop","title":"Load desktop","text":"<p>This commands show all available desktops (stored in the database or in the registry). Pressing \\ loads the desktop configuration from the selected desktop. Pressing \\ deletes the selected desktop."},{"location":"user-guide/user-interface/desktops.html#save-desktop","title":"Save desktop","text":"<p>This command saves the current desktop configuration to a desktop.</p> <p>If you enter a name, IDA saves the current configuration to a named desktop in the database or registry.</p> <p>If you select 'Default', IDA saves the current configuration to the \\ or \\ desktop (if the debugger is active) in the registry."},{"location":"user-guide/user-interface/desktops.html#delete-desktop","title":"Delete desktop","text":"<p>This command deletes a desktop containing a desktop configuration.</p>"},{"location":"user-guide/user-interface/desktops.html#reset-desktop","title":"Reset desktop","text":"<p>This command resets all windows (IDA main window and database windows) by loading the original IDA disassembly desktop or debugger desktop (if the debugger is active).</p>"},{"location":"user-guide/user-interface/how-to-use-list-viewers-in-ida.html","title":"How to use list viewers in ida","text":""},{"location":"user-guide/user-interface/how-to-use-list-viewers-in-ida.html#how-to-use-list-viewers-in-ida","title":"How To Use List Viewers in IDA","text":"<p>The following commands work in the list viewers:</p> <p>1. All usual movement keys: PgUp, PgDn, Home, End and arrows (\u2191 \u2193 \u2192 \u2190).</p> <p>2. It is possible to position to a line simply by typing in the desired line number.</p> <p>3. It is possible to position on a line by typing in its beginning. In this case the user can use: Backspace key to erase the last character typed in. Ctrl+Enter to find another line with the same prefix. Please note that List Viewer ignores the prefix of a line up to the last backslash (\\\\) or slash (/) if it exists.</p> <p>4. Alt+T search for a substring (case-insensitive).  Ctrl+T repeat last search.</p> <p>5. If the list is not in dialog mode, you can use the following keys: - Enter: jump to the selected item in the last IDA View window - Ctrl+E: edit the current item - Del delete the current item - Ins insert a new item - Ctrl+U refresh information in the window</p> <p>6. Quick filtering is available using Ctrl+F. More complex filters can be defined with a right click (only the GUI mode).</p> <p>7. The list can be sorted by any column by clicking on it. Please note that maintaining a frequently modified list sorted can be very time consuming, so try not to sort non-modal lists during the initial analysis. (sorting is available only in the GUI mode).</p> <p>8. Right-click may show additional functionality for the list viewer.</p> <p>Esc or Enter close modal list viewers.</p>"},{"location":"user-guide/user-interface/licenses.html","title":"Third-Party Licenses","text":"<p>IDA is a complex and multifunctional software. It contains some third party code with the license requiring to be mentioned in the documentation. Below is the list:</p> <p>------------------------------------------------------------------------------- Xdelta version 3</p> <p>https://github.com/jmacd/xdelta</p> <p>Xdelta version 3 is a C library and command-line tool for delta compression using VCDIFF/RFC 3284 streams.</p> <p>Apache License v2.0 for xdelta</p> <p>------------------------------------------------------------------------------- XML patterns from Ghidra Software Reverse Engineering Framework</p> <p>Apache License v2.0 for Ghidra XML patterns</p> <p>------------------------------------------------------------------------------- The LLVM Project is under the Apache License v2.0 with LLVM Exceptions:</p> <p>Apache License v2.0 with LLVM Exceptions</p> <p>------------------------------------------------------------------------------- LZFSE decompressor</p> <p>Copyright (c) 2015-2016, Apple Inc. All rights reserved.</p> <p>Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:</p> <p>1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.</p> <p>2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.</p> <p>3. Neither the name of the copyright holder(s) nor the names of any contributors may be used to endorse or promote products derived from this software without specific prior written permission.</p> <p>THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</p> <p>------------------------------------------------------------------------------- Minimal LZMA Project (minlzma)</p> <p>MIT License</p> <p>Copyright (c) 2020 Alex Ionescu</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p> <p>------------------------------------------------------------------------------- Portions of NDK by Alex Ionescu</p> <p>The NDK is Copyright \u00a92005-2012 Alex Ionescu. GNU LESSER GENERAL PUBLIC LICENSE Version 2.1, February 1999</p> <p>------------------------------------------------------------------------------- IDAPython plugin by Gergely Erdelyi</p> <p>Copyright (c) 2004-2008 Gergely Erdelyi \\dyce@d-dome.net. All rights reserved.</p> <p>Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:</p> <p>1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.</p> <p>2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.</p> <p>3. The name of the author may not be used to endorse or promote products derived from this software without specific prior written permission.</p> <p>THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</p> <p>------------------------------------------------------------------------------- InfoZIP libraries</p> <pre><code>  Copyright (C) 1995-2022 Jean-loup Gailly and Mark Adler\n\n  This software is provided 'as-is', without any express or implied\n  warranty.  In no event will the authors be held liable for any damages\n  arising from the use of this software.\n\n  Permission is granted to anyone to use this software for any purpose,\n  including commercial applications, and to alter it and redistribute it\n  freely, subject to the following restrictions:\n\n  1. The origin of this software must not be misrepresented; you must not\n     claim that you wrote the original software. If you use this software\n     in a product, an acknowledgment in the product documentation would be\n     appreciated but is not required.\n  2. Altered source versions must be plainly marked as such, and must not be\n     misrepresented as being the original software.\n  3. This notice may not be removed or altered from any source distribution.\n\n  Jean-loup Gailly        Mark Adler\n  jloup@gzip.org          madler@alumni.caltech.edu\n</code></pre> <p>------------------------------------------------------------------------------- PCRE2 library: BSD License</p> <p>------------------------------------------------------------------------------- DSP56K analyzer part of DSP56K module</p> <pre><code>  Copyright (c) 1998 Miloslaw Smyk\n  All rights reserved.\n  Support for DSP 563xx added by Ivan Litvin\n\n  Redistribution and use in source and binary forms, with or without\n  modification, are permitted provided that the following conditions\n  are met:\n  1. Redistributions of source code must retain the above copyright\n     notice, this list of conditions and the following disclaimer.\n  2. Redistributions in binary form must reproduce the above copyright\n     notice, this list of conditions and the following disclaimer in the\n     documentation and/or other materials provided with the distribution.\n  3. All advertising materials mentioning features or use of this software\n     must display the following acknowledgement:\n       This product includes software developed by Miloslaw Smyk\n  4. The name of the author may not be used to endorse or promote products\n     derived from this software without specific prior written permission\n\n  THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR\n  IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,\n  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n</code></pre> <p>------------------------------------------------------------------------------- TVision port to Linux is partially based on modifications made by Sergio Sigala</p> <pre><code>  All changes copyright (c) 1997 Sergio Sigala, Brescia, Italy.\n  All rights reserved.\n\n  Redistribution and use in source and binary forms, with or without\n  modification, are permitted provided that the following conditions\n  are met:\n  1. Redistributions of source code must retain the above copyright\n     notice, this list of conditions and the following disclaimer.\n  2. Redistributions in binary form must reproduce the above copyright\n     notice, this list of conditions and the following disclaimer in the\n     documentation and/or other materials provided with the distribution.\n\n  THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR\n  IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,\n  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n</code></pre> <p>------------------------------------------------------------------------------- COIN/Clp library</p> <pre><code>  Copyright (C) 2002, International Business Machines\n  Corporation and others.\n</code></pre> <p>Common Public License v1.0 ------------------------------------------------------------------------------- CCTOOLS package from Apple APPLE PUBLIC SOURCE LICENSE Version 2.0 - August 6, 2003 ------------------------------------------------------------------------------- DEX loader and Dalvik processor module use portions of code from the Android project \"libdex\":</p> <pre><code>  Copyright (C) 2008 The Android Open Source Project\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n</code></pre> <p>http://www.apache.org/licenses/LICENSE-2.0</p> <pre><code>  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n</code></pre> <p>------------------------------------------------------------------------------- Libdwarf library:</p> <pre><code>  Copyright (C) 2000,2002,2003,2004,2005 Silicon Graphics, Inc. All Rights Reserved.\n  Portions Copyright (C) 2008-2010 Arxan Technologies, Inc. All Rights Reserved.\n  Portions Copyright (C) 2009-2011 David Anderson. All Rights Reserved.\n  Portions Copyright (C) 2010 SN Systems Ltd. All Rights Reserved.\n\n  This program is free software; you can redistribute it and/or modify it\n  under the terms of version 2.1 of the GNU Lesser General Public License\n  as published by the Free Software Foundation.\n</code></pre> <p>------------------------------------------------------------------------------- Qt libraries: http://doc.qt.io/qt-5/licensing.html</p> <pre><code>  The source code of Qt used in IDA is available upon request at support@hex-rays.com\n</code></pre> <p>------------------------------------------------------------------------------- MD5 checksum: * This code implements the MD5 message-digest algorithm. * The algorithm is due to Ron Rivest. This code was * written by Colin Plumb in 1993, no copyright is claimed. * This code is in the public domain; do with it what you wish.</p> <p>------------------------------------------------------------------------------- SHA256 checksum: Copyright (c) 2002, Dr Brian Gladman, Worcester, UK. All rights reserved.</p> <pre><code> LICENSE TERMS\n\n The free distribution and use of this software in both source and binary\n form is allowed (with or without changes) provided that:\n\n   1. distributions of this source code include the above copyright\n      notice, this list of conditions and the following disclaimer;\n\n   2. distributions in binary form include the above copyright\n      notice, this list of conditions and the following disclaimer\n      in the documentation and/or other associated materials;\n\n   3. the copyright holder's name is not used to endorse products\n      built using this software without specific written permission.\n\n ALTERNATIVELY, provided that this notice is retained in full, this product\n may be distributed under the terms of the GNU General Public License (GPL),\n in which case the provisions of the GPL apply INSTEAD OF those given above.\n\n DISCLAIMER\n\n This software is provided 'as is' with no explicit or implied warranties\n in respect of its properties, including, but not limited to, correctness\n and/or fitness for purpose.\n</code></pre> <p>------------------------------------------------------------------------------- AES encryption/decryption (used only to decrypt some input files): * FIPS-197 compliant AES implementation * * Copyright (C) 2006-2015, ARM Limited, All Rights Reserved * SPDX-License-Identifier: Apache-2.0 * * Licensed under the Apache License, Version 2.0 (the \"License\"); you may * not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0</p> <p>------------------------------------------------------------------------------- Blowfish encryption/decryption (used only to decrypt some input files): * Copyright (C) 2006-2015, ARM Limited, All Rights Reserved * SPDX-License-Identifier: Apache-2.0 * * Licensed under the Apache License, Version 2.0 (the \"License\"); you may * not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0</p> <p>------------------------------------------------------------------------------- MinHook - The Minimalistic API Hooking Library for x64/x86 Copyright (C) 2009-2017 Tsuda Kageyu. All rights reserved.</p> <p>Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:</p> <pre><code> 1. Redistributions of source code must retain the above copyright\n    notice, this list of conditions and the following disclaimer.\n 2. Redistributions in binary form must reproduce the above copyright\n    notice, this list of conditions and the following disclaimer in the\n    documentation and/or other materials provided with the distribution.\n</code></pre> <p>THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</p> <p>================================================================================ Portions of this software are Copyright (c) 2008-2009, Vyacheslav Patkov.</p> <p>Hacker Disassembler Engine 32 C Copyright (c) 2008-2009, Vyacheslav Patkov. All rights reserved.</p> <p>Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:</p> <pre><code> 1. Redistributions of source code must retain the above copyright\n    notice, this list of conditions and the following disclaimer.\n 2. Redistributions in binary form must reproduce the above copyright\n    notice, this list of conditions and the following disclaimer in the\n    documentation and/or other materials provided with the distribution.\n</code></pre> <p>THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</p> <p>------------------------------------------------------------------------------- Hacker Disassembler Engine 64 C Copyright (c) 2008-2009, Vyacheslav Patkov. All rights reserved.</p> <p>Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:</p> <pre><code> 1. Redistributions of source code must retain the above copyright\n    notice, this list of conditions and the following disclaimer.\n 2. Redistributions in binary form must reproduce the above copyright\n    notice, this list of conditions and the following disclaimer in the\n    documentation and/or other materials provided with the distribution.\n</code></pre> <p>THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</p> <p>------------------------------------------------------------------------------- IDA Floating has the client code for Flexera's Flexnet: Copyright (c) 1997-2017 Flexera Software LLC. All Rights Reserved.</p> <p>------------------------------------------------------------------------------- inja C++ template engine</p> <p>MIT License</p> <p>Copyright (c) 2018-2021 Berscheid</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p> <p>------------------------------------------------------------------------------- __| | __| | | | JSON for Modern C++ | | |__ | | | | | | version 3.10.5 |_____|_____|_____|_|___| https://github.com/nlohmann/json</p> <p>Licensed under the MIT License &lt;http://opensource.org/licenses/MIT%3E.</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p> <p>------------------------------------------------------------------------------- Demangler for the Rust programming language Copyright (C) 2016-2023 Free Software Foundation, Inc. Written by David Tolnay (dtolnay@gmail.com). Rewritten by Eduard-Mihai Burtescu (eddyb@lyken.rs) for v0 support.</p> <p>This file is part of the libiberty library. Libiberty is free software; you can redistribute it and/or modify it under the terms of the GNU Library General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.</p> <p>In addition to the permissions in the GNU Library General Public License, the Free Software Foundation gives you unlimited permission to link the compiled version of this file into combinations with other programs, and to distribute those combinations without any restriction coming from the use of this file. (The Library Public License restrictions do apply in other respects; for example, they cover modification of the file, and distribution when not linked into a combined executable.)</p> <p>Libiberty is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Library General Public License for more details.</p> <p>You should have received a copy of the GNU Library General Public License along with libiberty; see the file COPYING.LIB. If not, see &lt;http://www.gnu.org/licenses/%3E.</p> <p>GNU Lesser General Public License v2.1 for libiberty</p>"},{"location":"user-guide/user-interface/menu-bar.html","title":"Menu Bar","text":"<p>All IDA commands are available from the followings menus:</p> <ul> <li>File</li> <li>Edit</li> <li>Jump</li> <li>Search</li> <li>View</li> <li>Debugger</li> <li>Lumina</li> <li>Options</li> <li>Windows</li> </ul>"},{"location":"user-guide/user-interface/licenses/apache-license-for-ghidra.html","title":"Apache License for Ghidra","text":"<p>Apache License Version 2.0, January 2004 http://www.apache.org/licenses/</p> <pre><code>   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n</code></pre> <p>http://www.apache.org/licenses/LICENSE-2.0</p> <pre><code>   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n</code></pre>"},{"location":"user-guide/user-interface/licenses/apache-license-for-llvm.html","title":"Apache License for LLVM","text":"<p>============================================================================== The LLVM Project is under the Apache License v2.0 with LLVM Exceptions:</p> <p>Apache License Version 2.0, January 2004 http://www.apache.org/licenses/</p> <pre><code>    TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n    1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n    2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n    3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n    4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n    5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n    6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n    7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n    8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n    9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n    END OF TERMS AND CONDITIONS\n\n    APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n    Copyright [yyyy] [name of copyright owner]\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n</code></pre> <p>http://www.apache.org/licenses/LICENSE-2.0</p> <pre><code>    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n</code></pre> <p>---- LLVM Exceptions to the Apache 2.0 License ----</p> <p>As an exception, if, as a result of your compiling your source code, portions of this Software are embedded into an Object form of such source code, you may redistribute such embedded portions in such Object form without complying with the conditions of Sections 4(a), 4(b) and 4(d) of the License.</p> <p>In addition, if you combine or link compiled forms of this Software with software that is licensed under the GPLv2 (\"Combined Software\") and if a court of competent jurisdiction determines that the patent provision (Section 3), the indemnity provision (Section 9) or other Section of the License conflicts with the conditions of the GPLv2, you may retroactively and prospectively choose to deem waived or otherwise exclude such Section(s) of the License, but only in their entirety and only with respect to the Combined Software.</p> <p>============================================================================== Software from third parties included in the LLVM Project:</p> <p>The LLVM Project contains third party software which is under different license terms. All such code will be identified clearly using at least one of two mechanisms:</p> <ol> <li>It will be in a separate directory tree with its own `LICENSE.txt` or `LICENSE` file at the top containing the specific license and restrictions which apply to that software, or</li> <li>It will contain specific license and restriction terms at the top of every file.</li> </ol> <p>\\============================================================================== Legacy LLVM License (https://llvm.org/docs/DeveloperPolicy.html#legacy):</p> <p>Copyright (c) 2007-2019 University of Illinois at Urbana-Champaign. All rights reserved.</p> <p>Developed by:</p> <pre><code>    LLVM Team\n\n    University of Illinois at Urbana-Champaign\n</code></pre> <p>http://llvm.org Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal with the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <pre><code>    * Redistributions of source code must retain the above copyright notice,\n      this list of conditions and the following disclaimers.\n\n    * Redistributions in binary form must reproduce the above copyright notice,\n      this list of conditions and the following disclaimers in the\n      documentation and/or other materials provided with the distribution.\n\n    * Neither the names of the LLVM Team, University of Illinois at\n      Urbana-Champaign, nor the names of its contributors may be used to\n      endorse or promote products derived from this Software without specific\n      prior written permission.\n</code></pre> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE CONTRIBUTORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS WITH THE SOFTWARE.</p>"},{"location":"user-guide/user-interface/licenses/apple-public-source-license.html","title":"APPLE PUBLIC SOURCE LICENSE","text":"<p>Please read this License carefully before downloading this software. By downloading or using this software, you are agreeing to be bound by the terms of this License. If you do not or cannot agree to the terms of this License, please do not download or use the software.</p> <p>1. General; Definitions. This License applies to any program or other work which Apple Computer, Inc. (\"Apple\") makes publicly available and which contains a notice placed by Apple identifying such program or work as \"Original Code\" and stating that it is subject to the terms of this Apple Public Source License version 2.0 (\"License\"). As used in this License:</p> <p>1.1 \"Applicable Patent Rights\" mean: (a) in the case where Apple is the grantor of rights, (i) claims of patents that are now or hereafter acquired, owned by or assigned to Apple and (ii) that cover subject matter contained in the Original Code, but only to the extent necessary to use, reproduce and/or distribute the Original Code without infringement; and (b) in the case where You are the grantor of rights, (i) claims of patents that are now or hereafter acquired, owned by or assigned to You and (ii) that cover subject matter in Your Modifications, taken alone or in combination with Original Code.</p> <p>1.2 \"Contributor\" means any person or entity that creates or contributes to the creation of Modifications.</p> <p>1.3 \"Covered Code\" means the Original Code, Modifications, the combination of Original Code and any Modifications, and/or any respective portions thereof.</p> <p>1.4 \"Externally Deploy\" means: (a) to sublicense, distribute or otherwise make Covered Code available, directly or indirectly, to anyone other than You; and/or (b) to use Covered Code, alone or as part of a Larger Work, in any way to provide a service, including but not limited to delivery of content, through electronic communication with a client other than You.</p> <p>1.5 \"Larger Work\" means a work which combines Covered Code or portions thereof with code not governed by the terms of this License.</p> <p>1.6 \"Modifications\" mean any addition to, deletion from, and/or change to, the substance and/or structure of the Original Code, any previous Modifications, the combination of Original Code and any previous Modifications, and/or any respective portions thereof. When code is released as a series of files, a Modification is: (a) any addition to or deletion from the contents of a file containing Covered Code; and/or (b) any new file or other representation of computer program statements that contains any part of Covered Code.</p> <p>1.7 \"Original Code\" means (a) the Source Code of a program or other work as originally made available by Apple under this License, including the Source Code of any updates or upgrades to such programs or works made available by Apple under this License, and that has been expressly identified by Apple as such in the header file(s) of such work; and (b) the object code compiled from such Source Code and originally made available by Apple under this License.</p> <p>1.8 \"Source Code\" means the human readable form of a program or other work that is suitable for making modifications to it, including all modules it contains, plus any associated interface definition files, scripts used to control compilation and installation of an executable (object code).</p> <p>1.9 \"You\" or \"Your\" means an individual or a legal entity exercising rights under this License. For legal entities, \"You\" or \"Your\" includes any entity which controls, is controlled by, or is under common control with, You, where \"control\" means (a) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (b) ownership of fifty percent (50%) or more of the outstanding shares or beneficial ownership of such entity.</p> <p>2. Permitted Uses; Conditions &amp; Restrictions. Subject to the terms and conditions of this License, Apple hereby grants You, effective on the date You accept this License and download the Original Code, a world-wide, royalty-free, non-exclusive license, to the extent of Apple's Applicable Patent Rights and copyrights covering the Original Code, to do the following:</p> <p>2.1 Unmodified Code. You may use, reproduce, display, perform, internally distribute within Your organization, and Externally Deploy verbatim, unmodified copies of the Original Code, for commercial or non-commercial purposes, provided that in each instance:</p> <p>(a) You must retain and reproduce in all copies of Original Code the copyright and other proprietary notices and disclaimers of Apple as they appear in the Original Code, and keep intact all notices in the Original Code that refer to this License; and</p> <p>(b) You must include a copy of this License with every copy of Source Code of Covered Code and documentation You distribute or Externally Deploy, and You may not offer or impose any terms on such Source Code that alter or restrict this License or the recipients' rights hereunder, except as permitted under Section 6.</p> <p>2.2 Modified Code. You may modify Covered Code and use, reproduce, display, perform, internally distribute within Your organization, and Externally Deploy Your Modifications and Covered Code, for commercial or non-commercial purposes, provided that in each instance You also meet all of these conditions:</p> <p>(a) You must satisfy all the conditions of Section 2.1 with respect to the Source Code of the Covered Code;</p> <p>(b) You must duplicate, to the extent it does not already exist, the notice in Exhibit A in each file of the Source Code of all Your Modifications, and cause the modified files to carry prominent notices stating that You changed the files and the date of any change; and</p> <p>(c) If You Externally Deploy Your Modifications, You must make Source Code of all Your Externally Deployed Modifications either available to those to whom You have Externally Deployed Your Modifications, or publicly available. Source Code of Your Externally Deployed Modifications must be released under the terms set forth in this License, including the license grants set forth in Section 3 below, for as long as you Externally Deploy the Covered Code or twelve (12) months from the date of initial External Deployment, whichever is longer. You should preferably distribute the Source Code of Your Externally Deployed Modifications electronically (e.g. download from a web site).</p> <p>2.3 Distribution of Executable Versions. In addition, if You Externally Deploy Covered Code (Original Code and/or Modifications) in object code, executable form only, You must include a prominent notice, in the code itself as well as in related documentation, stating that Source Code of the Covered Code is available under the terms of this License with information on how and where to obtain such Source Code.</p> <p>2.4 Third Party Rights. You expressly acknowledge and agree that although Apple and each Contributor grants the licenses to their respective portions of the Covered Code set forth herein, no assurances are provided by Apple or any Contributor that the Covered Code does not infringe the patent or other intellectual property rights of any other entity. Apple and each Contributor disclaim any liability to You for claims brought by any other entity based on infringement of intellectual property rights or otherwise. As a condition to exercising the rights and licenses granted hereunder, You hereby assume sole responsibility to secure any other intellectual property rights needed, if any. For example, if a third party patent license is required to allow You to distribute the Covered Code, it is Your responsibility to acquire that license before distributing the Covered Code.</p> <p>3. Your Grants. In consideration of, and as a condition to, the licenses granted to You under this License, You hereby grant to any person or entity receiving or distributing Covered Code under this License a non-exclusive, royalty-free, perpetual, irrevocable license, under Your Applicable Patent Rights and other intellectual property rights (other than patent) owned or controlled by You, to use, reproduce, display, perform, modify, sublicense, distribute and Externally Deploy Your Modifications of the same scope and extent as Apple's licenses under Sections 2.1 and 2.2 above.</p> <p>4. Larger Works. You may create a Larger Work by combining Covered Code with other code not governed by the terms of this License and distribute the Larger Work as a single product. In each such instance, You must make sure the requirements of this License are fulfilled for the Covered Code or any portion thereof.</p> <p>5. Limitations on Patent License. Except as expressly stated in Section 2, no other patent rights, express or implied, are granted by Apple herein. Modifications and/or Larger Works may require additional patent licenses from Apple which Apple may grant in its sole discretion.</p> <p>6. Additional Terms. You may choose to offer, and to charge a fee for, warranty, support, indemnity or liability obligations and/or other rights consistent with the scope of the license granted herein (\"Additional Terms\") to one or more recipients of Covered Code. However, You may do so only on Your own behalf and as Your sole responsibility, and not on behalf of Apple or any Contributor. You must obtain the recipient's agreement that any such Additional Terms are offered by You alone, and You hereby agree to indemnify, defend and hold Apple and every Contributor harmless for any liability incurred by or claims asserted against Apple or such Contributor by reason of any such Additional Terms.</p> <p>7. Versions of the License. Apple may publish revised and/or new versions of this License from time to time. Each version will be given a distinguishing version number. Once Original Code has been published under a particular version of this License, You may continue to use it under the terms of that version. You may also choose to use such Original Code under the terms of any subsequent version of this License published by Apple. No one other than Apple has the right to modify the terms applicable to Covered Code created under this License.</p> <p>8. NO WARRANTY OR SUPPORT. The Covered Code may contain in whole or in part pre-release, untested, or not fully tested works. The Covered Code may contain errors that could cause failures or loss of data, and may be incomplete or contain inaccuracies. You expressly acknowledge and agree that use of the Covered Code, or any portion thereof, is at Your sole and entire risk. THE COVERED CODE IS PROVIDED \"AS IS\" AND WITHOUT WARRANTY, UPGRADES OR SUPPORT OF ANY KIND AND APPLE AND APPLE'S LICENSOR(S) (COLLECTIVELY REFERRED TO AS \"APPLE\" FOR THE PURPOSES OF SECTIONS 8 AND 9) AND ALL CONTRIBUTORS EXPRESSLY DISCLAIM ALL WARRANTIES AND/OR CONDITIONS, EXPRESS OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES AND/OR CONDITIONS OF MERCHANTABILITY, OF SATISFACTORY QUALITY, OF FITNESS FOR A PARTICULAR PURPOSE, OF ACCURACY, OF QUIET ENJOYMENT, AND NONINFRINGEMENT OF THIRD PARTY RIGHTS. APPLE AND EACH CONTRIBUTOR DOES NOT WARRANT AGAINST INTERFERENCE WITH YOUR ENJOYMENT OF THE COVERED CODE, THAT THE FUNCTIONS CONTAINED IN THE COVERED CODE WILL MEET YOUR REQUIREMENTS, THAT THE OPERATION OF THE COVERED CODE WILL BE UNINTERRUPTED OR ERROR-FREE, OR THAT DEFECTS IN THE COVERED CODE WILL BE CORRECTED. NO ORAL OR WRITTEN INFORMATION OR ADVICE GIVEN BY APPLE, AN APPLE AUTHORIZED REPRESENTATIVE OR ANY CONTRIBUTOR SHALL CREATE A WARRANTY. You acknowledge that the Covered Code is not intended for use in the operation of nuclear facilities, aircraft navigation, communication systems, or air traffic control machines in which case the failure of the Covered Code could lead to death, personal injury, or severe physical or environmental damage.</p> <p>9. LIMITATION OF LIABILITY. TO THE EXTENT NOT PROHIBITED BY LAW, IN NO EVENT SHALL APPLE OR ANY CONTRIBUTOR BE LIABLE FOR ANY INCIDENTAL, SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES ARISING OUT OF OR RELATING TO THIS LICENSE OR YOUR USE OR INABILITY TO USE THE COVERED CODE, OR ANY PORTION THEREOF, WHETHER UNDER A THEORY OF CONTRACT, WARRANTY, TORT (INCLUDING NEGLIGENCE), PRODUCTS LIABILITY OR OTHERWISE, EVEN IF APPLE OR SUCH CONTRIBUTOR HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES AND NOTWITHSTANDING THE FAILURE OF ESSENTIAL PURPOSE OF ANY REMEDY. SOME JURISDICTIONS DO NOT ALLOW THE LIMITATION OF LIABILITY OF INCIDENTAL OR CONSEQUENTIAL DAMAGES, SO THIS LIMITATION MAY NOT APPLY TO YOU. In no event shall Apple's total liability to You for all damages (other than as may be required by applicable law) under this License exceed the amount of fifty dollars ($50.00).</p> <p>10. Trademarks. This License does not grant any rights to use the trademarks or trade names \"Apple\", \"Apple Computer\", \"Mac\", \"Mac OS\", \"QuickTime\", \"QuickTime Streaming Server\" or any other trademarks, service marks, logos or trade names belonging to Apple (collectively \"Apple Marks\") or to any trademark, service mark, logo or trade name belonging to any Contributor. You agree not to use any Apple Marks in or as part of the name of products derived from the Original Code or to endorse or promote products derived from the Original Code other than as expressly permitted by and in strict compliance at all times with Apple's third party trademark usage guidelines which are posted at http://www.apple.com/legal/guidelinesfor3rdparties.html.</p> <p>11. Ownership. Subject to the licenses granted under this License, each Contributor retains all rights, title and interest in and to any Modifications made by such Contributor. Apple retains all rights, title and interest in and to the Original Code and any Modifications made by or on behalf of Apple (\"Apple Modifications\"), and such Apple Modifications will not be automatically subject to this License. Apple may, at its sole discretion, choose to license such Apple Modifications under this License, or on different terms from those contained in this License or may choose not to license them at all.</p> <p>12. Termination.</p> <p>12.1 Termination. This License and the rights granted hereunder will terminate:</p> <p>(a) automatically without notice from Apple if You fail to comply with any term(s) of this License and fail to cure such breach within 30 days of becoming aware of such breach;</p> <p>(b) immediately in the event of the circumstances described in Section 13.5(b); or</p> <p>(c) automatically without notice from Apple if You, at any time during the term of this License, commence an action for patent infringement against Apple; provided that Apple did not first commence an action for patent infringement against You in that instance.</p> <p>12.2 Effect of Termination. Upon termination, You agree to immediately stop any further use, reproduction, modification, sublicensing and distribution of the Covered Code. All sublicenses to the Covered Code which have been properly granted prior to termination shall survive any termination of this License. Provisions which, by their nature, should remain in effect beyond the termination of this License shall survive, including but not limited to Sections 3, 5, 8, 9, 10, 11, 12.2 and 13. No party will be liable to any other for compensation, indemnity or damages of any sort solely as a result of terminating this License in accordance with its terms, and termination of this License will be without prejudice to any other right or remedy of any party.</p> <p>13. Miscellaneous.</p> <p>13.1 Government End Users. The Covered Code is a \"commercial item\" as defined in FAR 2.101. Government software and technical data rights in the Covered Code include only those rights customarily provided to the public as defined in this License. This customary commercial license in technical data and software is provided in accordance with FAR 12.211 (Technical Data) and 12.212 (Computer Software) and, for Department of Defense purchases, DFAR 252.227-7015 (Technical Data -- Commercial Items) and 227.7202-3 (Rights in Commercial Computer Software or Computer Software Documentation). Accordingly, all U.S. Government End Users acquire Covered Code with only those rights set forth herein.</p> <p>13.2 Relationship of Parties. This License will not be construed as creating an agency, partnership, joint venture or any other form of legal association between or among You, Apple or any Contributor, and You will not represent to the contrary, whether expressly, by implication, appearance or otherwise.</p> <p>13.3 Independent Development. Nothing in this License will impair Apple's right to acquire, license, develop, have others develop for it, market and/or distribute technology or products that perform the same or similar functions as, or otherwise compete with, Modifications, Larger Works, technology or products that You may develop, produce, market or distribute.</p> <p>13.4 Waiver; Construction. Failure by Apple or any Contributor to enforce any provision of this License will not be deemed a waiver of future enforcement of that or any other provision. Any law or regulation which provides that the language of a contract shall be construed against the drafter will not apply to this License.</p> <p>13.5 Severability. (a) If for any reason a court of competent jurisdiction finds any provision of this License, or portion thereof, to be unenforceable, that provision of the License will be enforced to the maximum extent permissible so as to effect the economic benefits and intent of the parties, and the remainder of this License will continue in full force and effect. (b) Notwithstanding the foregoing, if applicable law prohibits or restricts You from fully and/or specifically complying with Sections 2 and/or 3 or prevents the enforceability of either of those Sections, this License will immediately terminate and You must immediately discontinue any use of the Covered Code and destroy all copies of it that are in your possession or control.</p> <p>13.6 Dispute Resolution. Any litigation or other dispute resolution between You and Apple relating to this License shall take place in the Northern District of California, and You and Apple hereby consent to the personal jurisdiction of, and venue in, the state and federal courts within that District with respect to this License. The application of the United Nations Convention on Contracts for the International Sale of Goods is expressly excluded.</p> <p>13.7 Entire Agreement; Governing Law. This License constitutes the entire agreement between the parties with respect to the subject matter hereof. This License shall be governed by the laws of the United States and the State of California, except that body of California law concerning conflicts of law.</p> <p>Where You are located in the province of Quebec, Canada, the following clause applies: The parties hereby confirm that they have requested that this License and all related documents be drafted in English. Les parties ont exige que le present contrat et tous les documents connexes soient rediges en anglais.</p> <p>EXHIBIT A.</p> <p>\"Portions Copyright (c) 1999-2003 Apple Computer, Inc. All Rights Reserved.</p> <p>This file contains Original Code and/or Modifications of Original Code as defined in and that are subject to the Apple Public Source License Version 2.0 (the 'License'). You may not use this file except in compliance with the License. Please obtain a copy of the License at http://www.opensource.apple.com/apsl/</p> <p>The Original Code and all software distributed under the License are distributed on an 'AS IS' basis, WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, AND APPLE HEREBY DISCLAIMS ALL SUCH WARRANTIES, INCLUDING WITHOUT LIMITATION, ANY WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, QUIET ENJOYMENT OR NON-INFRINGEMENT. Please see the License for the specific language governing rights and limitations under the License.\"</p>"},{"location":"user-guide/user-interface/licenses/common-public-license-version-1.0.html","title":"Common Public License Version 1.0","text":"<p>THE ACCOMPANYING PROGRAM IS PROVIDED UNDER THE TERMS OF THIS COMMON PUBLIC LICENSE (\"AGREEMENT\"). ANY USE, REPRODUCTION OR DISTRIBUTION OF THE PROGRAM CONSTITUTES RECIPIENT'S ACCEPTANCE OF THIS AGREEMENT.</p> <p>1. DEFINITIONS</p> <p>\"Contribution\" means:</p> <pre><code>    a) in the case of the initial Contributor, the initial code and\ndocumentation distributed under this Agreement, and\n\n    b) in the case of each subsequent Contributor:\n\n    i) changes to the Program, and\n\n    ii) additions to the Program;\n\n    where such changes and/or additions to the Program originate from and are\ndistributed by that particular Contributor. A Contribution 'originates' from a\nContributor if it was added to the Program by such Contributor itself or anyone\nacting on such Contributor's behalf. Contributions do not include additions to\nthe Program which: (i) are separate modules of software distributed in\nconjunction with the Program under their own license agreement, and (ii) are not\nderivative works of the Program.\n</code></pre> <p>\"Contributor\" means any person or entity that distributes the Program.</p> <p>\"Licensed Patents \" mean patent claims licensable by a Contributor which are necessarily infringed by the use or sale of its Contribution alone or when combined with the Program.</p> <p>\"Program\" means the Contributions distributed in accordance with this Agreement.</p> <p>\"Recipient\" means anyone who receives the Program under this Agreement, including all Contributors.</p> <p>2. GRANT OF RIGHTS</p> <pre><code>    a) Subject to the terms of this Agreement, each Contributor hereby grants\nRecipient a non-exclusive, worldwide, royalty-free copyright license to\nreproduce, prepare derivative works of, publicly display, publicly perform,\ndistribute and sublicense the Contribution of such Contributor, if any, and such\nderivative works, in source code and object code form.\n\n    b) Subject to the terms of this Agreement, each Contributor hereby grants\nRecipient a non-exclusive, worldwide, royalty-free patent license under Licensed\nPatents to make, use, sell, offer to sell, import and otherwise transfer the\nContribution of such Contributor, if any, in source code and object code form.\nThis patent license shall apply to the combination of the Contribution and the\nProgram if, at the time the Contribution is added by the Contributor, such\naddition of the Contribution causes such combination to be covered by the\nLicensed Patents. The patent license shall not apply to any other combinations\nwhich include the Contribution. No hardware per se is licensed hereunder.\n\n    c) Recipient understands that although each Contributor grants the licenses\nto its Contributions set forth herein, no assurances are provided by any\nContributor that the Program does not infringe the patent or other intellectual\nproperty rights of any other entity. Each Contributor disclaims any liability to\nRecipient for claims brought by any other entity based on infringement of\nintellectual property rights or otherwise. As a condition to exercising the\nrights and licenses granted hereunder, each Recipient hereby assumes sole\nresponsibility to secure any other intellectual property rights needed, if any.\nFor example, if a third party patent license is required to allow Recipient to\ndistribute the Program, it is Recipient's responsibility to acquire that license\nbefore distributing the Program.\n\n    d) Each Contributor represents that to its knowledge it has sufficient\ncopyright rights in its Contribution, if any, to grant the copyright license set\nforth in this Agreement.\n</code></pre> <p>3. REQUIREMENTS</p> <p>A Contributor may choose to distribute the Program in object code form under its own license agreement, provided that:</p> <pre><code>    a) it complies with the terms and conditions of this Agreement; and\n\n    b) its license agreement:\n\n    i) effectively disclaims on behalf of all Contributors all warranties and\nconditions, express and implied, including warranties or conditions of title and\nnon-infringement, and implied warranties or conditions of merchantability and\nfitness for a particular purpose;\n\n    ii) effectively excludes on behalf of all Contributors all liability for\ndamages, including direct, indirect, special, incidental and consequential\ndamages, such as lost profits;\n\n    iii) states that any provisions which differ from this Agreement are offered\nby that Contributor alone and not by any other party; and\n\n    iv) states that source code for the Program is available from such\nContributor, and informs licensees how to obtain it in a reasonable manner on or\nthrough a medium customarily used for software exchange. \n</code></pre> <p>When the Program is made available in source code form:</p> <pre><code>    a) it must be made available under this Agreement; and\n\n    b) a copy of this Agreement must be included with each copy of the Program. \n</code></pre> <p>Contributors may not remove or alter any copyright notices contained within the Program.</p> <p>Each Contributor must identify itself as the originator of its Contribution, if any, in a manner that reasonably allows subsequent Recipients to identify the originator of the Contribution.</p> <p>4. COMMERCIAL DISTRIBUTION</p> <p>Commercial distributors of software may accept certain responsibilities with respect to end users, business partners and the like. While this license is intended to facilitate the commercial use of the Program, the Contributor who includes the Program in a commercial product offering should do so in a manner which does not create potential liability for other Contributors. Therefore, if a Contributor includes the Program in a commercial product offering, such Contributor (\"Commercial Contributor\") hereby agrees to defend and indemnify every other Contributor (\"Indemnified Contributor\") against any losses, damages and costs (collectively \"Losses\") arising from claims, lawsuits and other legal actions brought by a third party against the Indemnified Contributor to the extent caused by the acts or omissions of such Commercial Contributor in connection with its distribution of the Program in a commercial product offering. The obligations in this section do not apply to any claims or Losses relating to any actual or alleged intellectual property infringement. In order to qualify, an Indemnified Contributor must: a) promptly notify the Commercial Contributor in writing of such claim, and b) allow the Commercial Contributor to control, and cooperate with the Commercial Contributor in, the defense and any related settlement negotiations. The Indemnified Contributor may participate in any such claim at its own expense.</p> <p>For example, a Contributor might include the Program in a commercial product offering, Product X. That Contributor is then a Commercial Contributor. If that Commercial Contributor then makes performance claims, or offers warranties related to Product X, those performance claims and warranties are such Commercial Contributor's responsibility alone. Under this section, the Commercial Contributor would have to defend claims against the other Contributors related to those performance claims and warranties, and if a court requires any other Contributor to pay any damages as a result, the Commercial Contributor must pay those damages.</p> <p>5. NO WARRANTY</p> <p>EXCEPT AS EXPRESSLY SET FORTH IN THIS AGREEMENT, THE PROGRAM IS PROVIDED ON AN \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED INCLUDING, WITHOUT LIMITATION, ANY WARRANTIES OR CONDITIONS OF TITLE, NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. Each Recipient is solely responsible for determining the appropriateness of using and distributing the Program and assumes all risks associated with its exercise of rights under this Agreement, including but not limited to the risks and costs of program errors, compliance with applicable laws, damage to or loss of data, programs or equipment, and unavailability or interruption of operations.</p> <p>6. DISCLAIMER OF LIABILITY</p> <p>EXCEPT AS EXPRESSLY SET FORTH IN THIS AGREEMENT, NEITHER RECIPIENT NOR ANY CONTRIBUTORS SHALL HAVE ANY LIABILITY FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING WITHOUT LIMITATION LOST PROFITS), HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OR DISTRIBUTION OF THE PROGRAM OR THE EXERCISE OF ANY RIGHTS GRANTED HEREUNDER, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.</p> <p>7. GENERAL</p> <p>If any provision of this Agreement is invalid or unenforceable under applicable law, it shall not affect the validity or enforceability of the remainder of the terms of this Agreement, and without further action by the parties hereto, such provision shall be reformed to the minimum extent necessary to make such provision valid and enforceable.</p> <p>If Recipient institutes patent litigation against a Contributor with respect to a patent applicable to software (including a cross-claim or counterclaim in a lawsuit), then any patent licenses granted by that Contributor to such Recipient under this Agreement shall terminate as of the date such litigation is filed. In addition, if Recipient institutes patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Program itself (excluding combinations of the Program with other software or hardware) infringes such Recipient's patent(s), then such Recipient's rights granted under Section 2(b) shall terminate as of the date such litigation is filed.</p> <p>All Recipient's rights under this Agreement shall terminate if it fails to comply with any of the material terms or conditions of this Agreement and does not cure such failure in a reasonable period of time after becoming aware of such noncompliance. If all Recipient's rights under this Agreement terminate, Recipient agrees to cease use and distribution of the Program as soon as reasonably practicable. However, Recipient's obligations under this Agreement and any licenses granted by Recipient relating to the Program shall continue and survive.</p> <p>Everyone is permitted to copy and distribute copies of this Agreement, but in order to avoid inconsistency the Agreement is copyrighted and may only be modified in the following manner. The Agreement Steward reserves the right to publish new versions (including revisions) of this Agreement from time to time. No one other than the Agreement Steward has the right to modify this Agreement. IBM is the initial Agreement Steward. IBM may assign the responsibility to serve as the Agreement Steward to a suitable separate entity. Each new version of the Agreement will be given a distinguishing version number. The Program (including Contributions) may always be distributed subject to the version of the Agreement under which it was received. In addition, after a new version of the Agreement is published, Contributor may elect to distribute the Program (including its Contributions) under the new version. Except as expressly stated in Sections 2(a) and 2(b) above, Recipient receives no rights or licenses to the intellectual property of any Contributor under this Agreement, whether expressly, by implication, estoppel or otherwise. All rights in the Program not expressly granted under this Agreement are reserved.</p> <p>This Agreement is governed by the laws of the State of New York and the intellectual property laws of the United States of America. No party to this Agreement will bring a legal action under this Agreement more than one year after the cause of action arose. Each party waives its rights to a jury trial in any resulting litigation.</p>"},{"location":"user-guide/user-interface/licenses/gnu-lesser-general-public-license-v2.1-for-libiberty.html","title":"GNU Lesser General Public License v2.1 for libiberty","text":"<pre><code>                  GNU LESSER GENERAL PUBLIC LICENSE\n                       Version 2.1, February 1999\n\n Copyright (C) 1991, 1999 Free Software Foundation, Inc.\n     51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n[This is the first released version of the Lesser GPL.  It also counts\n as the successor of the GNU Library Public License, version 2, hence\n the version number 2.1.]\n\n                            Preamble\n\n  The licenses for most software are designed to take away your\nfreedom to share and change it.  By contrast, the GNU General Public\nLicenses are intended to guarantee your freedom to share and change\nfree software--to make sure the software is free for all its users.\n\n  This license, the Lesser General Public License, applies to some\nspecially designated software packages--typically libraries--of the\nFree Software Foundation and other authors who decide to use it.  You\ncan use it too, but we suggest you first think carefully about whether\nthis license or the ordinary General Public License is the better\nstrategy to use in any particular case, based on the explanations below.\n\n  When we speak of free software, we are referring to freedom of use,\nnot price.  Our General Public Licenses are designed to make sure that\nyou have the freedom to distribute copies of free software (and charge\nfor this service if you wish); that you receive source code or can get\nit if you want it; that you can change the software and use pieces of\nit in new free programs; and that you are informed that you can do\nthese things.\n\n  To protect your rights, we need to make restrictions that forbid\ndistributors to deny you these rights or to ask you to surrender these\nrights.  These restrictions translate to certain responsibilities for\nyou if you distribute copies of the library or if you modify it.\n\n  For example, if you distribute copies of the library, whether gratis\nor for a fee, you must give the recipients all the rights that we gave\nyou.  You must make sure that they, too, receive or can get the source\ncode.  If you link other code with the library, you must provide\ncomplete object files to the recipients, so that they can relink them\nwith the library after making changes to the library and recompiling\nit.  And you must show them these terms so they know their rights.\n\n  We protect your rights with a two-step method: (1) we copyright the\nlibrary, and (2) we offer you this license, which gives you legal\npermission to copy, distribute and/or modify the library.\n\n  To protect each distributor, we want to make it very clear that\nthere is no warranty for the free library.  Also, if the library is\nmodified by someone else and passed on, the recipients should know\nthat what they have is not the original version, so that the original\nauthor's reputation will not be affected by problems that might be\nintroduced by others.\n\f\n  Finally, software patents pose a constant threat to the existence of\nany free program.  We wish to make sure that a company cannot\neffectively restrict the users of a free program by obtaining a\nrestrictive license from a patent holder.  Therefore, we insist that\nany patent license obtained for a version of the library must be\nconsistent with the full freedom of use specified in this license.\n\n  Most GNU software, including some libraries, is covered by the\nordinary GNU General Public License.  This license, the GNU Lesser\nGeneral Public License, applies to certain designated libraries, and\nis quite different from the ordinary General Public License.  We use\nthis license for certain libraries in order to permit linking those\nlibraries into non-free programs.\n\n  When a program is linked with a library, whether statically or using\na shared library, the combination of the two is legally speaking a\ncombined work, a derivative of the original library.  The ordinary\nGeneral Public License therefore permits such linking only if the\nentire combination fits its criteria of freedom.  The Lesser General\nPublic License permits more lax criteria for linking other code with\nthe library.\n\n  We call this license the \"Lesser\" General Public License because it\ndoes Less to protect the user's freedom than the ordinary General\nPublic License.  It also provides other free software developers Less\nof an advantage over competing non-free programs.  These disadvantages\nare the reason we use the ordinary General Public License for many\nlibraries.  However, the Lesser license provides advantages in certain\nspecial circumstances.\n\n  For example, on rare occasions, there may be a special need to\nencourage the widest possible use of a certain library, so that it becomes\na de-facto standard.  To achieve this, non-free programs must be\nallowed to use the library.  A more frequent case is that a free\nlibrary does the same job as widely used non-free libraries.  In this\ncase, there is little to gain by limiting the free library to free\nsoftware only, so we use the Lesser General Public License.\n\n  In other cases, permission to use a particular library in non-free\nprograms enables a greater number of people to use a large body of\nfree software.  For example, permission to use the GNU C Library in\nnon-free programs enables many more people to use the whole GNU\noperating system, as well as its variant, the GNU/Linux operating\nsystem.\n\n  Although the Lesser General Public License is Less protective of the\nusers' freedom, it does ensure that the user of a program that is\nlinked with the Library has the freedom and the wherewithal to run\nthat program using a modified version of the Library.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.  Pay close attention to the difference between a\n\"work based on the library\" and a \"work that uses the library\".  The\nformer contains code derived from the library, whereas the latter must\nbe combined with the library in order to run.\n\f\n                  GNU LESSER GENERAL PUBLIC LICENSE\n   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n\n  0. This License Agreement applies to any software library or other\nprogram which contains a notice placed by the copyright holder or\nother authorized party saying it may be distributed under the terms of\nthis Lesser General Public License (also called \"this License\").\nEach licensee is addressed as \"you\".\n\n  A \"library\" means a collection of software functions and/or data\nprepared so as to be conveniently linked with application programs\n(which use some of those functions and data) to form executables.\n\n  The \"Library\", below, refers to any such software library or work\nwhich has been distributed under these terms.  A \"work based on the\nLibrary\" means either the Library or any derivative work under\ncopyright law: that is to say, a work containing the Library or a\nportion of it, either verbatim or with modifications and/or translated\nstraightforwardly into another language.  (Hereinafter, translation is\nincluded without limitation in the term \"modification\".)\n\n  \"Source code\" for a work means the preferred form of the work for\nmaking modifications to it.  For a library, complete source code means\nall the source code for all modules it contains, plus any associated\ninterface definition files, plus the scripts used to control compilation\nand installation of the library.\n\n  Activities other than copying, distribution and modification are not\ncovered by this License; they are outside its scope.  The act of\nrunning a program using the Library is not restricted, and output from\nsuch a program is covered only if its contents constitute a work based\non the Library (independent of the use of the Library in a tool for\nwriting it).  Whether that is true depends on what the Library does\nand what the program that uses the Library does.\n\n\n  1. You may copy and distribute verbatim copies of the Library's\ncomplete source code as you receive it, in any medium, provided that\nyou conspicuously and appropriately publish on each copy an\nappropriate copyright notice and disclaimer of warranty; keep intact\nall the notices that refer to this License and to the absence of any\nwarranty; and distribute a copy of this License along with the\nLibrary.\n\n  You may charge a fee for the physical act of transferring a copy,\nand you may at your option offer warranty protection in exchange for a\nfee.\n\f\n  2. You may modify your copy or copies of the Library or any portion\nof it, thus forming a work based on the Library, and copy and\ndistribute such modifications or work under the terms of Section 1\nabove, provided that you also meet all of these conditions:\n\n    a) The modified work must itself be a software library.\n\n    b) You must cause the files modified to carry prominent notices\n    stating that you changed the files and the date of any change.\n\n    c) You must cause the whole of the work to be licensed at no\n    charge to all third parties under the terms of this License.\n\n    d) If a facility in the modified Library refers to a function or a\n    table of data to be supplied by an application program that uses\n    the facility, other than as an argument passed when the facility\n    is invoked, then you must make a good faith effort to ensure that,\n    in the event an application does not supply such function or\n    table, the facility still operates, and performs whatever part of\n    its purpose remains meaningful.\n\n    (For example, a function in a library to compute square roots has\n    a purpose that is entirely well-defined independent of the\n    application.  Therefore, Subsection 2d requires that any\n    application-supplied function or table used by this function must\n    be optional: if the application does not supply it, the square\n    root function must still compute square roots.)\n</code></pre> <p>These requirements apply to the modified work as a whole. If identifiable sections of that work are not derived from the Library, and can be reasonably considered independent and separate works in themselves, then this License, and its terms, do not apply to those sections when you distribute them as separate works. But when you distribute the same sections as part of a whole which is a work based on the Library, the distribution of the whole must be on the terms of this License, whose permissions for other licensees extend to the entire whole, and thus to each and every part regardless of who wrote it.</p> <p>Thus, it is not the intent of this section to claim rights or contest your rights to work written entirely by you; rather, the intent is to exercise the right to control the distribution of derivative or collective works based on the Library.</p> <p>In addition, mere aggregation of another work not based on the Library with the Library (or with a work based on the Library) on a volume of a storage or distribution medium does not bring the other work under the scope of this License.</p> <pre><code>  3. You may opt to apply the terms of the ordinary GNU General Public\nLicense instead of this License to a given copy of the Library.  To do\nthis, you must alter all the notices that refer to this License, so\nthat they refer to the ordinary GNU General Public License, version 2,\ninstead of to this License.  (If a newer version than version 2 of the\nordinary GNU General Public License has appeared, then you can specify\nthat version instead if you wish.)  Do not make any other change in\nthese notices.\n\f\n  Once this change is made in a given copy, it is irreversible for\nthat copy, so the ordinary GNU General Public License applies to all\nsubsequent copies and derivative works made from that copy.\n\n  This option is useful when you wish to copy part of the code of\nthe Library into a program that is not a library.\n\n  4. You may copy and distribute the Library (or a portion or\nderivative of it, under Section 2) in object code or executable form\nunder the terms of Sections 1 and 2 above provided that you accompany\nit with the complete corresponding machine-readable source code, which\nmust be distributed under the terms of Sections 1 and 2 above on a\nmedium customarily used for software interchange.\n\n  If distribution of object code is made by offering access to copy\nfrom a designated place, then offering equivalent access to copy the\nsource code from the same place satisfies the requirement to\ndistribute the source code, even though third parties are not\ncompelled to copy the source along with the object code.\n\n  5. A program that contains no derivative of any portion of the\nLibrary, but is designed to work with the Library by being compiled or\nlinked with it, is called a \"work that uses the Library\".  Such a\nwork, in isolation, is not a derivative work of the Library, and\ntherefore falls outside the scope of this License.\n\n  However, linking a \"work that uses the Library\" with the Library\ncreates an executable that is a derivative of the Library (because it\ncontains portions of the Library), rather than a \"work that uses the\nlibrary\".  The executable is therefore covered by this License.\nSection 6 states terms for distribution of such executables.\n\n  When a \"work that uses the Library\" uses material from a header file\nthat is part of the Library, the object code for the work may be a\nderivative work of the Library even though the source code is not.\nWhether this is true is especially significant if the work can be\nlinked without the Library, or if the work is itself a library.  The\nthreshold for this to be true is not precisely defined by law.\n\n  If such an object file uses only numerical parameters, data\nstructure layouts and accessors, and small macros and small inline\nfunctions (ten lines or less in length), then the use of the object\nfile is unrestricted, regardless of whether it is legally a derivative\nwork.  (Executables containing this object code plus portions of the\nLibrary will still fall under Section 6.)\n\n  Otherwise, if the work is a derivative of the Library, you may\ndistribute the object code for the work under the terms of Section 6.\nAny executables containing that work also fall under Section 6,\nwhether or not they are linked directly with the Library itself.\n\f\n  6. As an exception to the Sections above, you may also combine or\nlink a \"work that uses the Library\" with the Library to produce a\nwork containing portions of the Library, and distribute that work\nunder terms of your choice, provided that the terms permit\nmodification of the work for the customer's own use and reverse\nengineering for debugging such modifications.\n\n  You must give prominent notice with each copy of the work that the\nLibrary is used in it and that the Library and its use are covered by\nthis License.  You must supply a copy of this License.  If the work\nduring execution displays copyright notices, you must include the\ncopyright notice for the Library among them, as well as a reference\ndirecting the user to the copy of this License.  Also, you must do one\nof these things:\n\n    a) Accompany the work with the complete corresponding\n    machine-readable source code for the Library including whatever\n    changes were used in the work (which must be distributed under\n    Sections 1 and 2 above); and, if the work is an executable linked\n    with the Library, with the complete machine-readable \"work that\n    uses the Library\", as object code and/or source code, so that the\n    user can modify the Library and then relink to produce a modified\n    executable containing the modified Library.  (It is understood\n    that the user who changes the contents of definitions files in the\n    Library will not necessarily be able to recompile the application\n    to use the modified definitions.)\n\n    b) Use a suitable shared library mechanism for linking with the\n    Library.  A suitable mechanism is one that (1) uses at run time a\n    copy of the library already present on the user's computer system,\n    rather than copying library functions into the executable, and (2)\n    will operate properly with a modified version of the library, if\n    the user installs one, as long as the modified version is\n    interface-compatible with the version that the work was made with.\n\n    c) Accompany the work with a written offer, valid for at\n    least three years, to give the same user the materials\n    specified in Subsection 6a, above, for a charge no more\n    than the cost of performing this distribution.\n\n    d) If distribution of the work is made by offering access to copy\n    from a designated place, offer equivalent access to copy the above\n    specified materials from the same place.\n\n    e) Verify that the user has already received a copy of these\n    materials or that you have already sent this user a copy.\n\n  For an executable, the required form of the \"work that uses the\nLibrary\" must include any data and utility programs needed for\nreproducing the executable from it.  However, as a special exception,\nthe materials to be distributed need not include anything that is\nnormally distributed (in either source or binary form) with the major\ncomponents (compiler, kernel, and so on) of the operating system on\nwhich the executable runs, unless that component itself accompanies\nthe executable.\n\n  It may happen that this requirement contradicts the license\nrestrictions of other proprietary libraries that do not normally\naccompany the operating system.  Such a contradiction means you cannot\nuse both them and the Library together in an executable that you\ndistribute.\n\f\n  7. You may place library facilities that are a work based on the\nLibrary side-by-side in a single library together with other library\nfacilities not covered by this License, and distribute such a combined\nlibrary, provided that the separate distribution of the work based on\nthe Library and of the other library facilities is otherwise\npermitted, and provided that you do these two things:\n\n    a) Accompany the combined library with a copy of the same work\n    based on the Library, uncombined with any other library\n    facilities.  This must be distributed under the terms of the\n    Sections above.\n\n    b) Give prominent notice with the combined library of the fact\n    that part of it is a work based on the Library, and explaining\n    where to find the accompanying uncombined form of the same work.\n\n  8. You may not copy, modify, sublicense, link with, or distribute\nthe Library except as expressly provided under this License.  Any\nattempt otherwise to copy, modify, sublicense, link with, or\ndistribute the Library is void, and will automatically terminate your\nrights under this License.  However, parties who have received copies,\nor rights, from you under this License will not have their licenses\nterminated so long as such parties remain in full compliance.\n\n  9. You are not required to accept this License, since you have not\nsigned it.  However, nothing else grants you permission to modify or\ndistribute the Library or its derivative works.  These actions are\nprohibited by law if you do not accept this License.  Therefore, by\nmodifying or distributing the Library (or any work based on the\nLibrary), you indicate your acceptance of this License to do so, and\nall its terms and conditions for copying, distributing or modifying\nthe Library or works based on it.\n\n  10. Each time you redistribute the Library (or any work based on the\nLibrary), the recipient automatically receives a license from the\noriginal licensor to copy, distribute, link with or modify the Library\nsubject to these terms and conditions.  You may not impose any further\nrestrictions on the recipients' exercise of the rights granted herein.\nYou are not responsible for enforcing compliance by third parties with\nthis License.\n\f\n  11. If, as a consequence of a court judgment or allegation of patent\ninfringement or for any other reason (not limited to patent issues),\nconditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot\ndistribute so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you\nmay not distribute the Library at all.  For example, if a patent\nlicense would not permit royalty-free redistribution of the Library by\nall those who receive copies directly or indirectly through you, then\nthe only way you could satisfy both it and this License would be to\nrefrain entirely from distribution of the Library.\n</code></pre> <p>If any portion of this section is held invalid or unenforceable under any particular circumstance, the balance of the section is intended to apply, and the section as a whole is intended to apply in other circumstances.</p> <p>It is not the purpose of this section to induce you to infringe any patents or other property right claims or to contest validity of any such claims; this section has the sole purpose of protecting the integrity of the free software distribution system which is implemented by public license practices. Many people have made generous contributions to the wide range of software distributed through that system in reliance on consistent application of that system; it is up to the author/donor to decide if he or she is willing to distribute software through any other system and a licensee cannot impose that choice.</p> <p>This section is intended to make thoroughly clear what is believed to be a consequence of the rest of this License.</p> <pre><code>  12. If the distribution and/or use of the Library is restricted in\ncertain countries either by patents or by copyrighted interfaces, the\noriginal copyright holder who places the Library under this License may add\nan explicit geographical distribution limitation excluding those countries,\nso that distribution is permitted only in or among countries not thus\nexcluded.  In such case, this License incorporates the limitation as if\nwritten in the body of this License.\n\n  13. The Free Software Foundation may publish revised and/or new\nversions of the Lesser General Public License from time to time.\nSuch new versions will be similar in spirit to the present version,\nbut may differ in detail to address new problems or concerns.\n</code></pre> <p>Each version is given a distinguishing version number. If the Library specifies a version number of this License which applies to it and \"any later version\", you have the option of following the terms and conditions either of that version or of any later version published by the Free Software Foundation. If the Library does not specify a license version number, you may choose any version ever published by the Free Software Foundation. 14. If you wish to incorporate parts of the Library into other free programs whose distribution conditions are incompatible with these, write to the author to ask for permission. For software which is copyrighted by the Free Software Foundation, write to the Free Software Foundation; we sometimes make exceptions for this. Our decision will be guided by the two goals of preserving the free status of all derivatives of our free software and of promoting the sharing and reuse of software generally.</p> <pre><code>                            NO WARRANTY\n\n  15. BECAUSE THE LIBRARY IS LICENSED FREE OF CHARGE, THERE IS NO\nWARRANTY FOR THE LIBRARY, TO THE EXTENT PERMITTED BY APPLICABLE LAW.\nEXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR\nOTHER PARTIES PROVIDE THE LIBRARY \"AS IS\" WITHOUT WARRANTY OF ANY\nKIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE\nLIBRARY IS WITH YOU.  SHOULD THE LIBRARY PROVE DEFECTIVE, YOU ASSUME\nTHE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n  16. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN\nWRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY\nAND/OR REDISTRIBUTE THE LIBRARY AS PERMITTED ABOVE, BE LIABLE TO YOU\nFOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR\nCONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE\nLIBRARY (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING\nRENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A\nFAILURE OF THE LIBRARY TO OPERATE WITH ANY OTHER SOFTWARE), EVEN IF\nSUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH\nDAMAGES.\n\n                     END OF TERMS AND CONDITIONS\n\f\n           How to Apply These Terms to Your New Libraries\n\n  If you develop a new library, and you want it to be of the greatest\npossible use to the public, we recommend making it free software that\neveryone can redistribute and change.  You can do so by permitting\nredistribution under these terms (or, alternatively, under the terms of the\nordinary General Public License).\n\n  To apply these terms, attach the following notices to the library.  It is\nsafest to attach them to the start of each source file to most effectively\nconvey the exclusion of warranty; and each file should have at least the\n\"copyright\" line and a pointer to where the full notice is found.\n\n    &lt;one line to give the library's name and a brief idea of what it does.&gt;\n    Copyright (C) &lt;year&gt;  &lt;name of author&gt;\n\n    This library is free software; you can redistribute it and/or\n    modify it under the terms of the GNU Lesser General Public\n    License as published by the Free Software Foundation; either\n    version 2.1 of the License, or (at your option) any later version.\n\n    This library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n    Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public\n    License along with this library; if not, write to the Free Software\n    Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n</code></pre> <p>Also add information on how to contact you by electronic and paper mail.</p> <p>You should also get your employer (if you work as a programmer) or your school, if any, to sign a \"copyright disclaimer\" for the library, if necessary. Here is a sample; alter the names:</p> <pre><code>  Yoyodyne, Inc., hereby disclaims all copyright interest in the\n  library `Frob' (a library for tweaking knobs) written by James Random Hacker.\n\n  &lt;signature of Ty Coon&gt;, 1 April 1990\n  Ty Coon, President of Vice\n</code></pre> <p>That's all there is to it!</p>"},{"location":"user-guide/user-interface/licenses/pcre2-licence.html","title":"PCRE2 LICENCE","text":"<pre><code>PCRE2 is a library of functions to support regular expressions whose syntax\nand semantics are as close as possible to those of the Perl 5 language.\n\nRelease 10 of PCRE2 is distributed under the terms of the \"BSD\" licence, as\nspecified below. The documentation for PCRE2, supplied in the \"doc\"\ndirectory, is distributed under the same terms as the software itself. The data\nin the testdata directory is not copyrighted and is in the public domain.\n\nThe basic library functions are written in C and are freestanding. Also\nincluded in the distribution is a just-in-time compiler that can be used to\noptimize pattern matching. This is an optional feature that can be omitted when\nthe library is built.\n\n\nTHE BASIC LIBRARY FUNCTIONS\n---------------------------\n\nWritten by:       Philip Hazel\nEmail local part: ph10\nEmail domain:     cam.ac.uk\n\nUniversity of Cambridge Computing Service,\nCambridge, England.\n\nCopyright (c) 1997-2016 University of Cambridge\nAll rights reserved.\n\n\nPCRE2 JUST-IN-TIME COMPILATION SUPPORT\n--------------------------------------\n\nWritten by:       Zoltan Herczeg\nEmail local part: hzmester\nEmain domain:     freemail.hu\n\nCopyright(c) 2010-2016 Zoltan Herczeg\nAll rights reserved.\n\n\nSTACK-LESS JUST-IN-TIME COMPILER\n--------------------------------\n\nWritten by:       Zoltan Herczeg\nEmail local part: hzmester\nEmain domain:     freemail.hu\n\nCopyright(c) 2009-2016 Zoltan Herczeg\nAll rights reserved.\n\n\nTHE \"BSD\" LICENCE\n-----------------\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n    * Redistributions of source code must retain the above copyright notice,\n      this list of conditions and the following disclaimer.\n\n    * Redistributions in binary form must reproduce the above copyright\n      notice, this list of conditions and the following disclaimer in the\n      documentation and/or other materials provided with the distribution.\n\n    * Neither the name of the University of Cambridge nor the names of any\n      contributors may be used to endorse or promote products derived from this\n      software without specific prior written permission.\n</code></pre> <p>THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</p> <p>End</p>"},{"location":"user-guide/user-interface/menu-bar/debugger.html","title":"Debugger submenu","text":"<p>Here are the debugger commands:</p> <ul> <li>Debugger window</li> <li>Tracing submenu</li> <li>Thread list</li> <li>Module list</li> <li>Start process</li> <li>Attach to process...</li> <li>Process options</li> <li>Pause process</li> <li>Terminate process</li> <li>Continue backwards</li> <li>Detach from process</li> <li>Take memory snapshot</li> <li>Manual memory regions</li> <li>Step into</li> <li>Step over</li> <li>Run until return</li> <li>Run to cursor</li> <li>Step into backwards</li> <li>Step over backwards</li> <li>Run to cursor backwards</li> <li>Set current ip</li> <li>Show application screen</li> <li>Breakpoints</li> <li>Source view</li> <li>Watch view (source level)</li> <li>Watches (assembler level)</li> <li>Tracing</li> <li>Debugger options</li> <li>Switch debugger...</li> </ul> <p>See also</p> <ul> <li>Menu Bar</li> <li>How to launch remote debugging</li> <li>Debugger for macOS</li> <li>Debugger for Bochs</li> <li>Remote GDB debugger</li> <li>Remote iOS debugger</li> <li>WinDbg debugger</li> <li>Replayer debugger</li> <li>PIN Tracer</li> <li>Dalvik debugger</li> </ul>"},{"location":"user-guide/user-interface/menu-bar/edit.html","title":"Edit submenu","text":"<p>This submenu allows the user to modify text representation and to patch the file. It also has the commands to control the analysis:</p> <ul> <li>Anchor</li> <li>Export data</li> <li>Undo</li> <li>Redo</li> <li>Convert to instruction</li> <li>Convert to data</li> <li>Convert to STRLIT string</li> <li>Convert to array</li> <li>Undefine</li> <li>Rename</li> <li>Operand types submenu</li> <li>Comments submenu</li> <li>Functions submenu</li> <li>Structs submenu</li> <li>Segments submenu</li> <li>Patch program submenu</li> <li>Other submenu</li> <li>Plugins submenu</li> </ul> <p>See also Menu Bar submenus.</p>"},{"location":"user-guide/user-interface/menu-bar/file.html","title":"File submenu","text":"<p>In this submenu you can: </p> <ul> <li>Load file Load file</li> <li>Script command Execute a script command</li> <li>Produce output file Generate output file</li> <li>OS shell Execute OS commands</li> <li>Save database Save database in packed form</li> <li>Save database as... Save database in packed form in another file</li> <li>Take database snapshot Take database snapshot</li> <li>Abort Abort - do not save changes</li> <li>Quit Quit to DOS - save changes</li> </ul> <p>See also Menu Bar submenus.</p>"},{"location":"user-guide/user-interface/menu-bar/jump.html","title":"Jump submenu","text":"<p>In this menu, you can select a command to jump to the specified location in the file. Jumps are very fast and your previous position is saved. This submenu contains the following items:</p> <ul> <li>Jump immediate</li> <li>Jump back</li> <li>Undo last jump back</li> <li>Empty navigation stack</li> <li>Jump to address</li> <li>Jump to named location</li> <li>Jump to segment start</li> <li>Jump to segment register change point</li> <li>Jump to problematic location</li> <li>Mark location</li> <li>Jump to marked position</li> <li>Jump to cross reference</li> <li>Jump to cross reference to operand</li> <li>Jump to function</li> <li>Jump to entry point</li> <li>Jump to file offset</li> </ul> <p>See also</p> <ul> <li>Search menu for fast navigating.</li> <li>Jumps Stack concept.</li> <li>Menu Bar submenus</li> </ul>"},{"location":"user-guide/user-interface/menu-bar/jump.html#jump-immediate","title":"Jump immediate","text":"<pre><code> Action    name: JumpEnter\n\n</code></pre> <p>By pressing \\ you navigate in the program in the same way as in a hypertext (the way the web browsers and help screens use). <p>This is the easiest way to explore the program: just position the cursor at the desired name and press \"@\\\". <p>Your current address is saved in the jump stack.</p> <p>The Jump back command (usually Esc) will return you back.</p> <p>If the cursor is at a stack variable, a window with stack variables is opened and the definition of the stack variable is displayed.</p> <p>See also</p> <ul> <li>Empty Stack command.</li> </ul>"},{"location":"user-guide/user-interface/menu-bar/jump.html#jump-back","title":"Jump back","text":"<pre><code> Action    name: Return\n\n</code></pre> <p>This command brings you back to the previous position in the history. It takes positions from Jumps Stack.</p> <p>See also</p> <ul> <li>Undo \"jump back\" command</li> <li>Empty Stack command.</li> </ul>"},{"location":"user-guide/user-interface/menu-bar/jump.html#undo-the-last-return-command","title":"Undo the last 'Return' Command","text":"<pre><code> Action    name: UndoReturn\n\n</code></pre> <p>This command cancels the last Jump back command.</p> <p>See also</p> <ul> <li>Empty navigation stack command.</li> </ul>"},{"location":"user-guide/user-interface/menu-bar/jump.html#empty-navigation-stack","title":"Empty navigation stack","text":"<pre><code> Action    name: EmptyStack\n\n</code></pre> <p>This command clears the jump stack.</p> <p>See also</p> <ul> <li>Jump back command.</li> </ul>"},{"location":"user-guide/user-interface/menu-bar/jump.html#jump-stack","title":"Jump stack","text":"<p>Each IDA Window has its own jump stack. This stack keeps the cursor locations. Many IDA commands use the jump stack, i.e. they save the old cursor position to the stack. For example, when you are at the address 3000:0100 and press the Ctrl-C key (find instruction), the 3000:0100 is saved into the jump stack and the search is started. Afterwards, you can return to the old position using Jump back command.</p> <p>You can clear the jump stack using the Empty stack menu command.</p>"},{"location":"user-guide/user-interface/menu-bar/jump.html#jump-to-the-specified-address","title":"Jump to the specified address","text":"<pre><code>Action    name: JumpAsk\n\n</code></pre> <p>This command jumps to the specified address in the program. IDA will ask you for the target address. You can enter a name or an address as a hexadecimal number with or without a segment. If you enter a valid address then:</p> <ul> <li>the current address is saved in the jump stack.</li> <li>the cursor is positioned to the specified address. The Jump back command (usually Esc) will return you back.</li> </ul> <p>In the structure and enum views, the cursor will be moved to the corresponding offset in the current type.</p> <p>See also</p> <ul> <li>How to Enter an Address.</li> </ul>"},{"location":"user-guide/user-interface/menu-bar/jump.html#jump-to-the-specified-file-offset","title":"Jump to the specified file offset","text":"<pre><code>Action    name: JumpFileOffset\n\n</code></pre> <p>IDA will ask you for a target file offset. This command jumps to the address corresponding to this specified file offset. If this file offset corresponds to a valid address then:</p> <ul> <li>the current address is saved in the jump stack.</li> <li>the cursor is positioned to the corresponding address. The Jump back command (usually Esc) will return you back.</li> </ul>"},{"location":"user-guide/user-interface/menu-bar/jump.html#jump-to-the-named-location","title":"Jump to the named location","text":"<pre><code>Action    name: JumpName\n\n</code></pre> <p>This command allows you to jump to a name definition by selecting it from the list of the names.</p> <p>IDA will display the list of the names (sorted by addresses) and you can choose a name. Dummy names (generated by IDA) are not listed. Hidden names are not listed either. You can control which names are listed in the Names representation dialog box.</p> <p>See also How to use the lister.</p>"},{"location":"user-guide/user-interface/menu-bar/jump.html#jump-to-the-specified-segment","title":"Jump to the specified segment","text":"<pre><code>Action    name: JumpSegment\n\n</code></pre> <p>This command jumps to the start of the selected segment. IDA will ask you to select the target segment. After:</p> <ul> <li>the current address is saved in the jump stack.</li> <li>the cursor is positioned to the specified address. The Jump back command (usually Esc) will return you back.</li> </ul> <p>See also:</p> <ul> <li>How to choose a segment</li> <li>Other segment related commands</li> </ul>"},{"location":"user-guide/user-interface/menu-bar/jump.html#jump-to-the-specified-segment-register-change-point","title":"Jump to the specified segment register change point","text":"<pre><code>Action    name: JumpSegmentRegister\n\n</code></pre> <p>This command jumps to the selected Segment Register Change Point. IDA will ask you to select a target change point. And after:</p> <ul> <li>the current address is saved in the jump stack.</li> <li>the cursor is positioned to the specified address. The Jump back command (usually Esc) will return you back.</li> </ul>"},{"location":"user-guide/user-interface/menu-bar/jump.html#jump-to-a-problematic-location","title":"Jump to a problematic location","text":"<pre><code>Action    name: JumpQ\n\n</code></pre> <p>This command allows you to jump to a problematic location. IDA will display the Problems List and will allow you to select a problem.</p> <p>The Jump back command (usually Esc) will return you back.</p>"},{"location":"user-guide/user-interface/menu-bar/jump.html#mark-position","title":"Mark Position","text":"<pre><code> Action    name: MarkPosition\n\n</code></pre> <p>You can mark certain locations of the file to be able to jump to them quickly. Text description of the location may help to find a desired location easily.</p> <p>First select a slot for the mark, then enter a description for the location.</p>"},{"location":"user-guide/user-interface/menu-bar/jump.html#jump-to-previously-marked-position","title":"Jump to previously marked position","text":"<pre><code>Action    name: JumpPosition\n\n</code></pre> <p>This command jumps to the selected position. IDA will ask you to select a target position. After:</p> <ul> <li>the current address is saved in the jump stack.</li> <li>the cursor is positioned to the specified address.</li> </ul> <p>The Jump back command (usually Esc) will return you back.</p> <p>You can mark the position using Mark Position command.</p>"},{"location":"user-guide/user-interface/menu-bar/jump.html#jump-to-cross-reference","title":"Jump to cross reference","text":"<p>This command shows you a list of cross-references to the current location: you can jump to the selected one by pressing Enter.</p> <p>Click here to see the description of the cross reference dialog box.</p> <p>See also</p> <ul> <li>Jump to Cross Reference From</li> <li>Jump to Cross References to Operand</li> </ul>"},{"location":"user-guide/user-interface/menu-bar/jump.html#cross-reference-attributes","title":"Cross reference attributes","text":"<p>The cross reference dialog displays a list of references to the various items. Each line has the following attributes:</p> <p>Direction Up or Down. Meaningful for program address; denotes where the reference comes from, from the lower addresses than the reference target (down) or from higher addresses (up).</p> <p>Type</p> <pre><code>        The following types exist:\n\n          o - offset, the address of the item is taken\n          r - read access\n          w - write access\n          t - textual referenced (used for manually specified operands)\n          i - informational (e.g. a derived class refers to its base class)\n          J - far (intersegment) jump\n          j - near (intrasegment) jump\n          P - far (intersegment) call\n          p - near (intrasegment) call\n          ^ - ordinary flow\n          s - xref from a structure\n          m - xref from a structure member\n          k - xref from a stack variable\n</code></pre> <p>Address</p> <pre><code>        For 'xrefs to' dialogs: where the reference comes from (source)\n        For 'xrefs from' dialogs: where the reference goes to (destination)\n</code></pre> <p>Text</p> <pre><code>        Additional info about the cross reference\n</code></pre>"},{"location":"user-guide/user-interface/menu-bar/jump.html#jump-to-cross-reference-from-current-location","title":"Jump to cross reference from current location","text":"<pre><code>Action    name: JumpXrefFrom\n\n</code></pre> <p>This command shows you a list of cross-references from the current location: you can jump to the selected one by pressing Enter.</p> <p>Click here to see the description of the cross reference dialog box.</p> <p>See also</p> <ul> <li>Jump to Cross References</li> <li>Jump to Cross References to Operand</li> </ul>"},{"location":"user-guide/user-interface/menu-bar/jump.html#jump-to-cross-references-to-operand","title":"Jump to cross references to operand","text":"<pre><code> Action    name: JumpOpXref\n\n</code></pre> <p>This command shows you a list of cross-references to the current operand: you can jump to the selected one by pressing Enter.</p> <p>Click here to see the description of the cross reference dialog box.</p> <p>See also</p> <ul> <li>Jump to Cross References</li> <li>Jump to Cross Reference From</li> </ul>"},{"location":"user-guide/user-interface/menu-bar/jump.html#jump-to-function","title":"Jump to function","text":"<pre><code> Action    name: JumpFunction\n\n</code></pre> <p>This command shows you a list of functions: you can jump to the selected one by pressing Enter.</p> <p>See also</p> <ul> <li>Jump to next function</li> <li>Jump to previous function</li> <li>How to choose a function</li> </ul>"},{"location":"user-guide/user-interface/menu-bar/jump.html#jump-to-next-function","title":"Jump to next function","text":"<pre><code>Action    name: JumpNextFunc\n\n</code></pre> <p>This command searches the start of the next function and jumps to the found address.</p>"},{"location":"user-guide/user-interface/menu-bar/jump.html#jump-to-previous-function","title":"Jump to previous function","text":"<pre><code> Action    name: JumpPrevFunc\n\n</code></pre> <p>This command searches the start of the previous function and jumps to the found address.</p>"},{"location":"user-guide/user-interface/menu-bar/jump.html#jump-to-entry-point","title":"Jump to Entry Point","text":"<pre><code> Action    name: JumpEntryPoint\n</code></pre> <p>This command shows you a list of entry points: you can jump to the selected one by pressing Enter.</p> <p>The list of entry points is created at the database creation time. It is not modified after that (for example, renaming an exported function does not change the list of entry points).</p>"},{"location":"user-guide/user-interface/menu-bar/list-of-all-menu-options.html","title":"List of all menu options","text":"<ul> <li>Main Menu Bar</li> <li>File</li> <li>Load file<ul> <li>Reload input file</li> <li>Script file</li> <li>Binary file</li> <li>IDS file</li> <li>Debug information file</li> <li>PDB debug information file</li> <li>TDS debug information file</li> <li>FLIRT signature file</li> <li>C header file</li> </ul> </li> <li>Script command</li> <li>Produce output file<ul> <li>Generate MAP file</li> <li>Generate ASM file</li> <li>Generate INC file</li> <li>Generate LST file</li> <li>Generate EXE file</li> <li>Generate DIF file</li> <li>Generate HTML file</li> <li>Generate SIG file</li> <li>Generate flow chart GDL file</li> <li>Generate call graph GDL file</li> <li>Dump database to IDC file</li> <li>Dump typeinfo to IDC file</li> <li>Create C header file</li> </ul> </li> <li>Save database</li> <li>Save database as...</li> <li>Take database snapshot...</li> <li>Abort</li> <li>Quit</li> <li>Edit</li> <li>Anchor</li> <li>Export data</li> <li>Undo</li> <li>Redo</li> <li>instruction</li> <li>data</li> <li>strlit</li> <li>array</li> <li>undefine</li> <li>Rename</li> <li>Operand types<ul> <li>Offset</li> <li>Convert operand to offset (data segment)</li> <li>Convert operand to offset (code segment)</li> <li>Convert operand to offset (any segment)</li> <li>Convert operand to offset (user-defined base)</li> <li>Convert operand to struct offset</li> <li>Number</li> <li>Convert operand to number</li> <li>Convert operand to hex number</li> <li>Convert operand to decimal number</li> <li>Convert operand to octal number</li> <li>Convert operand to binary number</li> <li>Convert operand to floating point number</li> <li>Toggle leading zeroes</li> <li>Convert operand to character</li> <li>Convert operand to segment</li> <li>Convert operand to symbolic constant (enum member)</li> <li>Convert operand to stack variable</li> <li>Change operand sign</li> <li>Bitwise negate operand</li> <li>User-defined operand</li> <li>Set operand type</li> </ul> </li> <li>Comments<ul> <li>Create a regular comment</li> <li>Create a repeatable comments</li> <li>Create additional comment lines</li> </ul> </li> <li>Functions<ul> <li>Create function...</li> <li>Edit function...</li> <li>Append function tail...</li> <li>Remove function tail...</li> <li>Delete function...</li> <li>Set function end</li> <li>Define stack variables...</li> <li>Change stack pointer...</li> <li>Rename register...</li> </ul> </li> <li>Set function/item type...</li> <li>Structs<ul> <li>Struct var...</li> <li>Force zero field offset</li> <li>Select union member...</li> <li>Create struct type from data...</li> <li>Copy field info to pointers</li> </ul> </li> <li>Segments<ul> <li>Create a new segment...</li> <li>Delete a segment...</li> <li>Change segment attributes...</li> <li>Move a segment...</li> <li>Rebase program...</li> <li>Change segment translation...</li> <li>Set default segment register value...</li> <li>Change segment register value...</li> </ul> </li> <li>Patch core<ul> <li>Patch core...</li> <li>Assemble...</li> <li>Apply patches to input file...</li> </ul> </li> <li>Other<ul> <li>Alignment...</li> <li>Manual instruction...</li> <li>Color instruction...</li> <li>Hide/show border</li> </ul> </li> <li>Plugins<ul> <li>Borland RTTI</li> <li>DWARF</li> <li>Golang</li> <li>Find Functions</li> <li>Objective-C</li> <li>Pdb</li> <li>Rust</li> <li>Swift</li> <li>x64 MSVC C++ Exception Handler for the Decompiler</li> </ul> </li> <li>Jump</li> <li>Jump immediate</li> <li>Jump back</li> <li>Undo last jump back</li> <li>Empty navigation stack</li> <li>Jump to address</li> <li>Jump to named location</li> <li>Jump to segment start</li> <li>Jump to segment register change point</li> <li>Jump to problematic location</li> <li>Mark location</li> <li>Jump to marked position</li> <li>Jump to cross reference</li> <li>Jump to cross reference to operand</li> <li>Jump to function</li> <li>Jump to entry point</li> <li>Jump to file offset</li> <li>Search for</li> <li>Suspicious operands</li> <li>String with error</li> <li>Instruction bytes</li> <li>Data bytes</li> <li>Unexplored bytes</li> <li>Explored bytes</li> <li>Immediate operand values</li> <li>Substring in the text representation</li> <li>Substring in the binary image of the file</li> <li>Instructions not belonging to any function</li> <li>Find all suspicious operands</li> <li>Find all errors</li> <li>Find regiser definition</li> <li>Find regiser use</li> <li>Search direction</li> <li>View</li> <li>Open subviews...<ul> <li>Open disassembly window</li> <li>Open exports window</li> <li>Open imports window</li> <li>Open functions window</li> <li>Open names window</li> <li>Open signatures window</li> <li>Open segments window</li> <li>Open segment registers window</li> <li>Open selectors window</li> <li>Open cross references window</li> <li>Open local types window</li> <li>Open problems window</li> <li>Open type libraries window</li> <li>Open strings window</li> <li>Open function calls window</li> <li>Open notepad</li> <li>Open undo history</li> </ul> </li> <li>Graphs...<ul> <li>Display function flow-chart</li> <li>Display function call graph</li> <li>Display chart of xrefs to addresses</li> <li>Display chart of xrefs from addresses</li> <li>Display user-defined chart of xrefs</li> </ul> </li> <li>Calculator</li> <li>View segment registers</li> <li>View internal flags</li> <li>Database snapshot manager</li> <li>Hide</li> <li>Unhide</li> <li>Del hidden range</li> <li>Hide all</li> <li>Unhide all</li> <li>Setup hidden items...</li> <li>Debugger</li> <li>Debugger window</li> <li>Thread list</li> <li>Module list</li> <li>Start process</li> <li>Attach to process...</li> <li>Process options</li> <li>Pause process</li> <li>Terminate process</li> <li>Detach from process</li> <li>Take memory snapshot</li> <li>Manual memory regions</li> <li>Step into</li> <li>Step over</li> <li>Run until return</li> <li>Run to cursor</li> <li>Set current ip</li> <li>Show application screen</li> <li>Breakpoints</li> <li>Breakpoint list<ul> <li>Add breakpoint</li> <li>Edit breakpoint</li> <li>Breakpoint conditions</li> <li>Delete breakpoint</li> <li>Page breakpoints</li> </ul> </li> <li>Source view<ul> <li>Watch view (source level)</li> <li>Local variables</li> </ul> </li> <li>Watches (assembler level)<ul> <li>Watch list</li> <li>Add watch</li> <li>Del watch</li> </ul> </li> <li>Tracing</li> <li>Trace management</li> <li>Tracing window<ul> <li>Select trace</li> <li>Other options</li> <li>Edit trace description</li> <li>Diff to binary trace</li> <li>Remove binary trace</li> <li>Import binary trace</li> <li>Export binary trace</li> <li>Export trace to text file</li> <li>Show trace callgraph</li> </ul> </li> <li>Clear trace</li> <li>Instruction tracing</li> <li>Function tracing</li> <li>Basic block tracing</li> <li>Add write trace</li> <li>Add read/write trace</li> <li>Add execution trace</li> <li>Stack trace</li> <li>Tracing Options</li> <li>Debugger options</li> <li>Switch debugger...</li> <li>Lumina</li> <li>Options</li> <li>Text representation...</li> <li>Comments...</li> <li>Representation of cross references...</li> <li>Assembler directives...</li> <li>Names representation...</li> <li>Demangled C++ names...</li> <li>Compiler...</li> <li>STRLIT string style...</li> <li>String options...</li> <li>Colors...</li> <li>Dump/normal View</li> <li>Setup data types...</li> <li>Processor type...</li> <li>Target assembler...</li> <li>Analysis options...</li> <li>Miscellaneous...</li> <li>Windows</li> <li>Load desktop...</li> <li>Save desktop...</li> <li>Delete desktop...</li> <li>Reset desktop</li> <li>Reset hidden messages...</li> <li>Set video mode...</li> <li>External help</li> <li>Keyboard layout</li> </ul>"},{"location":"user-guide/user-interface/menu-bar/lumina.html","title":"Lumina Submenu","text":"<p>This submenu contains actions to work with the Lumina server:</p> <ul> <li>Pull all metadata</li> <li>Push all metadata</li> <li>View all metadata</li> <li>Pull current function metadata</li> <li>Push current function metadata</li> </ul> <p>To learn more about Lumina, please read: https://www.hex-rays.com/products/ida/lumina</p>"},{"location":"user-guide/user-interface/menu-bar/lumina.html#pull-all-metadata","title":"Pull all metadata","text":"<p>This commands retrieves metadata about the current database from Lumina.</p> <p>IDA will calculate checksums for all non-trivial functions in the database and send it to Lumina. This information will be used to match and retrieve metadata, which will be automatically applied.</p> <p>Please note that this may overwrite your changes, so taking a database snapshot and saving the database before invoking this command is a good idea.</p> <p>By non-trivial functions we mean:</p> <pre><code>  - long enough functions (&gt;=16 bytes)\n  - non-library functions\n  - non-imported functions (functions with real body)\n</code></pre> <p>See also View all metadata, which allows the user to interactively apply metadata.</p>"},{"location":"user-guide/user-interface/menu-bar/lumina.html#push-all-metadata","title":"Push all metadata","text":"<p>This commands sends metadata about the current database to Lumina.</p> <p>IDA will calculate checksums for all non-trivial functions in the database, extract metadata about them, and send it to Lumina. The metadata includes function names and types, user comments, operand types, etc.</p> <p>If Lumina already has metadata about the involved functions, it will be replaced only if the new metadata is better and more complete.</p> <p>Only functions with non-trivial names are pushed by this command.</p>"},{"location":"user-guide/user-interface/menu-bar/lumina.html#view-all-metadata","title":"View all metadata","text":"<p>This commands retrieves metadata about the current database from Lumina.</p> <p>IDA will calculate checksums for all non-trivial functions in the database and send it to Lumina. This information will be used to match and retrieve metadata. After that IDA will display list of matched functions.</p> <p>The user can then select the desired metadata and apply it to the database. If the result is not satisfactory, it is possible to revert the changes.</p> <p>Once the window is closed, it is not possible to revert the changes anymore.</p> <p>At the bottom of the window there are convenience buttons to apply or revert all available metadata.</p> <p>See also Pull all metadata, which automatically applied all retrieved metadata.</p>"},{"location":"user-guide/user-interface/menu-bar/lumina.html#pull-current-function-metadata","title":"Pull current function metadata","text":"<p>This commands tries to retrieve metadata about the current function from Lumina. If successful, the metadata will be automatically applied.</p>"},{"location":"user-guide/user-interface/menu-bar/lumina.html#push-current-function-metadata","title":"Push current function metadata","text":"<p>This commands sends metadata about the current function to Lumina.</p>"},{"location":"user-guide/user-interface/menu-bar/lumina.html#lumina-metadata","title":"Lumina Metadata","text":"<p>Metadata currently consists of the following information:</p> <pre><code>  - function address, name, prototype\n  - function frame layout\n  - stack variables\n  - user-defined sp change points\n  - representation of instruction operands\n  - function and instruction comments\n</code></pre> <p>We plan to add more information to metadata in the future.</p>"},{"location":"user-guide/user-interface/menu-bar/options.html","title":"Options Submenu","text":"<p>This submenu allows you to change various options and settings:</p> <ul> <li>Text representation...</li> <li>Comments...</li> <li>Representation of cross references...</li> <li>Disable history</li> <li>Clear undo history</li> <li>Assembler directives...</li> <li>Names representation...</li> <li>Demangled C++ names...</li> <li>Compiler...</li> <li>String styles...</li> <li>String options...</li> <li>Colors...</li> <li>Dump/normal View</li> <li>Setup data types...</li> <li>Processor type...</li> <li>Target assembler...</li> <li>Analysis options...</li> </ul> <p>See also Menu Bar submenus.</p>"},{"location":"user-guide/user-interface/menu-bar/options.html#text-representation-dialog","title":"Text Representation Dialog","text":"<p>This command changes the look of the disassembly. Here you can change the values of the following checkboxes/input fields:</p> <p>Line prefixes</p> <pre><code>        This checkbox enables or disables line prefixes display.\n        Line prefix is the address of the current byte:\n\n         3000:1000      mov ax, bx\n         ^^^^^^^^^\n</code></pre> <p>IDA.CFG parameter: SHOW_LINEPREFIXES Number of opcode bytes</p> <pre><code>        Opcode bytes are shown below:\n\n         3000:1000 55           push    bp\n                   ^^^^^^^^^\n\n        The opcode is the operation code of the current instruction.\n        For the data items, the opcodes are elements of data directives.\n        Sometimes there is not enough place to display all bytes of an item\n        (of a large array, for example). In this case, IDA will display just\n        the few first bytes of the item. For the code items, IDA will try\n        to display all bytes of the instruction, even if it requires adding\n        more lines just for the opcode bytes. If this behavior is not desired,\n        the number of opcode bytes can be specified as a negative value.\n        A negative value -N means to display N opcode bytes on a line but\n        never display empty lines just for the opcode bytes.\n        By default, IDA does not display the opcodes.\n</code></pre> <p>IDA.CFG parameter: OPCODE_BYTES Use segment names</p> <pre><code>        This option controls the appearance of the segment names in the\n        addresses. Example (codeseg has base 3000):\n\n           Enabled:     codeseg:0034\n           Disabled:    3000:0034\n</code></pre> <p>IDA.CFG parameter: USE_SEGMENT_NAMES Segment addresses</p> <pre><code>        Marking this checkbox, you can disable segment addresses in the\n        disassembly. IDA will show only offsets. Example:\n\n           Enabled:     codeseg:0034\n           Disabled:    0034\n</code></pre> <p>IDA.CFG parameter: SHOW_SEGMENTS Function offsets</p> <pre><code>        This option controls the appearance of the line prefixes.\n        If it is enabled, the addresses will be displayed as offsets\n        from a function beginning. Example:\n\n           Enabled:     somefunc+0x44\n           Disabled:    cseg:0x4544\n</code></pre> <p>Right margin</p> <pre><code>        This option controls the length of disassembly lines for data\n        directives.\n</code></pre> <p>IDA.CFG parameter: MAX_DATALINE_LENGTH Instruction indention</p> <pre><code>        You can change indention of disassembled instructions:\n\n                         mov ax, bx\n         &lt;--------------&gt;\n            indention\n</code></pre> <p>IDA.CFG parameter: INDENTION Display bad instruction \\ marks <pre><code>        Some assemblers do not understand some instructions even if they\n        must. For example, the Z80 processor has several undocumented\n        instructions and many assemblers fail to recognize them. IDA knows\n        about this fact and tries to produce an output that can be compiled\n        without errors, so it replaces such instructions with data bytes.\n\n        The problem is more severe with Intel 80x86 processors: the same\n        instruction can be coded differently. There are 2 operation codes\n        for ADD instruction, etc. The worst thing is that the different\n        operation codes have different lengths. If the assembler used to\n        compile a file and your assembler produce different operation codes,\n        you may obtain completely different output files.\n\n        That is why IDA can mark such instructions as &lt;BAD&gt; and replace them\n        with data bytes. Example:\n\n           Enabled:\n                        db 0Fh,86h,7Eh,0,0,0 ; &lt;BAD&gt; jbe     loc_0_205\n                        db 0Fh,82h,78h,0,0,0 ; &lt;BAD&gt; jb      loc_0_205\n                        db 0Fh,83h,72h,0,0,0 ; &lt;BAD&gt; jnb     loc_0_205\n           Disabled:\n                        jbe     loc_0_205\n                        jb      loc_0_205\n                        jnb     loc_0_205\n</code></pre> <p>IDA.CFG parameter: SHOW_BAD_INSTRUCTIONS Use tabulations in output</p> <pre><code>        You can disable the tab chars (0x09) in the output file if you do not\n        like them. By default, IDA produces output files with tab chars.\n</code></pre> <p>IDA.CFG parameter: USE_TABULATION low suspicious limit high suspicious limit Click here to get information about these fields. Display stack pointer</p> <pre><code>        If this option is set, IDA will display the value of\n        the stack pointer in the line prefix.\n</code></pre> <p>IDA.CFG parameter: SHOW_SP </p>"},{"location":"user-guide/user-interface/menu-bar/options.html#comments-dialog","title":"Comments Dialog","text":"<p>This command changes the look of the disassembly comments. Here you can change the values of the following checkboxes/input fields:</p> <p>Comment indention</p> <pre><code>        You can change indention of comments:\n\n                mov ax, bx                      ; this is a comment\n        &lt;--------------------------------------&gt;\n                       indention\n</code></pre> <p>IDA.CFG parameter: COMMENTS_INDENTION Display of 'suspicious' marks This option enables or disables suspicious marks display. Usually the suspicious marks are disabled because IDA displays the suspicious operands in red/orange anyway. IDA.CFG parameter: SHOW_SUSPICOUS Display of empty lines</p> <pre><code>        This option enables or disables the presence of the autogenerated\n        empty lines in the disassembly. It could be useful to decrease\n        the number of the blank lines on the screen increasing amount\n        of information on it.\n</code></pre> <p>IDA.CFG parameter: SHOW_EMPTYLINES Display of basic blocks</p> <pre><code>        This option enables or disables the presence of the autogenerated\n        empty lines at the end of basic blocks in the disassembly.\n</code></pre> <p>IDA.CFG parameter: SHOW_BASIC_BLOCKS Display borders between data/code</p> <pre><code>        This command enables or disables the presence of the autogenerated\n        border lines in the disassembly. It could be useful to decrease\n        the number of the blank lines on the screen increasing amount\n        of information on it. A border line looks like this:\n\n         ;---------------------------------------------------------\n</code></pre> <p>Note that you can hide a particular border by using hide border command. IDA.CFG parameter: SHOW_BORDERS Display comments</p> <pre><code>        If this option is disabled, IDA will not show any comments.\n</code></pre> <p>Display repeatable comments This command enables or disables the repeatable comments display. IDA.CFG parameter: SHOW_REPEATABLE_COMMENTS Display auto comments</p> <pre><code>        Autocomments are predefined comments for all instructions.\n        If you forgot the meaning of a certain instruction, you can use\n        this command to get comments to all lines of the screen.\n\n        IDA does not give comments to very simple instructions such as\n        'mov' instruction and does not override existing comments.\n</code></pre> <p>IDA.CFG parameter: SHOW_AUTOCOMMENTS Display source lines</p> <pre><code>        This options controls the presence of the source line number\n        information in the disassembly. Some object files have this\n        information.\n</code></pre> <p>IDA.CFG parameter: SHOW_SOURCE_LINNUM Display try block lines</p> <pre><code>       This option controls the display of the try block information\n       in the disassembly.\n</code></pre> <p>IDA.CFG parameter: SHOW_TRYBLOCKS</p>"},{"location":"user-guide/user-interface/menu-bar/options.html#cross-references-dialog","title":"Cross References Dialog","text":"<p>IDA maintains cross-references automatically. Of course, when IDA starts to disassemble a new file, the cross-references will not appear immediately; they will be collected during background analysis.</p> <p>This command changes the representation of cross references.</p> <p>Display segments in xrefs</p> <pre><code>        This checkbox enables or disables segments in cross references:\n\n           Enabled:     ; CODE XREF: 3000:1025\n           Disabled:    ; CODE XREF: 1025\n</code></pre> <p>Display xref type mark</p> <pre><code>        If this option is disabled, IDA will not display \"CODE\"\n        or \"DATA\" in the cross-references.\n</code></pre> <p>IDA.CFG parameter: SHOW_XREF_TYPES Display function offsets</p> <pre><code>        This option controls the appearance of the cross-reference addresses.\n        If it is enabled, the addresses will be displayed as offsets\n        from a function beginning. Example:\n\n           Enabled:     somefunc+0x44\n           Disabled:    cseg:0x4544\n</code></pre> <p>IDA.CFG parameter: SHOW_XREF_FUNC Display xref values</p> <pre><code>        If this option is disabled, IDA will just display the presence\n        of cross-references, like this:\n\n                ; CODE XREF: ...\n</code></pre> <p>IDA.CFG parameter: SHOW_XREF_VALUES Right margin</p> <pre><code>        Determines the maximal length of a line with the cross references.\n</code></pre> <p>IDA.CFG parameter: MAX_XREF_LENGTH Cross reference depth</p> <pre><code>        This value \"how many bytes of an object to look at to collect\n        cross references\". For example we have an array:\n\n                A       db 100 dup(0)\n\n        If some instruction refers to the 5-th element of the array:\n\n                mov     al,A+5\n\n         with TD=3      we'll have no xrefs displayed\n         with TD=10     we'll have this xref\n</code></pre> <p>IDA.CFG parameter: MAX_TAIL Number of xrefs to display Determines the maximal number of the cross references to display. You may keep this value low because you can access all xrefs by using the Jump to cross reference command. IDA.CFG parameter: SHOW_XREFS</p>"},{"location":"user-guide/user-interface/menu-bar/options.html#disable-undo","title":"Disable undo","text":"<pre><code>Action    name: DisableUndo\n\n</code></pre> <p>This command completely disables the undo feature.</p> <p>See also</p> <ul> <li>Undo</li> <li>Redo</li> <li>Reset Undo</li> <li>Open undo history</li> </ul>"},{"location":"user-guide/user-interface/menu-bar/options.html#assembler-directives-dialog","title":"Assembler Directives Dialog","text":"<p>This command enables/disables the generation of some assembler directives, namely:</p> <pre><code>        assume directive\n        origin directive\n</code></pre> <p>Sometimes (when you do not intend to assemble the output file), you may want to disable their generation.</p>"},{"location":"user-guide/user-interface/menu-bar/options.html#names-representation","title":"Names Representation","text":"<pre><code> Action    name: SetNameType\n\n</code></pre> <p>Dummy names are automatically generated by IDA. They are used to denote subroutines, program locations and data.</p> <p>Dummy names have various prefixes depending on the item type and value:</p> <pre><code>  sub_          instruction, subroutine start\n  locret_       'return' instruction\n  loc_          instruction\n  off_          data, contains offset value\n  seg_          data, contains segment address value\n  asc_          data, string literal\n  byte_         data, byte\n  word_         data, 16-bit\n  dword_        data, 32-bit\n  qword_        data, 64-bit\n  byte3_        data, 3 bytes\n  xmmword_      data, 128-bit\n  ymmword_      data, 256-bit\n  packreal_     data, packed real\n  flt_          floating point data, 32-bit\n  dbl_          floating point data, 64-bit\n  tbyte_        floating point data, 80-bit\n  stru_         structure\n  custdata_     custom data type\n  algn_         alignment directive\n  unk_          unexplored byte\n</code></pre> <p>You can change representation of dummy names. IDA supports several types of dummy names:</p> <pre><code>  0     loc_0_1234     segment base address relative to program base address\n                       &amp; offset from the segment base\n  1     loc_1000_1234  segment base address &amp; offset from the segment base\n  2     loc_dseg_1234  segment name &amp; offset from the segment base\n  3     loc_0_11234    segment relative to base address &amp; full address\n  4     loc_1000_11234 segment base address &amp; full address\n  5     loc_dseg_11234 segment name &amp; full address\n  6     loc_12         full address\n  7     loc_0012       full address (at least 4 digits)\n  8     loc_00000012   full address (at least 8 digits)\n  9     dseg_1234      the same as 2, but without data type specifier\n 10     loc_1          enumerated names (loc_1,loc_2,loc_3...)\n</code></pre> <p>If you have selected names type 10 (enumerated names), you may renumber them using a checkbox. The process is relatively fast, surprisingly.</p> <p>The best representation for MS DOS programs is #0, for 16-bit processors - #7, and for 32-bit processors - #8. You can change dummy names type any time you want.</p> <p>You can also set up types of names included in the name list. IDA knows about the following types of names:</p> <pre><code>        - normal names\n        - public names\n        - weak public or extern names\n        - autogenerated (meaningful) names.\n        - dummy (meaningless) names.\n</code></pre> <p>Dummy names may be public or weak, but they never appear in the list of names. You can specify the type of a name when you create or modify it.</p> <p>You can also set maximal length of new names. Old names will not be affected by this parameter.</p> <p>See also: Rename command.</p>"},{"location":"user-guide/user-interface/menu-bar/options.html#demangled-names","title":"Demangled Names","text":"<pre><code> Action    name: SetDemangledNames\n\n</code></pre> <p>IDA can demangle mangled C++ names of the most popular C++ compilers:</p> <pre><code>        - Microsoft\n        - Borland\n        - Watcom\n        - Visual Age\n        - GNU\n</code></pre> <p>The demangled names are represented in two forms: short and long form. The short form is used when a name is used as a reference, the long form is used at the declaration.</p> <p>You can set how demangled C++ names must be represented:</p> <pre><code>        - as comments. this representation allows you to obtain\n          recompilable source text\n        - instead of mangled names. this representation makes the output\n          more readable. the disadvantage is that you cannot recompile the\n          output\n        - don't display demangled names.\n</code></pre> <p>You can setup short and long forms of demangled names. Short form is used when a reference to the name is made; long form is used at the declaration.</p> <p>To make demangled names more readable, we introduce the possibility to suppress pointer modifiers (near/far/huge).</p> <p>To demangle GNU C v3.x names, the \"Assume GCC v3.x names\" checkbox should be set, otherwise such names might not be demangled. furthermore, to make the demangled name more compact, unsigned types may be displayed as uchar, uint, ushort, ulong. The same with signed basic types.</p> <p>If the \"Override type info\" checkbox is set, the demangled name overrides the type information if both are present.</p> <p>See also How to customize demangled names</p>"},{"location":"user-guide/user-interface/menu-bar/options.html#compiler","title":"Compiler","text":"<pre><code>Action    name: SetupCompiler\n\n</code></pre> <p>This dialog box allows the user to specify the compiler used to create the program along with the memory model, default calling convention, ABI and other parameters.</p> <p>Please note that while some combinations of the parameters are meaningless, IDA doesn't check them for validity. It is up to the user to specify a correct combination.</p> <p>IDA tries to determine the correct values automatically.</p> <p>The include directories are a list of directories that look for the standard C headers. This parameter is used during parsing C header files. The directories must be separated by ';' in MS Windows and ':' in Linux. The predefined macros field has the same format and is used similarly. Please note that IDA doesn't define any compiler-specific macros by default.</p>"},{"location":"user-guide/user-interface/menu-bar/options.html#customize-demangled-names","title":"Customize Demangled Names","text":"<p>All your changes will be saved in the current database. If you want to change the form of demangled names for all new databases, then you need to edit the configuration file, variables 'ShortNameForm' and 'LongNameForm'. Below is the list of all checkboxes with examples (spaces are inserted only for the ease of understanding):</p> <p>Only main name</p> <pre><code>        on:     func;\n        off:    static void __pascal func(void) const;\n</code></pre> <p>No underscores in calling conventions</p> <pre><code>        on:     void   pascal func(void);\n        off:    void __pascal func(void);\n</code></pre> <p>No calling conventions for parameters and __based()</p> <pre><code>        on:  void         func(int (*          f2)(void));\n        off: void __cdecl func(int (* __pascal f2)(void));\n</code></pre> <p>No return type of functions</p> <pre><code>        on:         func(void);\n        off:    int func(void);\n</code></pre> <p>No \"based()\" specifier</p> <pre><code>        on:   int                            a;\n        off:  int __based(__segname(\"DATA\")) a;\n        on:   void __based(void) *b;\n        off:  void               *b;\n        on:   int __based(__self) (*p)(void);\n        off:  int                 (*p)(void);\n</code></pre> <p>No calling conventions</p> <pre><code>        on:     void          func(void);\n        off:    void __pascal func(void);\n</code></pre> <p>No postfix const</p> <pre><code>        on:     void aclass::func(void);\n        off:    void aclass::func(void) const;\n</code></pre> <p>No access keywords</p> <pre><code>        on:             void func(void);\n        off:    private void func(void);\n</code></pre> <p>No throw descriptions</p> <pre><code>        on:     void func(void);\n        off:    void func(void) throw(Class::Member);\n</code></pre> <p>No static and virtual keywords</p> <pre><code>        on:                    void aclass::func(void);\n        off:    static virtual void aclass::func(void);\n</code></pre> <p>No UDT keywords</p> <pre><code>        on:            A &amp; func(      A *,      B *);\n        off:     class A &amp; func(class A *, enum B *);\n</code></pre> <p>No const and volatile keywords</p> <pre><code>        on:     char       * func(void);\n        off:    char const * func(void);\n</code></pre> <p>No __closure keyword</p> <pre><code>        Do not display '__closure'\n</code></pre> <p>No __unaligned keyword</p> <pre><code>        Do not display '__unaligned'\n</code></pre> <p>No __pin/__box/__gc</p> <pre><code>        Do not display '__pin', '__box', '_gc'\n</code></pre> <p>Suppress pointer modifiers</p> <pre><code>     Selection    16Names     Description\n     ---------    -------     -----------\n     near           Yes     Do not display 'near'\n     near/__ptr64           Do not display 'near' and '__ptr64'\n     far            Yes     Do not display 'far'\n     all, 16bit     Yes     Do not display any modifiers\n     huge           Yes     Do not display 'huge'\n     __ptr64                Do not display '__ptr64'\n     Display all    Yes     Display all modifiers\n     Display none   Auto    Do not display any modifiers\n\n     16bit means that the demangler will assume that\n     names were generated by 16bit compilers. Otherwise,\n     it will assume names generated by 32/64 bit compilers.\n</code></pre> <p>Quash j_</p> <pre><code>        This option allows IDA to demangle a name even if it was formed\n        by adding j_ prefix to a mangled name. The prefix j_ will simply\n        be thrown away.\n</code></pre> <p>Transfer j_</p> <pre><code>        This option also allows IDA to demangle names with prefix j_.\n        Unlike the previous option, this one will show the prefix\n        in the demangled name.\n</code></pre> <p>Ignore postfix _nn</p> <pre><code>        This option allows IDA to demangle names formed by adding\n        postfix _nn to a mangled name (n is any digit).\n</code></pre>"},{"location":"user-guide/user-interface/menu-bar/options.html#string-literal-style-dialog","title":"String literal style dialog","text":"<pre><code> Action    name: SetStrlitStyle\n\n</code></pre> <p>With this dialog you can setup string styles and also create a new string immediately at the current location.</p> <p>The following string styles are defined:</p> <pre><code>      C-style (zero-terminated)\n      DOS style ($ terminated)\n      Pascal style (one byte length prefix)\n      Wide pascal (two-byte length prefix)\n      Delphi (four-byte length prefix)\n      Unicode (UTF-16)\n      Unicode pascal style (two-byte length prefix)\n      Unicode wide pascal style (four-byte length prefix)\n      Character terminated\n</code></pre> <p>If you select \"character terminated\" string style then you may specify up to 2 termination characters. The string will be terminated by any of these characters. If the second character is equal to 0, then it is ignored.</p> <p>In IDA Qt you can also set a specific encoding to be used to display the string, or change the defaults for all strings. See string encodings.</p>"},{"location":"user-guide/user-interface/menu-bar/options.html#string-options","title":"String options","text":"<p>This dialog sets up the string literals options:</p> <p>Generate names</p> <pre><code>        If this option is set, IDA will give meaningful names to\n        newly created string literals.\n</code></pre> <p>Names prefix</p> <pre><code>        This prefix will be used to form the string name.\n</code></pre> <p>Mark as autogenerated If a name is marked as autogenerated, it will be displayed in a different color and will be included in the list of names depending on the current setting. Generate serial names</p> <pre><code>        IDA can generate serial names for string literals, i.e.\n\n                pref_001,pref_002,pref_003 etc...\n\n        To enable serial names generation, specify\n        prefix for names,starting serial number and number of leading zeroes.\n</code></pre> <p>Each time you create a string literal, IDA generates a new serial name and assigns it to the string. String literal next line char</p> <pre><code>        This symbol, when encountered in the string, will make\n        IDA start a new line in the string representation in the\n        disassembly. Usually it is the line feed character ('\\n').\n</code></pre> <p>Comment string literal references:</p> <pre><code>        This option tells IDA to display the contents of the string\n        literal next to the instruction or offset that refers to the string.\n</code></pre>"},{"location":"user-guide/user-interface/menu-bar/options.html#string-encodings","title":"String encodings","text":"<p>IDA Qt can display program strings using different encodings. You can specify default encodings for all strings or override the encoding of a specific string.</p> <p>The following encodings can be used:</p> <p>\\ - the default encoding for this string type (8-bit or 16-bit) <p>\\ - the string bytes are printed using the current system encoding (after translating with XlatAsciiOutput array in the configuration file). <p>Windows codepages (e.g. 866, CP932, windows-1251)</p> <p>Charset names (e.g. Shift-JIS, UTF-8, Big5)</p> <p>You can add new encodings to the list using the context menu item Insert (Ins hotkey).</p> <p>On Linux/OS X, you can run \"iconv -l\" to see the available encodings. Please note that some encodings are not supported on all systems.</p>"},{"location":"user-guide/user-interface/menu-bar/options.html#color-configuration","title":"Color configuration","text":"<p>This dialog allows you to customize the color settings.</p> <pre><code> GUI version:\n ------------\n</code></pre> <p>IDA keeps the color configuration in the registry. There are 3 predefined schemes. The user can modify the existing schemes or add his own schemes. New schemes should be added to the \"themes\" subdirectory in IDA.</p> <pre><code> Text version:\n -------------\n</code></pre> <p>IDA keeps colors in file IDACOLOR.CF. This file may reside in the IDA directory or in the current directory. It is a binary file. IDA automatically saves all your changes into this file.</p> <p>If the current item line prefix has \"black on black\" color, then the current item will not be highlighted. The same is with current line color - if it is \"black on black\", the current line will not be highlighted.</p> <p>You can change the colors using the Customize button. You may have up to 4 different color palettes and switch between them on fly. The color palette is saved in IDACOLOR.CF file.</p> <p>Each line prefix has its own color code depending on the current item: (the fourth color palette values are shown)</p> <pre><code> Line prefixes\n   Library function             BRIGHT CYAN ON BLUE\n   Regular function             WHITE ON BLUE\n   Instruction                  BROWN ON BLUE\n   Data                         WHITE ON BLUE\n   Unexplored                   WHITE ON BLACK\n   Externs                      BRIGHT MAGENTA ON BLUE\n   Current item                 BRIGHT BLUE ON BLUE\n   Current line                 YELLOW ON BLUE\n   Default                      BLACK ON BLACK (not used)\n</code></pre> <p>If the \"current item\" or \"current line\" are BLACK ON BLACK, then they will not be highlighted.</p> <p>The rest of the line is colored with the following codes:</p> <pre><code> Keywords\n   Instruction                  WHITE ON BLUE\n   Directive                    YELLOW ON BLUE\n   Macro name                   MAGENTA ON BLUE\n   Register name                WHITE ON BLUE\n   Other                        WHITE ON BLUE\n\n Names\n   Dummy data                   WHITE ON BLUE\n   Dummy code                   WHITE ON BLUE\n   Dummy unexplored             MAGENTA ON BLUE\n   Hidden                       GREY ON BLUE\n   Library function             BRIGHT CYAN ON BLUE\n   Local variable               GREEN ON BLUE\n   Regular data                 YELLOW ON BLUE\n   Regular code                 YELLOW ON BLUE\n   Regular unexplored           RED ON BLUE\n   Demangled                    BRIGHT GREEN ON BRIGHT BLUE\n   Segment name                 YELLOW ON BLUE\n   Imported name                LIGHT MAGENTA ON BLUE\n\n Constants\n   Suspicious                   BRIGHT RED ON BLUE\n   Char in instruction          BRIGHT CYAN ON BLUE\n   String in instruction        BRIGHT CYAN ON BLUE\n   Number in instruction        BRIGHT GREEN ON BLUE\n   Char in data                 BRIGHT GREEN ON BLUE\n   String in data               BRIGHT GREEN ON BLUE\n   Number in data               WHITE ON BLUE\n\n Xrefs\n   Code                         GREEN ON BLUE\n   Data                         CYAN ON BLUE\n   Code to tail                 BRIGHT RED ON BLUE\n   Data to tail                 MAGENTA ON BLUE\n\n Comments\n   Automatic                    BROWN ON BLUE\n   Regular                      BRIGHT WHITE ON BLUE\n   Repeatable                   BROWN ON BLUE\n   Extra line                   YELLOW ON BLUE\n\n Other\n   Punctuation                  WHITE ON BLUE\n   Opcode bytes                 BRIGHT GREEN ON BLUE\n   Manual operand               BRIGHT WHITE ON BLUE\n   Errors                       RED ON BLACK\n   Selected                     BLACK ON WHITE\n   Default                      YELLOW ON BLUE\n</code></pre> <p>(Other, Default) color code is used if a token has no color attached to it.</p>"},{"location":"user-guide/user-interface/menu-bar/options.html#dumpnormal-view","title":"Dump/normal View","text":"<pre><code>Action    name: ToggleDump\n\n</code></pre> <p>This command switches the current disassembly window mode between dump mode and normal mode. Initially all disassembly windows are in normal mode so you can see instructions and data. When you are in dump mode, no instructions or data are displayed. All bytes of the program will be dumped on the screen as plain bytes and in ASCII. This command may be useful when you want to find something in the program visually. Do not forget that many commands continue to work in dump mode. For example, you can use binary search command.</p> <p>The text version supports only paragraph aligned addressing in the view. Switching to the hex dump view and back may change the cursor position in the disassembly listing.</p>"},{"location":"user-guide/user-interface/menu-bar/options.html#setup-data-types","title":"Setup data types","text":"<pre><code>Action    name: SetupData\n\n</code></pre> <p>This command allows you to select the data types used in the round-robin carousel in MakeData command.</p> <p>Valid data types are:</p> <pre><code>        - byte\n        - word          (2 bytes)\n        - double word   (4 bytes)\n        - float         (4 bytes)\n        - quadro word   (8 bytes)\n        - double        (8 bytes)\n        - long double   (10 or 12 bytes)\n        - packed real   (10 or 12 bytes)\n        - octa word     (16 bytes)\n</code></pre> <p>Naturally, not all data types are usable for all processors. For example, Intel 8051 processor doesn't have the 'double word' type.</p> <p>Furthermore, this command allows you to select a data type for the current undefined item and convert it to data.</p> <p>Please note that if the current processor does not support a data type, you cannot assign it even if you have selected it. If you unselect all data types, IDA will use the 'byte' type.</p>"},{"location":"user-guide/user-interface/menu-bar/options.html#processor-type","title":"Processor Type","text":"<pre><code>Action    name: SetProcessor\n\n</code></pre> <p>Valid processor types are:</p> <pre><code> type      description\n  ----      -----------\n</code></pre> <pre><code>  8086    - Intel 8086                   \u2510\n  80286r  - Intel 80286 real mode        \u2502\n  80286p  - Intel 80286 protected mode   \u2502\n  80386r  - Intel 80386 real mode        \u2502\n  80386p  - Intel 80386 protected mode   \u2502\n  80486r  - Intel 80486 real mode        \u2502\n  80486p  - Intel 80486 protected mode   \u2502\n  80586r  - Intel Pentium &amp; MMX real mode\u2502 (IBM PC family)\n  80586p  - Intel Pentium &amp; MMX prot mode\u2502\n  80686p  - Intel Pentium Pro &amp; MMX      \u2502\n  k62     - AMD K6-2 with 3DNow!         \u2502\n  p2      - Intel Pentium II             \u2502\n  p3      - Intel Pentium III            \u2502\n  athlon  - AMD K7                       \u2502\n  p4      - Intel Pentium 4              \u2502\n  metapc  - Disassemble all IBMPC opcodes\u2518\n  8085    - Intel 8085                   \u2510\n  z80     - Zilog 80                     \u2502\n  z180    - Zilog 180                    \u2502 (Zilog 80 family)\n  z380    - Zilog 380                    \u2502\n  64180   - Hitachi HD64180              \u2502\n  gb      - Gameboy                      \u2518\n  z8      - Zilog 8                        (Zilog 8 family)\n  860xr   - Intel 860 XR                 \u2510 (Intel 860 family)\n  860xp   - Intel 860 XP                 \u2518\n  8051    - Intel 8051                     (Intel 51 family)\n  80196   - Intel 80196                  \u2510 (Intel 80196 family)\n  80196NP - Intel 80196NP, NU            \u2518\n  m6502   - MOS 6502                     \u2510 (MOS Technology 65xx family)\n  m65c02  - MOS 65c02                    \u2518\n  pdp11   - DEC PDP/11                     (PDP family)\n  68000   - Motorola MC68000             \u2510\n  68010   - Motorola MC68010             \u2502\n  68020   - Motorola MC68020             \u2502\n  68030   - Motorola MC68030             \u2502\n  68040   - Motorola MC68040             \u2502 (Motorola 680x0 family)\n  68330   - Motorola CPU32 (68330)       \u2502\n  68882   - Motorola MC68020 with MC68882\u2502\n  68851   - Motorola MC68020 with MC68851\u2502\n  68020EX - Motorola MC68020 with both   \u2502\n  colfire - Motorola ColdFire            \u2502\n  68K     - Motorola MC680x0 all opcodes \u2518\n  6800    - Motorola MC68HC00            \u2510\n  6801    - Motorola MC68HC01            \u2502\n  6803    - Motorola MC68HC03            \u2502\n  6301    - Hitachi HD 6301              \u2502\n  6303    - Hitachi HD 6303              \u2502\n  6805    - Motorola MC68HC05            \u2502 (Motorola 8bit family)\n  6808    - Motorola MC68HC08            \u2502\n  6809    - Motorola MC68HC09            \u2502\n  6811    - Motorola MC68HC11            \u2518\n  6812    - Motorola MC68HC12\n  hcs12   - Motorola MC68HCS12\n  6816    - Motorola MC68HC16\n  java    - java                           (Java family)\n  ppc     - PowerPC big endian           \u2510\n  ppcl    - PowerPC little endian        \u2518 (PowerPC family)\n  arm     - ARM little endian            \u2510 ( family)\n  armb    - ARM big endian               \u2518\n  tms320c2- TMS320C2x series             \u2510 (TMS 16bit addressing family)\n  tms320c5- TMS320C5x series             \u2518\n  tms320c6- TMS320C6x series             \u2510 (TMS VLIW family)\n  tms320c3- TMS320C3x series             \u2518\n  tms32054- TMS320C54xx series\n  tms32055- TMS320C55xx series\n  sh3     - Renesas SH-3 (little endian) \u2510\n  sh3b    - Renesas SH-3 (big endian)    \u2502 (Renesas SuperH series)\n  sh4     - Renesas SH-4 (little endian) \u2502\n  sh4b    - Renesas SH-4 (big endian)    \u2502\n  sh2a    - Renesas SH-2A (big endian)   \u2518\n  avr     - ATMEL AVR                      (ATMEL family)\n  mipsl   - MIPS little endian           \u2510 (MIPS family:R2000, R3000, R4000,\n  mipsb   - MIPS big endian              \u2502 R4200, R4300,  R4400, R4600,\n  mipsrl  - MIPS &amp; RSP little            \u2502 R8000, R10000)\n  mipsr   - MIPS &amp; RSP big               \u2502\n  r5900l  - MIPS R5900 little            \u2518\n  r5900r  - MIPS R5900 big               \u2518\n  h8300   - H8/300x in normal mode       \u2510\n  h8300a  - H8/300x in advanced mode     \u2502 (Hitachi H8 family)\n  h8s300  - H8S in normal mode           \u2502\n  h8s300a - H8S in advanced mode         \u2518\n  h8500   - H8/500                         (Hitachi H8/500 family)\n  pic12cxx- Microchip PIC 12-bit (12xxx) \u2510\n  pic16cxx- Microchip PIC 14-bit (16xxx) \u2502 (PIC family)\n  pic18cxx- Microchip PIC 16-bit (18xxx) \u2518\n  sparcb  - SPARC big endian             \u2510\n  sparcl  - SPARC little endian          \u2518 (SPARC family)\n  alphab  - DEC Alpha big endian         \u2510\n  alphal  - DEC Alpha little endian      \u2518 (ALPHA family)\n  hppa    - HP PA-RISC big endian          (HP PA-RISC family)\n  dsp56k  - Motorola DSP 5600x           \u2510\n  dsp561xx- Motorola DSP 561xx           \u2502 (DSP 56K family)\n  dsp563xx- Motorola DSP 563xx           \u2502\n  dsp566xx- Motorola DSP 566xx           \u2518\n  c166    - Siemens C166                 \u2510\n  c166v1  - Siemens C166 v1 family       \u2502\n  c166v2  - Siemens C166 v2 family       \u2502 (C166 family)\n  st10    - SGS-Thomson ST10             \u2502\n  super10 - Super10                      \u2518\n  st20    - SGS-Thomson ST20/C1            (ST20 family)\n  st20c4  - SGS-Thomson ST20/C2-C4\n  st7     - SGS-Thomson ST7                (ST7 family)\n  ia64l   - Intel Itanium little endian  \u2510\n  ia64b   - Intel Itanium big endian     \u2518 (IA64 family)\n  cli     - Microsoft.Net platform\n  net     - Microsoft.Net platform (alias)\n  i960l   - Intel 960 little endian      \u2510\n  i960b   - Intel 960 big endian         \u2518 (i960 family)\n  f2mc16l - Fujitsu F2MC-16L             \u2510\n  f2mc16lx- Fujitsu F2MC-16LX            \u2518 (Fujitsu F2MC family)\n  78k0    - NEC 78k/0\n  78k0s   - NEC 78k/0s\n  m740    - Mitsubishi 8-bit\n  m7700   - Mitsubishi 16-bit            \u2510\n  m7750   - Mitsubishi 16-bit            \u2518 (Mitsubishi 16-bit family)\n  m32r    - Mitsubishi 32-bit            \u2510\n  m32rx   - Mitsubishi 32-bit extended   \u2518 (Mitsubishi 32-bit family)\n  st9     - STMicroelectronics ST9+\n  fr      - Fujitsu FR family\n  m7900   - Mitsubishi M7900\n  kr1878  - Angstrem KR1878\n  ad218x  - Analog Devices ADSP\n  oakdsp  - Atmel OAK DSP\n  tricore - Infineon Tricore\n  ebc     - EFI Bytecode\n  msp430  - Texas Instruments MSP430\n</code></pre> <p>Processor modules can accept additional options that can be passed on the commandline with the -p switch. Currently only the ARM module supports it. For example, -parm:ARMv7-A will turn on options specific for the ARMv7-A architecture, such as NEON instruction set.</p> <p>For information about additional processor modules, please visit our web page at https://www.hex-rays.com/products/ida/processors.shtml</p> <p>Please note that when you change the processor type, IDA may change the target assembler, so check it out.</p> <p>You may get a message saying that IDA does not know the specified processor if IDA fails to load the corresponding processor module.</p> <pre><code>        Windows IDA uses .dll file extension\n        Linux IDA uses .so file extension\n        Mac IDA uses .dylib file extension\n</code></pre> <p>{% hint style=\"info\" %} Modules compiled with support for 64-bit address space, will feature a '64' suffix before the extension. E.g., 'pc64.dll'</p> <p>{% hint style=\"info\" %} Changing the processor type leads to reanalysis of the whole program. Sometimes this is useful.</p> <p>{% hint style=\"info\" %} When you load a new processor module, all analysis options are reset to the values specified in the configuration file.</p> <p>IDA determines the default processor using the input file extension and the contents of the input file. The table which describes the input file extensions and the corresponding processor types is located in IDA.CFG file and looks like this:</p> <pre><code> DEFAULT_PROCESSOR = {\n /* Extension   Processor */\n  \"com\" :       \"8086\"                  // IDA will try the specified\n  \"exe\" :       \"80386r\"                // extensions if no extension is\n  \"dll\" :       \"80386r\"                // given.\n  \"drv\" :       \"80386r\"\n  \"o\"   :       \"68000\"\n  \"prc\" :       \"68000\"                 // PalmPilot programs\n  \"axf\" :       \"arm\"\n  \"h68\" :       \"68000\"                 // MC68000 for *.H68 files\n  \"i51\" :       \"8051\"                  // i8051   for *.I51 files\n  \"sav\" :       \"pdp11\"                 // PDP-11  for *.SAV files\n  \"rom\" :       \"z80\"                   // Z80     for *.ROM files\n  \"cla\" :       \"java\"                  // Java classes\n  \"class\":      \"java\"                  // Java classes\n  \"s19\":        \"6811\"\n  \"*\":          \"80386p\"                // Default processor\n}\n</code></pre> <p>If you want to change the default processor type, you need to change this table. You may add/delete rows in this table.</p> <p>See also: ARM processor specifics.</p>"},{"location":"user-guide/user-interface/menu-bar/options.html#arm-processor-specifics","title":"ARM processor specifics","text":"<p>Since architecture version v4 (introduced in ARM7 cores), ARM processors have a new 16-bit instruction set called Thumb (the original 32-bit set is referred to as \"ARM\"). Since these two sets have different instruction encodings and can be mixed in one segment, we need a way to specify how to disassemble instructions. For this purpose, IDA uses a virtual segment register named 'T'. If its value is 0, then ARM mode is used. Otherwise, Thumb mode is used. ARM is the default mode. Please note that if you change the value of T register for a range, IDA will destroy all instructions in that range because their disassembly is no longer correct.</p> <p>IDA use UAL (Unified Assembly Language) syntax by default which uses the same syntax for both ARM and Thumb mode. If necessary, legacy assembler syntax can be selected in Analysis options.</p> <p>To decode Aarch64 (ARM64) instructions the segment with instructions must be set to 64-bit.</p>"},{"location":"user-guide/user-interface/menu-bar/options.html#processor-options-for-arm","title":"Processor options for ARM","text":"<p>Simplify instructions</p> <pre><code>      If this option is on, IDA will simplify instructions and replace\n      them by clearer pseudo-instructions\n      For example,\n\n              MOV     PC, LR\n\n      is replaced by\n\n              RET\n</code></pre> <p>Disable pointer dereferencing</p> <pre><code>      If this option is on, IDA will not use =label syntax for\n      loads from literal pools.\n      For example,\n\n                    LDR     R1, =dst\n                    ...\n      off_0_1003C   DCD dst\n\n      will be shown as\n\n                    LDR     R1, off_0_1003C\n</code></pre> <p>No automatic ARM-Thumb switch</p> <pre><code>      If this option is on, IDA will not propagate\n      ARM-Thumb modes automatically when following jumps and calls.\n</code></pre> <p>Disable BL jumps detection</p> <pre><code>      Some ARM compilers in Thumb mode use BL (branch-and-link)\n      instead of B (branch) for long jumps, since BL has more range.\n      By default, IDA tries to determine if BL is a jump or a call.\n      You can override IDA's decision using commands in Edit/Other menu\n      (Force BL call/Force BL jump).\n      If your target does not use this trick, you can set this option\n      and IDA will always treat BL as a call.\n</code></pre> <p>Scattered MOVT/MOVW pairs analysis A pair of MOVT and MOVW instructions can be used to load any 32-bit constant into a register without having to use the literal pool. For example: MOVW R1, #0xABA2 MOVT R1, #0x32AA is simplified by IDA into MOV R1, 0x32AAABA2 (unless macro creation is turned off)</p> <pre><code>      However, if there is an unrelated instruction between them, such\n      simplification is not possible. If you enable the conversion, then IDA will try to\n      convert operands of even scattered instructions. The example above could be represented as:\n\n      MOVW  R1, #:lower16:0x32AAABA2\n      [other instructions]\n      MOVT  R1, #:upper16:0x32AAABA2\n\n      It is possible to select how aggressively IDA should try to handle such pairs:\n      leave them as is, convert only if the result a valid address, or try to\n      convert all pairs even if the result does not look like a valid address.\n</code></pre> <p>Edit ARM architecture options</p> <pre><code>      This button allows you to edit various features of the ARM architecture.\n      This will affect the disassembly of some instructions depending on whether\n      the selected architecture supports them. For details, see the ARM Architecture Reference Manual.\n</code></pre>"},{"location":"user-guide/user-interface/menu-bar/options.html#command-line-options","title":"Command-line options","text":"<pre><code>      You can configure the architecture options from the command line.\n      For that, use the -parm:&lt;option1[;option2...]&gt; switch.\n      The following options are accepted:\n\n      ARMv&lt;N&gt;  - base ARM architecture version (e.g. ARMv4, ARMv4T,\n                 ARMv5TE, ..., ARMv7-M, ARMv7-A)\n       or\n\n      &lt;name&gt;   - ARM core name (e.g. ARM7TDMI, ARM926EJ-S, PXA270,\n                Cortex-M3, Cortex-A8)\n\n      Additionally, a special name \"armmeta\" can be used to enable decoding of all known instructions.\n\n      The options above will set some default values that can be adjusted further:\n\n      NoVFP/VFPv&lt;N&gt;           - disable or enable support for VFP\n                                instructions (e.g. VFPv3).\n      NoNEON/NEON/NEON-FMA    - disable or enable support for NEON\n                                (aka Advanced SIMD) instructions.\n      NoThumb/Thumb/Thumb-2   - disable or enable support for Thumb (16-bit)\n                                or Thumb-2 (16/32-bit) instructions.\n      NoARM/ARM               - disable or enable support for ARM\n                                instructions.\n      XScale                  - support for XScale-specific instructions.\n                                Implies ARMv5TE.\n      NoWMMX/WMMXv1/WMMXv2    - support for Intel Wireless MMX\n                                extensions (v1 or v2). Implies XScale.\n</code></pre> <p>See</p> <ul> <li>Change segment register value</li> <li>Set default segment register value commands to learn how to specify the segment register value.</li> </ul>"},{"location":"user-guide/user-interface/menu-bar/options.html#specify-target-assembler","title":"Specify Target Assembler","text":"<pre><code>Action    name: SetAssembler\n\n</code></pre> <p>This command allows you to change the target assembler, i.e. the assembler for which the output is generated. You select the target assembler from a menu. The menu items depend on the current processor type.</p> <p>{% hint style=\"info\" %} Currently, IDA supports only a generic assembler for 80x86 processors. We recommend the use of Borland's TASM to compile the output assembler files.</p>"},{"location":"user-guide/user-interface/menu-bar/options.html#analysis-options","title":"Analysis options","text":"<pre><code> Action    name: SetAuto\n\n</code></pre> <p>This command allows you to disable and enable the autoanalysis and its indicator.</p> <p>Usually, the auto analysis is enabled. Disable it if you are sure that it will help you.</p> <p>Here you can change various kernel analysis options 1 and options 2 and options 3, change the processor type (if the processor module supports several types), or the assembler style. If the current processor has options, there will also be a button to change processor-specific options. If the current processor supports memory mapping, there will also be a button to change the memory mapping ranges.</p> <p>The analysis indicator is located in the bottom left corner of the main IDA window (upper right corner in text version). Possible values of the indicator:</p> <pre><code> \"          \" empty indicator means that the indicator is turned off.\n AU:  idle    Autoanalysis is finished.\n AU:disabled  Autoanalysis is disabled.\n FL:&lt;address&gt; execution flow is being traced\n PR:&lt;address&gt; a function is being created\n TL:&lt;address&gt; a function tail is being created\n SP:&lt;address&gt; the stack pointer is being traced\n AC:&lt;address&gt; the address is being analyzed\n LL:&lt;number&gt;  a signature file is being loaded\n L1:&lt;address&gt; the first pass of FLIRT\n L2:&lt;address&gt; the second pass of FLIRT\n L3:&lt;address&gt; the third pass of FLIRT\n TP:&lt;address&gt; type information is being applied\n FI:&lt;address&gt; the final pass of autoanalysis\n WF:&lt;address&gt; weak execution flow is being traced\n ??:&lt;address&gt; the address becomes unexplored\n  @:&lt;number&gt;  indication of various activity\n</code></pre> <p>Hint: you can right-click the analysis indicator to quickly disable or enable it, or to reanalyze the program.</p> <p>See also auto analysis explanation.</p>"},{"location":"user-guide/user-interface/menu-bar/options.html#kernel-analysis-options-1","title":"Kernel analysis options 1","text":"<p>Trace execution flow This option allows IDA to trace execution flow and convert all references bytes to instructions. Mark typical code sequences as code</p> <pre><code>  IDA knows some typical code sequences for each processor.\n  For example, it knows about typical sequence\n\n          push    bp\n          mov     bp, sp\n\n  If this option is enabled, IDA will search for all typical sequences\n  and convert them to instructions even if there are no references\n  to them. The search is performed at the loading time.\n</code></pre> <p>Locate and create jump tables</p> <pre><code>  This option allows IDA to try to guess the address and size of jump\n  tables. Please note that disabling this option will not disable\n  the recognition of C-style typical switch constructs.\n</code></pre> <p>Control flow to data segment is ignored</p> <pre><code>  If set, IDA will not analyze code reference targets in\n  pure data segments. Usually pure data segments have some\n  instructions (e.g. thunk functions), that's why this option\n  is set off by default. For Mach-O files, it is set on\n  because pure data segment do not contain instructions in them.\n</code></pre> <p>Analyze and create all xrefs</p> <pre><code>  If this option is disabled, IDA will not thoroughly analyze the program: it\n  will simply trace execution flow, nothing more (no xrefs, no additional\n  checks, etc)\n</code></pre> <p>Delete instructions with no xrefs This option allows IDA to undefine instructions without any xrefs to them. For example, if you undefine an instruction at the start of a function, IDA will trace execution flow and delete all instructions that lose references to them. Create function if data xref data-&gt;code32 exists</p> <pre><code>  If IDA encounters a data reference from DATA segment to 32bit\n  CODE segment, it will check for the presence of meaningful\n  (disassemblable) instruction at the target. If there is an\n  instruction, it will mark it as an instruction and will create\n  a function there.\n</code></pre> <p>Create functions if call is present This option allows IDA to create function (proc) if a call instruction is present. For example, the presence of:</p> <pre><code>          call loc_1234\n\n  leads to creation of a function at label loc_1234\n</code></pre> <p>Create function tails</p> <pre><code>  This option allows IDA to find and append separately located\n  function tails to function definitions.\n</code></pre> <p>Create stack variables</p> <pre><code>  This option allows IDA to automatically create stack variables and\n  function parameters.\n</code></pre> <p>Propagate stack argument information</p> <pre><code>  This option propagates the stack argument information\n  (the type and the name) to the caller's stack. If the caller is\n  called, then the information will be propagated further through\n  the whole program. Currently, the type propagation is really\n  simple and non-intelligent: the first encountered type for\n  a stack variable will be used.\n</code></pre> <p>Propagate register argument information</p> <pre><code>  This option propagates the register argument information\n  (the type and the name) to the caller. If the caller is\n  also called, then the information will be propagated further through\n  the whole program.\n</code></pre> <p>Trace stack pointer This option allows IDA to trace the value of the SP register. Perform full stack pointer analysis</p> <pre><code>  This option allows IDA to perform the stack pointer\n  analysis using the simplex method. This option is valid\n  only for the IBM PC processor.\n</code></pre> <p>Perform 'no-return' analysis</p> <pre><code>  This option allows IDA to perform the control flow\n  analysis and determine functions which do not return to\n  their callers. The 'exit()' function, for example, does not\n  return to its caller.\n</code></pre> <p>Try to guess member function types</p> <pre><code>  If set, IDA will guess member function types using the demangled\n  names. Please note that this rule may occasionally produce wrong\n  results, for example, for static member functions. IDA has no\n  means of distinguishing them from non-static member functions.\n  If clear, IDA will guess only types of non-member functions.\n</code></pre> <p>See also analysis options 2 analysis options 3</p>"},{"location":"user-guide/user-interface/menu-bar/options.html#kernel-analysis-options-2","title":"Kernel analysis options 2","text":"<p>Truncate functions upon code deletion</p> <pre><code>  Truncate functions when the code at the function end gets deleted.\n  If this option is turned off, IDA does not modify function\n  definitions when code is deleted.\n</code></pre> <p>Create string literals if data xref exists If IDA encounters a data reference to an undefined item, it checks for the presence of the string literal at the target. If the length of the candidate string literal is big enough (more than 4 chars in 16bit or data segments; more than 16 chars otherwise), IDA will automatically create a string literal. Check for unicode strings This option allows IDA to check for the presence of the unicode strings in the program and creates them if necessary. IDA will check for the unicode strings only if the string style is set to \"C-style (0 terminated)\" or \"Unicode\". Create offsets and segments using fixup info</p> <pre><code>  IDA will use relocation information to make the disassembly\n  nicer. More precisely, it will convert all data items with\n  relocation information to words or dwords like this:\n\n          dd offset label\n          dw seg seg000\n\n  If an instruction has a relocation information attached to it,\n  IDA will convert its immediate operand to an offset or segment:\n\n          mov     eax, offset label\n</code></pre> <p>You can display the relocation information attached to the current item by using show internal flags command. Create offset if data xref to seg32 exists</p> <pre><code>  If IDA encounters a data reference to 32bit segment and the target\n  contains 32bit value which can be represented as an offset expression,\n  IDA will convert it to an offset.\n</code></pre> <p>Convert 32bit instruction operand to offset</p> <pre><code>  This option works only in 32bit and 64bit segments.\n  If an instruction has an immediate operand and the operand\n  can be represented as a meaningful offset expression, IDA will\n  convert it to an offset. However, the value of immediate operand\n  must be higher than 0x10000.\n</code></pre> <p>Automatically convert data to offsets</p> <pre><code>  This option allows IDA to convert all newly created data items\n  to offsets if the following conditions are satisfied:\n    - the offset target is a valid address in the program\n    - the target address is higher than 0x20\n    - the target does not point into the middle of an item\n    - if the target is code, the execution does not flow to it\n      from the previous instruction\n    - the data is dword (4 bytes) in a 32-bit segment\n      or qword(8 bytes) in a 64-bit segment\n    - the segment type is not special (extern, communal, abs...)\n</code></pre> <p>Use flirt signatures</p> <pre><code>  Allows usage of FLIRT technology\n</code></pre> <p>Comment anonymous library functions</p> <pre><code>  This option appends a comment to anonymous library functions.\n  The comment consists of the description of the FLIRT signature\n  which has recognized the function and marked it as coming\n  from a library.\n</code></pre> <p>Multiple copy library function recognition</p> <pre><code>  This option allows FLIRT to recognize several copies of the same\n  function in the program.\n</code></pre> <p>Automatically hide libary functions</p> <pre><code>  This option hides the functions recognized by FLIRT.\n  It will have effect only from the time it is set.\n</code></pre> <p>Rename jump functions as j_...</p> <pre><code>  This option allows IDA to rename simple functions containing only\n\n          jmp somewhere\n\n  instruction to \"j_somewhere\".\n</code></pre> <p>Rename empty functions as nullsub_...</p> <pre><code>  This option allows IDA to rename empty functions containing only\n  a \"return\" instruction as \"nullsub_...\"\n  (... is replaced by a serial number: 0,1,2,3...)\n</code></pre> <p>Coagulate data at the final pass This option is meaningful only if \"Make final analysis pass\" is enabled. It allows IDA to convert unexplored bytes to data arrays in the non-code segments. Coagulate code at the final pass This option is meaningful only if \"Make final analysis pass\" is enabled. It allows IDA to convert unexplored bytes to data arrays in the code segments. Make final analysis pass This option allows IDA to coagulate all unexplored bytes by converting them to data or instructions. See also analysis options 1 analysis options 3</p>"},{"location":"user-guide/user-interface/menu-bar/options.html#kernel-analysis-options-3","title":"Kernel analysis options 3","text":"<p>Enable EH analysis</p> <pre><code>  If this option is set on, IDA uses EH information of the binary for\n  more detailed analysis.\n</code></pre> <p>Enable RTTI analysis</p> <pre><code>  If this option is set on, IDA tries to detect C++ Run-Time Type\n  Identification and does additional analysis based on this information.\n</code></pre> <p>Enable macros</p> <pre><code>  This option is disabled if the processor module does not support macros.\n\n  If this option is on, IDA will combine several instructions into one macro\n  instruction.\n  For example for the ARM processor,\n\n      ADRP Rx, label@PAGE\n      ADD  Rx, Rx, label@PAGEOFF\n\n  will be replaced by\n\n      ADRL Rx, label\n</code></pre> <p>Merge strlits</p> <pre><code>  if the analysis option \"Create string literals if data xref exists\" is set\n  and the target string literal ends at the existing one (without a\n  termination character), IDA will merge these strlits into one.\n</code></pre> <p>See also analysis options 1 analysis options 2</p>"},{"location":"user-guide/user-interface/menu-bar/search.html","title":"Search","text":"<p>In this menu, you can select a command to search for something in the disassembly. Searches are relatively slow and your previous position is saved in the jump stack.</p> <p>You can search for:</p> <ul> <li>suspicious operands (instructions that need your attention)</li> <li>instructions</li> <li>data bytes</li> <li>unexplored bytes</li> <li>explored bytes</li> <li>immediate operand values</li> <li>substring in the text representation</li> <li>substring in the binary image of the file</li> <li>bytes not belonging to any function</li> <li>find all suspicious operands</li> <li>string with error</li> <li>find all errors</li> <li>pictures (i.e., raster images) in both - directions (up and down).</li> </ul> <p>You can search for an item under cursor:</p> <ul> <li>Find register definition</li> <li>Find register use</li> </ul> <p>See also</p> <ul> <li>Jump menu for fast navigating.</li> <li>Menu Bar submenus</li> </ul>"},{"location":"user-guide/user-interface/menu-bar/search.html#search-for-next-suspicious-operand","title":"Search for next suspicious operand","text":"<pre><code>Action    name: JumpSuspicious\n\n</code></pre> <p>Suspicious operands are the operands that need your attention because they contain an immediate value that could be a number or an offset. IDA does not know about it, so it marks these instructions as 'suspicious'. You can change the suspiciousness of the operands using set lower limit of suspicious operands and set upper limit of suspicious operands commands.</p> <p>Data arrays are considered to be suspicious if the first element of the data array is within the lower and upper suspicious limits. Values of other elements are not examined.</p> <p>You can disable the display of the 'suspicious' marks in the Comments Dialog.</p> <p>{% hint style=\"info\" %} NOTE: We strongly recommend that before producing an ASM file you go through all 'suspicious' marks and get rid of them. After this you have a certain level of confidence that the file has been disassembled correctly.</p>"},{"location":"user-guide/user-interface/menu-bar/search.html#search-for-next-code","title":"Search for next code","text":"<pre><code>Action    name: JumpCode\n\n</code></pre> <p>This command searches for the first instruction in the current direction.</p>"},{"location":"user-guide/user-interface/menu-bar/search.html#search-for-next-data","title":"Search for next data","text":"<pre><code>Action    name: JumpData\n\n</code></pre> <p>This command searches for the first defined data item in the current direction.</p>"},{"location":"user-guide/user-interface/menu-bar/search.html#search-for-next-unexplored-byte","title":"Search for next unexplored byte","text":"<pre><code>Action    name: JumpUnknown\n\n</code></pre> <p>This command searches for the first unexplored byte in the current direction.</p>"},{"location":"user-guide/user-interface/menu-bar/search.html#search-for-next-explored-byte","title":"Search for next explored byte","text":"<pre><code> Action    name: JumpExplored\n\n</code></pre> <p>This command searches for the first defined byte (instruction or data) in the current direction.</p>"},{"location":"user-guide/user-interface/menu-bar/search.html#search-for-next-instructiondata-with-the-specified-operand","title":"Search for next instruction/data with the specified operand","text":"<pre><code> Action    name: AskNextImmediate\n\n</code></pre> <p>This command searches for the first instruction or data byte that contains the specified immediate value. The command is relatively slow (but much faster than the text search), because it disassembles each instruction to find the operand values.</p> <p>If the immediate value in an instruction has been logically or bitwise negated, then this command will check against the modified value. Example:</p> <pre><code>        mov al, -2\n</code></pre> <p>will be found if the user searches for the immediate value 2 but not when he searches for 0xFE.</p> <p>If the checkbox \"any untyped value\" is checked, then the \"value\" field is ignored. IDA will look for all immediate values without type in this case.</p>"},{"location":"user-guide/user-interface/menu-bar/search.html#repeat-search-for-instructiondata-with-the-specified-operand","title":"Repeat search for instruction/data with the specified operand","text":"<pre><code> Action    name: JumpImmediate\n\n</code></pre> <p>This command repeats search for immediate command.</p>"},{"location":"user-guide/user-interface/menu-bar/search.html#search-for-substring-in-the-disassembly","title":"Search for substring in the disassembly","text":"<pre><code> Action    name: AskNextText\n</code></pre> <p>This command searches for the specified substring in the text representation of the disassembly. This command is a slow command, because it disassembles each instruction to get the text representation. IDA will show its progress on the indicator. You can interrupt this command pressing Ctrl-Break.</p> <p>You may search for regular expressions too.</p> <p>If a range is selected using anchor, IDA will search for the specified substring in the range.</p> <p>Note that this command searches the same as what you see on your screen (and not in binary image).</p> <p>For binary search, look at Search for substring in the file</p>"},{"location":"user-guide/user-interface/menu-bar/search.html#repeat-search-for-substring-in-the-disassembly","title":"Repeat search for substring in the disassembly","text":"<pre><code>Action    name: JumpText\n\n</code></pre> <p>This command repeats search for text command.</p>"},{"location":"user-guide/user-interface/menu-bar/search.html#search-for-substring-in-the-file","title":"Search for substring in the file","text":"<pre><code>Action    name: AskBinaryText\n\n</code></pre> <p>This command searches for the specified substring in the file being disassembled. This command can be used for fast lookups of text strings in the executable file or even to find references to a data. You can interrupt it pressing Ctrl-Break.</p> <p>If a range is selected using anchor, IDA will search for the specified substring in the range.</p> <p>The substring is specified like this:</p> <pre><code>        \"This is substring to search\"\n</code></pre> <p>i.e. in the double-quotes. Also you can specify individual byte values as numbers:</p> <pre><code>        6A 10\n</code></pre> <p>Follow this link to learn more about the format of the input string.</p> <p>For example, if you want to find a reference to the following string:</p> <pre><code> 35F2:106A      db 'Hello',0\n</code></pre> <p>you could search for number 106A in the file.</p> <p>See also</p> <ul> <li>the input string format</li> <li>search for text command.</li> </ul>"},{"location":"user-guide/user-interface/menu-bar/search.html#repeat-search-for-substring-in-the-file","title":"Repeat search for substring in the file","text":"<pre><code>Action    name: JumpBinaryText\n\n</code></pre> <p>This command repeats search for text in core command.</p>"},{"location":"user-guide/user-interface/menu-bar/search.html#search-for-bytes-not-belonging-to-any-function","title":"Search for bytes not belonging to any function","text":"<pre><code>Action    name: JumpNotFunction\n\n</code></pre> <p>This command searches for the first byte not belonging to any function in the current direction.</p>"},{"location":"user-guide/user-interface/menu-bar/search.html#set-direction-for-searches","title":"Set Direction for Searches","text":"<pre><code> Action    name: SetDirection\n\n</code></pre> <p>The current direction for searches is displayed in the right upper corner of the screen. Using this command, you can toggle the display.</p> <p>See also Options submenu.</p>"},{"location":"user-guide/user-interface/menu-bar/search.html#find-all-suspicious-operands","title":"Find all suspicious operands","text":"<pre><code>Action    name: FindAllSuspicious\n\n</code></pre> <p>This command searches for all suspicious operands and presents a list of them. You may use this list to examine the operands and modify them as needed.</p> <p>See also</p> <ul> <li>suspicious operands</li> </ul>"},{"location":"user-guide/user-interface/menu-bar/search.html#search-for-next-string-with-error","title":"Search for next string with error","text":"<pre><code>Action    name: JumpError\n\n</code></pre> <p>This commands searches for the 'error' operands. Usually, these operands are displayed with a red color.</p> <p>Below is the list of probable causes of error operands:</p> <pre><code>        - reference to an unexisting address\n        - illegal offset base\n        - unprintable character constant\n        - invalid structure or enum reference\n        - and so on...\n</code></pre>"},{"location":"user-guide/user-interface/menu-bar/search.html#find-all-errors","title":"Find all errors","text":"<pre><code>Action    name: FindAllErrors\n\n</code></pre> <p>This command searches for all strings containing any error and presents a list of them. You may use this list to examine errors and correct them as needed.</p> <p>See also</p> <ul> <li>string with error</li> </ul>"},{"location":"user-guide/user-interface/menu-bar/search.html#find-regiser-definition","title":"Find regiser definition","text":"<p>This command searches for the first definition of the register under cursor.</p> <p>It looks for a definition in the current function, starting from the current address towards lower addresses, ignoring control flow.</p> <p>See also Find register use</p>"},{"location":"user-guide/user-interface/menu-bar/search.html#find-regiser-use","title":"Find regiser use","text":"<p>This command searches for the first use of the register under cursor.</p> <p>It looks for a use in the current function, starting from the current address towards higher addresses, ignoring control flow.</p> <p>See also Find register definition</p>"},{"location":"user-guide/user-interface/menu-bar/search.html#find-register-value","title":"Find register value","text":"<p>This command searches for the value of the register under the cursor if it can be found by simple methods.</p> <p>It also shows the found values in the \"Output\" window along with the addresses at which they are defined.</p> <p>If it could not find a value, it shows the reason why it could not. Unlike Find register definition, this command uses control flow.</p>"},{"location":"user-guide/user-interface/menu-bar/view.html","title":"View","text":""},{"location":"user-guide/user-interface/menu-bar/view.html#view-submenu","title":"View submenu","text":"<p>Here are commands to open various windows, display information etc. - Open subviews... - Graphs... - Calculator - View segment registers - View internal flags - Hide - Unhide - Del hidden range - Hide all - Unhide all - Setup hidden items...</p> <p>See also Menu Bar submenus.</p>"},{"location":"user-guide/user-interface/menu-bar/debugger/breakpoints.html","title":"Breakpoints","text":"<p>Here are the commands to use the debugger breakpoints.</p> <ul> <li>Breakpoints list</li> <li>Add breakpoint</li> <li>Edit breakpoint</li> <li>Delete breakpoint</li> </ul> <p>Related topics:</p> <ul> <li>Page breakpoints</li> <li>Find breakpoint</li> <li>Breakpoint conditions</li> <li>Low level breakpoint conditions</li> </ul> <p>See also Debugger submenu.</p>"},{"location":"user-guide/user-interface/menu-bar/debugger/breakpoints.html#breakpoints-list","title":"Breakpoints list","text":"<pre><code>Action    name: Breakpoints\n\n</code></pre> <p>Opens the breakpoints window.</p> <p></p> <p>In this window, you can view information related to existing breakpoints. Breakpoints are saved in the database, and restored as soon as possible (once the memory becomes writeable).</p> <p>The 'Pass count' column indicates how many times the program needs to hit the breakpoint before being suspended (0 means \"always suspend\").</p>"},{"location":"user-guide/user-interface/menu-bar/debugger/breakpoints.html#add-breakpoint","title":"Add breakpoint","text":"<pre><code>Action    name: BreakpointAdd\n\n</code></pre> <p>This command adds a breakpoint at the current address. If an instruction exists at this address, an instruction breakpoint is created. Otherwise, IDA offers to create a hardware breakpoint and allows the user to edit breakpoint settings. Hardware breakpoints can be either real hardware breakpoints or page breakpoints.</p>"},{"location":"user-guide/user-interface/menu-bar/debugger/breakpoints.html#edit-breakpoint","title":"Edit breakpoint","text":"<pre><code>Action    name: BreakpointEdit\n\n</code></pre> <p>This command opens a dialog box to edit an existing breakpoint.</p> <p>Location</p> <pre><code>  The breakpoint location: either an absolute address, a symbol name,\n  a module+offset combination, or a source file name and a line number.\n  The exact location syntax depends on the breakpoint kind: absolute, module\n  relative, symbolic, or source code.\n</code></pre> <p>Condition This IDC expression will be evaluated each time the breakpoint is reached. If the expression returns true (non-zero), the debugger will execute the selected actions. Please note that you can use the register names in the IDC scripts when the debugger is active. Tests like this are allowed, for example: EAX == EBX+5 or get_wide_dword(ESP+0x10) == 34 You can also use the \"...\" button to enter a multiline condition, or specify another scripting language to use. See here for more info.</p> <p>Settings</p> <pre><code>  Enabled:\n        If the breakpoint is enabled or disabled. Disabled breakpoints\n        are not written to the debugged process.\n\n  Hardware:\n        If enabled, IDA will use a hardware breakpoint. The breakpoint\n        mode and size must be specified for them (see below).\n\n  Module relative:\n        The breakpoint location is stored as a combination of a module\n        name and an offset. This kind of breakpoint is useful for\n        DLLs that are loaded to various addresses because their addresses\n        cannot be calculated in advance. Example: kernel32+0x1234\n\n  Symbolic:\n        The breakpoint location is stored as a combination of a symbol\n        name and a possible offset. This kind of breakpoint is useful for\n        symbols that can be imported from different DLLs because their addresses\n        cannot be calculated in advance. Example: myfunc+44\n\n  Source code:\n        The breakpoint location is stored as a combination of a source file\n        name and a line number. Can be used only if the source code of the\n        debugged application is available. Example: myfile.cpp:55\n</code></pre> <p>Low level condition: Evaluate the condition on the remote computer. Such conditions are faster, especially during remote debugging, because there is no network traffic between IDA and the remote computer on each breakpoint hit. More details</p> <p>Actions</p> <pre><code>  Break:\n        Suspend the debugged application\n\n  Trace:\n        Add a new entry to the trace log\n</code></pre> <p>Refresh debugger memory: By default IDA does not refresh the memory config before evaluating a breakpoint condition. This option enables the refresh. To refresh it manually, call refresh_debugger_memory</p> <pre><code>  Enable tracing:\n        Enable tracing when the breakpoint hits. This is different from trace\n        breakpoints (where only a new entry is added to the trace log).\n\n  Disable tracing:\n        Disable tracing when the breakpoint fires.\n</code></pre> <p>Tracing type: Instruction, Function and Basic block level tracing types can be selected for breakpoints where enable/disable tracing have been selected. Hardware breakpoint size Number of bytes to watch: 1, 2 or 4 bytes for normal hardware breakpoints. Any size for page breakpoints. Hardware breakpoint mode</p> <pre><code>        The access type the breakpoint will react: read/write, write, execute.\n</code></pre> <p>In the case of Intel hardware breakpoints, some limitations are enforced (in contrast with page breakpoints). It is impossible to create more than 4 hardware breakpoints. The address of the breakpoint must be aligned appropriately:</p> <pre><code>  - 2-byte breakpoints must be word-aligned.\n  - 4-byte breakpoints must be dword-aligned.\n</code></pre> <p>Please note that hardware breakpoints occur AFTER the instruction execution while software breakpoints occur BEFORE the instruction.</p> <p>Usually, it is easier to use software breakpoints, except if:</p> <pre><code>  - we want to be sure the memory is not modified by the debugger\n  (instruction breakpoints modify the debugged process memory).\n\n  - we want to detect accesses to data bytes.\n\n  - the specified address is write protected (really rare!).\n</code></pre> <p>See also</p> <ul> <li>Index of IDC functions</li> </ul>"},{"location":"user-guide/user-interface/menu-bar/debugger/breakpoints.html#delete-breakpoint","title":"Delete breakpoint","text":"<pre><code>Action    name: BreakpointDel\n\n</code></pre> <p>This command deletes an existing breakpoint at the current address.</p>"},{"location":"user-guide/user-interface/menu-bar/debugger/breakpoints.html#page-breakpoints","title":"Page breakpoints","text":"<p>Page breakpoints are memory access breakpoints that can be set to detect when the application reads, writes, or executes code/data in a specific memory range. Page breakpoints are very similar to hardware breakpoints but there is no limitation on the number of page breakpoints that can be set or their size, in contrast with normal hardware breakpoints.</p> <p>Memory access breakpoints are implemented by removing page permissions according to the specified type of the page breakpoint to be added (for example, for a write page breakpoint, the write permission will be removed from the page). When the access violation exception occurs because the application tries to access the specific memory region, IDA reports a breakpoint hit.</p> <p>As page breakpoints can be set for a small part of a memory page but the permissions of the whole page must be changed, page breakpoints can slow down the debugger because many access violation exceptions may be generated. If the application accesses memory outside of the desired range but on the same page, the generated exception must be silently handled and the application resumed. Specifically, page breakpoints in the code segment can slow down the debugger very much.</p> <p>Memory access breakpoints are supported since IDA version 6.3 for the following debuggers:</p> <p>Win32</p> <pre><code>  Page breakpoints are supported for both local and remote debugging\n  of 32 and 64bit applications.\n</code></pre> <p>WinDbg</p> <pre><code>  Page breakpoints are supported only for local debugging of 32-bit applications.\n</code></pre> <p>Bochs</p> <pre><code>  Page breakpoints are supported for both of 32 and 64bit applications.\n  Page breakpoints in the bochs debugger are just like normal hardware\n  breakpoints but with no limit on the number of breakpoints or their size.\n  Please note that hardware breakpoints in the bochs debugger occur AFTER the\n  instruction is executed while regular page breakpoints occur BEFORE the\n  instruction is actually executed.\n</code></pre>"},{"location":"user-guide/user-interface/menu-bar/debugger/breakpoints.html#find-breakpoint","title":"Find breakpoint","text":"<pre><code>Action    name: BreakpointFind\n\n</code></pre> <p>Open the breakpoints window if needed, then find current breakpoint in it.</p>"},{"location":"user-guide/user-interface/menu-bar/debugger/breakpoints.html#breakpoint-conditions","title":"Breakpoint conditions","text":"<p>You can use the \"Condition\" field of the breakpoint properties to enter an expression which is evaluated when the breakpoint is hit. It can be either an actual condition or just any valid code in IDC or another supported scripting language syntax. By using the \"...\" button, you can open a multi-line editor for the condition and switch the scripting language used for evaluating it.</p> <p>Expressions</p> <pre><code>  If you enter an expression, the result will be used to determine whether\n  the selected actions are executed. Some examples of IDC expressions:\n\n  Check if EAX is equal to 5:\n\n    EAX==5\n\n  Check if the first argument to the function is 1:\n\n    get_wide_dword(ESP)==1\n\n  Interpret the second argument to the function as a pointer to Unicode string, print it,\n  and return 0 (so that the execution continues immediately):\n\n    msg(\"Filename: %s\\n\", get_strlit_contents(get_wide_dword(ESP+4), -1, STRTYPE_UNICODE)), 0\n\n  Set EAX to 0 and continue:\n\n    EAX=0,0\n</code></pre> <p>Statements</p> <pre><code>  You can enter several statements in the multi-line editor. If the last one is a 'return' statement,\n  it is used as the result of the condition. Otherwise the condition is assumed to return 0.\n</code></pre> <p>See also</p> <ul> <li>Index of IDC functions</li> </ul>"},{"location":"user-guide/user-interface/menu-bar/debugger/breakpoints.html#low-level-breakpoint-conditions","title":"Low level breakpoint conditions","text":"<p>Low level breakpoint conditions can be used to speed up the debugger. They are evaluated like this:</p> <pre><code>  - in case of remote debugging, the condition is evaluated on the remote\n    computer. The following actions are bypassed:\n      - sending of the breakpoint event to the local computer\n      - switching from debthread to the main thread\n      - updating internal IDA structures and caches\n      - updating the screen\n\n  - in case of local debugging, the condition is evaluated at low level.\n    The following actions are bypassed:\n      - switching from debthread to the main thread\n      - updating internal IDA structures and caches\n      - updating the screen\n</code></pre> <p>In both cases, there is a significant speed up. This improvement imposes some limitations on the breakpoint condition:</p> <ul> <li>only IDC expressions can be used for low level conditions</li> <li>only functions marked as 'thread-safe' may be called</li> <li> <p>only entire registers can be accessed (e.g. EAX is ok but AL is not) Essentially this means that the only available functions are:</p> <p><code>- read/write process registers - read/write process memory - file i/o - auxiliary string and object functions - msg() function (for debugging the breakpoint conditions)</code></p> </li> </ul> <p>Low level breakpoint conditions are available only for Win32, Linux, Mac, and Android debuggers.</p>"},{"location":"user-guide/user-interface/menu-bar/debugger/debugger-options.html","title":"Debugger options","text":"<pre><code> Action    name: SetupDebugger\n\n</code></pre> <p>This dialog box allows to specify different settings related to the debugger.</p>"},{"location":"user-guide/user-interface/menu-bar/debugger/debugger-options.html#events","title":"Events","text":"<ul> <li> <p>Suspend on debugging start</p> <p>If selected, the debugger will suspend directly once the debugging starts. *   Evaluate event condition on exit</p> <p>If selected, the debugger will evaluate the event condition immediately before closing the debugging session (once we receive PROCESS_EXITED or PROCESS_DETACHED event) *   Suspend on process entry point</p> <p>If selected, the debugger will insert a temporary breakpoint at the main entry point of the debugged application. *   Suspend on thread start/exit</p> <p>If selected, the debugger will suspend if a new thread starts or if an existing thread terminates. *   Suspend on library load/unload</p> <p>If selected, the debugger will suspend if a new library is loaded or if a previously loaded library is unloaded. *   Suspend on debugging message</p> <p>If selected, the debugger will suspend if the debugged application generates a message destined to the debugger.</p> </li> </ul>"},{"location":"user-guide/user-interface/menu-bar/debugger/debugger-options.html#event-condition","title":"Event condition","text":"<p>When one or more debug events (see above) are checked, then this option is used to specify a condition. In the following example, the debugger will suspend the process whenever a module with the name test.dll is loaded:</p> <pre><code>    get_event_id() == LIB_LOADED &amp;&amp; strstr(get_event_module_name(), \"test.dll\") != -1\n</code></pre>"},{"location":"user-guide/user-interface/menu-bar/debugger/debugger-options.html#log","title":"Log","text":"<ul> <li> <p>Segment modifications</p> <p>If selected, the debugger will print information regarding segment modifications (creation, deletion, or resizing of segments) since the last event. Note that the debugger doesn't continuously track segment modifications, but detects those only if a debugging event occurs. *   Thread start/exit</p> <p>If selected, the debugger will print a message if a new thread starts or if an existing thread terminates. *   Library load/unload</p> <p>If selected, the debugger will print a message if a new library is loaded or if a previously loaded library is unloaded. *   Breakpoint</p> <p>If selected, the debugger will print a message if the debugged process reaches a breakpoint. *   Debugging message</p> <p>If selected, the debugger will print debugging messages from the application.</p> </li> </ul>"},{"location":"user-guide/user-interface/menu-bar/debugger/debugger-options.html#options","title":"Options","text":"<ul> <li> <p>Reconstruct the stack</p> <p>If selected, the debugger will try to reconstruct the chain of stack frames, based on information available on the stack and in the function stack variables. *   Show debugger breakpoint instructions</p> <p>If selected, the debugger will show breakpoint instructions inserted by the debugger itself. This function is mainly useful if the user wants to see the real content of the memory. *   Use hardware temporary breakpoints</p> <p>If selected, IDA will try to use hardware breakpoints for the temporary breakpoints used to implement the \"step over\" and \"run to\" functionality. This feature is useful when debugging read-only or self-modifying code, since it does not change the contents of the memory. IDA will fall back to software breakpoints if the attempt to set a hardware breakpoint fails. *   Autoload PDB files</p> <p>If selected, IDA will invoke the PDB plugin to try to load PDB symbols for every new module loaded into process. *   Optimize single-stepping</p> <p>Prevent debugger memory refreshes when single-stepping. See debugger_t::DBG_FLAG_FAST_STEP *   Disable ASLR</p> <p>Disable Address space layout randomization (ASLR). Optional, valid if debugger declares this option is supported, see debugger_t::DBG_FLAG_DISABLE_ASLR *   Set as just-in-time debugger</p> <p>If changed from off to on, IDA will try to register itself as a just-in-time debugger (invoked by the system in case of application crashes) on dialog close. Optional, valid only for Windows OS.</p> </li> </ul>"},{"location":"user-guide/user-interface/menu-bar/debugger/debugger-options.html#buttons","title":"Buttons","text":"<ul> <li> <p>Edit exceptions</p> <p>This button allows the user to setup how the debugger will react to specific exceptions. *   Reload exceptions</p> <p>This button reloads the exception table from the exceptions.cfg file. *   Set specific options</p> <p>Set debugger options (parameters that are specific to the debugger module). Optional, valid if debugger has the additional specific options. See debugger_t::ev_set_dbg_options</p> </li> </ul> <p>See also Debugger submenu.</p>"},{"location":"user-guide/user-interface/menu-bar/debugger/debugger-window.html","title":"Debugger window","text":"<pre><code> Action    name: Debugger\n\n</code></pre> <p>Opens the debugger window.</p> <p>In this window, you can view the register values for the selected thread. The debugger always selects the thread where the latest debugging event occurred.</p> <p>For most registers, we have two different boxes:</p> <pre><code>       - the first box (on the left) indicates the current value of the register.\n         Blue indicates that the value has changed since the last debugging event.\n         Purple indicates that the value has been modified by the user.\n         A popup menu is available on this control, offering different commands.\n\n       - the second box (on the right) shows the current value of the register,\n         interpreted like an address (if possible).\n</code></pre> <p>For a segment register, we only have one box indicating the current value.</p> <p>For the flags register, we have one box indicating the current value, and small boxes indicating the status of the most important flags.</p> <p>A popup menu is accessible everywhere in the window, which allows the user to show or hide different parts of the window: toolbar, thread list and available register classes.</p> <p>See also Debugger submenu.</p>"},{"location":"user-guide/user-interface/menu-bar/debugger/exceptions.html","title":"Exceptions","text":"<p>This dialog box allows to setup how the debugger will react to specific exceptions. For each exception, two settings can be specified, simply by selecting the desired exception, and clicking the 'Edit' button in the popup menu.</p> <p>Suspend program</p> <pre><code>        Specify whether the debugger will suspend when the exception occurs.\n        If 'Passed to' == application and the application handles\n        the exception successfully, the execution will not be suspended\n        regardless of the 'Suspend' value.\n</code></pre> <p>Passed to</p> <pre><code>        Specify whether the exception will be passed to the application itself\n        or handled by the debugger. If the debugged program contains exception\n        handling code, it is better to select 'Application'.\n</code></pre> <p>Report</p> <pre><code>  Warn\n\n        Show a warning message with the exception information.\n\n  Log\n\n        Instead of displaying a warning message, log to the output window the exception\n        information.\n\n  Silent\n\n        Do not show a warning message nor log to the output window.\n</code></pre> <p>For new exceptions being added by the \"Insert\" command, you have to specify the exception name and code. These values must be unique, the name cannot be empty, and the code cannot be zero. See also Debugger submenu.</p>"},{"location":"user-guide/user-interface/menu-bar/debugger/module-list.html","title":"Module list","text":"<pre><code> Action    name: Modules\n\n</code></pre> <p>Opens the modules window.</p> <p>This window lists all the modules loaded by the debugged process. Double click on a module to see the list of its exported names.</p> <p>The right click menu allows for loading debug information for the current module. For that, select the \"Load debug symbols\" command from the popup menu. If IDA manages to find and load the corresponding debug information file, it will import all symbols from it into the database. Currently, only PDB files are supported. The operation result is displayed in the message window. See also Debugger submenu. Load PDB files command.</p>"},{"location":"user-guide/user-interface/menu-bar/debugger/process-control.html","title":"Process Control","text":""},{"location":"user-guide/user-interface/menu-bar/debugger/process-memory.html","title":"Process Memory","text":""},{"location":"user-guide/user-interface/menu-bar/debugger/source-code-view.html","title":"Source code view","text":"<p>This window shows the contents of a source code file. IDA automatically opens source views provided that proper mapping of the source code paths is specified in \"Options, Source paths\".</p> <p>This window may also display a decompilation result because it is considered as a source code. This can be useful if the source files are not available.</p>"},{"location":"user-guide/user-interface/menu-bar/debugger/source-code-view.html#watch-view-source-level","title":"Watch view (source level)","text":"<p>In this window the user can view values of selected variables.</p> <p>Global variables (data item names) as well as variables that are local to the current function can be added by pressing Ins.</p> <p>Expressions can be added to the view as well, they will be considered as IDC expressions.</p> <p>Expressions may have a type cast at the beginning. For example</p> <p>(int)0x12345678</p> <p>means that the contents of the memory at the address 0x12345678 should be displayed as an integer. Note: to display strings use \"char[]\" as the typo.</p>"},{"location":"user-guide/user-interface/menu-bar/debugger/source-code-view.html#locals-view-source-level","title":"Locals view (source level)","text":"<p>This window displays the values of the variables that are local to the current functions (register and stack based).</p>"},{"location":"user-guide/user-interface/menu-bar/debugger/stack-trace.html","title":"Stack trace","text":"<pre><code> Action    name: StackTrace\n\n</code></pre> <p>Opens the stack trace window.</p> <p>This window displays the function calls that brought the current instruction.</p> <p>The top of the Stack Trace window lists the last function called by the program. Below this is the listing for the previously called functions. Each line indicates the name of the function which called the function represented by the previous line.</p> <p>Double clicking on a line jumps to the exact address of the instruction realizing this call.</p> <p>Currently, IDA uses the EBP frame pointer values to gather the stack trace information. It will fail for functions using other methods for the frame. See also Tracing submenu.</p>"},{"location":"user-guide/user-interface/menu-bar/debugger/switch-debugger.html","title":"Switch debugger","text":"<pre><code> Action    name: SwitchDebugger\n\n</code></pre> <p>This command allows the user to select a debugger if there are several debuggers available for the current database. For example, Window32 program can be debugged with a remote or a local debugger.</p>"},{"location":"user-guide/user-interface/menu-bar/debugger/thread-list.html","title":"Thread list","text":"<pre><code> Action    name: Threads\n\n</code></pre> <p>Opens the threads window.</p> <p>In this window, you can view all the threads of the debugged process. Double clicking on a thread jumps to its current instruction (available only if the process has been suspended). Double clicking also changes the current thread for the hlpHelpDebugger[CPU] window.</p> <p>The right click brings a popup menu, where you can suspend or resume threads. The following thread states are possible:</p> <pre><code>  - Running: the thread is running\n  - Ready: the thread is ready to run but the application has been suspended\n  - Suspended: the thread has been suspended by the user\n</code></pre> <p>See also Debugger submenu.</p>"},{"location":"user-guide/user-interface/menu-bar/debugger/tracing.html","title":"Tracing","text":"<p>Here are the commands to use the tracing features of the debugger.</p> <ul> <li>Trace management</li> <li>Tracing window</li> <li>Clear trace</li> <li>Instruction tracing</li> <li>Function tracing</li> <li>Basic block tracing</li> <li>Add write trace</li> <li>Add read/write trace</li> <li>Add execution trace</li> <li>Stack trace</li> <li>Tracing options</li> </ul> <p>See also Debugger submenu.</p>"},{"location":"user-guide/user-interface/menu-bar/debugger/tracing.html#trace-management","title":"Trace management","text":"<p>Recorded traces can be managed from the Tracing window. Traces are saved in a directory specified in the tracing options dialog.</p> <p>Saved binary trace files can be loaded, saved and replayed with the new replayer debugger module, diffed against other traces (to spot differences between executions) or displayed in a proximity view (displaying the execution call graph).</p>"},{"location":"user-guide/user-interface/menu-bar/debugger/tracing.html#tracing-window","title":"Tracing window","text":"<pre><code>Action    name: TracingWindow\n\n</code></pre> <p>Opens the 'Tracing' window.</p> <p></p> <p>In this window, you can view some information related to all traced events. The tracing events are the information saved during the execution of a program. Different type of trace events are available: instruction tracing events , function tracing events and write, read/write or execution tracing events.</p> <p>During the execution, the list of traced events is disabled, as it couldn't be continuously synchronized with the execution without rendering the whole tracing very slow.</p> <p>If a '=' character is displayed in the 'Thread' and 'Address' columns, it indicates that the trace event occurred in the same thread and at the same address as the previous trace event.</p>"},{"location":"user-guide/user-interface/menu-bar/debugger/tracing.html#select-trace","title":"Select trace","text":"<p>Load a binary trace file in the 'Tracing' window.</p> <p>This command displays all the saved trace files that correspond to the MD5 of the current IDB and allows the user to load one of them. The traces can be replayed with the replayer debugger, inspected manually in the disassembly view or displayed as a callgraph in a proximity view.</p>"},{"location":"user-guide/user-interface/menu-bar/debugger/tracing.html#other-options","title":"Other options","text":"<p>Show a dialog with additional options for managing trace files.</p> <p>This command displays a window with all the available commands to manage trace files.</p>"},{"location":"user-guide/user-interface/menu-bar/debugger/tracing.html#edit-trace-description","title":"Edit trace description","text":"<p>Show the description of a binary trace file.</p> <p>This command displays a window with the description of a selected binary trace file and allows to edit it.</p>"},{"location":"user-guide/user-interface/menu-bar/debugger/tracing.html#diff-to-binary-trace","title":"Diff to binary trace","text":"<p>Diff the currently loaded trace against a recorded trace.</p> <p>This command displays a window to select a trace file to diff against the currently loaded trace, displayed in the 'Tracing' window.</p> <p>If highlight options are enabled in Tracing Options, instructions from the currently loaded trace will be displayed with the background \"main color\" and instructions from the diff trace file will be displayed with the \"diff color\". Common instructions will be highlighted with an average of the two.</p>"},{"location":"user-guide/user-interface/menu-bar/debugger/tracing.html#remove-binary-trace","title":"Remove binary trace","text":"<p>Delete a binary trace file from disk.</p> <p>This command displays a window to select a recorded trace file to delete from disk.</p>"},{"location":"user-guide/user-interface/menu-bar/debugger/tracing.html#import-binary-trace","title":"Import binary trace","text":"<p>Import a binary trace file from a different IDB.</p> <p>This command allows to import binary trace files recorded for an IDB with a different MD5. For example, it can be used to load recorded traces from a malware sample which is practically the same, but differs in a few bytes.</p>"},{"location":"user-guide/user-interface/menu-bar/debugger/tracing.html#export-binary-trace","title":"Export binary trace","text":"<p>Export to a binary trace file all events displayed in the 'Tracing' window.</p> <p>This command exports to a binary trace file the current trace being displayed in the Tracing window. The trace can be loaded later, removed or diffed against other trace files.</p>"},{"location":"user-guide/user-interface/menu-bar/debugger/tracing.html#export-trace-to-text-file","title":"Export trace to text file","text":"<p>Export to a text file all events displayed in the 'Tracing' window</p> <p>This command exports the current trace being displayed in the Tracing window to a text file.</p>"},{"location":"user-guide/user-interface/menu-bar/debugger/tracing.html#show-trace-callgraph","title":"Show trace callgraph","text":"<p>Show the callgraph of the loaded trace in a proximity view.</p> <p>This command displays the callgraph of the currently loaded trace in a proximity view.</p>"},{"location":"user-guide/user-interface/menu-bar/debugger/tracing.html#clear-trace","title":"Clear trace","text":"<pre><code>Action    name: ClearTrace\n\n</code></pre> <p>This command removes all trace events from the Tracing window. It also removes any loaded trace file used for diffing against the currently loaded trace.</p>"},{"location":"user-guide/user-interface/menu-bar/debugger/tracing.html#instruction-tracing","title":"Instruction tracing","text":"<pre><code>Action    name: ToggleTraceInstructions\n\n</code></pre> <p>This command starts instruction tracing. You can then use all the debugger commands as usual: the debugger will save all the modified register values for each instruction.</p> <p>When you click on an instruction trace event in the 'Tracing' window, IDA displays the corresponding register values preceding the execution of this instruction. In the 'Result' column of the Tracing window, you can also see which registers were modified by this instruction. By using this information, you can for example quickly determine which instruction modified a specific register, or you can even backtrace the execution flow. Note that the IP register is never printed in the 'Result' column, although it is usually modified by almost any instruction (except perhaps some prefixed instructions like REP MOVSB, ...).</p> <p>Internally, the debugger runs the current thread step by step to properly obtain all the required register values. This explains why instruction tracing is slower than a normal execution.</p>"},{"location":"user-guide/user-interface/menu-bar/debugger/tracing.html#function-tracing","title":"Function tracing","text":"<pre><code>Action    name: ToggleTraceFunctions\n\n</code></pre> <p>This command starts function tracing. You can then use all debugger commands as usual: the debugger will save all addresses where a call to a function or a return from a function occurred.</p> <p>Internally, the debugger runs the current thread step by step to properly detect all function calls and returns. This explains why functions tracing is slower than a normal execution.</p>"},{"location":"user-guide/user-interface/menu-bar/debugger/tracing.html#basic-block-tracing","title":"Basic block tracing","text":"<pre><code>Action    name: ToggleTraceBasicBlocks\n\n</code></pre> <p>This command starts basic block tracing. You can then use all debugger commands as usual: the debugger will save all addresses where a temporary basic block breakpoint was reached.</p> <p>Internally, the debugger runs the current thread normally, setting temporary breakpoints in the last instruction of every basic block of every function referenced from the current function and also at any call instruction in the middle of the traced basic blocks.</p> <p>Basic block tracing is slower than normal execution but faster than instruction or function tracing.</p>"},{"location":"user-guide/user-interface/menu-bar/debugger/tracing.html#add-write-trace","title":"Add write trace","text":"<pre><code> Action    name: WriteTraceAdd\n\n</code></pre> <p>This command adds a write trace to the current address.</p> <p>Each time the given address will be accessed in write mode, the debugger will add a trace event to the Tracing window.</p> <p>In fact, write traces are nothing more than breakpoints with special properties: they don't stop and they simply add a trace event when the breakpoints are reached.</p> <p>Internally, the debugger will add a hardware breakpoint on the given address, so all the restrictions for hardware breakpoints are also valid for write traces.</p>"},{"location":"user-guide/user-interface/menu-bar/debugger/tracing.html#add-readwrite-trace","title":"Add read/write trace","text":"<pre><code>Action    name: ReadWriteTraceAdd\n\n</code></pre> <p>This command adds a read/write trace to the current address.</p> <p>Each time the given address will be accessed in read or write mode, the debugger will add a trace event to the Tracing window.</p> <p>In fact, read/write traces are nothing more than breakpoints with special properties: they don't stop and they simply add a trace event when the breakpoints are reached.</p> <p>Internally, the debugger will add a hardware breakpoint on the given address, so all the restrictions for hardware breakpoints are also valid for read/write traces.</p>"},{"location":"user-guide/user-interface/menu-bar/debugger/tracing.html#add-execution-trace","title":"Add execution trace","text":"<p>This command adds an execution trace to the current address.</p> <p>Each time the instruction at the given address will be run, the debugger will add a trace event to the Tracing window.</p> <p>In fact, execution traces are nothing more than breakpoints with special properties: they don't stop and they simply add a trace event when the breakpoints are reached.</p> <p>Internally, the debugger will add a breakpoint instruction at the given address.</p>"},{"location":"user-guide/user-interface/menu-bar/debugger/tracing.html#stack-trace","title":"Stack trace","text":"<pre><code>Action    name: StackTrace\n\n</code></pre> <p>Opens the stack trace window.</p> <p>This window displays the function calls that brought the current instruction.</p> <p>The top of the Stack Trace window lists the last function called by the program. Below this is the listing for the previously called functions. Each line indicates the name of the function which called the function represented by the previous line.</p> <p>Double clicking on a line jumps to the exact address of the instruction realizing this call.</p> <p>Currently, IDA uses the EBP frame pointer values to gather the stack trace information. It will fail for functions using other methods for the frame.</p>"},{"location":"user-guide/user-interface/menu-bar/debugger/tracing.html#tracing-options","title":"Tracing options","text":"<pre><code>Action    name: SetupTracing\n</code></pre> <p>This dialog box allows you to specify different settings related to the tracing features.</p> <p>Trace buffer size</p> <pre><code>  This setting indicates how many tracing events can fit in the trace buffer.\n  If the debugger must insert a new event and the buffer is full,\n  the oldest tracing event will be removed.\n  However, if you specify a size of 0, the buffer size isn't limited.\n  Notice that, for example, in the case of an instructions trace,\n  all executed instructions could be logged, which would quickly fill\n  up the memory!\n</code></pre> <p>Trace file</p> <pre><code>  If a filename is specified, all future traced events will be appended to it.\n</code></pre> <p>Trace directory</p> <pre><code>  The directory were trace files for the current database will be saved. If not\n  specified, the IDB directory will be used.\n</code></pre> <p>Stop condition</p> <p>This IDC expression will be evaluated before the execution of each instruction. If the expression returns true, the debugger will suspend the execution. Please note that you can use register names in the condition.</p> <p>Tracing</p> <pre><code>  - Trace over debugger segments\n\n      If selected, the debugger will not go step by step in debugger segments\n      (segments not available in the database).\n\n  - Trace over library functions\n\n      If selected, the debugger will not go step by step in library functions.\n</code></pre> <p>Enabling these options will speed up the execution, as many instructions (from debugger segments and/or library functions) will not be traced. Disabling these options can quickly fill the Tracing window, as all instructions in DLLs and system functions will be executed step by step. Notice that both options influence the way instruction and function tracings will work. Internally, the debugger proceeds like this:</p> <ul> <li>memorize the return address associated with the last executed call instruction in database segments (the previously saved one is overwritten).</li> <li>setup a temporary breakpoint on this address once the IP is in a debugger segment or library function, disable step by step, and run the thread.</li> <li> <p>reenable step by step once this temporary breakpoint is reached.</p> <p>``` - Do not log already logged IP</p> <pre><code>If selected, already executed instructions will not be logged if\nthey are executed again.\n</code></pre> <ul> <li> <p>Skip loops</p> <p>If selected, tracing will be temporarily disabled for some loops constructs.     ```</p> </li> </ul> </li> </ul> <p>Highlight</p> <pre><code>  - Highlight instructions in IDA views\n\n    If selected, recorded instructions will be displayed in IDA views (disassembly\n    views) with a different background color.\n\n  - Main color\n\n    The main background color for traced instructions.\n\n  - Diff color\n\n    The background color for the instructions recorded and being diffed against the\n    currently loaded trace.\n</code></pre> <p>Instruction tracing</p> <pre><code>  - Log if same IP\n\n    If selected, the debugger will also log all register modifications occurring\n    during the execution of prefixed instructions like REP MOVSB, ...\n</code></pre> <p>Function tracing</p> <pre><code>  - Log return instructions\n\n      If selected, the debugger will also log function returns.\n      If disabled, only function calls are logged.\n</code></pre> <p>Basic block tracing</p> <pre><code>  - Log basic block instructions\n\n      If selected, all instructions from the current basic block will be logged\n      and displayed in the 'Tracing' window, instead of only the last instruction of\n      the basic block.\n</code></pre>"},{"location":"user-guide/user-interface/menu-bar/debugger/watches.html","title":"Watches submenu","text":"<p>Here are the commands to use the debugger watches (assembler level).</p> <ul> <li>Watch list</li> <li>Add watch</li> <li>Del watch</li> </ul> <p>See also</p> <ul> <li>Debugger submenu </li> <li>Source level watchies</li> </ul>"},{"location":"user-guide/user-interface/menu-bar/debugger/watches.html#watch-list","title":"Watch list","text":"<pre><code>Action    name: WatchList\n\n</code></pre> <p>Opens the assembler level watch list window.</p> <p>In this window you can view memorized watches. A watch allows the user to continuously see the value of a defined item.</p>"},{"location":"user-guide/user-interface/menu-bar/debugger/watches.html#add-watch","title":"Add watch","text":"<pre><code>Action    name: AddWatch\n\n</code></pre> <p>This command adds a watch at the current address. The watch is visible in the Watch list window.</p>"},{"location":"user-guide/user-interface/menu-bar/debugger/watches.html#delete-watch","title":"Delete watch","text":"<pre><code>Action    name: DelWatch\n\n</code></pre> <p>This command deletes an existing watch.</p>"},{"location":"user-guide/user-interface/menu-bar/debugger/process-control/attach-to-process.html","title":"Attach to process","text":"<pre><code> Action    name: ProcessAttach\n\n</code></pre> <p>This command displays running processes corresponding to the disassembled file in the database and allows the user to choose a process to attach to.</p> <p>See also</p> <ul> <li>Start process</li> <li>Process options</li> <li>Pause process</li> <li>Terminate process</li> <li>Detach from process</li> <li>Debugger submenu.</li> </ul>"},{"location":"user-guide/user-interface/menu-bar/debugger/process-control/continue-process-backwards.html","title":"Continue process backwards","text":""},{"location":"user-guide/user-interface/menu-bar/debugger/process-control/continue-process-backwards.html#continue-backwards","title":"Continue (backwards)","text":"<p>This resumes the backwards execution of a paused process.</p> <p>See also  - Attach to process... - Process options - Pause process - Terminate process - Detach from process - Debugger submenu</p>"},{"location":"user-guide/user-interface/menu-bar/debugger/process-control/detach-from-process.html","title":"Detach from process","text":"<pre><code> Action    name: ProcessDetach\n\n</code></pre> <p>This command detaches the debugger from the debugged process. Note: this command is only available on Windows XP or Windows 2003 Server !</p> <p>See also</p> <ul> <li>Start process</li> <li>Pause process</li> <li>Terminate process</li> <li>Debugger submenu.</li> </ul>"},{"location":"user-guide/user-interface/menu-bar/debugger/process-control/pause-process.html","title":"Pause process","text":"<pre><code> Action    name: ProcessPause\n\n</code></pre> <p>This command pauses a running process. Please note that it is not always possible to pause a process executing the system code. See also</p> <ul> <li>Start process</li> <li>Terminate process</li> <li>Debugger submenu.</li> </ul>"},{"location":"user-guide/user-interface/menu-bar/debugger/process-control/process-options.html","title":"Process options","text":"<pre><code> Action    name: SetupProcess\n\n</code></pre> <p>This dialog box allows to specify different settings related to the process being debugged.</p> ApplicationHost application to launch. When the debugging target (== 'input file') is an executable file, this field is equal to the 'input file'. If this field is wrong, IDA will not be able to launch the program. For remoting debugging, this field denotes a remote file.Input fileThe input file used to create the database. For remoting debugging, this field denotes a remote file.DirectoryDirectory to start the application. If empty, then the current directory will be used. For remoting debugging, this field denotes a remote directory.ParametersOptional parameters to pass to the debugged application (or the host application) when it starts. This field may be empty. The standard input/output/error channels can be redirected using the bash shell notations. For example: &gt;output 2&gt;&amp;1HostnameIf entered, denotes the name of the remote host with the application to debug. In this case, a remote IDA server on this host must be launched. Click here to see the list of remote servers.PortThe port number of the remote serverPasswordOptional password to protect your server from strangers connecting to it and running arbitrary commands. The same password switch must be specified on the remote server. <p>The hostname, port, and password are not available for debuggers connected locally to the computer. See also</p> <ul> <li>Start process</li> <li>Debugger submenu</li> <li>How to launch remote debugging</li> </ul>"},{"location":"user-guide/user-interface/menu-bar/debugger/process-control/run-to-cursor-backwards.html","title":"Run to cursor backwards","text":""},{"location":"user-guide/user-interface/menu-bar/debugger/process-control/run-to-cursor-backwards.html#run-to-cursor-backwards","title":"Run to cursor (backwards)","text":"<p>This command backwards-executes instructions until the instruction under the cursor is reached.</p> <p>Internally, IDA setups a temporary breakpoint on the instruction under the cursor, and backwards-resumes the process until it is hit.</p> <p>See also Debugger submenu.</p>"},{"location":"user-guide/user-interface/menu-bar/debugger/process-control/run-to-cursor.html","title":"Run to cursor","text":"<pre><code> Action    name: ThreadRunToCursor\n\n</code></pre> <p>This command executes instructions until the instruction under the cursor is reached.</p> <p>Internally, IDA setups a temporary breakpoint on the instruction under the cursor. See also Debugger submenu.</p>"},{"location":"user-guide/user-interface/menu-bar/debugger/process-control/run-until-return.html","title":"Run until return","text":"<pre><code> Action    name: ThreadRunUntilReturn\n\n</code></pre> <p>This command executes assembler instructions and stops on the instruction immediately following the instruction that called the current function.</p> <p>Internally, IDA executes each instruction in the current function until a 'return from function' instruction is reached.</p> <p>See also</p> <ul> <li>Step into</li> <li>Step over</li> <li>Debugger submenu.</li> </ul>"},{"location":"user-guide/user-interface/menu-bar/debugger/process-control/set-current-ip.html","title":"Set current ip","text":"<pre><code> Action    name: ThreadSetCurrentIp\n\n</code></pre> <p>This command sets the instruction pointer of the current suspended thread to the current cursor location.</p> <p>It is accessible only when the debugger is active and the process is suspended. See also Debugger submenu.</p>"},{"location":"user-guide/user-interface/menu-bar/debugger/process-control/show-application-screen.html","title":"Show application screen","text":"<pre><code> Action    name: ShowUserScreen\n\n</code></pre> <p>This command displays the application screen.</p> <p>It is useful for the text mode debugger.</p> <p>When the debugged application runs in the same window as IDA itself, the application output is hidden by IDA windows. This command allows to see the application screen in this case.</p> <p>To return to IDA display, press any key.</p> <p>This command is available when the application is suspended or finished. See also Debugger submenu.</p>"},{"location":"user-guide/user-interface/menu-bar/debugger/process-control/start-process.html","title":"Start process","text":"<pre><code> Action    name: ProcessStart\n\n</code></pre> <p>This command starts the process in the debugger. If the process was suspended, it will continue its execution. See also</p> <ul> <li>Attach to process...</li> <li>Process options</li> <li>Pause process</li> <li>Terminate process</li> <li>Detach from process</li> <li>Debugger submenu</li> </ul>"},{"location":"user-guide/user-interface/menu-bar/debugger/process-control/step-into-backwards.html","title":"Step into backwards","text":""},{"location":"user-guide/user-interface/menu-bar/debugger/process-control/step-into-backwards.html#step-into-backwards","title":"Step into (backwards)","text":"<p>This command backward-executes one assembler instruction at a time, stepping into functions.</p> <p>See also - Step over (backwards) - Debugger submenu.</p>"},{"location":"user-guide/user-interface/menu-bar/debugger/process-control/step-into.html","title":"Step into","text":"<pre><code> Action    name: ThreadStepInto\n\n</code></pre> <p>This command executes one assembler instruction at a time, stepping into functions. See also</p> <ul> <li>Step over</li> <li>Run until return</li> <li>Debugger submenu.</li> </ul>"},{"location":"user-guide/user-interface/menu-bar/debugger/process-control/step-over-backwards.html","title":"Step over backwards","text":""},{"location":"user-guide/user-interface/menu-bar/debugger/process-control/step-over-backwards.html#step-over-backwards","title":"Step over (backwards)","text":"<p>This command backward-executes one assembler instruction at a time, stepping over procedures while executing them as a single unit.</p> <p>Internally, in the case of a function call, IDA setups a temporary breakpoint on the instruction preceding this function call.</p> <p>See also - Step into (backwards) - Debugger submenu.</p>"},{"location":"user-guide/user-interface/menu-bar/debugger/process-control/step-over.html","title":"Step over","text":"<pre><code> Action    name: ThreadStepOver\n\n</code></pre> <p>This command executes one assembler instruction at a time, stepping over procedures while executing them as a single unit.</p> <p>Internally, in the case of a function call, IDA setups a temporary breakpoint on the instruction following this function call. See also</p> <ul> <li>Step into</li> <li>Run until return</li> <li>Debugger submenu.</li> </ul>"},{"location":"user-guide/user-interface/menu-bar/debugger/process-control/terminate-process.html","title":"Terminate process","text":"<pre><code> Action    name: ProcessTerminate\n\n</code></pre> <p>This command terminates the debugged process. See also</p> <ul> <li>Start process</li> <li>Pause process</li> <li>Detach from process</li> <li>Debugger submenu.</li> </ul>"},{"location":"user-guide/user-interface/menu-bar/debugger/process-memory/manual-memory-regions.html","title":"Manual memory regions","text":"<pre><code> Action    name: ManualRegions\n\n</code></pre> <p>This command open a window with manual memory regions. In this window the user can manipulate memory region definitions: add or delete them.</p> <p>Some debugger backends (e.g. the gdb backend) do not provide memory layout information. IDA needs this information in order to show the memory contents. When this information is not available, the user must specify it.</p> <p>The defined memory regions will be accessible when the debugger is active. The user will be able to see the memory contents in the disassembly windows.</p> <p>If no memory information is provided by the user nor by the debugger backend, IDA will assume that entire memory space is accessible. However, it is better to specify memory layout more precisely.</p> <p>See also Debugger submenu.</p>"},{"location":"user-guide/user-interface/menu-bar/debugger/process-memory/refresh-memory.html","title":"Refresh memory","text":"<pre><code> Action    name: RefreshMemcfg\n\n</code></pre> <p>This command refreshes the segments and memory contents in IDA. It is available only during a debugging session. NOTE: this command is currently hidden from the user interface because IDA does synchronize with the process memory automatically.</p> <p>Please note that IDA itself tries to keep the program segments in sync with the debugged process. However, in order to accelerate the debugger, the synchronization is done only at major events, for example when dynamic library gets loaded or unloaded or a thread is created or deleted. If the memory configuration is changed because of a simple system call (think of VirtualAlloc), IDA might miss it. Use the \"refresh memory\" command in these cases.</p> <p>Note2: when IDA detects a discrepancy in the segments, it will automatically synchronize with the process.</p>"},{"location":"user-guide/user-interface/menu-bar/debugger/process-memory/take-memory-snapshot.html","title":"Take memory snapshot","text":"<pre><code> Action    name: TakeSnapshot\n\n</code></pre> <p>This command copies the contents of the process memory to the database. It is available during a debugging session.</p> <p>The memory contents will be copied to the database. The user may specify that only the segments with the 'loader' attribute will be saved in the database.</p> <p>The segments with the loader attribute are created by the input file loader and usually contain information from the input file. However, in some cases (like attaching to an existing process), there will not be any loader segments because the input file was not loaded by IDA.</p> <p>To be able to make a partial snapshot in this case and other similar cases, the user can set or clear the 'loader' attribute of the desired segments using the edit segment command.</p> <p>After applying this command, the user can terminate the debugging process and continue to analyze the program in the database.</p> <p>Please note that it is possible to save the database without taking a memory snapshot. Such a database might be used to keep global information about the program like the breakpoint information, notes, etc. However, we recommend to take a memory snapshot of at least the 'loader' segments because it will allow to save also information about the program functions, names, comments, etc.</p> <p>See also Debugger submenu.</p>"},{"location":"user-guide/user-interface/menu-bar/debugger/source-code-view/watch-view-source-level.html","title":"Watch view (source level)","text":"<p>In this window the user can view values of selected variables.</p> <p>Global variables (data item names) as well as variables that are local to the current function can be added by pressing Ins.</p> <p>Expressions can be added to the view as well, they will be considered as IDC expressions.</p> <p>Expressions may have a type cast at the beginning. For example</p> <p>(int)0x12345678</p> <p>means that the contents of the memory at the address 0x12345678 should be displayed as an integer. Note: to display strings use \"char[]\" as the typo.</p> <p>See also Source code view</p>"},{"location":"user-guide/user-interface/menu-bar/edit/clear-undo-history.html","title":"Clear undo history","text":"<pre><code> Action    name: ResetUndo\n\n</code></pre> <p>This command clears the undo history. After it the Undo and Redo commands become unavailable. However, once the user performs a new action, IDA will again start journaling all database modifications.</p> <p>A side effect of this command is fast autoanalysis: since there is no user action to revert yet, IDA does not maintain undo buffers and this speeds up the analysis.</p> <p>See also</p> <ul> <li>Undo</li> <li>Redo</li> <li>Disable Undo</li> <li>Open undo history</li> </ul>"},{"location":"user-guide/user-interface/menu-bar/edit/comments.html","title":"Edit|Comments submenu","text":"<p>This submenu allows you to manipulate different kinds of comments. Use them to make the disassembled text more understandable.</p> <ul> <li>Create a regular comment</li> <li>Create repeatable comments</li> <li>Create additional comment lines</li> </ul>"},{"location":"user-guide/user-interface/menu-bar/edit/comments.html#create-a-regular-comment","title":"Create a regular comment","text":"<pre><code> Action    name: MakeComment\n\n</code></pre> <p>If you stand at the function start and your cursor is on a function name, IDA will ask you to enter a function comment.</p> <p>If you stand at the segment start and your cursor is on a segment name, IDA will ask you to enter a segment comment.</p> <p>If this command is issued in the local types window, it allows you to change the comment of a structure/enum, or structure/enum member. If the cursor is on the structure/enum name, the structure/enum comment will be changed, otherwise the member comment will be changed.  </p> <p>Otherwise, this command allows you to enter a normal indented comment for the current item.</p> <p>You can show/hide all comments in Comments Dialog.</p> <p>See also</p> <ul> <li>How to use the notepad</li> <li>Edit|Comments submenu, Repeatable comments </li> </ul>"},{"location":"user-guide/user-interface/menu-bar/edit/comments.html#create-a-repeatable-comment","title":"Create a repeatable comment","text":"<pre><code> Action    name: MakeRptCmt\n\n</code></pre> <p>This command allows you to enter a repeatable comment. A repeatable comment will appear attached to the current item and all other items referencing it.</p> <p>If you stand at the function start, IDA will ask you to enter a function comment.</p> <p>If this command is issued in the local types window, it allows you to change the comment of a structure/enum, or structure/enum member. If the cursor is on the structure/enum name, the structure/enum comment will be changed, otherwise the member comment will be changed.</p> <p>Otherwise, this command allows you to enter a repeatable comment for the current item.</p> <p>You cannot enter repeatable segment comments.</p> <p>All items that refer to the current item will have this comment by default.</p> <p>Note that if you have defined both comment types (regular and repeatable), the regular comment will be displayed for the current item and the repeatable comment will be displayed for all items that refer to the current item, if they do not have their own comments.</p> <p>The repeatable comments may be used to describe subroutines, data items, etc., because all calls to the subroutine will have the repeatable comment.</p> <p>You can show/hide all comments in the Comments Dialog.</p> <p>You can show and hide repeatable comments in the  Comments Dialog.</p> <p>See also \"How to use the notepad\".</p>"},{"location":"user-guide/user-interface/menu-bar/edit/comments.html#create-additional-comment-lines","title":"Create additional comment lines","text":"<pre><code>Action                 Name\n ------                 ----\n edit anterior lines    MakeExtraLineA\n edit posterior lines   MakeExtraLineB\n</code></pre> <p>If you want to enter multi-line comments or additional instructions, you can use this feature of IDA.</p> <p>There are two kinds of extra lines: the ones generated before the instruction line and the ones generated after the instruction line.</p> <p>Do not forget that the maximal number of lines for an item is 500.</p> <p>IDA does not insert a comment symbol at the beginning of the lines.</p> <p>See also \"How to use the notepad\".</p> <p>Related topics: Edit submenu.</p>"},{"location":"user-guide/user-interface/menu-bar/edit/convert-to-array.html","title":"Convert to array","text":"<pre><code> Action    name: MakeArray\n\n</code></pre> <p>This command allows you to create arrays and change their sizes.</p> <p>The arrays are created in 2 simple steps:</p> <ol> <li>Create the first element of array using the data definition commands (data, string, structs)</li> <li> <p>Apply the array command to the created data item. Enter array size in current array elements (not bytes). The suggested array size is the minimum of the following values:</p> <p><code>- the address of the next item with a cross reference      - the address of the next user-defined name</code></p> </li> </ol> <p>For string literals, you can use this command to change the length of the string.</p> <p>The dialog box contains the following fields:</p> <p>Items on a line (meaningless for string literals):</p> <pre><code>        0               place maximal number of items on a line\n        other value     number of items on a line\n</code></pre> <p>Please note that the margin parameter affects the number of items on a line too.</p> <p>Alignment (meaningless for string literals):</p> <pre><code>        -1              do not align items\n        0               align automatically\n        other value     width of each item\n\n Signed elements:       if checked, IDA treats all elements as signed numbers.\n                        only meaningful for numbers (not for offsets and\n                        segments and strings)\n\n Display indexes:       if checked, IDA will display the indexes of array\n                        elements in the form of comments (0,1,2...)\n\n Create as array:       if not checked, IDA will create a separate item for\n                        each array element. Useful for creating huge arrays.\n                        If the box is unchecked when this command is\n                        applied to string literals, IDA will create many\n                        string literals instead of one big string.\n</code></pre> <p>If applied to a variable-sized structure, this command is used to specify the overall size of the structure. You cannot create arrays of variable-sized structures.</p> <p>See also: -  Edit submenu  - How to Enter a Number.</p>"},{"location":"user-guide/user-interface/menu-bar/edit/convert-to-data.html","title":"Convert to data","text":"<pre><code> Action    name: MakeData\n\n</code></pre> <p>This command converts the current unexplored bytes to data. If it is not possible, IDA will warn you.</p> <p>Multiple using of this command will change the data type:</p> <pre><code> db -&gt; dw -&gt; dd -&gt; float -&gt; dq -&gt; double -&gt; dt -&gt; packreal -&gt; octa \\;\n ^                                                                 |;\n \\---------&lt;----------------&lt;--------------&lt;-----------------------/;\n</code></pre> <p>You may remove some items from this list using setup data command.</p> <p>If the target assembler does not support double words or another data type, it will be skipped. To create a structure variable, use Declare struct var command. To create an array, use Array command. To convert back, use Undefine command. See also Edit submenu</p>"},{"location":"user-guide/user-interface/menu-bar/edit/convert-to-instruction.html","title":"Convert to instruction","text":"<pre><code> Action    name: MakeCode\n\n</code></pre> <p>This command converts the current unexplored bytes to instruction(s). IDA will warn you if it is not possible.</p> <p>If you have selected a range using the [anchor](../../../disassembler/navigation/anchor.md, all the bytes from this range will be converted to instructions.</p> <p>If you apply this command to an instruction, it will be reanalyzed.</p> <p>See also Edit submenu</p>"},{"location":"user-guide/user-interface/menu-bar/edit/convert-to-string-literal.html","title":"Convert to string literal","text":""},{"location":"user-guide/user-interface/menu-bar/edit/convert-to-string-literal.html#convert-to-string-literal_1","title":"Convert to string literal","text":"<pre><code> Action    name: MakeStrlit\n\n</code></pre> <p>This command converts the current unexplored bytes to a string.</p> <p>The set of allowed characters is specified in the configuration file, parameter StrlitChars. Character '\\0' is not allowed in any case. If the current assembler does not allow characters above 0x7F, characters with high bit set are not allowed.</p> <p>If the anchor has been dropped, IDA will take for the string all characters between the current cursor position and the anchor.</p> <p>Use the anchor if the string starts a disallowed character.</p> <p>This command also generates a name for the string. In the configuration file, you can specify the characters allowed in names (NameChars).</p> <p>You can change the literal string length using Array command.</p> <p>The GUI version allows you to assign a special hotkey to create Unicode strings. To do so, change the value of the StringUnicode parameter in the IDAGUI.CFG file.</p>"},{"location":"user-guide/user-interface/menu-bar/edit/convert-to-string-literal.html#pascal-strings","title":"Pascal Strings","text":"<p>To create Pascal style strings (with first byte indicating string length) use Set String Style command.</p> <p>See also Edit submenu</p>"},{"location":"user-guide/user-interface/menu-bar/edit/disable-undo.html","title":"Disable undo","text":"<pre><code> Action    name: DisableUndo\n\n</code></pre> <p>This command completely disables the undo feature.</p> <p>See also</p> <ul> <li>Undo</li> <li>Redo</li> <li>Reset Undo</li> <li>Open undo history</li> </ul>"},{"location":"user-guide/user-interface/menu-bar/edit/edit.html","title":"Edit submenu","text":"<p>This submenu allows the user to modify text representation and to patch the file. It also has the commands to control the analysis:</p> <ul> <li>Anchor</li> <li>Export data</li> <li>Undo</li> <li>Redo</li> <li>Convert to instruction</li> <li>Convert to data</li> <li>Convert to STRLIT string</li> <li>Convert to array</li> <li>Undefine</li> <li>Rename</li> <li>Operand types submenu</li> <li>Comments submenu</li> <li>Functions submenu</li> <li>Structures submenu</li> <li>Enums submenu</li> <li>Segments submenu</li> <li>Patch program submenu</li> <li>Other submenu</li> <li>Plugins submenu</li> </ul> <p>See also Menu Bar submenus.</p>"},{"location":"user-guide/user-interface/menu-bar/edit/export-data.html","title":"Export data","text":""},{"location":"user-guide/user-interface/menu-bar/edit/export-data.html#export-data","title":"Export data","text":"<pre><code>  \"Export data\" dialog can export binary data into different formats.\n</code></pre>"},{"location":"user-guide/user-interface/menu-bar/edit/functions.html","title":"Functions submenu","text":"<p>This submenu allows you to manipulate functions in the disassembly:</p> <ul> <li>Create function...</li> <li>Edit function...</li> <li>Append function tail...</li> <li>Remove function tail...</li> <li>Delete function...</li> <li>Set function end</li> <li>Define stack variables...</li> <li>Change stack pointer...</li> <li>Rename register...</li> <li>Set function/item type...</li> </ul>"},{"location":"user-guide/user-interface/menu-bar/edit/functions.html#create-function","title":"Create Function","text":"<pre><code>Action    name: MakeFunction\n\n</code></pre> <p>This command defines a new function in the disassembly text.</p> <p>You can specify function boundaries using the anchor. If you don't specify any, IDA will try to find the boundaries automatically:</p> <pre><code>   - function start point is equal to the current cursor position;\n   - function end point is calculated by IDA.\n</code></pre> <p>A function cannot contain references to undefined instructions. If a function has already been defined at the specified addresses, IDA will jump to its start address, showing you a warning message.</p> <p>A function must start with an instruction.</p>"},{"location":"user-guide/user-interface/menu-bar/edit/functions.html#edit-function","title":"Edit Function","text":"<pre><code> Action    name: EditFunction\n\n</code></pre> <p>Here you can change function bounds, its name and flags. In order to change only the function end address, you can use FunctionEnd command.</p> <p>If the current address does not belong to any function, IDA beeps.</p> <p>This command allows you to change the function frame parameters too. You can change sizes of some parts of frame structure.</p> <p>IDA considers the stack as the following structure:</p> <pre><code>      +------------------------------+\n      | function arguments           |\n      +------------------------------+\n      | return address               |\n      +------------------------------+\n      | saved registers (SI,DI,etc)  |\n      +------------------------------+  &lt;- BP\n      | local variables              |\n      +------------------------------+  &lt;- SP\n</code></pre> <p>For some processors or functions, BP may be equal to SP. In other words, it can point to the bottom of the stack frame.</p> <p>You may specify the number of bytes in each part of the stack frame. The size of the return address is calculated by IDA (possibly depending on the far function flag).</p> <p>\"Purged bytes\" specifies the number of bytes added to SP upon function return. This value will be used to calculate the SP changes at call sites (used in some calling conventions, such as __stdcall in Windows 32-bit programs.)</p> <p>\"BP based frame\" allows IDA to automatically convert [BP+xxx] operands to stack variables.</p> <p>\"BP equal to SP\" means that the frame pointer points to the bottom of the stack. It is usually used for the processors which set up the stack frame with EBP and ESP both pointing to the bottom of the frame (for example MC6816, M32R).</p> <p>If you press \\ even without changing any parameter,IDA will reanalyze the function. <p>Sometimes, EBP points to the middle of the stack frame. FPD (frame pointer delta) is used to handle such situations. FPD is the value substracted from the EBP before accessing variables. An example:</p> <pre><code>           push    ebp\n           lea     ebp, [esp-78h]\n           sub     esp, 588h\n           push    ebx\n           push    esi\n           lea     eax, [ebp+74h]\n\n      +------------------------------+\n      | function arguments           |\n      +------------------------------+\n      | return address               |\n      +------------------------------+\n      | saved registers (SI,DI,etc)  |\n      +------------------------------+  &lt;- typical BP\n      |                              |\n      |                              |\n      |                              |  &lt;- actual BP\n      | local variables              |\n      |                              |\n      |                              |\n      |                              |\n      +------------------------------+  &lt;- SP\n</code></pre> <p>In our example, the saved registers area is empty (since EBP has been initialized before saving EBX and ESI). The difference between the 'typical BP' and 'actual BP' is 0x78 and this is the value of FPD.</p> <p>After specifying FPD=0x78 the last instruction of the example becomes</p> <pre><code>           lea     eax, [ebp+78h+var_4]\n</code></pre> <p>where var_4 = -4</p> <p>Most of the time, IDA calculates the FPD value automatically. If it fails, the user can specify the value manually.</p> <p>If the value of the stack pointer is modified in an unpredictable way, (e.g. \"and esp, -16\"), then IDA marks the function as \"fuzzy-sp\".</p> <p>If this command is invoked for an imported function, then a simplified dialog box will appear on the screen.</p>"},{"location":"user-guide/user-interface/menu-bar/edit/functions.html#function-flags","title":"Function flags","text":"<p>The following flags can be set in function properties:</p> <p>Does not return</p> <p>The function does not return to caller (for example, calls a process exit function or has an infinite loop). If no-return analysis is enabled in Kernel Options, IDA will not analyze bytes following the calls to this function.</p> <p>Far function</p> <p>On processors which distinguish near and far functions (e.g. PC x86), mark the function as 'far'. This may affect the size of the special stack frame field reserved for the return address, as well as analysis of calls to this function.</p> <p>Library func</p> <p>Mark the function as part of compiler runtime library code. This flag is usually set when applying FLIRT signatures</p> <p>Static func</p> <p>Mark the function as static. Currently this flag is not used by IDA and is simply informational.</p> <p>BP based frame</p> <p>Inform IDA that the function uses a frame pointer (BP/EBP/RBP on PC) to access local variables. The operands of the form [BP+xxx] will be automatically converted to stack variables.</p> <p>BP equal to SP</p> <p>Frame pointer points to the bottom of the stack instead of at the beginning of the local variables area as is typical.</p> <p>Fuzzy SP</p> <p>Function changes SP by an unknown value, for example: and esp, 0FFFFFFF0h</p> <p>Outlined code</p> <p>The function is not a real function but a fragment of multiple functions' common instruction sequence extracted by the compiler as a code size optimization (sometimes called \"code factoring\"). During decompilation, body of the function will be expanded at the call site.</p>"},{"location":"user-guide/user-interface/menu-bar/edit/functions.html#append-function-tail","title":"Append Function Tail","text":"<pre><code> Action    name: AppendFunctionTail\n\n</code></pre> <p>This command appends an arbitrary range of the program to a function definition. A range must be selected before applying this command. This range must not intersect with other function chunks (however, an existing tail can be added to multiple functions).</p> <p>IDA will ask to select the parent function for the selection and will append the range to the function definition.</p>"},{"location":"user-guide/user-interface/menu-bar/edit/functions.html#remove-function-tail","title":"Remove Function Tail","text":"<pre><code> Action    name: RemoveFunctionTail\n\n</code></pre> <p>This command removes the function tail at the cursor from a function definition.</p> <p>If there are several parent functions for the current function tail range, IDA will ask to select the parent function(s) to remove the tail from.</p> <p>After the confirmation, the current function tail range will be removed from the selected function definition.</p> <p>If the parent was the only owner of the current tail, then the tail will be destroyed. Otherwise it will still be present in the database. If the removed parent was the owner of the tail, then another function will be selected as the owner.</p>"},{"location":"user-guide/user-interface/menu-bar/edit/functions.html#delete-function","title":"Delete Function","text":"<pre><code> Action    name: DelFunction\n\n</code></pre> <p>Deleting a function deletes only information about a function, such as information about stack variables, comments, function type, etc.</p> <p>The instructions composing the function will remain intact.</p>"},{"location":"user-guide/user-interface/menu-bar/edit/functions.html#set-function-end","title":"Set Function End","text":"<pre><code> Action    name: FunctionEnd\n\n</code></pre> <p>This command changes the current or previous function bounds so that its end will be set at the cursor. If it is not possible, IDA beeps.</p>"},{"location":"user-guide/user-interface/menu-bar/edit/functions.html#edit-the-argument-location","title":"Edit the argument location","text":"<p>Allow to edit argument or return value location.</p>"},{"location":"user-guide/user-interface/menu-bar/edit/functions.html#stack-variables-window","title":"Stack Variables Window","text":"<pre><code> Action    name: OpenStackVariables\n\n</code></pre> <p>This command opens the stack variables window for the current function.</p> <p>The stack variables are internally represented as a structure. This structure consists of two parts: local variables and function arguments.</p> <p>You can modify stack variable definitions here: add/delete/define stack variables, enter comments for them.</p> <p>There may be two special fields in this window: \" r\" and \" s\". They represent the size of the function return address and of the saved registers in bytes. You cannot modify them directly. To change them, use edit function command.</p> <p>Offsets at the line prefixes represent offsets from the frame pointer register (BP). The window indicator at the lower left corner of the window displays offsets from the stack pointer.</p> <p>In order to create or delete a stack variable, use data definitions commands (data, strlit, array, undefine, Rename). Also you may define regular or repeatable comments.</p> <p>The defined stack variables may be used in the program by converting operands to stack variables.</p> <p>Esc closes this window.</p> <p>See also Convert to stack variable.</p>"},{"location":"user-guide/user-interface/menu-bar/edit/functions.html#change-stack-pointer","title":"Change Stack Pointer","text":"<pre><code>Action    name: ChangeStackPointer\n\n</code></pre> <p>This command allows you to specify how the stack pointer (SP) is modified by the current instruction.</p> <p>You cannot use this command if the current instruction does not belong to any function.</p> <p>You will need to use this command only if IDA was not able to trace the value of the SP register. Usually IDA can handle it but in some special cases it fails. An example of such a situation is an indirect call of a function that purges its parameters from the stack. In this case, IDA has no information about the function and cannot properly trace the value of SP.</p> <p>Please note that you need to specify the difference between the old and new values of SP.</p> <p>The value of SP is used if the current function accesses local variables by [ESP+xxx] notation.</p> <p> See also Convert to stack variable.</p>"},{"location":"user-guide/user-interface/menu-bar/edit/functions.html#rename-register","title":"Rename register","text":"<pre><code> Action    name: RenameRegister\n\n</code></pre> <p>This command allows you to rename a processor general register to some meaningful name. While this is not used very often on IBM PCs, it is especially useful on RISC processors with lots of registers.</p> <p>For example, a general register R9 is not very meaningful and a name like 'CurrentTime' is much better.</p> <p>This command can be used to define a new register name as well as to remove it. Just move the cursor on the register name and press enter. If you enter the new register name as an empty string, then the definition will be deleted.</p> <p>If you have selected a range before using this command, then the definition will be restricted to the selected range. But in any case, the definition cannot cross the function boundaries.</p> <p>You cannot use this command if the current instruction does not belong to any function.</p>"},{"location":"user-guide/user-interface/menu-bar/edit/functions.html#set-functionitem-type","title":"Set function/item type","text":"<pre><code> Action    name: SetType\n\n</code></pre> <p>This command allows you to specify the type of the current item.</p> <p>If the cursor is located on a name, the type of the named item will be edited. Otherwise, the current function type (if there is a function) or the current item type (if it has a name) will be edited.</p> <p>The function type must be entered as a C declaration. Hidden arguments (like 'this' pointer in C++) should be specified explicitly. IDA will use the type information to comment the disassembly with the information about function arguments. It can also be used by the Hex-Rays decompiler plugin for better decompilation.</p> <p>Here is an example of a function declaration:</p> <pre><code>        int main(int argc, const char *argv[]);\n</code></pre> <p>To delete a type declaration, please enter an empty string.</p> <p>IDA supports the user-defined calling convention. In this calling convention, the user can explicitly specify the locations of arguments and the return value. For example:</p> <pre><code>        int __usercall func@&lt;ebx&gt;(int x, int y@&lt;esi&gt;);\n</code></pre> <p>denotes a function with 2 arguments: the first argument is passed on the stack (IDA automatically calculates its offset) and the second argument is passed in the ESI register and the return value is stored in the EBX register. Stack locations can be specified explicitly:</p> <pre><code>        int __usercall runtime_memhash@&lt;^12.4&gt;(void *p@&lt;^0.4&gt;, int q@&lt;^4.4&gt;, int r@&lt;^8.4&gt;)\n</code></pre> <p>There is a restriction for a __usercall function type: all stack locations should be specified explicitly or all are automatically calculated by IDA. General rules for the user defined prototypes are:</p> <pre><code>  - the return value must be in a register.\n    Exception: stack locations are accepted for the __golang and __usercall calling conventions.\n\n  - if the return type is 'void', the return location must not be specified\n\n  - if the argument location is not specified, it is assumed to be\n    on the stack; consequent stack locations are allocated for such arguments\n\n  - it is allowed to declare nested declarations, for example:\n    int **__usercall func16@&lt;eax&gt;(int *(__usercall *x)@&lt;ebx&gt;\n                                             (int, long@&lt;ecx&gt;, int)@&lt;esi&gt;);\n    Here the pointer \"x\" is passed in the ESI register;\n    The pointed function is a usercall function and expects its second\n    argument in the ECX register, its return value is in the EBX register.\n    The rule of thumb to apply in such complex cases is to specify the\n    the registers just before the opening brace for the parameter list.\n\n  - registers used for the location names must be valid for the current\n    processor; some registers are unsupported (if the register name is\n    generated on the fly, it is unsupported; inform us about such cases;\n    we might improve the processor module if it is easy)\n\n  - register pairs can be specified with a colon like &lt;edx:eax&gt;\n</code></pre> <p>- for really complicated cases this syntax can be used. IDA also understands the \"__userpurge\" calling convention. It is the same thing as __usercall, the only difference is that the callee cleans the stack.</p> <p>The name used in the declaration is ignored by IDA.</p> <p>If the default calling convention is __golang then explicit specification of stack offsets is permitted. For example:</p> <pre><code>  __attribute__((format(printf,2,3)))\n  int myprnt(int id, const char *format, ...);\n</code></pre> <p>This declaration means that myprnt is a print-like function; the format string is the second argument and the variadic argument list starts at the third argument.</p> <p>Below is the full list of attributes that can be handled by IDA. Please look up the details in the corresponding compiler help pages.</p> <pre><code>  packed        pack structure/union fields tightly, without gaps\n  aligned       specify the alignment\n  noreturn      declare as not returning function\n  ms_struct     use microsoft layout for the structure/union\n  format        possible formats: printf, scanf, strftime, strfmon\n</code></pre> <p>For data declarations, the following custom __attribute((annotate(X))) keywords have been added. The control the representation of numbers in the output:</p> <p> <code>__bin</code> unsigned binary number</p> <p> <code>__oct</code> unsigned octal number </p> <p><code>__hex</code> unsigned hexadecimal number </p> <p><code>__dec</code> signed decimal number </p> <p><code>__sbin</code> signed binary number </p> <p><code>__soct</code> signed octal number </p> <p><code>__shex</code> signed hexadecimal number </p> <p><code>__udec</code> unsigned decimal number </p> <p><code>__float</code> floating point</p> <p> <code>__char</code> character </p> <p><code>__segm</code> segment name </p> <p><code>__enum()</code> enumeration member (symbolic constant) </p> <p><code>__off</code> offset expression (a simpler version of __offset) </p> <p><code>__offset()</code> offset expression </p> <p><code>__strlit()</code> string __stroff() structure offset </p> <p><code>__custom()</code> custom data type and format </p> <p><code>__invsign</code> inverted sign </p> <p><code>__invbits</code> inverted bitwise </p> <p><code>__lzero</code> add leading zeroes </p> <p><code>__tabform()</code> tabular form </p> <p>The following additional keywords can be used in type declarations: </p> <p><code>_BOOL1</code> a boolean type with explicit size specification (1 byte) </p> <p><code>_BOOL2</code> a boolean type with explicit size specification (2 bytes) </p> <p><code>_BOOL4</code> a boolean type with explicit size specification (4 bytes) </p> <p><code>__int8</code> a integer with explicit size specification (1 byte) </p> <p><code>__int16</code> a integer with explicit size specification (2 bytes) </p> <p><code>__int32</code> a integer with explicit size specification (4 bytes) </p> <p><code>__int64</code> a integer with explicit size specification (8 bytes) </p> <p><code>__int128</code> a integer with explicit size specification (16 bytes) </p> <p><code>_BYTE</code> an unknown type; the only known info is its size: 1 byte </p> <p><code>_WORD</code> an unknown type; the only known info is its size: 2 bytes </p> <p><code>_DWORD</code> an unknown type; the only known info is its size: 4 bytes </p> <p><code>_QWORD</code> an unknown type; the only known info is its size: 8 bytes </p> <p><code>_OWORD</code> an unknown type; the only known info is its size: 16 bytes </p> <p><code>_TBYTE</code> 10-byte floating point value </p> <p><code>_UNKNOWN</code> no info is available </p> <p><code>__pure</code> pure function: always returns the same value and does not modify memory in a visible way </p> <p><code>__noreturn</code> function does not return </p> <p><code>__usercall</code> user-defined calling convention; see above </p> <p><code>__userpurge</code> user-defined calling convention; see above </p> <p><code>__golang</code> golang calling convention </p> <p><code>__swiftcall</code> swift calling convention </p> <p><code>__spoils</code> explicit spoiled-reg specification; see above</p> <p><code>__hidden</code> hidden function argument; this argument was hidden in the source code (e.g. 'this' argument in c++ methods is hidden) </p> <p><code>__return_ptr</code> pointer to return value; implies hidden</p> <p> <code>__struct_ptr</code> was initially a structure value </p> <p><code>__array_ptr</code> was initially an array </p> <p><code>__unused</code> unused function argument __cppobj a c++ style struct; the struct layout depends on this keyword </p> <p><code>__ptr32</code> explicit pointer size specification (32 bits) </p> <p><code>__ptr64</code> explicit pointer size specification (64 bits) </p> <p><code>__shifted</code> shifted pointer declaration </p> <p><code>__high</code> high level prototype (does not explicitly specify hidden arguments like 'this', for example) this keyword may not be specified by the user but IDA may use it to describe high level prototypes </p> <p><code>__bitmask</code> a bitmask enum, a collection of bit groups</p>"},{"location":"user-guide/user-interface/menu-bar/edit/functions.html#shifted-pointers","title":"Shifted pointers","text":"<p>Sometimes in binary code we can encounter a pointer to the middle of a structure. Such pointers usually do not exist in the source code but an optimizing compiler may introduce them to make the code shorter or faster.</p> <p>Such pointers can be described using shifted pointers. A shifted pointer is a regular pointer with additional information about the name of the parent structure and the offset from its beginning. For example:</p> <pre><code>        struct mystruct\n        {\n          char buf[16];\n          int dummy;\n          int value;            // &lt;- myptr points here\n          double fval;\n        };\n        int *__shifted(mystruct,20) myptr;\n</code></pre> <p>The above declaration means that myptr is a pointer to 'int' and if we decrement it by 20 bytes, we will end up at the beginning of 'mystruct'.</p> <p>Please note that IDA does not limit parents of shifted pointers to structures. A shifted pointer after the adjustment may point to any type except 'void'.</p> <p>Also, negative offsets are supported too. They mean that the pointer points to the memory before the structure.</p> <p>When a shifted pointer is used with an adjustment, it will be displayed with the 'ADJ' helper function. For example, if we refer to the memory 4 bytes further, it can be represented like this:</p> <pre><code>        ADJ(myptr)-&gt;fval\n</code></pre> <p>Shifted pointers are an improvement compared to the CONTAINING_RECORD macro because expressions with them are shorter and easier to read.</p> <p>See also Set type command.</p>"},{"location":"user-guide/user-interface/menu-bar/edit/functions.html#scattered-argument-locations","title":"Scattered argument locations","text":"<pre><code>  00000000 struc_1         struc ; (sizeof=0xC)\n  00000000 c1              db ?\n  00000001                 db ? ; undefined\n  00000002 s2              dw ?\n  00000004 c3              db ?\n  00000005                 db ? ; undefined\n  00000006                 db ? ; undefined\n  00000007                 db ? ; undefined\n  00000008 i4              dd ?\n  0000000C struc_1         ends\n</code></pre> <p>If we have this function prototype:</p> <pre><code>  void myfunc(struc_1 s);\n</code></pre> <p>the 64bit GNU compiler will pass the structure like this:</p> <pre><code>  RDI: c1, s2, and c3\n  RSI: i4\n</code></pre> <p>Since compilers can use such complex calling conventions, IDA needs some mechanism to describe them. Scattered argument locations are used for that. The above calling convention can be described like this:</p> <pre><code>  void __usercall myfunc(struc_1 s@&lt;0:rdi.1, 2:rdi^2.2, 4:rdi^4.1, 8:rsi.4&gt;);\n</code></pre> <p>It reads:</p> <pre><code>  1 byte  at offset 0 of the argument is  passed in the byte 0 of RDI\n  2 bytes at offset 2 of the argument are passed in the byte 1,2 of RDI\n  1 byte  at offset 4 of the argument is  passed in the byte 3 of RDI\n  4 bytes at offset 8 of the argument are passed starting from the byte 0 of RSI\n</code></pre> <p>In other words, the following syntax is used:</p> <pre><code>  argoff:register^regoff.size\n</code></pre> <p>where</p> <pre><code>  argoff - offset within the argument\n  register - register name used to pass part of the argument\n  regoff - offset within the register\n  size - number of bytes\n</code></pre> <p>The regoff and size fields can be omitted if there is no ambiguity.</p> <p>If the register is not specified, the expression describes a stack location:</p> <pre><code>  argoff:^stkoff.size\n</code></pre> <p>where</p> <pre><code>  argoff - offset within the argument\n  stkoff - offset in the stack frame (the first stack argument is at offset 0)\n  size - number of bytes\n</code></pre> <p>Please note that while IDA checks the argument location specifiers for soundness, it cannot perform all checks and some wrong locations may be accepted. In particular, IDA in general does not know the register sizes and accepts any offsets within them and any sizes.</p> <p>See also Set type command.</p>"},{"location":"user-guide/user-interface/menu-bar/edit/functions.html#data-representation-enum-member","title":"Data representation: enum member","text":"<p>Syntax:</p> <pre><code>  __enum(enum_name)\n</code></pre> <p>Instead of a plain number, a symbolic constant from the specified enum will be used. The enum can be a regular enum or a bitmask enum. For bitmask enums, a bitwise combination of symbolic constants will be printed. If the value to print cannot be represented using the specified enum, it will be displayed in red.</p> <p>Example:</p> <pre><code>   enum myenum { A=0, B=1, C=3 };\n   short var __enum(myenum);\n\n   If `var` is equal to 1, it will be represented as \"B\"\n</code></pre> <p>Another example:</p> <pre><code>   enum mybits __bitmask { INITED=1, STARTED=2, DONE=4 };\n   short var __enum(mybits);\n\n   If `var` is equal to 3, it will be represented as \"INITED|STARTED\"\n</code></pre> <p>This annotation is useful if the enum size is not equal to the variable size. Otherwise using the enum type for the declaration is better:</p> <pre><code>   myenum var;  // is 4 bytes, not 2 as above\n</code></pre>"},{"location":"user-guide/user-interface/menu-bar/edit/functions.html#data-representation-offset-expression","title":"Data representation: offset expression","text":"<pre><code>Syntax:\n</code></pre> <pre><code>  __offset(type, base, tdelta, target)\n  __offset(type, base, tdelta)\n  __offset(type, base)\n  __offset(type|AUTO, tdelta)\n  __offset(type)\n  __off\n</code></pre> <p>where</p> <p>type is one of:</p> <pre><code>  OFF8       8-bit full offset\n  OFF16      16-bit full offset\n  OFF32      32-bit full offset\n  OFF64      64-bit full offset\n  LOW8       low 8 bits of 16-bit offset\n  LOW16      low 16 bits of 32-bit offset\n  HIGH8      high 8 bits of 16-bit offset\n  HIGH16     high 16 bits of 32-bit offset\n</code></pre> <p>The type can also be the name of a custom refinfo.</p> <p>It can be combined with the following keywords:</p> <pre><code>  RVAOFF     based reference (rva)\n  PASTEND    reference past an item\n             it may point to an nonexistent address\n  NOBASE     forbid the base xref creation\n             implies that the base can be any value\n             nb: base xrefs are created only if the offset base\n             points to the middle of a segment\n  SUBTRACT   the reference value is subtracted from the base value instead of\n             (as usual) being added to it\n  SIGNEDOP   the operand value is sign-extended (only supported for\n             REF_OFF8/16/32/64)\n  NO_ZEROS   an opval of 0 will be considered invalid\n  NO_ONES    an opval of ~0 will be considered invalid\n  SELFREF    the self-based reference\n</code></pre> <p>The base, target delta, and the target can be omitted. If the base is BADADDR, it can be omitted by combining the type with AUTO:</p> <pre><code>  __offset(type|AUTO, tdelta)\n</code></pre> <p>Zero based offsets without any additional attributes and having the size that corresponds the current application target (e.g. REF_OFF32 for a 32-bit bit application), the shoft __off form can be used.</p> <p>Examples:</p> <pre><code>  A 64-bit offset based on the image base:\n\n  int var __offset(OFF64|RVAOFF);\n\n  A 32-bit offset based on 0 that may point to an non-existing address:\n\n  int var __offset(OFF32|PASTEND|AUTO);\n\n  A 32-bit offset based on 0x400000:\n\n  int var __offset(OFF32, 0x400000);\n\n  A simple zero based offset that matches the current application bitness:\n\n  int var __off;\n</code></pre> <p>This annotation is useful the type of the pointed object is unknown or the variable size is different from the usual pointer size. Otherwise it is better to use a pointer:</p> <pre><code>  type *var;\n</code></pre>"},{"location":"user-guide/user-interface/menu-bar/edit/functions.html#data-representation-string","title":"Data representation: string","text":"<p>Syntax:</p> <pre><code>  __strlit(strtype, \"encoding\")\n  __strlit(strtype, char1, char2, \"encoding\")\n  __strlit(strtype)\n</code></pre> <p>where strtype is one of:</p> <pre><code>  C          Zero terminated string, 8 bits per symbol\n  C_16       Zero terminated string, 16 bits per symbol\n  C_32       Zero terminated string, 32 bits per symbol\n  PASCAL     Pascal string: 1 byte length prefix, 8 bits per symbol\n  PASCAL_16  Pascal string: 1 byte length prefix, 16 bits per symbol\n  LEN2       Wide Pascal string: 2 byte length prefix, 8 bits per symbol\n  LEN2_16    Wide Pascal string: 2 byte length prefix, 16 bits per symbol\n  LEN4       Delphi string: 4 byte length prefix, 8 bits per symbol\n  LEN4_16    Delphi string: 4 byte length prefix, 16 bits per symbol\n</code></pre> <p>It may be followed by two optional string termination characters (only for C). Finally, the string encoding may be specified, as the encoding name or \"no_conversion\" if the string encoding was not explicitly specified.</p> <p>Example:</p> <pre><code>  A zero-terminated string in windows-1252 encoding:\n\n  char array[10] __strlit(C,\"windows-1252\");\n\n  A zero-terminated string in utf-8 encoding:\n\n  char array[10] __strlit(C,\"UTF-8\");\n</code></pre>"},{"location":"user-guide/user-interface/menu-bar/edit/functions.html#data-representation-structure-offset","title":"Data representation: structure offset","text":"<p>Syntax:</p> <pre><code>  __stroff(structname)\n  __stroff(structname, delta)\n</code></pre> <p>Instead of a plain number, the name of a struct or union member will be used. If delta is present, it will be subtracted from the value before converting it into a struct/union member name.</p> <p>Example:</p> <pre><code>  An integer variable named `var` that hold an offset from the beginning of\n  the `mystruct` structure:\n\n  int var __stroff(mystruct);\n\n  If mystruct is defined like this:\n\n  struct mystruct\n  {\n    char a;\n    char b;\n    char c;\n    char d;\n  }\n\n  The value 2 will be represented as `mystruct.c`\n</code></pre> <p>Another example:</p> <pre><code>  A structure offset with a delta:\n\n  int var __stroff(mystruct, 1);\n\n  The value 2 will be represented as `mystruct.d-1`\n</code></pre>"},{"location":"user-guide/user-interface/menu-bar/edit/functions.html#data-representation-custom-data-type-and-format","title":"Data representation: custom data type and format","text":"<p>Syntax:</p> <pre><code> __custom(dtid, fid)\n</code></pre> <p>where dtid is the name of a custom data type and fid is the name of a custom data format. The custom type and format must be registered by a plugin beforehand, at the database opening time. Otherwise, custom data type and format ids will be displayed instead of names.</p>"},{"location":"user-guide/user-interface/menu-bar/edit/functions.html#data-representation-tabular-form","title":"Data representation: tabular form","text":"<p>Syntax:</p> <pre><code>  __tabform(flags)\n  __tabform(flags,lineitems)\n  __tabform(flags,lineitems,alignment)\n  __tabform(,lineitems,alignment)\n  __tabform(,,alignment)\n</code></pre> <p>This keyword is used to format arrays. The following flags are accepted:</p> <pre><code>  NODUPS do not use the `dup` keyword\n  HEX    use hexadecimal numbers to show array indexes\n  OCT    use octal numbers to show array indexes\n  BIN    use binary numbers to show array indexes\n  DEC    use decimal numbers to show array indexes\n</code></pre> <p>It is possible to combine NODUPS with the index radix: NODUPS|HEX</p> <p>The `lineitems` and `alignment` attributes have the meaning described for the create array command.</p> <p>Example:</p> <pre><code>  Display the array in tabular form, 4 decimal numbers on a line, each number\n  taking 8 positions. Display indexes as comments in hexadecimal:\n\n  char array[16] __tabform(HEX,4,8) __dec;\n\n  A possible array may look like:\n\n  dd   50462976, 117835012, 185207048, 252579084; 0\n  dd  319951120, 387323156, 454695192, 522067228; 4\n  dd  589439264, 656811300, 724183336, 791555372; 8\n  dd  858927408, 926299444, 993671480,1061043516; 0Ch\n</code></pre> <p>Without this annotation, the `dup` keyword is permitted, number of items on a line and the alignment are not defined.</p> <p>See also Edit submenu.</p>"},{"location":"user-guide/user-interface/menu-bar/edit/give-name-to-the-location.html","title":"Give Name to the Location","text":"<pre><code> Action    name: MakeName\n\n</code></pre> <p>This command gives name/renames/deletes name for the current item.</p> <p>To delete a name, simply give an empty name.</p> <p>If the current item is referenced, you cannot delete its name. Even if you try, IDA will generate a dummy name.</p> <p>Local name</p> <pre><code>  The name is considered to be defined only in the current function.\n  Please note that IDA does not check the uniqueness of the local names\n  in the whole program. However, it does verify that the name is unique for the\n  function.\n</code></pre> <p>Include in name list </p> <p><code>Here you can also include/remove the name from the</code> <code>name list</code><code>. If the name is hidden, you will not see it in</code> <code>names window</code><code>.</code> </p> <p>Public name</p> <pre><code>  You can declare a name as a public (global) name. If the current\n  assembler supports the \"public\" directive, IDA will use it.\n  Otherwise, the publicness of the name will be displayed as a comment.\n</code></pre> <p>Autogenerated name</p> <pre><code>  An autogenerated name will appear in a different color.\n  if the item is indefined, it will disappear automatically .\n</code></pre> <p>Weak name</p> <pre><code>  You can declare a name as a weak name. If the current\n  assembler supports the \"weak\" directive, IDA will use it.\n  Otherwise, the weakness of the name will be displayed as a comment.\n</code></pre> <p>Create name anyway</p> <pre><code>  If this flag is on, and if the specified name already exists,\n  IDA will try to variate the specified name by appending a suffix to it.\n</code></pre> <p>See also Edit submenu. How to Enter an Identifier. Names representation.</p>"},{"location":"user-guide/user-interface/menu-bar/edit/operand-types.html","title":"Edit|Operand types submenu","text":"<p>This submenu allows you to change the operand types to offsets, numbers, chars, etc. Use it to make disassembled text more understandable.</p> <ul> <li>Convert operand to offset</li> <li>Convert operand to number</li> <li>Convert operand to character</li> <li>Convert operand to segment</li> <li>Convert operand to enum</li> <li>Convert operand to stack variable</li> <li>Change operand sign</li> <li>Bitwise negate operand</li> <li>User-defined operand</li> <li>Set operand type</li> </ul> <p>If IDA suspects that an operand can be represented as something different from a plain number, it will mark the operand as \"suspicious\" and show it in red. Use these commands to delete suspicious marks.</p> <p>Some of these commands can be applied to a selected range. Click here to learn about the rules applied to such operations.</p> <p>See also Edit submenu.</p>"},{"location":"user-guide/user-interface/menu-bar/edit/other.html","title":"Edit|Other Submenu","text":"<ul> <li>Create alignment directive...</li> <li>Manual instruction...</li> <li>Color instruction...</li> <li>Hide/show border</li> </ul> <p>See also Edit submenu.</p>"},{"location":"user-guide/user-interface/menu-bar/edit/other.html#create-alignment-directive","title":"Create alignment directive","text":"<pre><code>Action    name: MakeAlignment\n\n</code></pre> <p>This command allows you to create an alignment directive. The alignment directive will replace a number of useless bytes inserted by the linker to align code and data to paragraph boundary or any other address which is equal to a power of two.</p> <p>You can select a range to be converted to an alignment directive. If you have selected a range, IDA will try to determine a correct alignment automatically.</p> <p>There are at least two requirements for this command to work:</p> <ul> <li>there must be enough unexplored bytes at the current address.</li> <li>an alignment directive must always end at an address which is divisible by a power or two.</li> </ul> <p>See also</p> <ul> <li>How to Enter an Address.</li> </ul>"},{"location":"user-guide/user-interface/menu-bar/edit/other.html#specify-instruction-representation-manually","title":"Specify instruction representation manually","text":"<pre><code>Action    name: ManualInstruction\n\n</code></pre> <p>This command allows you to specify the representation of an instruction or data in the program.</p> <p>Use it if IDA cannot represent the current instruction as desired. If the instruction itself is ok and only one operand is misrepresented, then use Enter operand manually command.</p> <p>To delete the manual representation, specify an empty string.</p>"},{"location":"user-guide/user-interface/menu-bar/edit/other.html#specify-instruction-color","title":"Specify instruction color","text":"<pre><code>Action    name: ColorInstruction\n\n</code></pre> <p>This command allows you to specify the background color for the current instruction or data item.</p> <p>Only GUI version supports different background colors. Specifying a non-defined custom color will reset the instruction color.</p>"},{"location":"user-guide/user-interface/menu-bar/edit/other.html#hideunhide-a-border","title":"Hide/unhide a border","text":"<pre><code>Action    name: ToggleBorder\n\n</code></pre> <p>This command allows you to hide a thin border which is like the one generated automatically by IDA between instructions and data. If the border was already hidden, then it is displayed again.</p> <p>Note that you can hide all borders at once in the Comments Dialog.</p>"},{"location":"user-guide/user-interface/menu-bar/edit/patch-core.html","title":"Edit|Patch core submenu","text":"<p>This submenu allows you to patch the image of the input file. More precisely, IDA never modifies the input file. The image of the input file which was loaded to the database will be modified.</p> <p>You can modify the image of the input file:</p> <pre><code>        - change a byte\n        - change a word\n        - enter an assembler instruction (only for IBM PC)\n</code></pre> <p>IDA will display the original value, the current value and file offset. If the file offset is equal to 0xFFFFFFFF then the current byte comes from a compressed page (LX/LE/NE iterated pages, for example) and/or it is not possible to tell the file position.</p> <p>You can create a difference file and use an external tool to apply the patches or you can apply the patches directly to the file using IDA.</p> <p>The following commands are available:</p> <ul> <li>Patch byte or word</li> <li>Assemble...</li> <li>Apply patches to input file...</li> </ul> <p>See also:</p> <ul> <li>Produce EXE file</li> <li>Produce DIF file</li> <li>Edit submenu.</li> </ul>"},{"location":"user-guide/user-interface/menu-bar/edit/patch-core.html#patching-the-image","title":"Patching the Image","text":"<pre><code>Action    name: PatchByte, PatchWord\n\n</code></pre> <p>You can modify the executable file and eventually generate a new file.</p> <p>If you patch bytes, then you may enter multiple bytes. Follow this link to learn about format of the input string.</p> <p>If this command is invoked when the debugger is active, then IDA will modify the memory and the database. If the database does not contain the patched bytes, then only the process memory will be modified.</p> <p>You can create a difference file too.</p> <p>See also How to Enter a Number.</p>"},{"location":"user-guide/user-interface/menu-bar/edit/patch-core.html#apply-patches-to-input-file","title":"Apply patches to input file","text":"<pre><code>Action    name: ApplyPatches\n\n</code></pre> <p>Apply previously patched bytes back to the input file. If the \"Restore\" option is selected then the original bytes will be applied to the input file.</p> <p>See also Produce DIF file.</p>"},{"location":"user-guide/user-interface/menu-bar/edit/patch-core.html#binary-string-format","title":"Binary string format","text":"<pre><code>It is possible to enter a sequence of the following items:\n\n  - a number in the selected radix (hexadecimal, decimal or octal)\n  - a string constant: \"string\"\n  - a Unicode string constant: L\"unicode string\"\n  - a question mark '?' to ignore variable bytes\n</code></pre> <p>The sequence must be separated by a space or a comma.</p> <p>An entered number will occupy the minimal number of bytes it fits in with the restriction that the number of bytes is a power of 2 (1, 2, or 4 bytes).</p> <p>Two question marks without a space between them are the same as one question mark. One question mark corresponds to one CPU byte. One CPU byte may consist of multiple octets for a wide-byte CPU, like TMS320C28.</p> <p>Example:</p> <pre><code>  CD 21          - bytes 0xCD, 0x21\n  21CD           - bytes 0xCD, 0x21 (the order depends on the endiannes)\n  \"Hello\", 0     - the null terminated string \"Hello\"\n  L\"Hello\"       - 'H', 0, 'e', 0, 'l', 0, 'l', 0, 'o', 0\n  B8 ? ? ? ? 90  - byte 0xB8, 4 bytes with any value, byte 0x90\n</code></pre>"},{"location":"user-guide/user-interface/menu-bar/edit/patch-core.html#assemble-an-instruction","title":"Assemble an instruction","text":"<pre><code>Action    name: Assemble\n\n</code></pre> <p>This command allows you to assemble instructions. Currently, only the IBM PC processors provide an assembler, nonetheless, plugin writers can extend or totally replace the built-in assembler by writing their own.</p> <p>The assembler requires to enclose all memory references into square brackets. For example:</p> <pre><code>        mov ax, [counter]\n</code></pre> <p>Also, the keyword 'offset' must not be used. Instead of</p> <pre><code>        mov eax, offset name\n</code></pre> <p>you must write</p> <pre><code>        mov eax, name\n</code></pre> <p>See also How to Enter a Number.</p>"},{"location":"user-guide/user-interface/menu-bar/edit/plugin.html","title":"Plugin","text":""},{"location":"user-guide/user-interface/menu-bar/edit/plugin.html#plugin-modules","title":"Plugin modules","text":"<p>A plugin module is a module written on C++ that provides additional functionality to IDA.</p> <p>Usually, a plugin is invoked through a hotkey or the menu system. The registered and loaded plugins will appear in a special Edit|Plugins submenu. A plugin may provide better analysis, automation of tedious tasks, etc.</p> <p>The plugin modules reside in the \\\"plugins\\\" subdirectory of IDA. IDA is able to find and load all the plugins from this directory automatically.</p> <p>However, you can write a configuration file and tell IDA how to load plugins. To do so, you need to modify the \\\"plugins.cfg\\\" file in the \\\"plugins\\\" subdirectory.</p> <p>The format of this file is simple:</p> <p>Empty lines and lines starting with \\';\\' are comment lines. Other lines must have the following structure:</p> <pre><code>           menuname filename hotkey arg\n\n Example:\n\n           Undefine undef    Alt-U  0\n</code></pre> <p>If the filename doesn\\'t include the file extension or the directory, IDA will add them. The plugin modules have the following extensions:</p> <pre><code>        Windows:        *.dll\n        Linux:          *.so\n        Mac:            *.dylib\n</code></pre> <p>Note: plugins compiled with support for 64-bit address space, will feature a \\'64\\' suffix before the extension. E.g., \\'pdb64.dll\\'</p> <p>For more details, see information on individual plugin modules.</p> <p>See also Edit submenu.</p>"},{"location":"user-guide/user-interface/menu-bar/edit/plugins.html","title":"Plugins","text":""},{"location":"user-guide/user-interface/menu-bar/edit/redo-an-action.html","title":"Redo an action","text":"<pre><code> Action    name: Redo\n\n</code></pre> <p>This command reverts the previously issued Undo command. It is possible to use Redo multiple times.</p> <p>This command also reverts all changes that were done to the database after the last Undo command, including the eventual useful modifications made by the autoanalysis. In other words, the entire database is modified to get to the exact state that it had before executing the last Undo command.</p> <p>See also</p> <ul> <li>Undo</li> <li>Reset Undo</li> <li>Disable Undo</li> <li>Open undo history</li> </ul>"},{"location":"user-guide/user-interface/menu-bar/edit/segments.html","title":"Segments submenu","text":"<p>This submenu allows you to manipulate segments of the program:</p> <ul> <li>Create a new segment...</li> <li>Delete a segment...</li> <li>Change segment attributes...</li> <li>Move a segment...</li> <li>Rebase program...</li> <li>Change segment translation...</li> <li>Set default segment register value...</li> <li>Change segment register value...</li> </ul> <p>See also:</p> <ul> <li>How to choose a segment</li> <li>How to jump to a segment</li> <li>Edit submenu.</li> </ul>"},{"location":"user-guide/user-interface/menu-bar/edit/segments.html#create-a-new-segment","title":"Create a new segment","text":"<pre><code>Action    name: CreateSegment\n\n</code></pre> <p>This command allows you to create a new segment.</p> <p>If you select a range using the anchor, IDA will propose the start address and the end address of the selection as defaults for the segment bounds.</p> <p>You need to specify at least:</p> <pre><code>    - the segment start address\n    - the segment end address (excluded from the range)\n    - the segment base\n</code></pre> <p>Click here to learn about addressing model used in IDA.</p> <p>If \"sparse storage\" is set, IDA will use special sparse storage method for the segment. This method is recommended for huge segments. Later, it is possible to change the storage method of any region using set_storage_type IDC function.</p> <p>If another segment already exists at the specified address, the existing segment is truncated and the new segment lasts from the specified start address to the next segment (or specified end address, whichever is lower). If the old and the new segments have the same base address, instructions/data will not be discarded by IDA. Otherwise, IDA will discard all instructions/data of the new segment.</p> <p>An additional segment may be created by IDA to cover the range after the end of the new segment.</p>"},{"location":"user-guide/user-interface/menu-bar/edit/segments.html#ida-address-space-concepts","title":"IDA address space concepts","text":"<p>Internally, IDA has 32-bit linear address space (IDA64 uses 64-bit address space). The internal addresses are called \"linear addresses\". The input program is loaded into this linear address space.</p> <p>Please note that usually the linear addresses are not used in the program directly. During disassembling, we use so-called \"virtual addresses\", which are calculated by the following formula:</p> <pre><code>        VirtualAddress = LinearAddress - (SegmentBase &lt;&lt; 4);\n</code></pre> <p>We see that the SegmentBase determines what addresses will be displayed on the screen. More than that, IDA allows to create several segments with the same virtual address in them. For this, you just need to create segments with correct segment base values.</p> <p>Normally a SegmentBase is a 16bit quantity. To create a segment with base &gt;= 0x10000, you need to use selectors. However, if you try to create a segment with a segment base &gt;= 0x10000, IDA will automatically choose appropriately a free selector and setup for the new segment.</p> <p>All SegmentBases are looked up in the selector table.</p> <p>There are some address restrictions in IDA.</p> <p>There is a range of addresses that are used for internal housekeeping. This range can be specified by the configuration variable PRIVRANGE (start address and size). It is not recommended to use these addresses for other purposes.</p> <p>There is also one address which must never be used in the disassembly. It is the 'all ones' address, or -1. Internally, it is used as a BADADDR (bad address). No address or address range can include BADADDR. </p> <p>Related topics:</p> <ul> <li>Click here to see an example of segment creation (simple case - IBM PC) </li> <li>Click here to see an example of segment creation (simple case - Z80) </li> <li>Click here to see another example of segment creation (automatically chosen selector)</li> <li>Click here to see another example of segment creation (user-defined selector) </li> <li>See also How to change segment translation</li> </ul>"},{"location":"user-guide/user-interface/menu-bar/edit/segments.html#create-segment-simple-case-pc","title":"Create segment - simple case (PC)","text":"<p>IBM PC case -----------</p> <p>Suppose we need to create a segment occupying addresses F000:1000..F000:2000 Let's calculate linear addresses:</p> <pre><code>        start = (0xF000 &lt;&lt; 4) + 0x1000 = 0xF1000\n        end   = (0xF000 &lt;&lt; 4) + 0x2000 = 0xF2000\n</code></pre> <p>The segment base must be selected so that the first offset in our segment will be 0x1000. Let's find it using the following equation:</p> <pre><code>        VirtualAddress = LinearAddress - (SegmentBase &lt;&lt; 4);\n        0x1000         = 0xF1000 - (base &lt;&lt; 4);\n</code></pre> <p>After solving this equation, we see that the segment base is equal to 0xF000. (you see, this is really a very simple case :) )</p> <p>Now, we can create a segment entering:</p> <pre><code>        segment start address:  0xF1000\n        segment end address:    0xF2000\n        segment base:           0xF000\n</code></pre> <p>Please note that the end address never belongs to the segment in IDA.</p>"},{"location":"user-guide/user-interface/menu-bar/edit/segments.html#create-segment-simple-case-z80","title":"Create segment - simple case (Z80)","text":"<pre><code>Z80 case\n --------\n</code></pre> <p>Suppose we need to create a segment occupying virtual addresses 8000-C000. Since we are free to place our segment anywhere in the linear address space, we choose the linear addresses at our convenience. Let's say we choose a linear address 0x20000:</p> <pre><code>        start = 0x20000\n        end   = start + 0x4000 = 0x24000\n</code></pre> <p>The segment base must be selected so that the virtual address in our segment will be 0x8000. Let's find it using the following equation:</p> <pre><code>        VirtualAddress = LinearAddress - (SegmentBase &lt;&lt; 4);\n        0x8000         = 0x20000 - (base &lt;&lt; 4);\n        base &lt;&lt; 4      = 0x20000 - 0x8000\n        base &lt;&lt; 4      = 0x18000\n        base           = 0x1800\n</code></pre> <p>After solving this equation, we see that the segment base is equal to 0x1800.</p> <p>Now we can create a segment entering:</p> <pre><code>        segment start address:  0x20000\n        segment end address:    0x24000\n        segment base:           0x1800\n</code></pre> <p>Please note that the end address never belongs to the segment in IDA.</p>"},{"location":"user-guide/user-interface/menu-bar/edit/segments.html#create-segment-automatically-chosen-selector-case","title":"Create segment - automatically chosen selector case","text":"<p>Suppose we need to create a segment occupying linear addresses 200000-200C00 and the virtual addresses must have be 0000..0C00. If we simply enter</p> <pre><code>        segment start address:  0x200000\n        segment end address:    0x200C00\n        segment base:           0x20000\n</code></pre> <p>Then IDA will notice that the segment base is too big and does not fit into 16bits. Because of this IDA will find a free selector (let's say it has found selector number 5), define it to point at paragraph 0x20000 and create a segment. After all this we will have:</p> <pre><code>        - a new selector is defined (5 -&gt; 0x20000)\n        - a new segment is created. Its attributes:\n                start = 0x200000\n                end   = 0x200C00\n                base  = 5\n</code></pre> <p>The first virtual address in the segment will be 0:</p> <pre><code>        VirtualAddress = LinearAddress - (SelectorValue(SegmentBase) &lt;&lt; 4)\n                       = 0x200000      - (SelectorValue(5) &lt;&lt; 4)\n                       = 0x200000      - (0x20000 &lt;&lt; 4)\n                       = 0x200000      - 0x200000\n                       = 0\n</code></pre> <p>Please note that the end address never belongs to the segment in IDA.</p>"},{"location":"user-guide/user-interface/menu-bar/edit/segments.html#create-segment-user-defined-selector-case","title":"Create segment - user-defined selector case","text":"<p>If the previous example we saw how IDA allocates a selector automatically. You could make it yourself:</p> <p>1. Create a selector. For this, open the selectors window and press Ins. Enter a selector number and its value.</p> <p>2. Create a segment. Specify the selector number as the segment base.</p>"},{"location":"user-guide/user-interface/menu-bar/edit/segments.html#delete-a-segment","title":"Delete a segment","text":"<pre><code>Action    name: KillSegment\n\n</code></pre> <p>This command allows you to delete a segment.</p> <p>IDA will ask your the permission to disable the addresses occupied by the segment. If you allow this operation, all information about the segment will be deleted. In other words, IDA will discard the information about instructions or data, comments etc.</p> <p>If you check the \"disable addresses\" checkbox, IDA will mark the addresses occupied by the segment as \"nonexistent\" in the program. You will lose *ALL* information, including byte values.</p> <p>It is impossible to disassemble the content of addresses not located in any segment, therefore you must create a new segment if you want to resume the disassembly of that part of the code.</p> <p>You can also edit (see below) an adjacent segment to expand it to those addresses.</p> <p>IDA will ask your the permission to disable addresses occupied by the segment. If you give your permission, information about the segment will be deleted, otherwise IDA will discard information about instruction/data, comments etc, but retain byte values so that you will be able to create another segment afterwards.</p> <p>To disassemble the addresses occupied by the segment, you need to create a new segment again (i.e. you cannot disassemble bytes without a segment). You can also expand another adjacent segment to these addresses.</p>"},{"location":"user-guide/user-interface/menu-bar/edit/segments.html#change-segment-attributes","title":"Change segment attributes","text":"<ul> <li>How to change segment name</li> <li>How to change segment class</li> <li>How to change segment addressing mode (16/32)</li> <li>How to change segment alignment</li> <li>How to change segment combination </li> </ul> <p>Changing the segment class may change the segment type.</p> <p>MOVE ADJACENT SEGMENTS: means that the previous and next segments will be shrunk or expanded to fill gaps between segments. Click here for more information.</p> <p>DISABLE ADDRESSES: if set, when a segment is shrunk, all information about bytes going out of the segment will be completely removed.. Otherwise, IDA will discard information about instructions/data, comments etc, but will retain byte values so that another segment can be created later and it will use the existing byte values.</p> <p>If IDA creates 2 segments where only one segment must exist, you may try the following sequence:</p> <ul> <li>delete one segment. Choose one with bad segment base value. Do not disable addresses occupied by the segment being deleted.</li> <li>change bounds of another segment. Note that the create segment command changes the boundaries of the overlapping segment automatically.</li> </ul> <p>Segments with the 'debugger' attribute are the segments whose memory contents are not saved in the database. Usually, these segments are created by the debugger to reflect the current memory state of the program.</p> <p>However, the user can modify this attribute.</p> <p>If it is cleared, then the segment will permanently stay in the database after closing the debugger session. The database will reflect the state of the segment which was at the time when the status is changed.</p> <p>If it is set, then the segment will become a temporary segment and will be deleted at the end of the debugging session.</p> <p>The \"debugger segment\" checbkox is available only during debugging sessions.</p> <p>The 'loader' segments are the segment created by the file loader. The segment having this attribute are considered to be part of the input file.</p> <p>A segment with the 'debugger' attribute set and the 'loader' attribute not set is considered to be an ephemeral segment. Such segments are not analyzed automatically by IDA.</p> <p>\"Segment permissions\" group box can be used to modify Segment access permissions (Read/Write/Execute)</p>"},{"location":"user-guide/user-interface/menu-bar/edit/segments.html#change-segment-name","title":"Change Segment Name","text":"<p>Enter a new name for the segment. A segment name is up to 8 characters long. IDA does check if the length is ok. Try to give mnemonic names for the segments.</p>"},{"location":"user-guide/user-interface/menu-bar/edit/segments.html#segment-class-name","title":"Segment Class Name","text":"<p>The segment class name identifies the segment with a class name (such as CODE, FAR_DATA, or STACK). The linker places segments with the same class name into a contiguous range of memory in the runtime memory map.</p> <p>Changing the segment class changes only the segment definition on the screen. There are the following predefined segment class names:</p> <pre><code>        CODE    -       Pure code\n        DATA    -       Pure data\n        CONST   -       Pure data\n        BSS     -       Uninitialized data\n        STACK   -       Uninitialized data\n        XTRN    -       Extern definitions segment\n</code></pre> <p>If you change segment class and the segment type is \"Regular\", then the segment type will be changed accordingly.</p> <p>In order to set the segment type \"Regular\", you should change the segment class to \"UNK\".</p> <p>{% hint style=\"info\" %} Segment class names are never deleted. Once you define a segment class name, you cannot reuse it as a name of another object.</p>"},{"location":"user-guide/user-interface/menu-bar/edit/segments.html#change-segment-addressing","title":"Change Segment Addressing","text":"<p>You can choose between 16-bit and 32-bit segment addressing.</p> <p>IDA will delete all instructions and data in the segment if the segment address is changed.</p> <p>Never do it if you are not sure. It may have irreversible consequences, all instructions/data will be converted to undefined bytes.</p>"},{"location":"user-guide/user-interface/menu-bar/edit/segments.html#change-segment-alignment","title":"Change Segment Alignment","text":"<p>Alignment: select between abs,byte,word,dword,para,page</p> <p>You can specify the segment alignment for the selected segment. By default, IDA assumes 'byte' alignment.</p> <p>Changing the alignment changes only the segment definition on the screen. Nothing else will happen.</p>"},{"location":"user-guide/user-interface/menu-bar/edit/segments.html#change-segment-combination","title":"Change Segment Combination","text":"<p>Combination</p> <p>A field that describes how the linker can combine the segment with other segments. Under MS-DOS, segments with the same name and class can be combined in two ways: they can be concatenated to form one logical segment, or they can be overlapped. In the latter case, they have either the same start address or the same end address, and they describe a common range in memory. Values for the field are:</p> <pre><code>  Private. Do not combine with any\n           other program segment.\n  Public.  Combine by appending at\n           an offset that meets the\n           alignment requirement.\n\n  Stack.   Combine as for Public.\n           This combine type forces\n           byte alignment.\n\n  Common.  Combine by overlay using\n           maximum size.\n</code></pre> <p>Changing segment combination changes only the segment definition on the screen. Nothing else will happen.</p>"},{"location":"user-guide/user-interface/menu-bar/edit/segments.html#move-a-segment","title":"Move a segment","text":"<pre><code>Action    name: MoveSegment\n\n</code></pre> <p>This command allows you to move segment(s) to another address. Use it if the segment(s) are loaded at a wrong address.</p> <p>This command shifts (moves) the selected segments in the memory to the target address. There must be enough free space at the target address for the segments.</p> <p>All information in the segment will be moved to the new address, but since the addresses change, the disassembly might be not valid anymore (especially if the program is moved to the wrong addresses and the relocation information is not available).</p> <pre><code> Fix up relocations\n\n        This option allows IDA to modify the references\n        to/from the relocated segment(s). If it is turned\n        off, the references might be wrong after the move.\n</code></pre>"},{"location":"user-guide/user-interface/menu-bar/edit/segments.html#rebase-program","title":"Rebase program","text":"<pre><code>Action    name: Rebase program\n\n</code></pre> <p>The whole program will be shifted by the specified amount of bytes in the memory. The following options are available (we strongly recommend to leave them turned on):</p> <pre><code> Fix up relocations\n\n        This option allows IDA to modify the references\n        to/from the relocated segment(s). If it is turned\n        off, the references might be wrong after the move.\n\n Rebase the whole image\n\n        This option is accessible only if the whole program\n        is selected. It allows IDA to adjust internal\n        variables on the whole program.\n</code></pre> <p>Please note rebasing the program might remove user-defined xrefs.</p>"},{"location":"user-guide/user-interface/menu-bar/edit/segments.html#change-segment-translation","title":"Change segment translation","text":"<pre><code>        call    1000\n</code></pre> <p>in the segment C obviously refers to the segment B while the instruction</p> <pre><code>        call    500\n</code></pre> <p>refers to the segment A.</p> <p>However, IDA does not try to link these references unless you tell it to do so: include the segments A and B into a translation list of the segment C. It means that you have to create a translation list</p> <pre><code>        A B\n</code></pre> <p>for the segment C.</p> <p>Below is a more complicated example:</p> <pre><code>                start   end\n        A       0000    1000\n        B       1000    2000\n        C       1000    2000\n        D       3000    4000\n        E       3000    4000\n</code></pre> <p>translations</p> <pre><code>        B:      A\n        C:      A\n        D:      A B\n        E:      A C\n</code></pre> <p>allow you to emulate overlays (the first set is A B D, the second A C E)</p> <p>IMPORTANT NOTE1: If you use the segment translations, make sure that all segments have unique segment bases. If two segments are placed in the linear address space so that they must have the same segment base, you may assign different selectors with equal values to them.</p> <p>IMPORTANT NOTE2: IDA supports only one translation list per segment. This translation is applied by default to all instruction in the segment. If the segment uses other mappings, then these individual mappings can be specified for each instruction separately by using the make offset commands.</p> <p>IMPORTANT NOTE3: Since only code references are affected by the segment translations, try to create the RAM segment at its usual place (i.e. its linear address in IDA corresponds to its address in the processor memory). This will make all data references to it to be correct without any segment translation. For the data references to other segments you'll need to use the make offset command for each such reference.</p> <p>See also</p> <ul> <li>addressing space concepts</li> </ul>"},{"location":"user-guide/user-interface/menu-bar/edit/segments.html#set-default-segment-register-value","title":"Set Default Segment Register Value","text":"<pre><code>Action    name: SetSegmentRegisterDefault\n\n</code></pre> <p>Relevant only for processors with the segment registers.</p> <p>You can specify a default value of a segment register for the current segment. When you change the default value, IDA will reanalyze the segment, taking the default value when it cannot determine the actual value of the register. This takes time, so do not be surprised if references are not corrected immediately.</p> <p>To specify a value other than the default value of a segment register, you can use change segment register value command.</p> <p>See also How to enter segment value</p>"},{"location":"user-guide/user-interface/menu-bar/edit/segments.html#change-segment-register-value","title":"Change Segment Register Value","text":"<pre><code> Action    name: SetSegmentRegister\n\n</code></pre> <p>Relevant only for processors with the segment registers. Currently this command works for IBM PC, TMS320C2, Intel80196, and PowerPC processors.</p> <p>This command creates or updates a segment register change point.</p> <p>See jump to segment register change point for more info.</p>"},{"location":"user-guide/user-interface/menu-bar/edit/segments.html#alpha-disassembly","title":"ALPHA DISASSEMBLY","text":"<p>For Alpha processors, the user must enter the difference between the real GP value and the start of the GOT (global offset table). For example:</p> <pre><code>         .got\n         ....\n         ; gp points here\n label:\n</code></pre> <p>If you want to specify that a register points to \"label\", you must calculate and enter the difference \"label-.got\" as the register value.</p>"},{"location":"user-guide/user-interface/menu-bar/edit/segments.html#arm-disassembly","title":"ARM DISASSEMBLY","text":"<p>The ARM processor module has a virtual segment register T which reflects the state of the T bit of the processor state register (PSR). Therefore, the value of this register controls THUMB/ARM mode. If its value is not zero, then the disassembly will be in the thumb mode.</p>"},{"location":"user-guide/user-interface/menu-bar/edit/segments.html#power-pc-disassembly","title":"POWER PC DISASSEMBLY","text":"<p>For PowerPC processors, the user must enter an offset from the beginning of the TOC to the TOC entry which contains the address of the target. An example:</p> <pre><code> TOC:    .toc\n         ....\n sometc: .tc sometc[tc], datachunk\n</code></pre> <p>If you want to specify that a register points to \"datachunk\", you must calculate and enter the difference \"sometc-TOC\" as the register value. You can change the TOC value in the processor specific options (which is accessible from the analysis options).</p>"},{"location":"user-guide/user-interface/menu-bar/edit/segments.html#intel-80196-disassembly","title":"INTEL 80196 DISASSEMBLY","text":"<p>For Intel 80196NP/NU processors, the user must enter the value of WSR or WSR1 register. IDA will automatically take the new value into account. </p> <p>See also:</p> <ul> <li>How to enter segment value</li> <li> How to Enter a Number</li> </ul>"},{"location":"user-guide/user-interface/menu-bar/edit/segments.html#segment-register-change-points","title":"Segment Register Change Points","text":"<p>When IDA encounters an instruction which changes a segment register, it creates a segment register change point. So, mostly change points are maintained by IDA itself. IDA assumes that the segment registers do not change their values between change points. If you find out that IDA failed to locate a segment register change, or if you want to change a register value, you can create a change point using Change Segment Register command. You can change the value of a segment register using Set default segment register value command too.</p> <p>IDA classifies the change points. In the list of the change points, you can see the following postfixes after the register values:</p> <pre><code> a (auto)     - Created by IDA. May be changed by IDA afterwards.\n u (by user)  - Created by user. IDA will not change it.\n</code></pre> <p>IDA generates the appropriate 'assume' instructions for the change points if it was not disabled by the corresponding command.</p>"},{"location":"user-guide/user-interface/menu-bar/edit/segments.html#choose-segment","title":"Choose segment","text":"<p>IDA can display a list of the program segments. Each segment is represented by a line in the list. Please note that the end address of the segment never belongs to the segment in IDA.</p> <p>The following segment attributes are visible:</p> <pre><code>  Name          Segment name\n  Start         Virtual start address\n  End           Virtual end address (address past the end of the segment)\n  R             'R': readable,      '.': not readable,   '?':unknown\n  W             'W': writable,      '.': not writable,   '?':unknown\n  X             'X': executable,    '.': not executable, '?':unknown\n  D             'D': debugger only, '.': regular\n  L             'L': created by loader, '.': no\n  Align         Segment alignment\n  Base          Segment base selector or address\n  Type          Segment type\n  Class         Segment class\n  AD            Segment addressing width\n</code></pre> <p>The rest of the columns display the default values of the segment registers for the segment.</p> <p>By default, the cursor is located on the current segment.</p> <p>You can use normal cursor movement keys and the mouse. You can also search for the segment by pressing Alt-T, or directly jump to the desired line by typing in its number.</p> <p>Press \\ to select line, \\ to cancel the selection."},{"location":"user-guide/user-interface/menu-bar/edit/structures.html","title":"Structs","text":"<p>This submenu allows you to manipulate the structures in specific operations. The following commands are accessible from the disassembly window.</p> <ul> <li>Struct var...</li> <li>Force zero field offset</li> <li>Select union member...</li> <li>Create struct from selection</li> <li>Copy field info to pointers...</li> </ul> <p>{% hint style=\"info\" %} Commands for creating, editing, and deleting the structures are available from the Local Types window.</p> <p>Use regular commands to specify struct and union members, their types, comments, etc.</p> <p>A union is a special kind of structure. Use structure definition commands to manipulate unions.</p> <p>See also Edit submenu.</p>"},{"location":"user-guide/user-interface/menu-bar/edit/structures.html#declare-a-structure-variable","title":"Declare a structure variable","text":"<pre><code> Action    name: MakeStructVar\n\n</code></pre> <p>This command declares a variable of the specified structure type.</p> <p>IDA will ask you to choose a structure type. You must have some structure types defined in order to use this command.</p> <p>If the target assembler supports it, IDA will display the structure in terse form (using just one line). To uncollapse a terse structure variable use the Unhide command.</p> <p>You can also use this command to declare a structure field in another structure (i.e. nested structures are supported too).</p>"},{"location":"user-guide/user-interface/menu-bar/edit/structures.html#force-zero-field-offset","title":"Force zero field offset","text":"<pre><code> Action    name: ZeroStructOffset\n\n</code></pre> <p>This command forces IDA to display a full structure member name even if the offset of the member is equal to zero.</p> <p>If used twice, the command cancels itself.</p> <p>Example: Suppose we have the following structure:</p> <pre><code>        xxx     struc\n        a       db ?\n        b       db ?\n        c       db ?\n        xxx     ends\n\n        dloc    xxx ?\n\n  Normally IDA displays references to it like this:\n\n        mov     eax, offset dloc\n        mov     eax, offset dloc.b\n\n  If you force IDA, then it displays member 'a':\n\n        mov     eax, offset dloc.a\n        mov     eax, offset dloc.b\n</code></pre>"},{"location":"user-guide/user-interface/menu-bar/edit/structures.html#select-union-member","title":"Select union member","text":"<pre><code> Action    name: SelectUnionMember\n\n</code></pre> <p>This command tells IDA how to display references to a union from the current cursor location.</p> <p>Example: Suppose we have the following union:</p> <pre><code>        xxx     union\n        a       db ?\n        b       dw ?\n        c       dd ?\n        ends   xxx\n\n        dloc    xxx ?\n\n  Normally, IDA displays references to \"dloc\" like this:\n\n        mov     al,  byte ptr dloc\n        mov     eax, word ptr dloc\n\n  After using this command, IDA can display the union members:\n\n        mov     al,  dloc.b\n        mov     eax, dloc.d\n</code></pre>"},{"location":"user-guide/user-interface/menu-bar/edit/structures.html#create-a-new-structure-from-current-data","title":"Create a new structure from current data","text":"<pre><code>Action    name: CreateStructFromData\n\n</code></pre> <p>This command defines a new structure from data already defined. The new structure is created with adequate data types, and each member uses the current data name if it is available.</p> <p>This command is available only in the graphical version of IDA.</p>"},{"location":"user-guide/user-interface/menu-bar/edit/structures.html#copy-field-info-to-pointers","title":"Copy field info to pointers","text":"<pre><code> Action    name: CopyFieldsToPointers\n\n</code></pre> <p>This command scans the current struct variable and renames the locations pointed by offset expressions unless they already have a non-dummy name.</p> <p>It also copies the type info from the struct members to pointed locations.</p>"},{"location":"user-guide/user-interface/menu-bar/edit/undefine-a-byte.html","title":"Undefine a byte","text":"<pre><code> Action    name: MakeUnknown\n\n</code></pre> <p>This command deletes the current instruction or data, converting it to 'unexplored' bytes. IDA will delete the subsequent instructions if there are no more references to them (functions are never deleted).</p> <p>If you have selected a range using the anchor, all the bytes in this range will be converted into 'unexplored' bytes. In this case, IDA will not delete any other instructions even if there are no references to them after the deletion.</p> <p>See also Edit submenu</p>"},{"location":"user-guide/user-interface/menu-bar/edit/undo-an-action.html","title":"Undo an action","text":"<pre><code> Action    name: Undo\n\n</code></pre> <p>This command reverts the database to the state before executing the last user action. It is possible to apply Undo multiple times, in this case multiple user actions will be reverted.</p> <p>Please note the entire database is reverted, including all modifications that were made to the database after executing the user action and including the ones that are not connected to the user action. For example, if a third party plugin modified the database during or after the user action, this modification will be reverted. In theory it is possible to go back in time to the very beginning and revert the database to the state state that was present immediately after performing the very first user action. However, in practice the undo buffers overflow because of the changes made by autoanalysis. Autoanalysis generates copious amounts of undo data. Also please note that maintaining undo data during autoanalysis slows it down a bit. In practice it is not a big deal because the limit on the undo data is reached quite quickly (in a matter of minutes). Therefore, if during analysis the user does not perform any actions that modify the database, the undo feature will turn itself off temporarily.</p> <p>However, if you prefer not to collect undo data at all during the initial autoanalysis, just turn off the UNDO_DURING_AA parameter in ida.cfg.</p> <p>The configuration file ida.cfg has 2 more undo-related parameters:</p> <pre><code>  UNDO_MAXSIZE  max size of undo buffers; default: 128MB\n                once this limit is reached, the undo info about the oldest\n                user action will be forgotten.\n\n  UNDO_DEPTH    max number of user actions to remember; default: 1000000\n                if set to 0, the undo feature will be unavailable.\n</code></pre> <p>Since there is a limit on the size of undo buffers, any action, even the tiniest, may become non-undoable after some time. This is true because the analysis or plugins may continue to modify the database and overflow the buffers. Some massive actions, like deleting a segment, may be non-undoable just because of the sheer amount of undo data they generate.</p> <p>Please note that Undo does not affect the state of IDC or Python scripts. Script variables will not change their values because of Undo. Also nothing external to the database can be changed: created files will not be deleted, etc.</p> <p>Some actions cannot be undone. For example, launching a debugger or resuming from a breakpoint cannot be undone.</p> <p>See also</p> <ul> <li>Redo</li> <li>Reset Undo</li> <li>Disable Undo</li> <li>Open undo history</li> </ul>"},{"location":"user-guide/user-interface/menu-bar/edit/operand-types/bitwise-negate-operand.html","title":"Bitwise negate operand","text":"<pre><code> Action    name: BitwiseNegate\n\n</code></pre> <p>This command bit-wisely negates the current operand. Please note that not all types of operands can be negated. It is not possible to negate and change sign of an operand simultaneously.</p> <p>This command works only if the current assembler supports the bitwise negation operation.</p> <p>See also: Edit|Operand types submenu. Enter #th operand manually commands. Set operand type</p>"},{"location":"user-guide/user-interface/menu-bar/edit/operand-types/change-operand-sign.html","title":"Change operand sign","text":"<pre><code> Action    name: ChangeSign\n\n</code></pre> <p>This command changes the sign of the current operand. Please note that not all operands can change their sign.</p> <p>See also: Edit|Operand types submenu. Enter #th operand manually commands. Set operand type</p>"},{"location":"user-guide/user-interface/menu-bar/edit/operand-types/complex-offset-expression.html","title":"Complex Offset Expression","text":"<p>A complex offset expression looks like</p> <pre><code>        offset target + delta - offset base\n</code></pre> <p>It is specified by:</p> <pre><code>        - type (OFF16, OFF32, LOW16, etc.)\n        - base\n        - optional target\n        - optional delta from target\n</code></pre> <p>The relationship between these parameters is (the formula is given for full offsets):</p> <pre><code>        operand_value = target + delta - base\n\n  or (the same relationship in a different form):\n\n        target = operand_value - delta + base\n</code></pre> <p>You always have to specify the offset type and base. Usually, the delta is equal to zero. For the full offset type you may omit the offset target, which is recommended. In this case, IDA will calculate it automatically. However, if you specify the offset target, make sure that the relationship between the parameters still holds. For the half offset types, you have to specify the target because there is no way to calculate it.</p> <p>The offset types:</p> <pre><code>  8-bit full offset            :\n  16-bit full offset           :\n  32-bit full offset           :\n\n    The full offsets are regular offset expressions like\n\n        offset label\n\n    They can occupy 8, 16, or 32 bits.\n    You have to specify the offset base for these offsets.\n\n  low 8 bits of 16-bit offset  :\n\n    Only the low 8 bits of the offset. IDA will represent them as\n\n        (offset label) &amp; 0xFF\n\n  low 16 bits of 32-bit offset :\n\n    Only the low 16 bits of the offset. IDA will represent them as\n\n        (offset label) &amp; 0xFFFF\n\n  high 8 bits of 16-bit offset :\n\n    Only the high 8 bits of the offset. IDA will represent them as\n\n        offset label &gt;&gt; 8\n\n  high 16 bits of 32-bit offset:\n\n    Only the high 17 bits of the offset. IDA will represent them as\n\n        offset label &gt;&gt; 16\n</code></pre> <p>See also offset by any user-specified base</p>"},{"location":"user-guide/user-interface/menu-bar/edit/operand-types/convert-operand-to-character.html","title":"Convert operand to character","text":"<pre><code> Action    name: OpChar\n\n</code></pre> <p>This command converts immediate operand(s) type of the current instruction/data to character.</p> <p>When you use this command, IDA deletes the manually entered operand.</p> <p>If the cursor is on the first operand (the cursor is before ',') then the first operand will be affected; otherwise, all other operands will be affected.</p> <p>See also Edit|Operand types submenu.</p>"},{"location":"user-guide/user-interface/menu-bar/edit/operand-types/convert-operand-to-segment.html","title":"Convert operand to segment","text":"<pre><code> Action    name: OpSegment\n\n</code></pre> <p>This command converts the immediate operand(s) type of the current instruction/data to segment base. The segment bases are usually displayed like this:</p> <pre><code>        mov     ax, seg dseg\n</code></pre> <p>When you use this command, IDA deletes the manually entered operand.</p> <p>If IDA cannot find a segment whose base is equal to the operand value, it simply displays it as hex number.</p> <p>If the cursor is on the first operand (the cursor is before ',') then the first operand will be affected; otherwise, all other operands will be affected.</p> <p>See also Edit|Operand types submenu.</p>"},{"location":"user-guide/user-interface/menu-bar/edit/operand-types/convert-operand-to-stack-variable.html","title":"Convert operand to stack variable","text":"<pre><code> Action    name: OpStackVariable\n\n</code></pre> <p>This command converts immediate operand(s) type of the current instruction to an offset to stack variables, i.e. a local variable or function argument in the stack.</p> <p>You need to define stack variables before using this command.</p> <p>If the current operand is based on the value of the stack pointer ([ESP+xxx]) and the SP value is traced incorrectly, then you need to correct SP value using change stack pointer command.</p> <p>If a range is selected using the anchor, IDA will perform 'en masse' conversion. It will convert immediate operands of all instructions in the selected range to stack variables. However, IDA will ask you first the lower and upper limits of immediate operand value. If the operand value is &gt;= lower limit and &lt;= upper limit then the operand will be converted to stack variable, otherwise it will be left unmodified.</p> <p>When you use this command, IDA deletes the manually entered operand.</p> <p>If the cursor is on the first operand (the cursor is before ',') then the first operand will be affected; otherwise all other operands will be affected.</p> <p>See also: Edit|Operand types submenu. Enter #th operand manually commands. Define stack variables...</p>"},{"location":"user-guide/user-interface/menu-bar/edit/operand-types/convert-operand-to-symbolic-constant-enum.html","title":"Convert operand to symbolic constant (enum)","text":"<pre><code> Action    name: OpEnum\n\n</code></pre> <p>This command converts immediate operand(s) type of the current instruction/data to an enum member. Before using this command, you have to define an enumeration type.</p> <p>If the selected enum is a bitfield, IDA will try to build a bitfield expression to represent the constant. Please note that for bitfields having multiple constants with the same value some expressions won't be possible.</p> <p>If a range is selected using the anchor, IDA will perform 'en masse' conversion. It will convert immediate operands of all instructions in the selected range to symbolic constants. However, IDA will ask you first the lower and upper limits of immediate operand value. If the operand value is &gt;= lower limit and &lt;= upper limit then the operand will be converted to offset, otherwise it will be left unmodified.</p> <p>When you use this command, IDA deletes the manually entered operand.</p> <p>If the cursor is on the first operand (the cursor is before ',') then the first operand will be affected; otherwise all other operands will be affected.</p> <p>See also: Edit|Operand types submenu. Enter #th operand manually commands. Set operand type</p>"},{"location":"user-guide/user-interface/menu-bar/edit/operand-types/number.html","title":"Edit|Operand types|Number submenu","text":"<ul> <li>Convert operand to number</li> <li>Convert operand to hex number</li> <li>Convert operand to decimal number</li> <li>Convert operand to octal number</li> <li>Convert operand to binary number</li> <li>Convert operand to floating point number</li> <li>Toggle leading zeroes</li> </ul>"},{"location":"user-guide/user-interface/menu-bar/edit/operand-types/number.html#convert-operand-to-number","title":"Convert operand to number","text":"<pre><code> Action    name: OpNumber\n\n</code></pre> <p>This command converts immediate operand(s) type of the current instruction/data to a number. That way, you can delete suspicious mark of the item.</p> <p>The number is represented in the default radix for the current processor (usually hex, but octal for PDP-11, for example).</p> <p>When you use this command, IDA deletes the manually entered operand.</p> <p>If the cursor is on the first operand (the cursor is before ',') then the first operand will be affected; otherwise, all other operands will be affected.</p>"},{"location":"user-guide/user-interface/menu-bar/edit/operand-types/number.html#convert-operand-to-hexadecimal-number","title":"Convert operand to hexadecimal number","text":"<pre><code> Action    name: OpHex\n\n</code></pre> <p>This command converts immediate operand(s) type of the current instruction/data to hex number. So you can delete suspicious mark of the item.</p> <p>When you use this command, IDA deletes the manually entered operand.</p> <p>If the cursor is on the first operand (the cursor is before ',') then the first operand will be affected; otherwise, all other operands will be affected.</p>"},{"location":"user-guide/user-interface/menu-bar/edit/operand-types/number.html#convert-operand-to-decimal-number","title":"Convert operand to decimal number","text":"<pre><code> Action    name: OpDecimal\n\n</code></pre> <p>This command converts the immediate operand(s) type of the current instruction/data to decimal. Therefore, it becomes a 'number'.</p> <p>When you use this command, IDA deletes the manually entered operand.</p> <p>If the cursor is on the first operand (the cursor is before ',') then the first operand will be affected; otherwise, all other operands will be affected.</p>"},{"location":"user-guide/user-interface/menu-bar/edit/operand-types/number.html#convert-operand-to-octal-number","title":"Convert operand to octal number","text":"<pre><code> Action    name: OpOctal\n\n</code></pre> <p>This command makes the current instruction or data operand type octal. IDA always uses 123o notation for octal numbers even if the current assembler does not support octal numbers.</p> <p>When you use this command, IDA deletes the manually entered operand.</p> <p>If the cursor is on the first operand (the cursor is before ',') then the first operand will be affected; otherwise, all other operands will be affected.</p>"},{"location":"user-guide/user-interface/menu-bar/edit/operand-types/number.html#convert-operand-to-binary-number","title":"Convert operand to binary number","text":"<pre><code> Action    name: OpBinary\n\n</code></pre> <p>This command makes the current instruction or data operand type binary. IDA always uses 123b notation for binary numbers even if the current assembler does not support binary numbers.</p> <p>When you use this command, IDA deletes the manually entered operand.</p> <p>If the cursor is on the first operand (the cursor is before ',') then the first operand will be affected; otherwise, all other operands will be affected.</p>"},{"location":"user-guide/user-interface/menu-bar/edit/operand-types/number.html#convert-operand-to-floating-point-number","title":"Convert operand to floating point number","text":"<pre><code> Action    name: OpFloat\n\n</code></pre> <p>This command makes the current operand type floating point.</p> <p>When you use this command, IDA deletes the manually entered operand.</p> <p>If the cursor is on the first operand (the cursor is before ',') then the first operand will be affected; otherwise, all other operands will be affected.</p>"},{"location":"user-guide/user-interface/menu-bar/edit/operand-types/number.html#toggle-leading-zeroes","title":"Toggle leading zeroes","text":"<pre><code> Action    name: ToggleLeadingZeroes\n\n</code></pre> <p>This command displays or hides the leading zeroes of the current operand. Example: if the instruction looked like this:</p> <pre><code>        and     ecx, 40h\n</code></pre> <p>then after applying the command it will look like this:</p> <pre><code>        and     ecx, 00000040h\n</code></pre> <p>If you prefer to see leading zeroes in all cases, then open the calculator and enter the following expression: set_inf_attr(INF_GENFLAGS, get_inf_attr(INF_GENFLAGS) | INFFL_LZERO); This will toggle the default for the current database and all numbers without leading zeroes will become numbers with leading zeroes, and vice versa.</p> <p>See also Edit|Operand types submenu.</p>"},{"location":"user-guide/user-interface/menu-bar/edit/operand-types/offset.html","title":"Offset","text":"<ul> <li>Convert operand to offset (data segment)</li> <li>Convert operand to offset (code segment)</li> <li>Convert operand to offset (any segment)</li> <li>Convert operand to offset (user-defined base)</li> <li>Convert operand to struct offset</li> </ul>"},{"location":"user-guide/user-interface/menu-bar/edit/operand-types/offset.html#convert-operand-to-offset-data-segment","title":"Convert operand to offset (data segment)","text":"<pre><code> Action    name: OpOffset\n\n</code></pre> <p>This command converts the immediate operand of the current instruction/data to an offset from the current data segment (DS).</p> <p>If current DS value is unknown (or equal 0xFFFF) IDA will warn you -- it will beep. In this case, you have to define DS register value for the current byte. The best way to do it is:</p> <ul> <li>jump to segment register change point</li> <li>change value of DS</li> <li>return or you can change default value of DS for the current segment.</li> </ul> <p>If you want to delete offset definition, you can use this command again - it works as trigger.</p> <p>If the cursor is on the first operand (the cursor is before ',') then the first operand will be affected; otherwise, all other operands will be affected.</p> <p>If a range is selected using the anchor, IDA will perform 'en masse' conversion. It will convert immediate operands of all instructions in the selected range to offsets. However, IDA will ask you first the lower and upper limits of immediate operand value. If the operand value is &gt;= lower limit and &lt;= upper limit then the operand will be converted to offset, otherwise it will be left unmodified.</p> <p>To create offsets to structure members use Convert to struct offset command.</p> <p>See also:</p> <ul> <li>Enter the operand manually command.</li> <li>Set operand type</li> </ul>"},{"location":"user-guide/user-interface/menu-bar/edit/operand-types/offset.html#convert-operand-to-offset-code-segment","title":"Convert operand to offset (code segment)","text":"<pre><code> Action    name: OpOffsetCs\n\n</code></pre> <p>This command converts the immediate operand of the current instruction/data to an offset from the current segment (CS).</p> <p>If the cursor is on the first operand (the cursor is before ',') then the first operand will be affected; otherwise, all other operands will be affected.</p> <p>If a range is selected using the anchor, IDA will perform 'en masse' conversion. It will convert immediate operands of all instructions in the selected range to offsets. However, IDA will ask you first the lower and upper limits of immediate operand value. If the operand value is &gt;= lower limit and &lt;= upper limit then the operand will be converted to offset, otherwise, it will be left unmodified.</p> <p>If this command is applied to a structure member in the local types window, then IDA will create an \"automatic offset\". An automatic offset is an offset with the base equal to 0xFFFFFFFF. This base value means that the actual value of the base will be calculated by IDA when a structure instance is created.</p> <p>To create offsets to structure members, use Convert to struct offset command.</p> <p>See also:</p> <ul> <li>Enter #th operand manually commands.</li> <li>Set operand type</li> </ul>"},{"location":"user-guide/user-interface/menu-bar/edit/operand-types/offset.html#convert-operand-to-offset-any-segment","title":"Convert operand to offset (any segment)","text":"<pre><code> Action    name: OpAnyOffset\n\n</code></pre> <p>This command converts the immediate operand of the current instruction/data to an offset from any segment.</p> <p>IDA will ask to choose a base segment for the offset.</p> <p>If a range is selected using the anchor, IDA will perform 'en masse' conversion. It will convert immediate operands of all instructions in the selected range to offsets. However, IDA will ask you first the lower and upper limits of immediate operand value. If the operand value is &gt;= lower limit and &lt;= upper limit then the operand will be converted to offset, otherwise it will be left unmodified.</p> <p>If the cursor is on the first operand (the cursor is before ',') then the first operand will be affected; otherwise, all other operands will be affected.</p> <p>To create offsets to structure members use Convert to struct offset command.</p> <p>See also:</p> <ul> <li>Enter #th operand manually commands.</li> <li>Set operand type</li> </ul>"},{"location":"user-guide/user-interface/menu-bar/edit/operand-types/offset.html#convert-operand-to-offset-user-defined-base","title":"Convert operand to offset (user-defined base)","text":"<pre><code>Action    name: OpUserOffset\n</code></pre> <p>If the cursor is on the first operand (the cursor is before ',') then the first operand will be affected; otherwise, all other operands will be affected.</p> <p>If the offset base is specified as 0xFFFFFFFF, then IDA will create \"an automatic offset\". Automatic offsets mean that the actual value of the base will be calculated by IDA.</p> <p>The following offset attributes are available:</p> <pre><code>  Treat the base address as a plain number\n\n        if checked, IDA will treat the base address as a number.\n        In this case, IDA will not create a cross-reference to it\n        and the base address will be printed as a number,\n        not as an offset expression.\n\n  Offset points past the main object\n\n        Offsets of this type point past an object end.\n        They do not cause an object created/deletion.\n\n  Use image base as offset base\n\n        These offsets are based on the image base.\n        There is no need to explicitly specify the offset base.\n        These offsets are displayed in a concise form:\n          rva func\n        instead of\n          offset func - imagebase\n        If you intend to reassemble the output file, execute the\n        following IDC statement:\n        set_inf_attr(INF_GENFLAGS, get_inf_attr(INF_GENFLAGS) &amp; ~INFFL_ALLASM);\n\n  Subtract operand value\n\n        Use this option when the operand value should be substracted\n        from the base to get the target address. In this case the displayed\n        expression will be displayed as\n          offset base - target\n        instead of the usual\n          offset target - base\n\n  Signed operand\n\n        Use this option if the operand should be interpreted\n        as a signed value. This option is only available for OFF_REF8,\n        OFF_REF16, OFF_REF32 and OFF_REF64 offset types.\n\n  Operand value of 0 is invalid\n\n        If the operand value is 0, the value will be highlighted in red.\n\n  Operand value of NOT 0 is invalid\n\n        If the operand value is zero's complement (i.e. all bits are set),\n        the value will be highlighted in red.\n        For example a OFF_REF16 with an operand value of 0xFFFF would be invalid.\n\n  Use the current address as the offset base\n</code></pre> <p>The offset base is dynamically calculated and is equal to the address of the current element:</p> <ul> <li>for standalone items: their start address</li> <li>for arrays: the start of the array element</li> <li>for structures: the start of the structure field The offset expression is displayed in the following concise form: offset target - $ where \"$\" denotes the start of the element (and is assembler-dependent). To create offsets to structure members use Convert to struct offset command.</li> </ul> <p>See also:</p> <ul> <li>Enter #th operand manually commands.</li> <li>Set operand type</li> </ul>"},{"location":"user-guide/user-interface/menu-bar/edit/operand-types/offset.html#convert-operand-to-structure-offset","title":"Convert operand to structure offset","text":"<pre><code> Action    name: OpStructOffset\n\n\n GUI version:\n ------------\n</code></pre> <p>This command permits to convert all immediate operands of instructions in a range selection to a path of offsets through a structure and its possible sub unions. If no selection is active, IDA will simply permit to convert the current operand. In this case, it will display a simple dialog box the same way as the text version (see below).</p> <p>You can select the desired register in the drop-down list: all operands relative to this register will be added to the 'Offsets' list. A special empty line in the drop-down list is used to directly work on immediate values. Checkboxes in the 'Offsets' list allow you to select which operand you indeed want to modify. By default, IDA will select only undefined operands, to avoid overwriting previous type definitions. This list is sorted by operand value, by instruction address and finally by operand number. You can easily see the instructions related to the operand by moving the mouse over it, and wait for a hint to be displayed.</p> <p>The 'Structures and Unions' tree will contain all selectable structures, and sub unions. Once you select or move over a structure, the 'Offsets' list updates itself for each checked offset: the computed name of the operand is displayed, according to the selected structure in the tree. An icon is also drawn, to easily know if a specific structure matchs the offset or not, or if the offset is too big for the selected structure. The structures who match the most offsets will be near the top of the tree. You can also move your mouse over structures in the tree to obtain an interesting hint.</p> <p>A '?' icon can also appear, if the offset can be specialized by selecting an union member. In this case, if you expand the structure in the tree, you can select the adequate union member simply by checking the desired radio button. IDA automatically corrects the related name in the 'Offsets' list.</p> <p>The 'Offset delta' value represents the difference between the structure start and the pointer value. For example, if you have an operand 4 and want to convert in into an expression like \"mystruct.field_6-2\", then you have to enter 2 as the delta. Usually the delta is zero, i.e. the pointer points to the start of the structure.</p> <p>The 'Hide sub structures without sub unions' option (checked by default) avoids to add unnecessary sub structures to the tree, to keep it as small as possible. If you uncheck this option, all sub structures will be added to the tree.</p> <p>By default, IDA displays the structure member at offset 0. To change this behaviour, you can directly disable the 'Force zero offset field' in the 'Options' frame. Later zero offsets can be forced using Edit, Structs, Force zero offset menu item.</p> <pre><code> Text version:\n -------------\n</code></pre> <p>This command converts immediate operand(s) type of the current instruction/data to an offset within the specified structure. Before using this command, you have to define a structure type.</p> <p>First of all, IDA will ask a so-called \"struct offset delta\". This value represents the difference between the structure start and the pointer value. For example, if you have an operand 4 and want to convert in into an expression like \"mystruct.field_6-2\", then you have to enter 2 as the delta. Usually the delta is zero, i.e. the pointer points to the start of the structure.</p> <p>If a range is selected using the anchor, IDA will perform 'en masse' conversion. It will convert immediate operands of all instructions in the selected range to offsets. However, IDA will ask you first the lower and upper limits of immediate operand value. If the an operand value is &gt;= lower limit and &lt;= upper limit then the operand will be converted to offset, otherwise it will be left unmodified.</p> <p>When you use this command, IDA deletes the manually entered operand.</p> <p>If the cursor is on the first operand (the cursor is before ',') then the first operand will be affected; otherwise, all other operands will be affected.</p> <p>By default IDA doesn't display the structure member at offset 0. To change this behaviour, use Force zero field offset command.</p> <p>Moreover, if there are several possible representations (this can happen if unions are used), select the desired representation using the Select union member... command.</p> <p>See also:</p> <ul> <li>Enter #th operand manually command.</li> <li>Set operand type</li> </ul> <p>Related topics: Edit|Operand types submenu.</p>"},{"location":"user-guide/user-interface/menu-bar/edit/operand-types/perform-en-masse-operation.html","title":"Perform en masse operation","text":"<p>If you have selected a range before applying an operand conversion command, IDA will display a dialog box.</p> <p>You can choose a range of operands to perform an en masse operation:</p> <pre><code> ALL OPERANDS\n -----------\n</code></pre> <p>The operation will be performed on all operands as a toggle. For example, if you ask to convert to a character, then all non-character operands will become characters, and all character operands will become non-chars.</p> <pre><code> OPERAND VALUE RANGE\n -------------------\n</code></pre> <p>The operation will be performed on the void operands which contain immediate numbers in the specified range.</p> <pre><code> ... OPERANDS\n ------------\n</code></pre> <p>This selection will convert all operands with the specified type to undefined operands. Example: all characters become non-characters.</p> <pre><code> NOT ... OPERANDS\n ---------------\n</code></pre> <p>This selection allows to convert all operands that do not have the specified type to the specified type. Example: all non-characters to characters.</p> <pre><code> NOT TYPED OPERANDS\n -----------------\n</code></pre> <p>This selection allows to convert all operands without any type to the specified type. Example: all operands with no type to characters.</p> <pre><code> APPLY ONLY IF POSSIBLE\n ---------------------\n</code></pre> <p>IDA will check whether an operand can be represented with the specified type (as a character constant, for example), and perform type conversion only if the check is successful.</p>"},{"location":"user-guide/user-interface/menu-bar/edit/operand-types/set-operand-type.html","title":"Set operand type","text":"<pre><code> Action    name: SetOpType\n\n</code></pre> <p>This command allows you to specify the type of the operand under the cursor.</p> <p>The operand type must be entered as a C declaration. Currently IDA itself does not use the operand type information. However, it can be used by the Hex-Rays decompiler plugin. Setting operand type is most useful in case of indirect calls: the decompiler will use the type information to determine the input parameters to the call instead of guessing, which can make the decompiled code better.</p> <p>An example of a type declaration:</p> <pre><code>        int (*func)(int param1, char param2);\n</code></pre> <p>To delete a type declaration, enter an empty string.</p> <p>For details on possible calling conventions, see Set function/item type... menu item description.</p> <p>See also Set function/item type...</p>"},{"location":"user-guide/user-interface/menu-bar/edit/operand-types/user-defined-operand.html","title":"User-defined operand","text":"<pre><code> Action    name: ManualOperand\n\n</code></pre> <p>You may specify any string instead of an operand if IDA does not represent the operand in the desired form. In this case, IDA will simply display the specified string in the instruction instead of the default operand.</p> <p>The current operand (under the cursor) will be affected.</p> <p>You can use this command not only with instructions but with data items too.</p> <p>IDA proposes the previous manual operand as the default value in the input form.</p> <p>To delete the manual operand and revert back to the default text, specify an empty string.</p> <p>IDA automatically deletes manually entered operands when you change operand representation using operand types submenu.</p> <p>NOTE: A text offset reference is generated if you use a label in the program as the operand string. In other cases no cross-references are generated.</p> <p>See also Edit|Operand types submenu.</p>"},{"location":"user-guide/user-interface/menu-bar/edit/other/rename-any-address.html","title":"Rename Any Address","text":"<pre><code> Action    name: MakeAnyName\n\n</code></pre> <p>This command gives name/renames/deletes name for the specified address. This is a more powerful variant of Rename command.</p> <p>To delete a name, simply give an empty name.</p> <p>If the specified address is referenced, you cannot delete its name. Even if you try it, IDA will generate a dummy name.</p> <p>This command is available only from the name window.</p> <p>For an explanation about the dialog box entries, please see the Rename current address command.</p> <p>See also Edit|Other submenu. How to Enter an Identifier. Names representation.</p>"},{"location":"user-guide/user-interface/menu-bar/file/abort-ida.html","title":"Abort IDA","text":""},{"location":"user-guide/user-interface/menu-bar/file/abort-ida.html#abort-ida_1","title":"Abort IDA","text":"<pre><code> Action    name: Abort\n\n</code></pre> <p>This command terminates the current IDA session. The Abort command is not available if the database was not packed.</p>"},{"location":"user-guide/user-interface/menu-bar/file/abort-ida.html#ida-will-not-save-changes-to-the-disk","title":"IDA will NOT save changes to the disk.","text":"<p>See also other File... submenu commands. Quit command.</p>"},{"location":"user-guide/user-interface/menu-bar/file/exit-ida.html","title":"Exit IDA","text":"<pre><code> Action    name: Quit\n\n</code></pre> <p>This command terminates the current IDA session. IDA will write all changes to the disk and will close all databases.</p> <p>You can enable/disable database packing. When the database is packed, it consists of one file with IDB extension. When the database is not packed, it consists of several files on the disk. If packing is disabled, in the next session you cannot abort IDA. We do not recommend to leave the database in the unpacked form because you will not have a backup copy.</p> <p>You can also perform garbage collection on the database before packing it. The garbage collection removes the unused database pages, making it smaller. However, IDA needs some free database pages when it works,therefore it will allocate them again when you reuse the database. Removing and adding free pages takes time and, what is most important, it changes the database control blocks.</p> <p>Use garbage collection only when you do not intend to work with the database in the near future.</p> <p>IDA will remember all information about the screen, cursor position, jump stack, etc. The following information will be lost: keystroke macros, the anchor position To resume a disassembly session simply type: \"ida file\"</p> <p>See also other File... submenu commands. Abort command.</p>"},{"location":"user-guide/user-interface/menu-bar/file/invoke-os-shell.html","title":"Invoke os shell","text":""},{"location":"user-guide/user-interface/menu-bar/file/invoke-os-shell.html#invoke-os-shell","title":"Invoke OS Shell","text":"<pre><code> Action    name: Shell\n</code></pre> <p>By using this command, you can temporarily quit to the operating system.</p> <p>This command is not available in the MS DOS version.</p> <p>The database is left open when you use this command, so be careful.</p> <p>See also other File... submenu commands.</p>"},{"location":"user-guide/user-interface/menu-bar/file/load-file.html","title":"Load file submenu","text":"<p>This submenu allows you to load additional files into the database.</p> <p></p> <ul> <li>Reload input file</li> <li>Script file</li> <li>Binary file</li> <li>IDS file</li> <li>Debug information file</li> <li>PDB debug information file</li> <li>TDS debug information file</li> <li>FLIRT signature file</li> <li>C header file</li> </ul>"},{"location":"user-guide/user-interface/menu-bar/file/load-file.html#reload-the-input-file","title":"Reload the input file","text":"<pre><code>Action    name: ReloadFile\n</code></pre> <p>This command reloads the same input file into the database. IDA tries to retain as much information as possible in the database. All the names, comments, segmentation information and similar will be retained.</p> <p>Only the values of individual bytes will be changed.</p> <p>This command works for some input file types only: if the file was loaded into the database with special settings, this command may fail. In this case, use Dump database to IDC file command and reload the file manually.</p> <p>See also Load... submenu commands.</p>"},{"location":"user-guide/user-interface/menu-bar/file/load-file.html#load-additional-file","title":"Load additional file","text":"<pre><code> Action    name: LoadFile\n\n</code></pre> <p>This command loads a binary file. The new file is added to the current database and all existing information is retained.</p> <p>The file content will appear as unexplored bytes in the program.</p> <p>This command only allows you to load binary files.</p> <p>See also Load... submenu commands.</p>"},{"location":"user-guide/user-interface/menu-bar/file/load-file.html#load-ids-file","title":"Load IDS file","text":"<pre><code> Action    name: LoadIdsFile\n\n</code></pre> <p>This command loads an IDS file.</p> <p>An IDS file contains information about well-known functions (such as functions from MS Windows API), namely:</p> <pre><code>        - their names\n        - their ordinal number in the DLL\n        - an eventual informative comment\n        - the number of parameters passed on the stack\n        - the number of parameters purged when returning\n</code></pre> <p>IDS files are automatically loaded if they are found in the IDS directory. This command allows you to load an IDS file from any directory, even after the main file has been loaded into the database.</p> <p>See also Load... submenu commands.</p>"},{"location":"user-guide/user-interface/menu-bar/file/load-file.html#load-debug-information-file","title":"Load debug information file","text":"<pre><code> Action    name: LoadDbgFile\n\n</code></pre> <p>This command loads a DBG file.</p> <p>If the program being disassembled has a companion DBG file, then this command may be used to load information from a DBG file into the database. IDA loads DBG files automatically if it can find them in the directory with the input file.</p> <p>The built-in debug information loader cannot load NB10 format files and PDB files. To load those files, please use a special plugin, PDB.DLL, which can be run manually using Edit-&gt;Plugins submenu. This plugin uses MS Windows DLLs to load the debug information and therefore has the following limitations:</p> <pre><code>        - it works only under MS Windows\n        - it will load only PDBs compatible with the currently\n          installed IMAGEHLP.DLL\n</code></pre> <p>See also Load... submenu commands.</p>"},{"location":"user-guide/user-interface/menu-bar/file/load-file.html#load-pdb-debug-information-file","title":"Load PDB debug information file","text":"<pre><code> Action    name: LoadPdbFile\n\n</code></pre> <p>This command loads a PDB file.</p> <p>If the program being disassembled has a companion PDB file, then this command may be used to load information from the PDB file into the database.</p> <p>By default IDA uses in-house code to parse and load PDB files. However, our code can not parse old v2.0 PDB files. For them, IDA can fall back to using Microsoft DLLs (the default is \"do not fall back\"). Please read more in cfg/pdb.cfg.</p> <p>Command line switch '-Opdb:option1:option2' overrides for ida session the value in cfg/pdb.cfg.</p>"},{"location":"user-guide/user-interface/menu-bar/file/load-file.html#list-of-options","title":"List of options","text":"<pre><code>  off    : disable PDB\n  pdbida : uses Hex-rays in-house code to parse and load PDB files.\n  msdia  : uses Microsoft DLLs to parse and load PDB files.\n           only available on Windows, for Linux/Macos you need to configure\n           win32_remote.exe or win64_remote64.exe server in cfg/pdb.cfg\n  fallback   : fallback from pdbida to msdia for the old 2.0 format\n  nofallback : no fallback to msdia\n</code></pre>"},{"location":"user-guide/user-interface/menu-bar/file/load-file.html#example","title":"Example","text":"<pre><code>  -Opdb:off\n</code></pre> <p>Ida will not load PDB plugin for this session.</p>"},{"location":"user-guide/user-interface/menu-bar/file/load-file.html#load-tds-debug-information-file","title":"Load TDS debug information file","text":"<pre><code> Action    name: LoadTdsFile\n\n</code></pre> <p>This command loads a TDS file.</p> <p>If the program being disassembled has a companion TDS file, this command may be used to load information from the TDS file into the database.</p> <p>The TDS file must be placed in the same directory together with the input file.</p> <p>The LoadTdsFile command launches a special plugin TDS.DLL which can be run manually using Edit-&gt;Plugins submenu.</p> <p>See also Load... submenu commands.</p>"},{"location":"user-guide/user-interface/menu-bar/file/load-file.html#load-flirt-signature-file","title":"Load FLIRT signature file","text":"<pre><code> Action    name: LoadSigFile\n\n</code></pre> <p>This command allows you to apply an additional signature file to the program.</p> <p>A signature file contains patterns of standard runtime functions. With their help, IDA is able to recognize the standard functions and names them accordingly.</p> <p>IDA attempts to detect the necessary signature files automatically but unfortunately, this is not always possible. This command adds the specified signature file into the planned signature files queue.</p> <p>Signature files reside in the subdirectories of the SIG directory. Each processor has its own subdirectory. The name of the subdirectory is equivalent to the name of the processor module file (z80 for z80.w32, for example). Note: IBM PC signatures are located in the SIG directory itself. Note: the IDASGN environment variable can be used to specify the location of the signatures directory.</p> <p>There is another way to load a signature file: you may insert/delete signature files in the following way:</p> <pre><code>        - open the signatures window\n        - press Ins to insert a signature file to the queue\n        - press Del to delete a signature file from the queue\n</code></pre> <p>This is a preferred way of applying signatures because useful information, such as the number of identified functions is displayed in the signature window.</p> <p>{% hint style=\"info\" %} FLIRT works only for the processors with normal byte size. The byte size must be equal to 8 (processors with wide bytes like AVR or DSP56K are not supported)</p> <p>See also Load... submenu commands.</p>"},{"location":"user-guide/user-interface/menu-bar/file/load-file.html#load-c-header","title":"Load C header","text":"<pre><code> Action    name: LoadHeaderFile\n\n</code></pre> <p>This command allows you to apply type declarations from a C header file to the program.</p> <p>IDA reads and parses the specified header file as a C compiler does. In other words, it mimics the front-end of a C compiler with some restrictions:</p> <pre><code>        - only type declarations are allowed. The function definitions\n          in the input file are skipped\n        - not all C++ header files are not supported, only simple classes can\n          be parsed\n        - the compiler specific predefined macros are not defined,\n          you have to define them manually in the header file\n</code></pre> <p>Don't forget to specify the compiler and memory model in the compiler setup dialog box before loading a header file.</p> <p>All type declarations found in the input file are stored in the current database in the form of a type library. These type declarations can be used to define new structure and enumeration definitions by pressing \"Add standard structure\" or \"Add standard enum\" buttons in the Add enum type... and Add struct type... dialog boxes.</p> <p>In the case of an error in the input file, the error messages appear in the message window. In any case, the function declarations that are already parsed are not deleted from the database. IDA stops parsing the input file when 20 errors occur.</p> <p>IDA 7.7 introduced an alternative header file parser based on libclang.</p> <p>See also</p> <ul> <li>Load... submenu commands.</li> <li>Local types window</li> <li>IDAClang plugin</li> </ul>"},{"location":"user-guide/user-interface/menu-bar/file/load-file.html#idaclang-plugin","title":"IDAClang plugin","text":"<p>The IDAClang plugin is shipped with IDA, and it provides the ability to parse header files that contain arbitrarily complex C/C++/Objective-C source code using the Load C header action.</p> <p>To enable the IDAClang parser, go to Options&gt;Compiler&gt;Source parser, and select \"clang\". Then use 'File&gt;Load file&gt;Parse C header file' to invoke the parser on a given source file.</p> <p>Since IDAClang is based on the third-party libclang parser, it can only parse standalone source files that contain valid C/C++/Objective-C syntax.</p> <p>See also Load C header command.</p> <p>See also other File... submenu commands.</p>"},{"location":"user-guide/user-interface/menu-bar/file/produce-output-files.html","title":"File|Produce output files submenu","text":"<p>This submenu allows you to produce various output files. It also allows you to unload the database.</p> <p>The text file-producing operations below will make use of</p> <ul> <li>the currently-selected encoding for output files.</li> <li>Generate MAP file</li> <li>Generate ASM file</li> <li>Generate INC file</li> <li>Generate LST file</li> <li>Generate EXE file</li> <li>Generate DIF file</li> <li>Generate HTML file</li> <li>Generate flow chart GDL file</li> <li>Generate call graph GDL file</li> <li>Dump database to IDC file</li> <li>Dump typeinfo to IDC file</li> <li>Create C header file</li> </ul>"},{"location":"user-guide/user-interface/menu-bar/file/produce-output-files.html#create-map-file","title":"Create MAP File","text":"<pre><code> Action    name: ProduceMap\n\n</code></pre> <p>Please enter a file name for the map. IDA will write the following information about this file:</p> <pre><code>  - current segmentation\n  - list of names sorted by values\n</code></pre> <p>You may disable the generation of the segmentation information. You may also enable or disable dummy names in the output file.</p> <p>You can use this map file for your information, and also for debugging (for example, Periscope from Periscope Company or Borland's Turbo Debugger can read this file).</p>"},{"location":"user-guide/user-interface/menu-bar/file/produce-output-files.html#create-asm-file","title":"Create ASM File","text":"<pre><code> Action    name: ProduceAsm\n\n</code></pre> <p>Please enter a file name for the assembler text file. IDA will write the disassembled text to this file.</p> <p>If you have selected a range on the screen using Drop Anchor command, IDA will write only the selected range (from the current address to the anchor).</p> <p>If some I/O problem (e.g. disk full) occurs during writing to the file, IDA will stop and a partial file will be created.</p>"},{"location":"user-guide/user-interface/menu-bar/file/produce-output-files.html#create-inc-file","title":"Create INC File","text":"<pre><code> Action    name: ProduceInc\n\n</code></pre> <p>Please enter a file name for the assembler include file. IDA will write the information about the defined types (structures and enums) to this file.</p> <p>If some I/O problem (e.g. disk full) occurs during writing to the file, IDA will stop and a partial file will be created.</p>"},{"location":"user-guide/user-interface/menu-bar/file/produce-output-files.html#create-lst-file","title":"Create LST File","text":"<pre><code> Action    name: ProduceLst\n\n</code></pre> <p>Enter a file name for the assembler listing file. IDA will write the disassembled text to this file.</p> <p>If you've selected a range on the screen using Drop Anchor command, IDA will write only the selected range (from the current address to the anchor).</p> <p>If some I/O problem (e.g. disk full) occurs during writing to the file, IDA will stop and a partial file will be created.</p>"},{"location":"user-guide/user-interface/menu-bar/file/produce-output-files.html#create-executable-file","title":"Create Executable File","text":"<pre><code> Action    name: ProduceExe\n\n</code></pre> <p>Enter a file name for the new executable file. Usually this command is used after patching (see commands Patch byte and Patch word) to obtain a patched version of the file.</p> <p>IDA produces executable files only for:</p> <pre><code>  - MS DOS .exe\n  - MS DOS .com\n  - MS DOS .drv\n  - MS DOS .sys\n  - general binary\n  - Intel Hex Object Format\n  - MOS Technology Hex Object Format\n</code></pre> <p>For other file formats please create a difference file.</p> <p>{% hint style=\"info\" %} Only Patch byte/word commands affect the executable file contents, other commands (including User-Specified String for the #th Operand) will not affect the content of the disassembled file.</p> <p>EXE files: Output files will have the same EXE-header and relocation table as the input file. IDA will fill unused ranges of the EXE file (e.g. between relocation table and loadable pages) with zeroes.</p> <p>See also Edit|Patch core submenu.</p>"},{"location":"user-guide/user-interface/menu-bar/file/produce-output-files.html#create-difference-file","title":"Create Difference File","text":"<pre><code> Action    name: ProduceDiff\n\n</code></pre> <p>This command will prompt you for a filename and then will create a plain text difference file of the following format:</p> <pre><code> comment\n\n filename\n offset: oldval  newval\n</code></pre> <p>See also Edit|Patch core submenu.</p>"},{"location":"user-guide/user-interface/menu-bar/file/produce-output-files.html#create-html-file","title":"Create HTML File","text":"<pre><code> Action    name: ProduceHtml\n\n</code></pre> <p>Please enter a file name for the HTML file. IDA will write the disassembled text to this file.</p> <p>If you've selected a range on the screen using Drop Anchor command, IDA will write only the selected range (from the current address to the anchor).</p> <p>If some I/O problem (e.g. disk full) occurs during writing to the file, IDA will stop and a partial file will be created.</p> <p>This command is available only in the graphical version of IDA.</p>"},{"location":"user-guide/user-interface/menu-bar/file/produce-output-files.html#produce-flow-chart-gdl-file","title":"Produce flow chart GDL file","text":"<pre><code> Action    name: ProduceFuncGdl\n\n</code></pre> <p>This command creates a GDL (graph description file) with the flow chart of the current function.</p> <p>If there is an active selection, its flow chart will be generated.</p> <p>IDA will ask for the output file name. Regardless of the specified extension, the .GDL extension will be used.</p>"},{"location":"user-guide/user-interface/menu-bar/file/produce-output-files.html#produce-call-graph-gdl-file","title":"Produce call graph GDL file","text":"<pre><code> Action    name: ProduceCallGdl\n\n</code></pre> <p>This command creates a GDL (graph description file) with the graph of the function calls.</p> <p>IDA will ask for the output file name. Regardless of the specified extension, the .GDL extension will be used.</p>"},{"location":"user-guide/user-interface/menu-bar/file/produce-output-files.html#dump-database-to-idc-file","title":"Dump database to IDC file","text":"<pre><code> Action    name: DumpDatabase\n\n</code></pre> <p>This command saves current IDA database into a text file.</p> <p>You can use it as a safety command:</p> <pre><code>  - to protect your work from disasters\n  - to migrate information into new database formats of IDA.\n</code></pre> <p>This command is used when you want to switch to a new version of IDA. Usually each new version of IDA has its own database format. To create a new format database, you need:</p> <pre><code>  1. to issue the 'Dump...' command for the old\n     database (using old version of IDA). You will\n     get an IDC file containing all information\n     from your old database.\n  2. to reload your database using new IDA with switch -x.\n  3. to compile and execute the IDC file with command\n    'Execute IDC file' (usually F2)\n</code></pre> <p>Please note that this command does not save everything to text file. Any information about the local variables will be lost!</p>"},{"location":"user-guide/user-interface/menu-bar/file/produce-output-files.html#create-c-header-file","title":"Create C header file","text":"<pre><code> Action    name: ProduceHeader\n\n</code></pre> <p>This command saves all definitions in the local types window into a C header file.</p>"},{"location":"user-guide/user-interface/menu-bar/file/produce-output-files.html#dump-typeinfo-to-idc-file","title":"Dump typeinfo to IDC file","text":"<pre><code> Action    name: DumpTypes\n\n</code></pre> <p>This command saves information about the user-defined types from the IDA database into a text file.</p> <p>Information about enums, structure types and other user-defined types is saved in a text form as an IDC program.</p> <p>You can use this command to migrate the type definitions from one database to another.</p> <p>See also other File... submenu commands.</p>"},{"location":"user-guide/user-interface/menu-bar/file/save-database-as....html","title":"Save database as...","text":""},{"location":"user-guide/user-interface/menu-bar/file/save-database-as.html","title":"Save database as","text":""},{"location":"user-guide/user-interface/menu-bar/file/save-database-as.html#save-database-as","title":"Save database as...","text":"<pre><code> Action    name: SaveBaseAs\n</code></pre> <p>This command saves and packs the current database. IDA will prompt you to enter a new name for the database file. Databases are saved with an .IDB extension. Use this command if you don\\'t want to overwrite an earlier database.</p> <p>See also other File... submenu commands. Save database command.</p>"},{"location":"user-guide/user-interface/menu-bar/file/save-database.html","title":"Save database","text":"<pre><code> Action    name: SaveBase\n\n</code></pre> <p>This command saves and packs the current database.</p> <p>See also other File... submenu commands. Save database as... command.</p>"},{"location":"user-guide/user-interface/menu-bar/file/script-command.html","title":"Script command","text":"<pre><code> Action    name: ExecuteLine\n\n</code></pre> <p>You can enter and execute a small script written in the built-in IDC language or any other registered extlang.</p> <p>Here is the list of built-in functions.</p> <p>See also:</p> <ul> <li>IDC language overview</li> <li>Execute script file command</li> <li>File... submenu commands</li> <li>How to use notepad.</li> </ul>"},{"location":"user-guide/user-interface/menu-bar/file/script-file.html","title":"Script File","text":"<pre><code> Action    name: Execute\n\n</code></pre> <p>You can execute any script file supported by the built-in scripting engine (IDC or Python), or a scripting language added by a plugin. The scripting language to use is selected by the file name extension of the script.</p> <p>See also Immediate execution of script commands, Load... submenu commands.</p>"},{"location":"user-guide/user-interface/menu-bar/file/take-database-snapshot.html","title":"Take database snapshot","text":"<pre><code> Action    name: SaveBaseSnap\n\n</code></pre> <p>This command takes a database snapshot. The snapshot can be later restored from the database snapshot manager.</p> <p>Note: snapshots work only with regular databases. Unpacked databases do not support them.</p> <p>See also View database snapshot manager commands.</p>"},{"location":"user-guide/user-interface/menu-bar/jump/center-current-line-in-window.html","title":"Center current line in window","text":"<pre><code> Action    name: CenterInWindow\n\n</code></pre> <p>This command centers the cursor.</p>"},{"location":"user-guide/user-interface/menu-bar/jump/problems-list.html","title":"Problems List","text":"<p>The following problems may occur:</p> <ul> <li>NOOFFSET Cannot find offset base</li> <li>NONAME Cannot find name</li> <li>NOFORCED Cannot find alternative string for an operand</li> <li>NOCMT Cannot find comment</li> <li>NOREF Cannot find references</li> <li>INDIRJMP Indirect execution flow</li> <li>NODISASM Cannot disassemble</li> <li>ALREADY Already data or code</li> <li>BOUNDS Execution flows beyond limits</li> <li>OVERFLOW Too many lines</li> <li>BADSTACK Failed to trace the value of the stack pointer</li> <li>LOOKHERE Attention! Probably erroneous situation</li> <li>DECISION Decision to convert to instruction/data is made by IDA</li> <li>ROLLBACK The decision made by IDA was wrong and rolled back</li> <li>COLISION FLIRT collision: the function with the given name already exists</li> <li>SIGFNREF FLIRT match indecision: reference to function expected\\</li> </ul> <p>See also Jump submenu.</p>"},{"location":"user-guide/user-interface/menu-bar/jump/problems-list.html#problem-cannot-find-offset-base","title":"Problem: Cannot find offset base","text":"<pre><code>Description:\n        The current item has an operand marked as an offset,\n        but IDA cannot find the offset base in the database.\n\n Possible reason(s):\n        The database is probably corrupted.\n        This may occur if the database was corrupted and repaired.\n</code></pre> <p>What to do: Mark the operand again as an offset. Use one of the following commands:</p> <ul> <li>Convert to offset (DS)</li> <li>Convert to offset (CS)</li> <li>Convert to offset by any segment</li> <li>Convert to offset by any user-specified base</li> </ul>"},{"location":"user-guide/user-interface/menu-bar/jump/problems-list.html#problem-cannot-find-name","title":"Problem: Cannot find name","text":"<p>Description: Two reasons can cause this problem: 1.Reference to an illegal address is made in the program being disassembled; 2.IDA couldn't find a name for the address but it must exist. What to do:</p> <ol> <li> <p>If this problem is caused by a reference to an illegal address</p> </li> <li> <p>try to enter the operand manually</p> </li> <li> <p>or make the illegal address legal by creating a new segment.</p> </li> <li> <p>Otherwise, the database is corrupt.</p> </li> </ol>"},{"location":"user-guide/user-interface/menu-bar/jump/problems-list.html#problem-cannot-find-alternative-string-for-an-operand","title":"Problem: Cannot find alternative string for an operand","text":"<pre><code> Description:\n        The current item has an operand marked as entered manually,\n        but IDA cannot find the manually entered string in the database.\n\n Possible reason(s):\n        The database is corrupt.\n</code></pre> <p>What to do: Enter the operand manually again. Use one of the following commands: User-defined operand</p>"},{"location":"user-guide/user-interface/menu-bar/jump/problems-list.html#problem-cannot-find-comment","title":"Problem: Cannot find comment","text":"<pre><code>Should not happen!\nPlease inform the author if you encounter this problem.\n</code></pre>"},{"location":"user-guide/user-interface/menu-bar/jump/problems-list.html#problem-cannot-find-references","title":"Problem: Cannot find references","text":"<pre><code>Description:\n        The current item is marked as referenced from other place(s) in the\n        program, but IDA cannot find any reference to it.\n\n Possible reason(s):\n        The database is corrupt.\n</code></pre> <p>What to do: Database is corrupt, the best thing to do is to reload the database.</p>"},{"location":"user-guide/user-interface/menu-bar/jump/problems-list.html#problem-indirect-execution-flow","title":"Problem: Indirect execution flow","text":"<pre><code>Description:\n        Actually, this is not a problem. IDA warns you\n        that here it encountered an indirect jump and\n        couldn't follow the execution.\n\n What to do:\n        Nothing, this entry is just for your information\n</code></pre>"},{"location":"user-guide/user-interface/menu-bar/jump/problems-list.html#problem-cannot-disassemble","title":"Problem: Cannot disassemble","text":"<pre><code>Description:\n        IDA cannot represent the specified bytes as an instruction.\n</code></pre> <p>Possible reason(s):</p> <ol> <li>The specified bytes do not form an instruction.</li> <li>The current processor type is incorrect. What to do: If you are sure that the specified bytes contain an instruction, you can try to change processor type and mark these bytes as an instruction using the following command: Convert to instruction</li> </ol>"},{"location":"user-guide/user-interface/menu-bar/jump/problems-list.html#problem-already-data-or-code","title":"Problem: Already data or code","text":"<p>Description: IDA cannot convert this byte(s) to an instruction or data because it would overlap another instruction. What to do: Make the following overlapping instruction or data 'unexplored' using undefine command.</p>"},{"location":"user-guide/user-interface/menu-bar/jump/problems-list.html#problem-execution-flows-beyond-limits","title":"Problem: Execution flows beyond limits","text":"<p>Description: IDA encountered a jump or call instruction to an illegal address. Namely:</p> <ul> <li>jump/call beyond program segments</li> <li> <p>near jump/call beyond the current segment What to do:</p> </li> <li> <p>Enter the operand manually</p> </li> <li>or Create a new segment making the illegal address legal</li> <li> <p>or Change the current segment bounds using one of the following:</p> </li> <li> <p>How to change segment attributes</p> </li> <li>How to move a segment</li> </ul>"},{"location":"user-guide/user-interface/menu-bar/jump/problems-list.html#problem-too-many-lines","title":"Problem: Too many lines","text":"<pre><code> Description:\n        The current item (instruction or data) occupies more lines\n        on the screen than it is allowed by the current configuration.\n</code></pre> <p>What to do:</p> <ol> <li>If the current item is an array or String literal, try to divide it. or </li> <li>Delete Additional comment lines or </li> <li>Disable cross-references display or 4. Increase the limit in IDA.CFG, the parameter name is MAX_ITEM_LINES.</li> </ol>"},{"location":"user-guide/user-interface/menu-bar/jump/problems-list.html#problem-failed-to-trace-the-value-of-the-stack-pointer","title":"Problem: Failed to trace the value of the stack pointer","text":"<pre><code>Description:\n        The value of the stack pointer at the end of the function is different\n        from its value at the start of the function. IDA checks for the\n        difference only if the function is ended by a \"return\" instruction.\n        The most probable cause is that stack tracing has failed.\n        This problem is displayed in the disassembly listing with\n        the \"sp-analysis failed\" comment.\n</code></pre> <p>What to do:</p> <ol> <li>Examine the value of stack pointer at various locations of the function and try to find out why the stack tracing has failed. Usually, it fails because some called function changed the stack pointer (by purging the input parameters, for example)</li> <li>If you have found the offending function, change its attributes (namely, number of bytes purged upon return).</li> <li>Another way is to specify manually how the stack pointer is modified. See Change stack pointer command</li> </ol>"},{"location":"user-guide/user-interface/menu-bar/jump/problems-list.html#problem-attention-probably-erroneous-situation","title":"Problem: Attention! Probably erroneous situation","text":"<pre><code>Description:\n        This is a generic problem message. IDA uses it when no more detailed\n        information is available or the problem is processor-specific.\n</code></pre>"},{"location":"user-guide/user-interface/menu-bar/jump/problems-list.html#problem-decision-to-convert-to-instructiondata-is-made-by-ida","title":"Problem: Decision to convert to instruction/data is made by IDA","text":"<pre><code> Description:\n        In fact, this is not exactly a problem: IDA collects all the locations\n        where it has decided to convert undefined bytes to\n        instructions or data even if they don't have\n        any references to them. We consider this decision as dangerous\n        and therefore we provide you with a way to examine all such places.\n\n What to do:\n        Examine the result of conversion and modify the instructions\n        or data if IDA has made a wrong conversion.\n\n</code></pre>"},{"location":"user-guide/user-interface/menu-bar/jump/problems-list.html#problem-the-decision-made-by-ida-was-wrong-and-rolled-back","title":"Problem: The decision made by IDA was wrong and rolled back","text":"<pre><code> Description:\n        This problem occurs when IDA has converted unexplored bytes to\n        instruction(s) and later found that the decision was wrong.\n        For example:\n\n                mov     ax, bx\n                db 0FFh, 0FFh\n\n        0FFh, 0FFh cannot be converted to an instruction, therefore\n        the \"mov\" instruction cannot be here.\n\n        In this case, IDA automatically destroys the instruction(s)\n        and enlists the address as problematic.\n\n What to do:\n        Examine the end result and modify it accordingly.\n</code></pre>"},{"location":"user-guide/user-interface/menu-bar/jump/problems-list.html#flirt-collision-the-function-with-the-given-name-already-exists","title":"FLIRT collision: the function with the given name already exists","text":"<pre><code>Description:\n        It means that IDA recognized the function as coming\n        from a standard library but there already was another function\n        with the same name in the program.\n\n What to do:\n        Examine the function and rename it as you wish.\n</code></pre>"},{"location":"user-guide/user-interface/menu-bar/jump/problems-list.html#flirt-match-indecision-reference-to-function-expected","title":"FLIRT match indecision: reference to function expected","text":"<pre><code> Description:\n        IDA matched code bytes against at least one\n        signature entry, but failed finding expected\n        cross-references at certain offsets in the code.\n\n        Consider the following .pat file contents:\n\n                5589E583EC18A1........890424E8........C9C3...................... 00 0000 0015 :0000 _test ^000F _my_fun0\n                5589E583EC18A1........890424E8........C9C3...................... 00 0000 0015 :0000 _smuk ^000F _my_fun1\n\n        Now, turn that .pat file into a signature (.sig) file, telling\n        sigmake to include function references into signature\n        (using the -r switch).\n        Then, apply that .sig file to a binary that you are\n        examining.\n        If IDA recognizes the 0x15-bytes long pattern in the binary, it\n        will check that, at offset 0xF from the start of the match,\n        a call to either \"_my_fun0\" or \"_my_fun1\" is performed.\n\n        If either one of the two is found, then that code will\n        be named \"test\", or \"smuk\", respectively.\n        Otherwise, a SIGFNREF problem will be signalled.\n\n What to do:\n        Examine the code pointed to by the address at the given\n        offset (i.e., 0xF) and try and determine whether\n        that function could be \"_my_fun0\", or \"_my_fun1\".\n        If so, name it accordingly and re-apply the signature.\n\n        An alternative is to generate the signature (.sig)\n        file without the cross-references to functions\n        (i.e., dropping the '-r' switch).\n        But beware of collisions: a pattern like the\n        one above will inevitably create a collision, since the\n        pattern bytes are similar for the two entries.\n</code></pre>"},{"location":"user-guide/user-interface/menu-bar/options/low-and-high-suspicious-operand-limits.html","title":"Low &amp; High Suspicious Operand Limits","text":"<p>If IDA suspects that an operand can be represented as something different from a plain number, it will mark the operand as \"suspicious\" and display it in red/orange.</p> <p>Two values control the definition of suspiciousness. An operand is 'suspicious' if it has an immediate value between low and high 'suspicious' limits. The comparison is always unsigned, i.e. in the instruction</p> <pre><code>        mov ax,[bp-2]\n\n  the immediate operand is 0xFFFE, not -2.\n</code></pre> <p>IDA uses a simple heuristic to determine initial suspiciousness limits. You may change these limits any time you want.</p> <p>See also</p> <ul> <li>Comments Dialog</li> <li>How to Enter a Number.</li> </ul>"},{"location":"user-guide/user-interface/menu-bar/search/regular-expression-syntax-summary.html","title":"Regular expression syntax summary","text":""},{"location":"user-guide/user-interface/menu-bar/search/regular-expression-syntax-summary.html#regular-expression-syntax-summary","title":"REGULAR EXPRESSION SYNTAX SUMMARY","text":"<p>The full syntax and semantics of the regular expressions that are supported by PCRE2 are described in the pcre2pattern documentation. This document contains a quick-reference summary of the syntax.</p> <p>QUOTING</p> <pre><code>  \\x         where x is non-alphanumeric is a literal x\n  \\Q...\\E    treat enclosed characters as literal\n</code></pre> <p>ESCAPED CHARACTERS</p> <p>This table applies to ASCII and Unicode environments.</p> <pre><code>  \\a         alarm, that is, the BEL character (hex 07)\n  \\cx        \"control-x\", where x is any ASCII printing character\n  \\e         escape (hex 1B)\n  \\f         form feed (hex 0C)\n  \\n         newline (hex 0A)\n  \\r         carriage return (hex 0D)\n  \\t         tab (hex 09)\n  \\0dd       character with octal code 0dd\n  \\ddd       character with octal code ddd, or backreference\n  \\o{ddd..}  character with octal code ddd..\n  \\U         \"U\" if PCRE2_ALT_BSUX is set (otherwise is an error)\n  \\uhhhh     character with hex code hhhh (if PCRE2_ALT_BSUX is set)\n  \\xhh       character with hex code hh\n  \\x{hhh..}  character with hex code hhh..\n</code></pre> <p>Note that \\0dd is always an octal code. The treatment of backslash followed by a non-zero digit is complicated; for details see the section \\\"Non-printing characters\\\" in the pcre2pattern documentation, where details of escape processing in EBCDIC environments are also given.</p> <p>When \\x is not followed by {, from zero to two hexadecimal digits are read, but if PCRE2_ALT_BSUX is set, \\x must be followed by two hexadecimal digits to be recognized as a hexadecimal escape; otherwise it matches a literal \\\"x\\\". Likewise, if \\u (in ALT_BSUX mode) is not followed by four hexadecimal digits, it matches a literal \\\"u\\\".</p> <p>CHARACTER TYPES</p> <pre><code>  .          any character except newline;\n               in dotall mode, any character whatsoever\n  \\C         one code unit, even in UTF mode (best avoided)\n  \\d         a decimal digit\n  \\D         a character that is not a decimal digit\n  \\h         a horizontal white space character\n  \\H         a character that is not a horizontal white space character\n  \\N         a character that is not a newline\n  \\p{xx}     a character with the xx property\n  \\P{xx}     a character without the xx property\n  \\R         a newline sequence\n  \\s         a white space character\n  \\S         a character that is not a white space character\n  \\v         a vertical white space character\n  \\V         a character that is not a vertical white space character\n  \\w         a \"word\" character\n  \\W         a \"non-word\" character\n  \\X         a Unicode extended grapheme cluster\n</code></pre> <p>\\C is dangerous because it may leave the current matching point in the middle of a UTF-8 or UTF-16 character. The application can lock out the use of \\C by setting the PCRE2_NEVER_BACKSLASH_C option. It is also possible to build PCRE2 with the use of \\C permanently disabled.</p> <p>By default, \\d, \\s, and \\w match only ASCII characters, even in UTF-8 mode or in the 16-bit and 32-bit libraries. However, if locale-specific matching is happening, \\s and \\w may also match characters with code points in the range 128-255. If the PCRE2_UCP option is set, the behaviour of these escape sequences is changed to use Unicode properties and they match many more characters.</p> <p>GENERAL CATEGORY PROPERTIES FOR \\p and \\P</p> <pre><code>  C          Other\n  Cc         Control\n  Cf         Format\n  Cn         Unassigned\n  Co         Private use\n  Cs         Surrogate\n\n  L          Letter\n  Ll         Lower case letter\n  Lm         Modifier letter\n  Lo         Other letter\n  Lt         Title case letter\n  Lu         Upper case letter\n  L&amp;         Ll, Lu, or Lt\n\n  M          Mark\n  Mc         Spacing mark\n  Me         Enclosing mark\n  Mn         Non-spacing mark\n\n  N          Number\n  Nd         Decimal number\n  Nl         Letter number\n  No         Other number\n\n  P          Punctuation\n  Pc         Connector punctuation\n  Pd         Dash punctuation\n  Pe         Close punctuation\n  Pf         Final punctuation\n  Pi         Initial punctuation\n  Po         Other punctuation\n  Ps         Open punctuation\n\n  S          Symbol\n  Sc         Currency symbol\n  Sk         Modifier symbol\n  Sm         Mathematical symbol\n  So         Other symbol\n\n  Z          Separator\n  Zl         Line separator\n  Zp         Paragraph separator\n  Zs         Space separator\n</code></pre> <p>PCRE2 SPECIAL CATEGORY PROPERTIES FOR \\p and \\P</p> <pre><code>  Xan        Alphanumeric: union of properties L and N\n  Xps        POSIX space: property Z or tab, NL, VT, FF, CR\n  Xsp        Perl space: property Z or tab, NL, VT, FF, CR\n  Xuc        Univerally-named character: one that can be\n               represented by a Universal Character Name\n  Xwd        Perl word: property Xan or underscore\n</code></pre> <p>Perl and POSIX space are now the same. Perl added VT to its space character set at release 5.18.</p> <p>SCRIPT NAMES FOR \\p AND \\P</p> <p>Ahom, Anatolian_Hieroglyphs, Arabic, Armenian, Avestan, Balinese, Bamum, Bassa_Vah, Batak, Bengali, Bopomofo, Brahmi, Braille, Buginese, Buhid, Canadian_Aboriginal, Carian, Caucasian_Albanian, Chakma, Cham, Cherokee, Common, Coptic, Cuneiform, Cypriot, Cyrillic, Deseret, Devanagari, Duployan, Egyptian_Hieroglyphs, Elbasan, Ethiopic, Georgian, Glagolitic, Gothic, Grantha, Greek, Gujarati, Gurmukhi, Han, Hangul, Hanunoo, Hatran, Hebrew, Hiragana, Imperial_Aramaic, Inherited, Inscriptional_Pahlavi, Inscriptional_Parthian, Javanese, Kaithi, Kannada, Katakana, Kayah_Li, Kharoshthi, Khmer, Khojki, Khudawadi, Lao, Latin, Lepcha, Limbu, Linear_A, Linear_B, Lisu, Lycian, Lydian, Mahajani, Malayalam, Mandaic, Manichaean, Meetei_Mayek, Mende_Kikakui, Meroitic_Cursive, Meroitic_Hieroglyphs, Miao, Modi, Mongolian, Mro, Multani, Myanmar, Nabataean, New_Tai_Lue, Nko, Ogham, Ol_Chiki, Old_Hungarian, Old_Italic, Old_North_Arabian, Old_Permic, Old_Persian, Old_South_Arabian, Old_Turkic, Oriya, Osmanya, Pahawh_Hmong, Palmyrene, Pau_Cin_Hau, Phags_Pa, Phoenician, Psalter_Pahlavi, Rejang, Runic, Samaritan, Saurashtra, Sharada, Shavian, Siddham, SignWriting, Sinhala, Sora_Sompeng, Sundanese, Syloti_Nagri, Syriac, Tagalog, Tagbanwa, Tai_Le, Tai_Tham, Tai_Viet, Takri, Tamil, Telugu, Thaana, Thai, Tibetan, Tifinagh, Tirhuta, Ugaritic, Vai, Warang_Citi, Yi.</p> <p>CHARACTER CLASSES</p> <pre><code>  [...]       positive character class\n  [^...]      negative character class\n  [x-y]       range (can be used for hex characters)\n  [[:xxx:]]   positive POSIX named set\n  [[:^xxx:]]  negative POSIX named set\n\n  alnum       alphanumeric\n  alpha       alphabetic\n  ascii       0-127\n  blank       space or tab\n  cntrl       control character\n  digit       decimal digit\n  graph       printing, excluding space\n  lower       lower case letter\n  print       printing, including space\n  punct       printing, excluding alphanumeric\n  space       white space\n  upper       upper case letter\n  word        same as \\w\n  xdigit      hexadecimal digit\n</code></pre> <p>In PCRE2, POSIX character set names recognize only ASCII characters by default, but some of them use Unicode properties if PCRE2_UCP is set. You can use \\Q...\\E inside a character class.</p> <p>QUANTIFIERS</p> <pre><code>  ?           0 or 1, greedy\n  ?+          0 or 1, possessive\n  ??          0 or 1, lazy\n  *           0 or more, greedy\n  *+          0 or more, possessive\n  *?          0 or more, lazy\n  +           1 or more, greedy\n  ++          1 or more, possessive\n  +?          1 or more, lazy\n  {n}         exactly n\n  {n,m}       at least n, no more than m, greedy\n  {n,m}+      at least n, no more than m, possessive\n  {n,m}?      at least n, no more than m, lazy\n  {n,}        n or more, greedy\n  {n,}+       n or more, possessive\n  {n,}?       n or more, lazy\n</code></pre> <p>ANCHORS AND SIMPLE ASSERTIONS</p> <pre><code>  \\b          word boundary\n  \\B          not a word boundary\n  ^           start of subject\n                also after an internal newline in multiline mode\n                (after any newline if PCRE2_ALT_CIRCUMFLEX is set)\n  \\A          start of subject\n  $           end of subject\n                also before newline at end of subject\n                also before internal newline in multiline mode\n  \\Z          end of subject\n                also before newline at end of subject\n  \\z          end of subject\n  \\G          first matching position in subject\n</code></pre> <p>MATCH POINT RESET</p> <pre><code>  \\K          reset start of match\n</code></pre> <p>\\K is honoured in positive assertions, but ignored in negative ones.</p> <p>ALTERNATION</p> <pre><code>  expr|expr|expr...\n</code></pre> <p>CAPTURING</p> <pre><code>  (...)           capturing group\n  (?&lt;name&gt;...)    named capturing group (Perl)\n  (?'name'...)    named capturing group (Perl)\n  (?P&lt;name&gt;...)   named capturing group (Python)\n  (?:...)         non-capturing group\n  (?|...)         non-capturing group; reset group numbers for\n                   capturing groups in each alternative\n</code></pre> <p>ATOMIC GROUPS</p> <pre><code>  (?&gt;...)         atomic, non-capturing group\n</code></pre> <p>COMMENT</p> <pre><code>  (?#....)        comment (not nestable)\n</code></pre> <p>OPTION SETTING</p> <pre><code>  (?i)            caseless\n  (?J)            allow duplicate names\n  (?m)            multiline\n  (?s)            single line (dotall)\n  (?U)            default ungreedy (lazy)\n  (?x)            extended (ignore white space)\n  (?-...)         unset option(s)\n</code></pre> <p>The following are recognized only at the very start of a pattern or after one of the newline or \\R options with similar syntax. More than one of them may appear. (*LIMIT_MATCH=d) set the match limit to d (decimal number)</p> <pre><code>  (*LIMIT_RECURSION=d) set the recursion limit to d (decimal number)\n  (*NOTEMPTY)     set PCRE2_NOTEMPTY when matching\n  (*NOTEMPTY_ATSTART) set PCRE2_NOTEMPTY_ATSTART when matching\n  (*NO_AUTO_POSSESS) no auto-possessification (PCRE2_NO_AUTO_POSSESS)\n  (*NO_DOTSTAR_ANCHOR) no .* anchoring (PCRE2_NO_DOTSTAR_ANCHOR)\n  (*NO_JIT)       disable JIT optimization\n  (*NO_START_OPT) no start-match optimization (PCRE2_NO_START_OPTIMIZE)\n  (*UTF)          set appropriate UTF mode for the library in use\n  (*UCP)          set PCRE2_UCP (use Unicode properties for \\d etc)\n</code></pre> <p>Note that LIMIT_MATCH and LIMIT_RECURSION can only reduce the value of the limits set by the caller of pcre2_match(), not increase them. The application can lock out the use of (*UTF) and (*UCP) by setting the PCRE2_NEVER_UTF or PCRE2_NEVER_UCP options, respectively, at compile time.</p> <p>NEWLINE CONVENTION</p> <p>These are recognized only at the very start of the pattern or after option settings with a similar syntax.</p> <pre><code>  (*CR)           carriage return only\n  (*LF)           linefeed only\n  (*CRLF)         carriage return followed by linefeed\n  (*ANYCRLF)      all three of the above\n  (*ANY)          any Unicode newline sequence\n</code></pre> <p>WHAT \\R MATCHES</p> <p>These are recognized only at the very start of the pattern or after option setting with a similar syntax.</p> <pre><code>  (*BSR_ANYCRLF)  CR, LF, or CRLF\n  (*BSR_UNICODE)  any Unicode newline sequence\n</code></pre> <p>LOOKAHEAD AND LOOKBEHIND ASSERTIONS</p> <pre><code>  (?=...)         positive look ahead\n  (?!...)         negative look ahead\n  (?&lt;=...)        positive look behind\n  (?&lt;!...)        negative look behind\n</code></pre> <p>Each top-level branch of a look behind must be of a fixed length.</p> <p>BACKREFERENCES</p> <pre><code>  \\n              reference by number (can be ambiguous)\n  \\gn             reference by number\n  \\g{n}           reference by number\n  \\g{-n}          relative reference by number\n  \\k&lt;name&gt;        reference by name (Perl)\n  \\k'name'        reference by name (Perl)\n  \\g{name}        reference by name (Perl)\n  \\k{name}        reference by name (.NET)\n  (?P=name)       reference by name (Python)\n</code></pre> <p>SUBROUTINE REFERENCES (POSSIBLY RECURSIVE)</p> <pre><code>  (?R)            recurse whole pattern\n  (?n)            call subpattern by absolute number\n  (?+n)           call subpattern by relative number\n  (?-n)           call subpattern by relative number\n  (?&amp;name)        call subpattern by name (Perl)\n  (?P&gt;name)       call subpattern by name (Python)\n  \\g&lt;name&gt;        call subpattern by name (Oniguruma)\n  \\g'name'        call subpattern by name (Oniguruma)\n  \\g&lt;n&gt;           call subpattern by absolute number (Oniguruma)\n  \\g'n'           call subpattern by absolute number (Oniguruma)\n  \\g&lt;+n&gt;          call subpattern by relative number (PCRE2 extension)\n  \\g'+n'          call subpattern by relative number (PCRE2 extension)\n  \\g&lt;-n&gt;          call subpattern by relative number (PCRE2 extension)\n  \\g'-n'          call subpattern by relative number (PCRE2 extension)\n</code></pre> <p>CONDITIONAL PATTERNS</p> <pre><code>  (?(condition)yes-pattern)\n  (?(condition)yes-pattern|no-pattern)\n\n  (?(n)               absolute reference condition\n  (?(+n)              relative reference condition\n  (?(-n)              relative reference condition\n  (?(&lt;name&gt;)          named reference condition (Perl)\n  (?('name')          named reference condition (Perl)\n  (?(name)            named reference condition (PCRE2)\n  (?(R)               overall recursion condition\n  (?(Rn)              specific group recursion condition\n  (?(R&amp;name)          specific recursion condition\n  (?(DEFINE)          define subpattern for reference\n  (?(VERSION[&gt;]=n.m)  test PCRE2 version\n  (?(assert)          assertion condition\n</code></pre> <p>BACKTRACKING CONTROL</p> <p>The following act immediately they are reached:</p> <pre><code>  (*ACCEPT)       force successful match\n  (*FAIL)         force backtrack; synonym (*F)\n  (*MARK:NAME)    set name to be passed back; synonym (*:NAME)\n</code></pre> <p>The following act only when a subsequent match failure causes a backtrack to reach them. They all force a match failure, but they differ in what happens afterwards. Those that advance the start-of-match point do so only if the pattern is not anchored. (*COMMIT) overall failure, no advance of starting point</p> <pre><code>  (*PRUNE)        advance to next starting character\n  (*PRUNE:NAME)   equivalent to (*MARK:NAME)(*PRUNE)\n  (*SKIP)         advance to current matching position\n  (*SKIP:NAME)    advance to position corresponding to an earlier\n                  (*MARK:NAME); if not found, the (*SKIP) is ignored\n  (*THEN)         local failure, backtrack to next alternation\n  (*THEN:NAME)    equivalent to (*MARK:NAME)(*THEN)\n</code></pre> <p>CALLOUTS</p> <pre><code>  (?C)            callout (assumed number 0)\n  (?Cn)           callout with numerical data n\n  (?C\"text\")      callout with string data\n</code></pre> <p>The allowed string delimiters are ` \\' \\\" \\^ % # \\$ (which are the same for the start and the end), and the starting delimiter { matched with the ending delimiter }. To encode the ending delimiter within the string, double it.</p>"},{"location":"user-guide/user-interface/menu-bar/view/arrows-window.html","title":"Arrows window","text":"<p>There is a small window with arrows on the left of the disassembly. These arrows represent the execution flow, namely the branch and jump instructions. The arrow color can be:</p> <pre><code>        - red: means that the arrow source and destination do not\n        belong to the same function. Usually, the branches are\n        within functions and the red color will conspicuously\n        represent branches from or to different functions.\n        - black: the currently selected arrow. The selection\n        is made by moving to the beginning or the end of the\n        arrow using the Up or Down keys or left-clicking on the arrow\n        start or the arrow end. The selection is\n        not changed by pressing the PageUp, PageDown, Home, End keys or using\n        the scrollbar. This allows to trace the selected arrow far away.\n        - grey: all other arrows\n</code></pre> <p>The arrow thickness can be:</p> <pre><code>        - thick: a backward arrow. Backward arrows usually represent\n        loops. Thick arrows represent the loops in a clear and\n        notable manner.\n        - thin: forward arrows.\n</code></pre> <p>Finally, the arrows can be solid or dotted. The dotted arrows represent conditional branches when the solid arrows represent unconditional branches.</p> <p>You can resize the arrows window using a vertical splitter or even fully hide it. If it is hidden, the arrows window will not be visible on the screen but you can reveal it by dragging the splitter to the right. IDA remembers the current arrow window size in the registry when you close the disassembly window.</p> <p></p>"},{"location":"user-guide/user-interface/menu-bar/view/assembler-level-and-c-level-types.html","title":"Assembler level and C level types","text":"<p>In order to provide intuitive yet powerful interface to types IDA introduces two kinds of types:</p> <pre><code>  - Assembler level types\n  - C level types\n</code></pre> <p>Assembler level types are the ones defined by the user using the Struct or Types views.</p> <p>Since the user has to specify manually the member offset and other attributes, IDA considers the member offsets to be fixed for them and never shifts members of such types. If a member of struct becomes too big and does not fit the struct anymore, IDA will delete it.</p> <p>The types defined in the Local types window are considered as C level types. For them IDA automatically calculates the member offsets and if necessary may shift members and change the total struct size.</p> <p>The user may change the type level by simply editing the type from the appropriate window. For example, if a C level type is edited from the Struct view, IDA will consider such a type as an Assembler level type in the future.</p> <pre><code> In the struct/enum view:\n  Assembler level types are displayed using regular colors.\n  C level types are displayed in gray, as if they are disabled (but they are not).\n\n In the local types view:\n  C level types are displayed using regular colors.\n  Assembler level types are displayed in gray, as if they are disabled (but they are not).\n</code></pre>"},{"location":"user-guide/user-interface/menu-bar/view/bookmarks-window.html","title":"Bookmarks window","text":"<pre><code> Action    name: OpenBookmarks\n\n</code></pre> <p>This command opens the bookmarks window. This window lets the user jump to a specific place in the listing.</p>"},{"location":"user-guide/user-interface/menu-bar/view/browser-options.html","title":"Browser options","text":"<p>This tab of IDA Options dialog allows for editing of hint and identifier highlight related settings. There are two groups of settings.</p> <p>The first group is for hints that are displayed when the mouse is hovered over some text.</p> <p>The second group is for highlighting.</p> <p>Number of lines for identifier hints</p> <pre><code>        Specifies how tall the hint window will be initially.\n        IDA may decide to display less lines than specified if the hint is\n        small. The user can resize the hint window using the mouse wheel.\n</code></pre> <p>Delay for identifier hints</p> <pre><code>        Milliseconds that pass before the hint appears when the user\n        hovers the mouse pointer over an identifier\n</code></pre> <p>Mouse wheel resizes hint window</p> <pre><code>        Permit to resize the hint window by using the mouse wheel.\n        Can be turned off if the user does not want to resize the hints.\n</code></pre> <p>No hints if debugger is active</p> <pre><code>        Hints will be disabled when the debugger is active. This may be\n        useful to speed of debugging: calculating hints for zero filled\n        ranges can be very expensive\n</code></pre> <p>Auto highlight the current identifier</p> <pre><code>        Highlight the current identifier everywhere on the screen.\n        IDA tries to determine if the current identifier denotes a register.\n        In this case it will highlight references to other parts of the\n        register. For example, if \"AL\" is highlighted, IDA will also highlight\n        \"AH\", \"AX\", and \"EAX\" (if the current processor is x86).\n</code></pre> <p>Unhide collapsed items automatically when jumping to them (gui only)</p> <pre><code>        If this option is set on, IDA will automatically\n        uncollapse hidden functions if the user decides to jump\n        to them. As soon as the user quits the function by pressing\n        Esc, the function is automatically collapsed again.\n</code></pre> <p>Lazy jumps (gui only)</p> <pre><code>        If this option is set on, IDA will not redraw the\n        disassembly window if the jump target is already on the screen.\n        In this case, it will just move the cursor to the specified\n        address. This option leads to less screen redraws and\n        less jumpy behaviour.\n</code></pre> <p>Number of items in navigation stack drop-down menus</p> <pre><code>        Specifies the number of entries in the drop-down menu for the 'Jump'\n        toolbar\n</code></pre> <p>Number of lines for auto scroll</p> <pre><code>        Specifies how many lines force automatic scrolling of the\n        disassembly view\n</code></pre> <p>Caret blinking interval</p> <pre><code>        Specifies how fast the input caret blinks (in milleseconds).\n        Must be greater than or equal to 500, or zero.\n        Zero means to disable blinking\n</code></pre>"},{"location":"user-guide/user-interface/menu-bar/view/c%2B%2B-type-details.html","title":"C++ type details","text":"<p>IDA can parse and handle simple C++ class declarations. It cannot parse templates and other complex constructs but simple standard cases can be parsed.</p> <p>If a C++ class contains virtual functions, IDA will try to rebuild the virtual function table (VFT) for the class. The VFT will be linked to the class by the name: if the class is called \"A\", the VFT type will be \"A_vtbl\".</p> <p>Let us consider the following class hierarchy:</p> <pre><code>  class A { virtual int f(); int data; };\n  class B : public A { virtual int g(); };\n</code></pre> <p>IDA will create the following structures:</p> <pre><code>  struct __cppobj A {A_vtbl *__vftable;int data;}\n  struct A_vtbl {int (*f)(A *__hidden this);}\n  struct __cppobj B : A {}\n  struct B_vtbl {int (*f)(A *__hidden this);\n                 int (*g)(B *__hidden this);}\n</code></pre> <p>Please note that the VFT pointer in the class A has a special name: \"__vftable\". This name allows IDA to recognize the pointer as a VFT pointer and treat it accordingly.</p> <p>Another example of more complex class hierarchy:</p> <pre><code>  class base1 { virtual int b1(); int data; };\n  class base2 { virtual int b2(); int data; };\n  class der2 : public base2 { virtual int b2(); int data; };\n  class derived : public base1, public der2 { virtual int d(); };\n</code></pre> <p>Compiling in 32-bit Visual Studio mode yields the following layout:</p> <pre><code>  class derived size(20):\n        +---\n   0    | +--- (base class base1)\n   0    | | {vfptr}\n   4    | | data\n        | +---\n   8    | +--- (base class der2)\n   8    | | +--- (base class base2)\n   8    | | | {vfptr}\n  12    | | | data\n        | | +---\n  16    | | data\n        | +---\n        +---\n</code></pre> <p>IDA will generate the following types:</p> <pre><code>  struct __cppobj base1 {base1_vtbl *__vftable /*VFT*/;int data;};\n  struct /*VFT*/ base1_vtbl {int (*b1)(base1 *__hidden this);};\n  struct __cppobj base2 {base2_vtbl *__vftable /*VFT*/;int data;};\n  struct /*VFT*/ base2_vtbl {int (*b2)(base2 *__hidden this);};\n  struct __cppobj der2 : base2 {int data;};\n  struct /*VFT*/ der2_vtbl {int (*b2)(der2 *__hidden this);};\n  struct __cppobj derived : base1, der2 {};\n  struct /*VFT*/ derived_vtbl {int (*b1)(base1 *__hidden this);\n                               int (*d)(derived *__hidden this);};\n</code></pre> <p>The 'derived' class will use 2 VFTs:</p> <pre><code>  offset 0: derived_vtbl\n  offset 8: der2_vtbl\n</code></pre> <p>IDA and Decompiler can use both VFTs and produce nice code for virtual calls.</p> <p>Please note that the VFT layout will be different in g++ mode and IDA can handle it too. Therefore it is important to have the target compiler set correctly.</p> <p>It is possible to build the class hierarchy manually. Just abide by the following rules:</p> <pre><code>  - VFT pointer must have the \"__vftable\" name\n  - VFT type must follow the \"CLASSNAME_vtbl\" pattern\n</code></pre> <p>C++ classes are marked with \"__cppobj\" keyword, it influences the class layout. However, this keyword is not required for VFT types.</p> <p>In the case of a multiple inheritance it is possible to override a virtual table for a secondary base class by declaring a type with the following name: \"CLASSNAME_XXXX_vtbl\" where XXXX is the offset to the virtual table inside the derived (CLASSNAME) class.</p> <p>Example: if in the above example we add one more function</p> <pre><code>        virtual int derived::b2();\n</code></pre> <p>then we need one more virtual table. Its name must be \"derived_0008_vtbl\". Please note that our parser does not create such vtables, you have to do it manually. See also Local types window.</p>"},{"location":"user-guide/user-interface/menu-bar/view/calculator.html","title":"Calculator","text":"<pre><code>    Action    name: Calculate\n</code></pre> <p>A simple calculator is provided. You can enter constant C-style expressions. Syntax of the expressions is the same is the syntax of IDC expressions. The result is displayed in the message window in three forms: hexadecimal, decimal and character.  All the names created during a disassembly may be used in these expressions. IDA can also pick up the name or number under the cursor and to store it into the input line. </p> <p>See also:  - View submenu - How to Enter a Number</p>"},{"location":"user-guide/user-interface/menu-bar/view/database-snapshot-manager.html","title":"Database snapshot manager","text":"<pre><code> Action    name: ShowSnapMan\n\n</code></pre> <p>This command shows the database snapshot manager. In this dialog, it is possible to restore previously saved snapshots, rename or delete them.</p> <p>Note: snapshots work only with regular databases. Unpacked databases do not support them.</p> <p>See also Take database snapshot commands.</p>"},{"location":"user-guide/user-interface/menu-bar/view/del-hidden-range.html","title":"Del hidden range","text":"<pre><code> Action    name: DelHiddenRange\n\n</code></pre> <p>This command allows you to delete a hidden range of disassembly (previously defined by using the hide command).</p> <p>See also hide command.</p> <p>See also Edit|View submenu</p>"},{"location":"user-guide/user-interface/menu-bar/view/graphs.html","title":"Graphs submenu","text":"<p>Here are commands to draw various graphs:</p> <ul> <li>Display function flow-chart</li> <li>Display function call graph</li> <li>Display chart of xrefs to addresses</li> <li>Display chart of xrefs from addresses</li> <li>Display user-defined chart of xrefs </li> </ul> <p>IDA uses an external program to display graphs. The program name is wingraph32.exe and it is located in the current directory.</p> <p>The user can change the name of this program using the GRAPH_VISUALIZER parameter in the IDA.CFG file.</p> <p>The user can zoom the graph and move it around the window.</p> <p>See also View submenu.</p>"},{"location":"user-guide/user-interface/menu-bar/view/graphs.html#display-function-flow-chart","title":"Display function flow-chart","text":"<pre><code>Action    name: GraphFunc\n\n</code></pre> <p>This command displays the flow chart of the current function.</p> <p>The colored edges of the flow chart represent the outcome of conditional jump instructions. Green means that the condition is satisfied, red means not satisfied.</p>"},{"location":"user-guide/user-interface/menu-bar/view/graphs.html#display-function-call-graph","title":"Display function call graph","text":"<pre><code>Action    name: CallFlow\n\n</code></pre> <p>This command displays the graph of all function calls in the program.</p> <p>The functions are represented as nodes. The calls are represented as edges between nodes. Instructions outside functions are ignored.</p>"},{"location":"user-guide/user-interface/menu-bar/view/graphs.html#display-chart-of-xrefs-to-addresses","title":"Display chart of xrefs to addresses","text":"<pre><code>Action    name: ChartXrefsTo\n\n</code></pre> <p>This command displays the graph of code and data xrefs to current address/range of selected addresses in the program.</p> <p>The addresses are represented as nodes. The xrefs are represented as edges between nodes.</p>"},{"location":"user-guide/user-interface/menu-bar/view/graphs.html#display-chart-of-xrefs-from-addresses","title":"Display chart of xrefs from addresses","text":"<pre><code>Action    name: ChartXrefsFrom\n\n</code></pre> <p>This command displays the graph of code xrefs from the current address/range of selected addresses in the program.</p> <p>In this direction, data xrefs aren't analyzed to avoid overloaded graphs.</p> <p>The addresses are represented as nodes. The xrefs are represented as edges between nodes.</p>"},{"location":"user-guide/user-interface/menu-bar/view/graphs.html#display-used-defined-chart-of-xrefs","title":"Display used-defined chart of xrefs","text":"<pre><code>Action    name: ChartXrefsUser\n\n</code></pre> <p>This command displays a user-defined graph of xrefs from/to the current address/range of selected addresses in the program.</p> <p>The direction of the xrefs to analyze can be chosen. If the Recursive flag is checked, all found xrefs are themselves analyzed to find new xrefs. You can choose to search for xrefs to new referenced addresses only in the current direction. Only External, data xrefs, xrefs from library functions and to library functions can possibly be ignored.</p> <p>A recursion depth can be specified. If 'Print recursion dots' is checked, and a function has others xrefs outside of the range defined by the 'recursion depth' setting, small nodes containing dots are printed.</p> <p>The 'Print comments' flag causes the generated function node to also contain the function comment.</p> <p>The addresses are represented as nodes. The xrefs are represented as edges between nodes. The used colors are the same as in IDA.</p>"},{"location":"user-guide/user-interface/menu-bar/view/hide-all-items.html","title":"Hide all items","text":"<pre><code> Action    name: HideAll\n\n</code></pre> <p>This command allows you to hide:</p> <ul> <li>all functions and hidden ranges if invoked in the disassembly window</li> </ul> <p>IDA will display only the header of the hidden items.</p> <p>If you want to see hidden items on the screen, you may use unhide command or enable the display of the hidden items.</p> <p>See also Unhide all command.</p> <p>See also Edit|View submenu</p>"},{"location":"user-guide/user-interface/menu-bar/view/hide.html","title":"Hide","text":"<pre><code> Action    name: Hide\n\n</code></pre> <p>This command allows you to hide a part of disassembly. You can hide a function, a segment, or create a special hidden range.</p> <p>If a range is specified, a special hidden range is created on this range.</p> <p>If the cursor is on the segment name at the start of the segment, the segment will be hidden. IDA will display only the header of the hidden segment.</p> <p>If the cursor is on a structure variable and if the target assembler has the 'can display terse structures or the INFFL_ALLASM' bit on, then the structure will be collapsed into one line and displayed in the terse form.</p> <p>Otherwise, the current function will be hidden. IDA will display only the header of the hidden function.</p> <p>If there is no current function then IDA will beep.</p> <p>If you want to see hidden items on the screen, you may use unhide command or enable the display of the hidden items. If you want to delete a previously created hidden range, you may use del hidden range command.</p> <p>See also Edit|View submenu</p>"},{"location":"user-guide/user-interface/menu-bar/view/highlighting-identifiers.html","title":"Highlighting identifiers","text":"<p>In the graphical version, IDA highlights the identifier under the cursor. For example, if the cursor is on the \"EAX\" register, then all occurrences of \"EAX\" will be displayed with the yellow background. This feature is meant to make the program analysis easier by highlighting the interesting parts of the disassembly. For example, if the user wants to see all references to \"EAX\", he just clicks on any \"EAX\" on the screen and all of them will be highlighted.</p> <p>The selection is made by pressing the Up, Down, Left, Right keys or by simply clicking on the identifier.</p> <p>The selection is not changed by pressing the PageUp, PageDown, Home, End keys, using the scrollbar, or pressing the Alt-Up, Alt-Down, Ctrl-Up, Ctrl-Down keys.</p> <p>The Alt-Up and Alt-Down keys perform a search of the currently selected identifier backward or forward respectively.</p> <p>The Ctrl-Up and Ctrl-Down keys scroll the disassembly text.</p> <p>IDA does not highlight the segment names at the line prefix because it is not very useful.</p> <p>It is possible to turn off the highlight. The appropriate checkbox is in the Options, General, Browser tab.</p>"},{"location":"user-guide/user-interface/menu-bar/view/license-manager.html","title":"License manager","text":""},{"location":"user-guide/user-interface/menu-bar/view/license-manager.html#the-license-manager","title":"The license manager","text":"<p>The license manager dialog (Help -&gt; License manager...) lets you pick a license to use IDA with.</p> <p>Depending on your licensing plan (e.g., floating), you may have the possibility to switch between various licenses located on the same license server (but having different sets of add-ons &amp; decompilers, for example)</p> <p>The active license is represented in bold in the list. Double-clicking on a line in the list, will make that license active, and make it the preferred license.</p>"},{"location":"user-guide/user-interface/menu-bar/view/license-manager.html#preferred-license","title":"Preferred license","text":"<p>Doing so will also make it the \"preferred\" license -- that is, it will be remembered for later sessions as being the default license to use.</p>"},{"location":"user-guide/user-interface/menu-bar/view/license-manager.html#borrowing-returning-licenses","title":"Borrowing &amp; returning licenses","text":"<p>When using floating licenses from a server, it is possible to borrow the license for an extended period of time, thereby allowing offline work. Please use the context menu to achieve that.</p>"},{"location":"user-guide/user-interface/menu-bar/view/license-manager.html#license-management-command-line-options","title":"License management command line options","text":"<p>IDA recognizes the <code>-Olicense</code> command-line switch, with the following format:</p> <ol> <li><code>-Olicense:keyfile=&lt;path-to-.hexlic-file&gt;[:setpref]</code></li> <li><code>-Olicense:server[:host=&lt;hostname&gt;][:port=&lt;port&gt;][:lid=&lt;xx-xxxx-xxxx-xx&gt;][:setpref]</code></li> </ol> <p>Where the optional bits are:</p> <code>keyfile</code> Path to the license file <code>host</code> The license server host name <code>port</code> The license server port <code>lid</code> The license ID to use <code>setpref</code> Whether the selected license should be remembered as the prefererred license <p>The command-line switch <code>-Olicense</code> takes precedence over both:</p> <ol> <li>the preferred license information possibly stored in the registry, and</li> <li>the <code>IDA_LICENSE</code> environment variable</li> </ol> <p>NOTE: The <code>-Olicense</code> switch (or <code>IDA_LICENSE</code>) will not, by default, overwrite the \"preferred\" license information in the registry. Specify <code>setpref</code> to achieve that.</p> <p>NOTE: On Windows, the <code>&lt;DriveLetter&gt;:</code> scheme is recognized. Therefore <code>-Olicense:keyfile=C:/tmp/my.hexlic:setpref</code> will work as expected.</p>"},{"location":"user-guide/user-interface/menu-bar/view/license-manager.html#license-management-environment-variable","title":"License management environment variable","text":"<p>Alternatively, the <code>IDA_LICENSE</code> environment variable can be used to specify licensing information, and accepts the same format as the <code>-Olicense</code> option</p> <p>E.g., <code>IDA_LICENSE=server:host=&lt;hostname&gt;:\u2026</code></p>"},{"location":"user-guide/user-interface/menu-bar/view/lumina-options.html","title":"Lumina options","text":""},{"location":"user-guide/user-interface/menu-bar/view/lumina-options.html#lumina-options","title":"Lumina options","text":""},{"location":"user-guide/user-interface/menu-bar/view/lumina-options.html#lumina-dialog-box-options","title":"Lumina dialog box options","text":"<p>This options tab allows for modification of Lumina credentials and use settings.</p> <p>Use the public server</p> <pre><code>        Sets host and port to the default public server hosted by Hex-Rays.\n        No username or password is required.\n</code></pre> <p>Use a private server</p> <pre><code>        Allows for setting the name/address and port of a private server.\n        If username and password credentials are needed, they can be specified here.\n</code></pre> <p>Automatically use Lumina server for analysis</p> <pre><code>        Instructs IDA to fetch function metadata from the current Lumina server,\n        after the initial auto-analysis is complete. This helps with the recognition\n        of known functions stored in the database of the Lumina server.\n</code></pre>"},{"location":"user-guide/user-interface/menu-bar/view/lumina-options.html#lumina-command-line-options","title":"Lumina command line options","text":"<p>Command line switch <code>-Olumina</code> overrides for ida session the primary server and <code>-Osecondary_lumina</code> the secondary one.</p>"},{"location":"user-guide/user-interface/menu-bar/view/lumina-options.html#list-of-options","title":"List of options","text":"<pre><code>         host: lumina server host\n         port: lumina server port\n         user: username for authentification on private lumina\n         pass: password for authentification on private lumina\n         proxy_host: proxy host\n         proxy_port: proxy port\n         proxy_user: username for authentification on proxy\n         proxy_pass: password for authentification on proxy\n</code></pre>"},{"location":"user-guide/user-interface/menu-bar/view/lumina-options.html#example","title":"Example","text":"<pre><code>  -Osecondary_lumina:host=lumina.hex-rays.com:port=443\n</code></pre> <p>Use the public lumina as secondary server for this ida session</p>"},{"location":"user-guide/user-interface/menu-bar/view/open-subviews.html","title":"Open subviews","text":"<p>Here are commands to open various windows, display information etc.</p> <ul> <li>Open disassembly window</li> <li>Open exports window</li> <li>Open imports window</li> <li>Open functions window</li> <li>Open names window</li> <li>Open signatures window</li> <li>Open segments window</li> <li>Open segment registers window</li> <li>Open selectors window</li> <li>Open cross references window</li> <li>Open local types window</li> <li>Open problems window</li> <li>Open type libraries window</li> <li>Open strings window</li> <li>Open function calls window</li> <li>Open notepad</li> <li>Open undo history</li> </ul> <p>Some windows allow you to manipulate the window contents by using the list viewer commands.</p> <p>See also View submenu.</p>"},{"location":"user-guide/user-interface/menu-bar/view/open-subviews.html#disassembly-window","title":"Disassembly window","text":"<pre><code>Action    name: WindowOpen\n\n</code></pre> <p>The \"WindowOpen\" command opens a new window with the disassembly. IDA automatically opens one disassembly window at the start.</p> <p>If the current location is an instruction belonging to a function, then the graph view is available. You can toggle between the text and graph view using the Space key. You can also switch to proximity view by zooming out to the callgraph using the '-' key.</p> <p>Use the disassembly editing commands to improve the listing.</p> <p>Use Shift-\\ or Alt-L to drop anchor. If you have a mouse, you can drop the anchor with it too. <p>A double click of the mouse is equivalent to the \\ key. <p>To the left of disassembly, there is an arrows window (GUI version). Also the GUI version highlights the current identifier.</p>"},{"location":"user-guide/user-interface/menu-bar/view/open-subviews.html#exports-window","title":"Exports window","text":"<pre><code>Action    name: OpenExports\n\n</code></pre> <p>This command opens the exports window.</p> <p>You can use list viewer commands in this window.</p>"},{"location":"user-guide/user-interface/menu-bar/view/open-subviews.html#imports-window","title":"Imports window","text":"<pre><code>Action    name: OpenImports\n\n</code></pre> <p>This command opens the imports window.</p> <p>You can use list viewer commands in this window.</p>"},{"location":"user-guide/user-interface/menu-bar/view/open-subviews.html#functions-window","title":"Functions window","text":"<pre><code> Action    name: OpenFunctions\n\n</code></pre> <p>A list of all functions in the program is displayed. You can add, delete, modify functions using list viewer commands.</p> <p>Listed for each function are:</p> <pre><code>        - function name\n        - segment that contains the function\n        - offset of the function within the segment\n        - function length in bytes\n        - size (in bytes) of local variables + saved registers\n        - size (in bytes) of arguments passed to the function\n</code></pre> <p>The last column of this window has the following format:</p> <pre><code>        R - function returns to the caller\n        F - far function\n        L - library function\n        S - static function\n        B - BP based frame. IDA will automatically convert\n            all frame pointer [BP+xxx] operands to stack\n            variables.\n        T - function has type information\n        = - Frame pointer is equal to the initial stack pointer\n            In this case the frame pointer points to the bottom of the frame\n        M - reserved\n        S - reserved\n        I - reserved\n        C - reserved\n        D - reserved\n        V - reserved\n</code></pre> <p>If a function has its color set, its line is colored using the specified color. Otherwise library and lumina functions are colored with the corresponding color. Otherwise the line is not colored.</p> <p>A bold font is used for functions that have definite (user-specified) prototype. Also some plugins too may set this flag. Such prototypes are taken as is by the decompiler, while other prototypes are considered only as a starting point during decompilation.</p> <p>It is possible to automatically synchronize the function list with the active disassembler, pseudocode, or hex view. For that right click on the function list and select \"Turn on synchronization\".</p>"},{"location":"user-guide/user-interface/menu-bar/view/open-subviews.html#names-window","title":"Names window","text":"<pre><code>Action    name: OpenNames\n\n</code></pre> <p>This command opens the names window.</p> <p>You can use list viewer commands in this window.</p> <p>The GUI version displays a small icon for each name:</p> <pre><code>        L (dark blue)   - library function\n        F (dark blue)   - regular function\n        C (light blue)  - instruction\n        A (dark green)  - string literal\n        D (light green) - data\n        I (purple)      - imported name\n</code></pre>"},{"location":"user-guide/user-interface/menu-bar/view/open-subviews.html#signatures-window","title":"Signatures window","text":"<pre><code> Action    name: OpenSignatures\n\n</code></pre> <p>This command opens the signatures window.</p> <p>For each signature, the following is displayed:</p> <pre><code>        - name of file with the signature\n        - state of signature:\n                - Planned: the signature will be applied\n                - Current: the signature is being applied\n                - Applied: the signature has been applied\n        - number of functions found using the signature\n        - description of the signature\n</code></pre> <p>You can modify the planned signatures list here: add/delete library modules to be used during the disassembling.</p> <p>You cannot delete an applied signature from the list.</p> <p>To add a signature to the list for the application press \\. You will see a list of signatures that can be applied to the program being disassembled. <p>Text version: Not all signature files will be displayed (for example, 32 bit signatures will not be shown for a 16 bit program). If you want to see the full list of signatures, select the first line of the list saying SWITCH TO FULL LIST OF SIGNATURES.</p> <p>Signature files reside in the subdirectories of the SIG directory. Each processor has its own subdirectory. The name of the subdirectory is equal to the name of the processor module file (z80 for z80.w32, for example). Note: IBM PC signatures are located in the SIG directory itself. Note: the IDASGN environment variable can be used to specify the location of the signatures directory.</p>"},{"location":"user-guide/user-interface/menu-bar/view/open-subviews.html#segments-window","title":"Segments window","text":"<pre><code>Action    name: ShowSegments\n\n</code></pre> <p>This command opens the segments window. The format of this window is explained here.</p> <p>You can use list viewer commands in this window.</p> <p>In order to change the selector values, use selectors window.</p>"},{"location":"user-guide/user-interface/menu-bar/view/open-subviews.html#segment-registers-window","title":"Segment registers window","text":"<pre><code>Action    name: ShowSegmentRegisters\n\n</code></pre> <p>This command opens the segment registers window. The window will contain segment register change points list.</p> <p>You can use list viewer commands in this window.</p> <p>Depending on the current processor type, you will see DS,ES,SS with or without FS,GS.</p> <p>See also Edit|Segments submenu.</p>"},{"location":"user-guide/user-interface/menu-bar/view/open-subviews.html#selectors-window","title":"Selectors window","text":"<pre><code> Action    name: ShowSelectors\n\n</code></pre> <p>This command opens the selector window. Here you can change the \"selector to base\" mapping. The selector table is used to look up the selector values when calculating the addresses that are visible in the disassembly listing.</p> <p>You can use list viewer commands in this window:</p> <pre><code>        - jump to the paragraph pointed by the selector\n        - add a new selector\n        - delete selector (if it is not used by any segment)\n        - change selector value (this leads to reanalysis of all program)\n</code></pre>"},{"location":"user-guide/user-interface/menu-bar/view/open-subviews.html#cross-references-window","title":"Cross references window","text":"<pre><code>Action    name: OpenXrefs\n\n</code></pre> <p>This command opens the cross-references window. This window contains all references to the current location.</p> <p>You can use list viewer commands in this window.</p> <p>You can add and delete cross references here too by pressing Ins or Del. Right clicking on the mouse will work too.</p> <p>Add a cross reference: the from and to address, as well as the xref type should be specified.</p> <p>Del a cross reference: if the 'undefine if no more xrefs' is check, then the instruction at the target address will be undefined upon the deletion of the last xref. IDA undefines instructions only if they do not start a function.</p>"},{"location":"user-guide/user-interface/menu-bar/view/open-subviews.html#local-types-window","title":"Local types window","text":"<pre><code>Action    name: OpenLocalTypes\n\n</code></pre> <p>Each database has a local type library embedded into it. This type library (til) is used to store types that are local to the current database. They are usually created by parsing a header file.</p> <p>{% hint style=\"info\" %} As of IDA 9.0, the legacy Structure and Enums windows have been removed and their functionality consolidated by the Local Types window. This view serves as a centralized hub for all type-related actions. You can define new types here (enumerations, structures, and unions), edit existing ones, and import types from loaded type libraries.</p> <p>This command opens the local types window. The user can manipulate local types here:</p> <ul> <li>the existing types can be modified (the default hotkey is <code>Ctrl-E</code>, context menu Edit type...)</li> <li>the existing types can be deleted (the default hotkey is <code>Del</code>, context menu Delete type...)</li> <li>new types can be added (the default hotkey is <code>Ins</code>, context menu Add type...)</li> </ul> <p>Please note that Ins can be used to add many types at once. For that the user just needs to enter multiple declarations, one after another in the dialog box.</p> <p>However, Ctrl-E permits for editing of one type at a time. This may cause problems with complex structure types with nested types. Nested types will not be saved by Ctrl-E.</p> <p>If the edited type corresponds to an idb type (struct or enum), then the corresponding type will be automatically synchronized.</p> <p>Some types in this list are created automatically by IDA. They are copies of the types defined in the or Types views. Such types are displayed using in gray, as if they are disabled.</p> <p>Types displayed in black are considered as C level types. Read more.</p> <p>Each type in the local type library has an ordinal number and may have a name.</p> <p>Be careful when deleting existing types because if there are references to them, they will be invalidated.</p> <p>A local type can be mapped to another type. Such an operation deletes the existing type and redirects all its references to the destination type. Circular dependencies are forbidden. In the case of a user mistake, a mapped type can be deleted and recreated with the correct information.</p> <p>See also</p> <ul> <li>Type libraries window</li> <li>C++ type details</li> </ul>"},{"location":"user-guide/user-interface/menu-bar/view/open-subviews.html#managing-structures","title":"Managing Structures**","text":"<p>Each structure must have a unique name. A field name must be unique in the structure. In order to create or delete a field, use data definitions commands (data, string literal, array, undefine, Rename). You may also define regular or repeatable comments.</p> <p>In order to modify member types, use commands from the Edit|Operand types... submenu. For example, to convert a structure member to an offset, use one of the following commands:</p> <ul> <li>Convert to offset (automatic)</li> <li>Convert to offset (from a segment base)</li> <li>Convert to offset (complex offset expression)</li> </ul> <p>Structs-related commands available in the local types window:</p> <ul> <li>Add struct type...</li> <li>Duplicate a struct type...</li> <li>Delete struct type...</li> <li>Insert gap...</li> <li>Delete gap...</li> <li>Edit struct type...</li> </ul>"},{"location":"user-guide/user-interface/menu-bar/view/open-subviews.html#define-a-new-structure","title":"Define a new structure","text":"<pre><code> Action    name: AddStruct\n\n</code></pre> <p>This command defines a new structure or a new union. The new structure is created with zero length. You will have to add structure members using structure manipulation commands.</p> <p>If the entered structure name denotes a standard structure type from a loaded type library, then its definition will be automatically used. In this case, the value of the 'create union' checkbox will be ignored.</p> <p>This command is available when you open a Local Types window.</p> <p>You can add new members to the structure using the following commands:</p> Command Hotkey Make Data D Make String Literal A Make Array * Rename N <p>You may also insert/delete undefined bytes into the middle of the structure by using Expand and Shrink commands.</p> <p>\"Create before current structure\" means that the new structure will be placed immediately before the current structure type. Otherwise, the new structure is placed after the current structure.</p> <p>\"Don't include in the list\" means that the structure will not be included in the list of the structures which appears when the user applies the structure definition, for example, when he creates a variable of this structure type. We recommend to mark this checkbox when you have defined all variables of this structure type and want to reduce the number of choices in the list.</p> <p>See also How to Enter an Identifier.</p>"},{"location":"user-guide/user-interface/menu-bar/view/open-subviews.html#duplicate-a-structure-type","title":"Duplicate a structure type","text":"<pre><code>Action    name: CopyStruct\n\n</code></pre> <p>This command duplicate the current structure type. The new structure type will have the same members as the current one but its name will be autogenerated (something like struc_333)</p> <p>By default the new structure type will be placed after the current structure type.</p>"},{"location":"user-guide/user-interface/menu-bar/view/open-subviews.html#delete-a-structure","title":"Delete a structure","text":"<pre><code> Action    name: DelStruct\n\n</code></pre> <p>This command deletes the current structure. Beware, when you delete a structure, all references to it will be destroyed as well. Even if you recreate it later, you'll have to specify again all references to it.</p> <p>You may use this command to delete unions also.</p> <p>This command is available when you open a Local Types window.</p>"},{"location":"user-guide/user-interface/menu-bar/view/open-subviews.html#expand-a-structure","title":"Expand a structure","text":"<pre><code> Action    name: ExpandStruct\n\n</code></pre> <p>This command expands the current structure by inserting undefined bytes at the cursor location. The cursor must not be at the end of the structure. To define a member at the end of the structure, just use normal data definition commands.</p> <p>This command is available when you open a Local Types window.</p>"},{"location":"user-guide/user-interface/menu-bar/view/open-subviews.html#shrink-a-structure","title":"Shrink a structure","text":"<pre><code> Action    name: ShrinkStruct\n\n</code></pre> <p>This command shrinks the current structure by deleting undefined bytes at the cursor location. The cursor must be at an undefined byte. IDA will ask the user the number of bytes to remove.</p> <p>This command is available when you open a Local Types window.</p>"},{"location":"user-guide/user-interface/menu-bar/view/open-subviews.html#edit-a-structure","title":"Edit a structure","text":"<pre><code> Action    name: EditStruct\n\n</code></pre> <p>This command allows the user to change the structure alignment</p> <p>Structure alignment is used to calculate the number of padding bytes at the end of the structure. For example, if alignment is 4 and the last field is a byte at offset 11h, IDA will add 3 bytes of padding so that the struct size is 14h (multiple of 4).</p> <p>The alignment must be a power of 2. This command is available in the Local Types window.</p> <p>See also How to Enter a Number.</p>"},{"location":"user-guide/user-interface/menu-bar/view/open-subviews.html#managing-enums","title":"Managing Enums","text":"<p>Enums-related commands available in the local types window:</p> <ul> <li>Add an enum</li> <li>Delete an enum</li> <li>Edit an enum</li> <li>Define an enum member</li> <li>Edit an enum member</li> <li>Delete an enum member</li> </ul>"},{"location":"user-guide/user-interface/menu-bar/view/open-subviews.html#addedit-an-enum","title":"Add/Edit an enum","text":"<pre><code>Action    name: AddEnum\n\n\nAction    name: EditEnum\n\n</code></pre> <p>These commands allow you to define and to edit an enum type. You need to specify:</p> <pre><code>        - name of enum\n        - its serial number (1,2...)\n        - representation of enum members\n</code></pre> <p>Each enum has its ID and a serial number. The ID is a number used to refer to the enum, while a serial number is used to order enums during output. Changing the serial number moves the enum to another place.</p> <p>The serial number of an enum is displayed at the lower left corner of the window.</p> <p>You can specify any number as a serial number, IDA will move the enum to the specified place.</p> <pre><code>        1 - the current enum becomes the first enum\n        2 - the current enum becomes the second enum\n        ...\n</code></pre> <p>You also need to specify representation of enum constants. You may choose from various number bases (hex,dec,oct,bin) and character constants.</p> <p>You may specify the element width or leave it zero. Zero means the element width is not specified. The allowed widths are the powers of 2 in the range of 1..64.</p> <p>Please note that you can create bitfield definitions here by checking the \"bitfield\" checkbox.</p> <p>These command is available when you open the types window.</p> <p>See also How to Enter a Number.</p>"},{"location":"user-guide/user-interface/menu-bar/view/open-subviews.html#delete-an-enum-type","title":"Delete an enum type","text":"<pre><code> Action    name: DelEnum\n\n</code></pre> <p>This command deletes the current enum. Beware, when you delete an enum all references to it will be destroyed. Even if you recreate it later, you'll have to specify again all references to it.</p> <p>This command is available when you open the types window.</p>"},{"location":"user-guide/user-interface/menu-bar/view/open-subviews.html#define-an-enum-member","title":"Define an enum member","text":"<pre><code>Action    name: AddConst\n\n</code></pre> <p>This command allows you to define an enum member. An enum member is a symbolic constant. You have to specify its name and value. You cannot define more than 256 constants with the same value in an enum.</p> <p>If the current enum is a bitfield, you need to specify the bitmask. To learn about bitmasks, read about bitfields.</p>"},{"location":"user-guide/user-interface/menu-bar/view/open-subviews.html#edit-an-enum-member","title":"Edit an enum member","text":"<pre><code>Action    name: EditConst\n\n</code></pre> <p>This command allows you to rename an enum member. An enum member is a symbolic constant. Its name must be unique in the program.</p> <p>To rename an enum type name, position the cursor over the name of the enum.</p>"},{"location":"user-guide/user-interface/menu-bar/view/open-subviews.html#delete-an-enum-member","title":"Delete an enum member","text":"<pre><code> Action    name: DelConst\n\n</code></pre> <p>Please remember that deleting a member also deletes all the information about the member, including comments, member name etc.</p>"},{"location":"user-guide/user-interface/menu-bar/view/open-subviews.html#problems-window","title":"Problems window","text":"<pre><code>Action    name: OpenProblems\n\n</code></pre> <p>This command opens the problems window. The problem window contains the list of all problems encountered by IDA during disassembling the program.</p> <p>You can jump to a problem by pressing Enter. The selected problem will be deleted from the list.</p>"},{"location":"user-guide/user-interface/menu-bar/view/open-subviews.html#type-libraries-window","title":"Type libraries window","text":"<pre><code>Action    name: OpenTypeLibraries\n\n</code></pre> <p>This command opens the type libraries window. Here the user can load and unload standard type libraries.</p> <p>The standard type libraries contain type definitions from the standard C header supplied with compilers. Usually, IDA tries to determine the target compiler and its type libraries automatically but if it fails, this window allows you to load the appropriate type library.</p> <p>Furthermore, don't forget to specify the compiler and memory model in the compiler setup dialog box.</p>"},{"location":"user-guide/user-interface/menu-bar/view/open-subviews.html#inspecting-a-type-library","title":"Inspecting a type library","text":"<p>Provide the ability to inspect the types present in a type library.</p>"},{"location":"user-guide/user-interface/menu-bar/view/open-subviews.html#local-types-bookmarks","title":"Local Types bookmarks","text":"<p>See: Choose marked location</p>"},{"location":"user-guide/user-interface/menu-bar/view/open-subviews.html#strings-window","title":"Strings window","text":"<pre><code>Action    name: OpenStrings\n\n</code></pre> <p>This command opens the string window.</p> <p>The string window contains all strings in the program. However, if a range of addresses was selected before opening the window, only the selected range will be examined for strings.</p> <p>You can setup the list parameters by right-clicking (or pressing Ctrl-U in the text version) on the list.</p> <p>The list always contains strings defined in the program regardless of the settings in this dialog box, but the user can ask IDA to display strings not yet explicitly defined as strings.</p> <p>The following parameters are available:</p> <p>Display only defined strings If checked, IDA will display only strings explicitly marked as string items (using the create string literal command). In this case, the other checkboxes are ignored. Ignore instructions/data definitions</p> <pre><code>        If checked, IDA will ignore instruction/data definitions\n        and will try to treat them as strings. If it can build a string\n        with the length greater than the minimal length, the string\n        will be displayed in the list.\n        This setting is ignored if 'only defined strings' is on.\n</code></pre> <p>Strict ASCII (7-bit) strings If checked, only strings containing exclusively 7-bit characters (8th bit must be zero) will be added to the list. Please note that the user can specify which characters are accepted in the strings by modifying the StrlitChars parameter in the ida.cfg file. This setting is ignored if 'only defined strings' is on. Allowed string types</p> <pre><code>        Allows the user to specify the string types included in the list.\n        This setting is ignored if 'only defined strings' is on.\n</code></pre> <p>Minimal string length</p> <pre><code>        The minimal length the string must have to be added to the list.\n</code></pre>"},{"location":"user-guide/user-interface/menu-bar/view/open-subviews.html#function-calls-window","title":"Function calls window","text":"<pre><code>Action    name: OpenCallers\n\n</code></pre> <p>This command opens the function calls window.</p> <p>All functions who call the current function are displayed at the top of the window.</p> <p>All functions called from the current function are displayed at the bottom of the window.</p> <p>The list is automatically refreshed when the cursor is moved to another function.</p>"},{"location":"user-guide/user-interface/menu-bar/view/open-subviews.html#notepad","title":"Notepad","text":"<pre><code>Action    name: OpenNotepad\n\n</code></pre> <p>Opens a notepad window for the general notes about the current database. The entered notes will be saved in the current database.</p> <p>Alt-T hotkey can be used to search for a text and Ctrl-T to repeat the last search.</p> <p>The notepad is available only in the GUI version.</p>"},{"location":"user-guide/user-interface/menu-bar/view/open-subviews.html#show-undo-history","title":"Show undo history","text":"<pre><code>Action    name: ShowUndoHistory\n\n</code></pre> <p>This command opens a window with the undo history. It is available from the Views, Open subviews submenu.</p> <p>Double clicking on a line reverts the database to the state before the corresponding action.</p> <p>It is possible to truncate the undo history by using the corresponding context menu command. The undo information for the selected action will be removed together with the information about all preceding actions.</p> <p>The redoable user actions are displayed in italics. The current position in the undo buffers is displayed in bold, it usually denotes the first redoable user action.</p> <p>See also</p> <ul> <li>Undo</li> <li>Redo</li> <li>Reset Undo</li> <li>Disable Undo</li> </ul>"},{"location":"user-guide/user-interface/menu-bar/view/setup-hidden-items.html","title":"Setup hidden items","text":""},{"location":"user-guide/user-interface/menu-bar/view/setup-hidden-items.html#setup-hidden-items","title":"Setup hidden items","text":"<pre><code> Action    name: SetupHidden\n</code></pre> <p>This command allows you to toggle the display of hidden items.</p> <p>Automatically hide library functions</p> <pre><code>        This option hides the functions recognized by FLIRT.\n        If will have an effect only from the time when the option is set.\n</code></pre> <p>Display hidden instructions</p> <pre><code>        If this option is set, IDA will display all the instructions\n        as unhidden even if they were hidden.\n</code></pre> <p>Display hidden functions</p> <pre><code>        If this options is set, IDA will display all the functions\n        as unhidden even if they were hidden.\n</code></pre> <p>Display hidden segments</p> <pre><code>        If this options is set, IDA will display all the segments\n        as unhidden even if they were hidden.\n</code></pre> <p>See also View submenu.</p>"},{"location":"user-guide/user-interface/menu-bar/view/unhide-all-items.html","title":"Unhide all items","text":""},{"location":"user-guide/user-interface/menu-bar/view/unhide-all-items.html#unhide-all-items","title":"Unhide all items","text":"<pre><code> Action    name: UnhideAll\n</code></pre> <p>This command allows you to unhide: - all segments, functions, and hidden ranges if invoked in the disassembly window</p> <p>See also Hide all command.</p> <p>See also Edit|View submenu.</p>"},{"location":"user-guide/user-interface/menu-bar/view/unhide.html","title":"Unhide","text":"<pre><code> Action    name: Unhide\n\n</code></pre> <p>This command allows you to unhide a hidden part of disassembly.</p> <p>If the cursor is on the hidden function name, the function will be unhidden.</p> <p>If the cursor is on the terse structure variable, the structure will be uncollapsed and displayed in the regular form.</p> <p>If the cursor is on the hidden range, the hidden range will be unhidden.</p> <p>If the cursor is on the hidden segment name, the segment will be unhidden.</p> <p>See also hide command and setup hidden command.</p> <p>See also Edit|View submenu</p>"},{"location":"user-guide/user-interface/menu-bar/view/view-internal-flags.html","title":"View Internal Flags","text":"<pre><code> Action    name: ShowFlags\n\n</code></pre> <p>This command displays the internal flag values for the current item. The information appears in the message window.</p> <p>See also View submenu.</p>"},{"location":"user-guide/user-interface/menu-bar/view/view-segment-registers.html","title":"View segment registers","text":"<pre><code> Action    name: ShowRegisters\n\n</code></pre> <p>This command displays segment register contents in the message window.</p> <p>You may use this command to refresh the disassembly window too.</p> <p>See also Edit|Segments submenu. View submenu.</p>"},{"location":"user-guide/user-interface/menu-bar/windows/index.html","title":"Windows","text":""},{"location":"user-guide/user-interface/menu-bar/windows/environment-variables.html","title":"Environment variables","text":"<p>The following environment variables are used by IDA:</p> <pre><code>TMP or TEMP     Specifies the directory where the temporary files will\n                be created.\n                Default: C:\\TEMP\n\nEDITOR          The name of the preferred text editor.\n\nIDALOG          Specifies the name of the log file. Everything appearing\n                in the message window will be dumped there.\n                Default: none\n\nIDALOG_SILENT   Suppress all output to the message window.\n                If the IDALOG variable is set, messages will continue to\n                be written to the log file. Otherwise, they will be lost.\n\nIDADIR          Specifies the IDA directory.\n                Default: the directory where IDA executable is located\n\nIDA_LOADALL     The selected loader will load all segments without asking\n\nIDAUSR          Specifies the directory for user-specific settings.\n                Default: Windows:  %APPDATA%/Hex-Rays/IDA Pro\n                         Linux:    $HOME/.idapro\n                         Mac OS X: $HOME/.idapro\n\n                This variable can contain multiple paths, in which case they must\n                be separated by the platform's path separator character (i.e., ';'\n                on Windows, and ':' on Linux &amp; Mac OS X.)\n\n          NOTE: Using %IDAUSR% for loading plugins.\n\n                %IDAUSR% will be considered when scanning for plugins: for\n                each directory component of %IDAUSR%, IDA will iterate on\n                files in its \"plugins\" subdirectory, in alphabetical order.\n\n                Plugins with the same case-insensitive file name (without\n                extension) are considered to be duplicates and are ignored;\n                only the first plugin with a given name will be considered.\n                Thus, let's say %IDAUSR% is set to \"C:\\my_idausr\", and a file\n                \"C:\\my_idausr\\plugins\\DWARF.py\" exists, then\n                \"C:\\my_idausr\\plugins\\DWARF.py\" will be picked up first while\n                \"%IDADIR%\\plugins\\dwarf.dll\" will be considered conflicting,\n                and thus ignored.\n\n                In addition, in each directory, IDA first looks for plugins\n                with the native extension (e.g., \".dll\" on Windows) and only\n                then looks for files with extensions corresponding to\n                extension languages (e.g., \".idc\", \".py\", ...)\n                Consequently if two files, say \"foo.dll\" and \"foo.py\", are\n                present in the same directory, \"foo.dll\" will be picked first,\n                and \"foo.py\" will be considered conflicting, and thus ignored.\n\n          NOTE: Using %IDAUSR% for overriding configuration.\n\n                %IDAUSR% will be considered when looking for configuration\n                files, after the config file found in %IDADIR%\\cfg has been\n                read.\n\n                After %IDADIR%\\cfg\\&lt;filename&gt; has been read &amp; applied, for\n                each directory component of %IDAUSR%, IDA will look for\n                cfg/&lt;filename&gt; in it, and, if found, read &amp; apply its\n                contents as well.\n\n                This enables users to have their own small, fine-tuned\n                configuration files containing just the bits they wanted to\n                override, stored in one (or more) folder(s) of their choosing.\n\n          NOTE: Using %IDAUSR% for specifying themes\n\n                %IDAUSR% will be considered when scanning for themes: for\n                each directory component of %IDAUSR%, IDA will iterate on\n                subdirectories in its \"themes\" subdirectory.\n\n          NOTE: Using %IDAUSR% for providing additional loaders, processor\n                modules, .til files, .sig and .ids files\n\n                %IDAUSR% will also be considered when building the list of\n                existing loaders, processor modules, .til, .sig and .ids files.\n                The following directories will be inspected:\n                       %IDAUSR%\\loaders\n                       %IDAUSR%\\procs\n                       %IDAUSR%\\til\\&lt;arch-name&gt;\n                       %IDAUSR%\\sig\\&lt;arch-name&gt;\n                       %IDAUSR%\\ids\\&lt;platform-name&gt;\n</code></pre> <p>IDA_MINIDUMP (Windows only) If IDA crashes, it creates a minidump file with the MiniDumpWrite(). Use this environment variable to specify MiniDump flags (a combination of MINIDUMP_TYPE flags as a hexadecimal number). If set to \"NO\", IDA will not write a dump.</p> <p>IDA_MDMP_INIT (Windows only) Let IDA load dbghlp.dll on startup so it is used for crash dump file generation in case of a crash. If not set, IDA will load dbghlp.dll dynamically (if needed). Using this option may cause the Windbg debugger plugin to malfunction in case its dbghlp.dll does not match the one loaded by IDA.</p> <p>IDA_NOEH If set, disable IDA's own exception handler and let all possible crashes to be handled by the OS or active debugger. It is useful if you're debugging a crash in a plugin or processor module.</p> <p>IDAIDS Specifies the directory with the IDS files. Default: %IDADIR%\\IDS</p> <p>IDASGN Specifies the directory with the SIG files. Default: %IDADIR%\\SIG</p> <p>IDATIL Specifies the directory with the TIL files. Default: %IDADIR%\\TIL</p> <p>IDAIDC Specifies the directory with the IDC files. Default: %IDADIR%\\IDC</p> <p>IDA_LIBC_PATH Useful only on Android remote host. Specifies the exact path to the system libc.so</p> <p>IDA_SKIP_SYMS Useful only on Linux host. Turns off loading of exported symbols for the main executable file at the start of a debugging session</p> <p>IDA_NONAMES Disables the name resolution</p> <p>IDA_NO_HISTORY Disables updating file history</p> <p>IDA_NORELOC Disables processing of the relocation information for some file formats</p> <p>IDA_NOEXP Disables processing of the export information for some file formats</p> <p>IDA_NOTLS Disables processing of the TLS entries for some file formats</p> <p>H8_NOSIZER Disables the display of the operand sizes for H8 module</p> <p>IDA_LOADALL Load all segments of the input file without further confirmations</p> <p>IDA_DEBUGBREAKPROCESS (Windows only) IDA debugger will use the DebugBreakProcess() API to break into the process. Otherwise it will instead attempt to set temporary breakpoints for all threads.</p> <p>IDA_NO_REBASE IDA Debugger will not rebase the program when debugging. (This will be in effect even if the debugger plugin implements the rebase_if_required_to callback)</p> <p>IDABXPATHMAP Variables related to the Bochs debugger. IDABXENVMAP See plugins/bochs/startup.* for more details.</p> <p>IDA_NOWIN (Text MS Windows version only) Bypass the code trying to find out the foreground window. This code causes problems under WINE.</p> <p>IDA_DONT_SWITCH_SCREENS (text version only) Tells IDA to keep only one screen even during local debugging sessions. For local debugging sessions, IDA keeps by default one screen for the debugged application and one screen for itself.</p> <p>IDA_NOAUTOCOMP Do not autodetect compiler for name demangling. If this variable is absent and the current compiler is one of MS, Borland and Watcom, the compiler is autodetected.</p> <p>IDA_ELF_PATCH_MODE Overrides patch mode for the new ELF files. If this variable is defined, it must contain a number. Each bit of this number corresponds to an option from the following list:</p> <pre><code>   0: Replace PIC form of 'Procedure Linkage Table' to non PIC form\n   1: Direct jumping from PLT (without GOT) regardless of its form\n   2: Convert PIC form of loading '_GLOBAL_OFFSET_TABLE_[]' of address\n   3: Obliterate auxiliary bytes in PLT &amp; GOT for 'final autoanalysis'\n   4: Natural form of PIC GOT address loading in relocatable file\n   5: Unpatched form of PIC GOT references in relocatable file\n   6: Mark 'allocated' objects as library-objects (MIPS only)\n</code></pre> <p>IDA_DYLD_SHARED_CACHE_SLIDE Mach-O loader: specify the dyld shared cache image ASLR slide value (hexadecimal) or 'search' for automatic detection. If not set, slide is assumed to be 0 (unslid image).</p> <p>The following variables are used to fine-tune the Linux version of IDA:</p> <p>TVLOG the name of the log-file if it is not defined, use syslog with LOG_WARNING priority</p> <p>TERM the terminal definition (see terminfo)</p> <p>TVHEADLESS disable all output (for i/o redirection) if this variable defined, the TVOPT variable is ignored This environment variable also works also in graphical versions of IDA. When set, the graphical interface will not restore desktops, toolbars or show the main window.</p> <p>TVOPT the enduser flags. Has many subfields delimited by commas ','. noX11 - when libX11.so is not compatible noGPM - when libgpm.so is not compatible ansi - OR mono - when the terminfo data of your display does not declare it as having the ANSI-color support ign8 - ignore '8bit as meta key' in the terminfo description xtrack - if your xterm-emulator in telnet client does not support mode 1002 (only 1000), set this flag alt866 - do not encode pseudographic symbols (for the console with alt-font loaded) cyrcvt= - cyrilic conversion (oem/koi8r). possible values are: linux - for linux russian users and PuTTY (in/out koi8r) kwin - output in koi8 and input in cp1251 - any telnet windows - for many telnet and any linux users (in/out 1251)</p> <pre><code> Client name | Terminal   | TVOPT  | Client settings\n ------------|------------|--------|---------------------------------------\n             |            |        |\n SecureCRT   |xterm-scokey| xtrack | Emulation-&gt;Terminal: xterm,\n             |            |        | Emulation-&gt;keyboard: either the\n             |            |        |   built-in keyboard, either custom\n             |            |        |                  'xt-sco.key' file\n             |            |        | Advanced-&gt;Terminaltype: xterm-scokey\n             |            |        |\n SecureCRT   |   xterm    | xtrack | Emulation-&gt;Terminal: xterm+internal kbd\n             |            |        |\n             |            |        |\n Putty       |xterm-scokey|   -    | Terminal,Keyboard: Control?, Standard,\n             |            |        |                    SCO, Normal, Normal\n             |            |        |\n Putty       |   xterm    |   -    | Terminal,Keyboard: ControlH, Standard,\n             |            |        |                    ~num, Normal, Normal\n             |            |        |\n Console     |   linux    |   -    | default\n             |            |        |\n X11:xterm   |   xterm    |   -    | default\n</code></pre> <p>We recommend to use the 'xterm-scokey' terminal type for remote clients.</p> <p>When the terminal type is xterm-scokey, add the following string to /etc/inputrc (or to \\~/.inputrc):</p> <p>\"\\e[.\": delete char</p> <p>When working on the console without GPM installed, append \"noGPM\" to TVOPT.</p> <p>Russian users should append the following settings to the above:</p> <pre><code>                  | APPEND  TO TVOPT  | APPEND TO Client Settings\n -----------------|---------------------|----------------------------\n Console          | alt866,cyrcvt=linux |\n                  |                     |\n X11              | cyrcvt=linux        |\n                  |                     |\n Putty            | cyrcvt=linux        | Window,Translation: use font in\n                  |                     |           both ANSI and OEM modes\n                  |                     |\n SecureCRT        |                     |\n   with koi8font  |                     |\n    and kbd-hook  | cyrcvt=linux        |\n    with koi8font | cyrcvt=kwin         |\n   with ANSI-font | cyrcvt=windows      |\n                  |                     |\n    The best settings for russian users on the console are:\n         setfont alt-8x16.psf.gz -m koi2al\n         loadkey ru-ms.map\n         export TVOPT=cyrcvt=linux,alt866\n</code></pre>"},{"location":"user-guide/user-interface/menu-bar/windows/miscellanous-options.html","title":"Miscellanous options","text":""},{"location":"user-guide/user-interface/menu-bar/windows/miscellanous-options.html#miscellaneous-options","title":"Miscellaneous Options","text":"<pre><code>Editor\n\n        A text editor is to be used when the user decides to edit an\n        IDC script using the IDC toolbar.\n</code></pre> <p>Navigation band refresh interval (milliseconds)</p> <pre><code>        Specifies how often the navigation band will be refreshed.\n        IDA tries to minimize the number of redrawings because they\n        could be really time and processor consuming (imagine\n        a huge program, 50-100 megabytes of code. it would\n        take a long time to refresh information on the navigation\n        band because the whole program will be examined to\n        determine how to draw the band). If this option is set to 0,\n        the navigation band is refreshed only when the cursor is\n        moved far enough to reflect its movement on the band.\n</code></pre> <p>Convert already defined bytes</p> <pre><code>        Determines how IDA should behave when user operations\n        would end up redefining some already-defined bytes\n</code></pre> <p>Associate .IDB file extension with IDA</p> <pre><code>        Whether or not the .IDB extension should be associated,\n        at the OS-level, with IDA\n</code></pre> <p>Enable autocomplete in forms</p> <pre><code>        Determines whether input fields should provide an auto-complete\n        combo box by default\n</code></pre> <p>Output files encoding</p> <pre><code>       The encoding used to generate output text files from IDA\n       The value '&lt;default&gt;' means that the IDB's default 8 bit-per-unit\n       encoding will be used.\n</code></pre>"},{"location":"user-guide/user-interface/menu-bar/windows/output-window.html","title":"Output window","text":"<p>The Output window appears at the bottom of IDA's interface by default and serves two key purposes:</p> <ul> <li>Displays various IDA messages and notifications.</li> <li>Provides a command line interface (CLI) for executing IDC or IDAPython commands.</li> </ul> <p></p> <p>If closed, you can reopen it via Windows -&gt; Output window.</p>"},{"location":"user-guide/user-interface/menu-bar/windows/output-window.html#context-menu-options","title":"Context Menu Options","text":"<p>Right-click in the Output window to access these options:</p> <ul> <li>Select All: Selects all content in the window</li> <li>Find/Find next: Searches for a specific string</li> <li>Clear: Removes all previous messages from the window</li> <li>Copy to CLI: Places selected text into CLI field</li> <li>Save to file: Exports window content to a .log file</li> <li>Show timestamps: Displays time information with each message</li> <li>Font...: Customizes the text appearance (font, style, size)</li> </ul> <p>You can duplicate all messages appearing in this window to a file. To do this, you have to define an environment variable before starting IDA:</p> <pre><code>set IDALOG=logfile\n</code></pre>"},{"location":"user-guide/user-interface/menu-bar/windows/rename-a-stack-variable.html","title":"Rename a stack variable","text":"<p>This command allows the user to rename a stack variable. Enter an identifier for the stack variable and press Enter.</p> <p>Internally, stack variables are represented as structure fields. IDA creates a new structure type for each function frame.</p> <p>See also Edit|Structs submenu. How to Enter an Identifier</p>"},{"location":"user-guide/user-interface/menu-bar/windows/reset-hidden-messages.html","title":"Reset Hidden Messages","text":"<p>This command resets the state of all questions and messages the user hid by checking the \"Don't show this message again\" checkbox.</p>"},{"location":"user-guide/user-interface/menu-bar/windows/various-dialog-help-messages.html","title":"Various dialog help messages","text":"<ul> <li>Packed Files</li> <li>Bad Relocation Table</li> <li>Additional information at the end of file</li> <li>Overlayed files</li> <li>Error loading overlays</li> <li>Maximal number of segments is reached</li> <li>Cannot generate executable file</li> <li>Bad input file format</li> <li>Choose mark number</li> <li>Enter mark description</li> <li>Choose marked location</li> <li>IDA View bookmarks</li> <li>Structs bookmarks</li> <li>Enums bookmarks</li> <li>Cannot Rename a Byte</li> <li>Cannot find file segmentation</li> <li>Negative Offsets</li> <li>DataBase is not closed</li> <li>Obsolete Database Format</li> <li>The Name List is Empty</li> <li>Upgrading IDA database</li> <li>Unexpected Database Format</li> <li>Imported module is not found</li> <li>Load file dialog</li> <li>PE .idata section has additional data</li> <li>Repeat search for instruction/data with the specified operand</li> <li>Repeat search for substring in the disassembly</li> <li>Repeat search for substring in the file</li> <li>Moving Segment</li> <li>Deleting a Segment</li> <li>Auto analysis is not completed</li> <li>Silent mode of IDA</li> <li>Rename a structure/member</li> <li>Delete a structure member</li> <li>Unpacked database is dangerous</li> <li>Database Is Empty</li> <li>Illegal Usage of the Switch</li> <li>Cannot Find Input File</li> <li>Patched Bytes Are Skipped</li> <li>Patched bytes have relocation information</li> <li>No Segment for the current byte</li> <li>Empty Program</li> <li>Load additional binary file</li> <li>Patching Relocation Bytes</li> <li>NotVaFile</li> <li>VaTooHighVersion</li> <li>Desktops</li> <li>Can't create segment registers range</li> <li>Cannot assign to Segment Register</li> </ul>"},{"location":"user-guide/user-interface/menu-bar/windows/various-dialog-help-messages.html#packed-files","title":"Packed Files","text":"<p>Sometimes, executable files are shipped in a packed form. It means that to disassemble these files you need to unpack them.</p> <p>IDA displays this message if the relocation table of the input MZ executable file is empty.</p>"},{"location":"user-guide/user-interface/menu-bar/windows/various-dialog-help-messages.html#bad-relocation-table","title":"Bad Relocation Table","text":"<p>Relocation table has references beyond program limits.</p>"},{"location":"user-guide/user-interface/menu-bar/windows/various-dialog-help-messages.html#additional-information-at-the-end-of-file","title":"Additional information at the end of file","text":"<p>The file being loaded is not completely loaded to memory by the operating system. This may be because:</p> <ul> <li>the file is overlayed; IDA does not know this type of overlays</li> <li>the file has debugging information attached to its end</li> <li>the file has other type of information at the end</li> </ul> <p>Anyway, IDA will not load the additional information.</p>"},{"location":"user-guide/user-interface/menu-bar/windows/various-dialog-help-messages.html#overlayed-files","title":"Overlayed files","text":"<p>Some EXE files are built with overlays. This means that the whole file is not loaded into the memory at the start of the program, but only a part of it. Other parts are loaded by the program itself into the dynamic memory or over some subroutines of the program. This fact leads to many difficulties when you disassemble such a program.</p> <p>Currently, IDA knows about overlays created by Borland and Microsoft C and Pascal compilers.</p>"},{"location":"user-guide/user-interface/menu-bar/windows/various-dialog-help-messages.html#error-loading-overlays","title":"Error loading overlays","text":"<p>One of the following occurred:</p> <pre><code>        - overlay stub is not found\n        - overlay relocation data is incorrect\n</code></pre> <p>i.e. the input file structure is bad.</p>"},{"location":"user-guide/user-interface/menu-bar/windows/various-dialog-help-messages.html#maximal-number-of-segments-is-reached","title":"Maximal number of segments is reached","text":"<p>When IDA tried to delete bytes outside of any segment, the maximal number of contiguous chunks is reached. This is NOT a fatal error.</p> <p>Some bytes outside of any segment will be present =&gt; the output text will be incorrect because of these bytes. However, you can delete them in the output text using a text editor.</p>"},{"location":"user-guide/user-interface/menu-bar/windows/various-dialog-help-messages.html#cannot-generate-executable-file","title":"Cannot generate executable file","text":"<p>IDA produces executable files only for:</p> <ul> <li>MS DOS .exe</li> <li>MS DOS .com</li> <li>MS DOS .drv</li> <li>MS DOS .sys</li> <li>general binary</li> <li>Intel Hex Object Format</li> <li>MOS Technology Hex Object Format</li> </ul> <p>Furthermore, external loaders may or may not support the creation of user-defined input file formats.</p>"},{"location":"user-guide/user-interface/menu-bar/windows/various-dialog-help-messages.html#bad-input-file-format","title":"Bad input file format","text":"<pre><code>The input file does not conform to the following definitions:\n</code></pre> <p>Intel Hex Object Format \u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580 This is the default format. This format is line oriented and uses only printable ASCII characters except for the carriage return/line feed at the end of each line. Each line in the file assumes the following format:</p> <pre><code> :NNAAAARRHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHCCTT\n</code></pre> <p>Where:</p> <p>All fields marked 'hex' consist of two or four ASCII hexadecimal digits (0-9, A-F). A maximum of 24 data bytes will be represented on each line.</p> <pre><code> :      = Record Start Character\n NN     = Byte Count (hex)\n AAAA   = Address of first byte (hex)\n RR     = Record Type (hex, 00 except for last record which is 01)\n HH     = Data Bytes (hex)\n CC     = Check Sum (hex)\n TT     = Line Terminator (carriage return, line feed)\n</code></pre> <p>The last line of the file will be a record conforming to the above format with a byte count of zero (':00000001FF').</p> <p>The checksum is defined as:</p> <pre><code>        sum      =  byte_count + address_hi + address_lo +\n                        record_type + (sum of all data bytes)\n        checksum =  ((-sum) &amp; ffh)\n</code></pre> <p>MOS Technology Hex Object Format \u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580 This format is line oriented and uses only printable ASCII characters except for the carriage return/line feed at the end of each line. Each line in the file assumes the following format:</p> <pre><code> ;NNAAAAHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHCCCCTT\n</code></pre> <p>Where:</p> <p>All fields marked 'hex' consist of two or four ASCII hexadecimal digits (0-9, A-F). A maximum of 24 data bytes will be represented on each line.</p> <pre><code> ;      = Record Start Character\n NN     = Byte Count (hex)\n AAAA   = Address of first byte (hex)\n HH     = Data Bytes (hex)\n CCCC   = Check Sum (hex)\n TT     = Line Terminator (carriage return, line feed)\n</code></pre> <p>The last line of the file will be a record with a byte count of zero (';00').</p> <p>The checksum is defined as:</p> <pre><code>        sum      =  byte_count + address_hi + address_lo +\n                        (sum of all data bytes)\n        checksum =  (sum &amp; ffffh)\n</code></pre>"},{"location":"user-guide/user-interface/menu-bar/windows/various-dialog-help-messages.html#choose-mark-number","title":"Choose mark number","text":"<p>This command allows you to mark a location so that afterwards you can jump to the marked location immediately. Select any line from the list. The selected line will be used for mark description. Afterwards, you will be able to jump to the marked location using \\ key. <p>You can use \\, \\, \\, \\, \\, \\ keys. If you select the first line of the list, nothing will be selected. <p>Press \\ to select line, \\ to cancel. <p>See also: How to jump to the marked location</p>"},{"location":"user-guide/user-interface/menu-bar/windows/various-dialog-help-messages.html#enter-mark-description","title":"Enter mark description","text":"<p>Mark description is any text line. The description is for your information only.</p>"},{"location":"user-guide/user-interface/menu-bar/windows/various-dialog-help-messages.html#choose-marked-location","title":"Choose marked location","text":"<p>This command allows you to jump to the previously marked location. Select any line. You will jump to the selected location.</p> <p>You can use \\, \\, \\, \\, \\, \\ keys. If you select the first line of the list, nothing will be selected. <p>Press \\ to select line, \\ to cancel. <p>See also: How to mark a location</p>"},{"location":"user-guide/user-interface/menu-bar/windows/various-dialog-help-messages.html#ida-view-bookmarks","title":"IDA View bookmarks","text":"<p>See: Choose marked location</p>"},{"location":"user-guide/user-interface/menu-bar/windows/various-dialog-help-messages.html#structs-bookmarks","title":"Structs bookmarks","text":"<p>See: Choose marked location</p>"},{"location":"user-guide/user-interface/menu-bar/windows/various-dialog-help-messages.html#enums-bookmarks","title":"Enums bookmarks","text":"<p>See: Choose marked location</p>"},{"location":"user-guide/user-interface/menu-bar/windows/various-dialog-help-messages.html#cannot-rename-a-location","title":"Cannot rename a location","text":"<p>It might be because of one of the following reasons:</p> <p>1. The name is ill-formed:</p> <ul> <li>it is a reserved word </li> </ul> <p>{% hint style=\"info\" %} IDA does not allow the use of register names as byte names.</p> <ul> <li>it contains bad characters. The list of allowed characters is specified in IDA.CFG</li> <li> <p>it starts with a reserved prefix. Some prefixes are used by IDA to generate names. See Names Representation dialog for the list of prefixes.</p> </li> <li> <p>The name is already used in the program. Try to use another name. In order to know where the name is used, you can try to jump to it using Jump to the Named Location</p> </li> </ul> <p>3. The address cannot have a name:</p> <pre><code>     - IDA refuses to rename tail bytes (i.e. the second, third...\n       bytes of instruction/data).\n     - the address does not belong to the program\n</code></pre>"},{"location":"user-guide/user-interface/menu-bar/windows/various-dialog-help-messages.html#cannot-find-file-segmentation","title":"Cannot find file segmentation","text":"<p>The database is empty or corrupt. Unfortunately, all information has been lost.</p> <p>Please use a backup copy of the database if there is any.</p> <p>If you have previously saved your database into a text file, you can load it. See the Dump database command for explanations.</p>"},{"location":"user-guide/user-interface/menu-bar/windows/various-dialog-help-messages.html#negative-offsets","title":"Negative Offsets","text":"<p>A segment cannot have bytes with negative offset from the segment base. Example: if a segment base is 0x3000, this segment can have a start address above or equal to 0x30000, but it cannot have a start address 0x2FFFF.</p>"},{"location":"user-guide/user-interface/menu-bar/windows/various-dialog-help-messages.html#obsolete-database-format","title":"Obsolete Database Format","text":"<p>Please use an old version of IDA. The current version of IDA does not support this database.</p>"},{"location":"user-guide/user-interface/menu-bar/windows/various-dialog-help-messages.html#database-is-not-closed","title":"Database is not closed","text":"<p>The database was not closed after the last IDA session. Most probably this happened due to a power fault, unexpected reboot of the computer, or another abnormal session termination.</p> <p>You may try to repair the database but the best solution would be to use the intact packed database or use a backup.</p> <p>The repairing may fail to recover the database.</p> <p>See also the Dump database command.</p>"},{"location":"user-guide/user-interface/menu-bar/windows/various-dialog-help-messages.html#the-name-list-is-empty","title":"The Name List is Empty","text":"<p>is command allows you to select a name from the user defined names. It means that no such names are defined now, or that all user-defined names are hidden. To give a name to the location, use Rename or [Rename any]../edit/other/rename-any-address.md) commands.</p>"},{"location":"user-guide/user-interface/menu-bar/windows/various-dialog-help-messages.html#upgrading-ida-database","title":"Upgrading IDA database","text":"<p>If IDA finds out that your database has an old format, it will try to upgrade the database to a new format. The upgrade process is completely automatic, no user intervention is needed. However, after upgrading your database, you will not be able to work with it using old versions of IDA. That is why IDA asks your confirmation before upgrading the database.</p> <p>This feature works only for databases starting from IDA version 2.05.</p>"},{"location":"user-guide/user-interface/menu-bar/windows/various-dialog-help-messages.html#unexpected-database-format","title":"Unexpected Database Format","text":"<p>Database format is newer than expected. That is because you are using an old version of IDA. The only thing you can do is to get a new version of IDA.</p>"},{"location":"user-guide/user-interface/menu-bar/windows/various-dialog-help-messages.html#imported-module-is-not-found","title":"Imported module is not found","text":"<p>IDA did not find the specified module in:</p> <ul> <li>the current directory</li> <li> <p>the operating system directory (see switch -W and configuration file parameters WINDIR,OS2DIR)</p> <p><code>OR       - the module cannot be accepted because:       - the module name (recorded in the file) doesn't match         the expected name       - the module does not contains any exported names (all exported functions         are exported by ordinal numbers)</code></p> </li> </ul> <p>Entries imported by ordinal entries will not be commented. If IDA finds a module, all entries that are imported by ordinal will be commented like this:</p> <pre><code>  KERNEL_91:\n                retf            ; INITTASK\n                                  ^^^^^^^^^\n                                  comment\n</code></pre> <p>This comment will be propagated (repeated) to all locations which call this entry:</p> <pre><code>                call    far ptr KERNEL_91 ; INITTASK\n</code></pre> <p>IDA searches all files named \"modulename.*\" for the module. If you know that the imported module resides in another directory, copy it to your current directory. If the module file name is different from \"modulename.*\", rename it. After the database is loaded, you can delete the copied module.</p> <p>IDA also looks for file \"modulename.ids\" in the current directory in the IDS subdirectory of the directory where IDA.EXE resides in the PATHed directories</p> <p>You can create such a file yourself. For an example, look at DOSCALLS.IDS in the IDS subdirectory.</p>"},{"location":"user-guide/user-interface/menu-bar/windows/various-dialog-help-messages.html#load-file-dialog","title":"Load file dialog","text":"<p>Below is the description of dialog box fields:</p> <pre><code> Load address - the paragraph where the file will be loaded.\n                Meaningful only for EXE and binary files. For new exe\n                files, please use 'manual load' feature.\n Load offset  - relevant only for binary files.\n                specifies offset of the first byte from the start of\n                the first segment. For example, if load offset=0x2700 and\n                load address=0x1000, the first byte of the file will\n                be at 1000:2700.\n DLL directory - path where IDA will look up referenced DLL files.\n                Note that if IDA finds .IDS file, it does not look for\n                .DLL file.\n Create segments        - relevant for binary files.\n                          If not checked, IDA does not create segments.\n Load resources         - If not checked, IDA does not load resources from\n                          NE files.\n Rename DLL entries     - If not checked, IDA makes repeatable comments\n                          for entries imported by ordinals. Otherwise,\n                          IDA renames the entries to meaningful names.\n Manual load            - relevant only for NE,LE,LX,ELF files.\n                          If checked, IDA will ask loading addresses\n                          and selectors for each object of the file.\n                          For experienced users only!\n Fill segment gaps      - relevant only for COFF &amp; OMF files.\n                          If checked, IDA will fill gaps between\n                          segments, creating one big chunk.\n                          This option facilitates loading of big\n                          object files.\n Make imports section   - relevant only for PE files.\n                          If checked, IDA will convert .idata section\n                          definitions to \"extrn\" directives and truncate it.\n                          Unfortunately, sometimes there are some additional\n                          data in .idata section so you'll need to disable\n                          this feature if some information is not loaded\n                          into the database.\n Create FLAT group      - relevant only for IBM PC PE files.\n                          If checked, IDA will automatically create FLAT\n                          group and use its selector as the default value\n                          for the segment registers.\n Code segment           - If checked, IDA creates a code but not a data\n                          segment. Relevant for processors with different\n                          code/data segment addressing schemes (for\n                          example, Atmel AVR).\n Loading options        - relevant only ELF,JAVA files.\n                          If checked, IDA will ask additional loader\n                          options. For experienced users only!\n</code></pre>"},{"location":"user-guide/user-interface/menu-bar/windows/various-dialog-help-messages.html#pe-idata-section-has-additional-data","title":"PE .idata section has additional data","text":"<p>If \"create imports section\" in the file loading dialog is checked, IDA will convert .idata section definitions to \"extrn\" directives and truncate it so it will not contain empty lines.</p> <p>Unfortunately, sometimes there is some additional data in .idata section so you'll need to disable this feature if some information is not loaded into the database.</p> <p>IDA tries to detect additional data in .idata section automatically.</p> <p>If you disable conversion of .idata section to a segment with \"extrn\" directives, you will see</p> <p>somename dd ?</p> <p>instead of</p> <pre><code>        extrn   somename\n</code></pre> <p>directives.</p> <p>Another impact is that the .idata segment will not be truncated in any way.</p>"},{"location":"user-guide/user-interface/menu-bar/windows/various-dialog-help-messages.html#moving-the-segment-start","title":"Moving the Segment Start","text":"<p>When you edit the segment boundaries, you can check the \"move the adjacent segments\" checkbox.</p> <p>IDA will try to shrink/expand the previous segment in order to move the beginning of the selected segment. Of course, you cannot move the start of the segment 'too far':</p> <pre><code>  - the segment must have at least 1 byte\n  - the start address of the segment must be less than the end of the segment\n  - no segments can be killed during moving\n  - the segment cannot have bytes with negative offsets\n</code></pre> <p>You cannot shrink a segment to zero bytes. A segment must have at least one byte.</p> <p>This command is mostly used when IDA does not detect the boundary between segments correctly.</p> <p>Sometimes, IDA creates 2 segments where only one segment must exist. In this case, you should not use this command. Use the following sequence instead:</p> <ul> <li>delete one segment. Choose the one with the bad segment base value. Do not disable addresses occupied by the segment being deleted.</li> <li>change boundaries of the other segment. Caution: moving the first segment of the program will delete all information about the bytes between the old start of the segment and the new start of the segment!</li> </ul> <p>See also another command that changes segment bounds:</p> <ul> <li>Edit Segment</li> <li>Edit|Segments submenu.</li> </ul>"},{"location":"user-guide/user-interface/menu-bar/windows/various-dialog-help-messages.html#deleting-a-segment","title":"Deleting a Segment","text":""},{"location":"user-guide/user-interface/menu-bar/windows/various-dialog-help-messages.html#deleting-a-segment_1","title":"Deleting a Segment","text":"<p>If you want to delete the segment, please mark 'CONFIRM DELETION' checkbox</p>"},{"location":"user-guide/user-interface/menu-bar/windows/various-dialog-help-messages.html#disable-addresses-checkbox","title":"Disable addresses checkbox","text":"<pre><code>        CAUTION: ALL INFORMATION ABOUT THE SEGMENT WILL BE LOST!\n</code></pre> <p>If you disable the addresses occupied by the segment, all information about these addresses will be lost. You will not see them on the screen anymore.</p> <p>Otherwise, the segment will be deleted, but its data will remain unchanged. You can create another segment(s) for these addresses using Create a New Segment command.</p>"},{"location":"user-guide/user-interface/menu-bar/windows/various-dialog-help-messages.html#auto-analysis-is-not-completed","title":"Auto analysis is not completed","text":"<p>As long as auto analysis is not completed, the IDA database is not consistent:</p> <ul> <li>not all cross-references are found</li> <li>not all instructions are disassembled</li> <li>not all data items are explored</li> </ul> <p>See also:</p> <ul> <li>auto analysis</li> <li>setup auto analysis</li> </ul>"},{"location":"user-guide/user-interface/menu-bar/windows/various-dialog-help-messages.html#silent-mode-of-ida","title":"Silent mode of IDA","text":"<p>In this mode, IDA will not display dialog boxes on the screen. Instead, it will assume the default answer and proceed. For example, if you press @\\, IDA will promptly exit to OS without asking for any confirmation. <p>To return to normal mode you will need to execute an IDC function: batch(0); i.e. disable batch \"silent\" mode. To execute a script command, select File|Script command... menu item or press @\\ hotkey."},{"location":"user-guide/user-interface/menu-bar/windows/various-dialog-help-messages.html#rename-a-structuremember","title":"Rename a structure/member","text":"<p>IDA maintains separate namespaces for each structure. For example, you can define something like this:</p> <pre><code> xxx    struc\n xxx    db ?\n xxx    struc\n</code></pre> <p>Beware, usually assemblers have one common namespace and do not allow the mentioned above example.</p> <p>An empty name cannot be specified.</p> <p>This command is available when you open a Local Types window.</p> <p>If the cursor is on the structure name at the beginning of the structure definition, IDA proposes to rename the structure. Otherwise, IDA proposes to rename a structure field.</p> <p>If a structure is being renamed, the option \"Don't include in the list\" means that the structure will not be included in the list of the structures which appears when the user applies the structure definition (for example, when the user creates a variable of this structure type). We recommend to mark this checkbox when you have defined all variables of this structure type and want to reduce the number of choices in the list.</p> <p>See also Edit|Structs submenu. How to Enter an Identifier</p>"},{"location":"user-guide/user-interface/menu-bar/windows/various-dialog-help-messages.html#delete-a-structure-member","title":"Delete a structure member","text":"<pre><code>Please remember that deleting a member deletes also all information\nabout this member, including comments, member name etc.\n</code></pre> <p>See also Edit|Structs submenu.</p>"},{"location":"user-guide/user-interface/menu-bar/windows/various-dialog-help-messages.html#unpacked-database-is-dangerous","title":"Unpacked database is dangerous","text":"<p>First of all, you may lose all information because you will not have a backup copy of the database. IDA makes modifications to the unpacked database and if some unexpected condition occurs, the unpacked database is usually damaged. IDA is able to repair this database, but some information could be irreversibly lost, leading to disastrous consequences.</p> <p>The only advantage of the unpacked database is that it is loaded very fast. the same way, exiting IDA is fast too.</p> <p>If packing is disabled, the abort command will not be available the next time the database is loaded.</p> <p>We strongly discourage using unpacked databases.</p> <p>To disable this prompt in the future, simply modify ASK_EXIT_UNPACKED parameter in IDATUI.CFG or IDAGUI.CFG file.</p> <p>Please note that when the \"File -&gt; Save as\" is used with an unpacked database, IDA will continue to use the unpacked database and not the newly created database (the saved as one). In this case, please close and re-open the newly created database to ensure that IDA will use it instead of the original database.</p>"},{"location":"user-guide/user-interface/menu-bar/windows/various-dialog-help-messages.html#database-is-empty","title":"Database Is Empty","text":"<p>Although the database exists, it is empty. Please delete it and start over.</p> <p>If you have previously saved your database into a text file, you can load it. See Dump database command for explanations.</p> <p>See also IDA usage help</p>"},{"location":"user-guide/user-interface/menu-bar/windows/various-dialog-help-messages.html#illegal-usage-of-the-switch","title":"Illegal Usage of the Switch","text":"<p>Not all switches can be used when you start IDA for the second or more time. Below are valid switches: -a disable auto analysis -d debug </p> <p>See also IDA usage help</p>"},{"location":"user-guide/user-interface/menu-bar/windows/various-dialog-help-messages.html#cannot-find-input-file","title":"Cannot Find Input File","text":"<p>IDA has tried to find a file with the extensions mentioned in the IDA.CFG file, but could not find anything.</p> <p>The default extension table looks like this:</p> <pre><code> Extension    Processor\n\n  \"com\" :       \"\"\n  \"exe\" :       \"\"\n  \"dll\" :       \"\"\n  \"drv\" :       \"\"\n  \"sys\" :       \"\"\n  \"bin\" :       \"\"\n  \"ovl\" :       \"\"\n  \"ovr\" :       \"\"\n  \"ov?\" :       \"\"\n  \"nlm\" :       \"\"\n  \"lan\" :       \"\"\n  \"dsk\" :       \"\"\n  \"obj\" :       \"\"\n  \"prc\" :       \"68000\"\n  \"axf\" :       \"arm710a\"\n  \"h68\" :       \"68000\"\n  \"i51\" :       \"8051\"\n  \"sav\" :       \"pdp11\"\n  \"rom\" :       \"z80\"\n  \"cla*\":       \"java\"\n  \"s19\":        \"6811\"\n  \"epoc\":       \"arm\"\n  \"o\":          \"\"\n</code></pre> <p>See also IDA usage help</p>"},{"location":"user-guide/user-interface/menu-bar/windows/various-dialog-help-messages.html#patched-bytes-are-skipped","title":"Patched Bytes Are Skipped","text":"<p>Some bytes in program memory have no corresponding byte in the executable file. For example, uninitialized data is not kept in the file. OS/2 Warp and Window support compressed pages.</p> <p>In this case, IDA cannot create a full difference file. It shows the skipped byte addresses along with their values in the message window.</p>"},{"location":"user-guide/user-interface/menu-bar/windows/various-dialog-help-messages.html#patched-bytes-have-relocation-information","title":"Patched bytes have relocation information","text":""},{"location":"user-guide/user-interface/menu-bar/windows/various-dialog-help-messages.html#list-of-functions","title":"List of Functions","text":"<p>You can use list viewer commands in this window. Here is the format of this window.</p>"},{"location":"user-guide/user-interface/menu-bar/windows/various-dialog-help-messages.html#no-segment-for-the-current-byte","title":"No Segment for the current byte","text":"<p>Some commands cannot be applied to the addresses without a segment.</p> <p>Create a segment first. You can do this using the CreateSegment command.</p>"},{"location":"user-guide/user-interface/menu-bar/windows/various-dialog-help-messages.html#empty-program","title":"Empty Program","text":"<p>The input file doesn't contain any instructions or data, i.e. there is nothing to disassemble.</p> <p>Some file formats allow the situation when the file is not empty but it doesn't contain anything to disassemble. For example, COFF/OMF/EXE formats could contain a file header which just declares that there are no executable sections in the file.</p> <p>There could be type information, compiler options and other auxiliary information in the file. This is the reason why the file doesn't look empty but IDA doesn't find anything to disassemble.</p>"},{"location":"user-guide/user-interface/menu-bar/windows/various-dialog-help-messages.html#load-additional-binary-file","title":"Load additional binary file","text":"<p>Below is the description of dialog box fields:</p> <pre><code> Load segment    - The paragraph where the file will be loaded.\n Load offset     - Specifies offset of the first byte from the start of\n                   the first segment. For example, if load offset=0x2700\n                   and load segment=0x1000, the first byte of the file will\n                   be at 1000:2700, or in linear addressing, 0x12700.\n File offset     - Offset in the input file to load bytes from.\n Number of bytes - Number of bytes to load from the file.\n                   0 means load as many as possible.\n Create segments        - If not checked, IDA does not create segments.\n Code segment           - If checked, IDA creates a code segment.\n                          relevant for processors which have different\n                          code/data segment addressing schemes (for\n                          example, Atmel AVR).\n</code></pre>"},{"location":"user-guide/user-interface/menu-bar/windows/various-dialog-help-messages.html#patching-relocation-bytes","title":"Patching Relocation Bytes","text":"<p>If a byte has relocation information attached to it, then the value of this byte is changed when the file is loaded into the memory by the system loader or linker. Therefore, it doesn't make much sense (and sometimes it is simply illegal) to modify the byte.</p> <p>We recommend to return the original value of the byte(s).</p> <p>You can see the relocation information attached to an item by using the show internal flags command.</p>"},{"location":"user-guide/user-interface/menu-bar/windows/various-dialog-help-messages.html#notvafile","title":"NotVaFile","text":""},{"location":"user-guide/user-interface/menu-bar/windows/various-dialog-help-messages.html#not-a-virtual-array-file","title":"Not a virtual array file","text":"<p>The most probable error is that you tried to use an incompatible version of IDA. Starting from IDA 2.0 beta2 the format of virtual files was changed.</p>"},{"location":"user-guide/user-interface/menu-bar/windows/various-dialog-help-messages.html#vatoohighversion","title":"VaTooHighVersion","text":""},{"location":"user-guide/user-interface/menu-bar/windows/various-dialog-help-messages.html#virtual-array-too-high-va-version","title":"Virtual Array: Too high VA version","text":"<p>The most probable error is that you tried to open database with old version of IDA. Please use newer version of IDA to open this database.</p>"},{"location":"user-guide/user-interface/menu-bar/windows/various-dialog-help-messages.html#cannot-assign-to-segment-register-cannot-create-segment-registers-range","title":"Cannot assign to Segment Register | Cannot create segment registers range","text":"<p>This error happens because of the database corruption. Try to finish your work as soon as possible and generate the text source file.</p> <p>The best choice would be to restore from a backup because the database is corrupted.</p>"},{"location":"user-guide/user-interface/menu-bar/windows/various-dialog-help-messages.html#_1","title":"","text":""}]}