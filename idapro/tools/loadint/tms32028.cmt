TMS28_aborti:     "Abort interrupt"
TMS28_abs:        "Absolute value of accumulator"
TMS28_abstc:      "Absolute value of accumulator and load TC"
TMS28_add:        "Add value"
TMS28_addb:       "Add immediate byte value"
TMS28_addcl:      "Add 32-bit value plus carry to accumulator"
TMS28_addcu:      "Add unsigned value plus carry to accumulator"
TMS28_addl:       "Add 32-bit value"
TMS28_addu:       "Add unsigned value to accumulator"
TMS28_addul:      "Add 32-bit Unsigned Value"
TMS28_adrk:       "Add to current auxiliary register"
TMS28_and:        "Bitwise AND"
TMS28_andb:       "Bitwise AND"
TMS28_asp:        "Align stack pointer"
TMS28_asr:        "Arithmetic shift right"
TMS28_asr64:      "Arithmetic shift right of 64-bit value"
TMS28_asrl:       "Arithmetic shift right of accumulator"
TMS28_b:          "Branch"
TMS28_banz:       "Branch if auxiliary register not equal to zero"
TMS28_bar:        "Branch on Auxiliary Register Comparison"
TMS28_bf:         "Branch Fast"
TMS28_c27map:     "Set the M0M1MAP bit"
TMS28_c27obj:     "Clear the OBJMODE bit"
TMS28_c28addr:    "Clear the AMODE status bit"
TMS28_c28map:     "Set the M0M1MAP bit"
TMS28_c28obj:     "Set the OBJMODE bit"
TMS28_clrc:       "Clear status bits"
TMS28_cmp:        "Compare"
TMS28_cmp64:      "Compare 64-bit value"
TMS28_cmpb:       "Compare 8-bit value"
TMS28_cmpl:       "Compare 32-bit value"
TMS28_cmpr:       "Compare auxiliary registers"
TMS28_csb:        "Count sign bits"
TMS28_dec:        "Decrement by 1"
TMS28_dint:       "Disable maskable interrupts (set INTM bit)"
TMS28_dmac:       "16-Bit dual multiply and accumulate"
TMS28_dmov:       "Data move contents of 16-bit location"
TMS28_eallow:     "Enable write access to protected space"
TMS28_edis:       "Disable write access to protected registers"
TMS28_eint:       "Enable maskable interrupts (clear INTM bit)"
TMS28_estop0:     "Emulation stop 0"
TMS28_estop1:     "Emulation stop 1"
TMS28_ffc:        "Fast function call"
TMS28_flip:       "Flip order of bits in AX register"
TMS28_iack:       "Interrupt acknowledge"
TMS28_idle:       "Put processor in idle mode"
TMS28_imacl:      "Signed 32 X 32-bit multiply and accumulate (lower half)"
TMS28_impyal:     "Signed 32-bit multiply (lower half) and add previous P"
TMS28_impyl:      "Signed 32 X 32-bit multiply (lower half)"
TMS28_impysl:     "Signed 32-bit multiply (low half) and subtract P"
TMS28_impyxul:    "Signed 32 X unsigned 32-bit multiply (lower half)"
TMS28_in:         "Input data from port"
TMS28_inc:        "Increment by 1"
TMS28_intr:       "Emulate hardware interrupt"
TMS28_iret:       "Interrupt return"
TMS28_lb:         "Long branch (indirect)"
TMS28_lc:         "Long call (indirect)"
TMS28_lcr:        "Long call using RPC"
TMS28_loopnz:     "Loop while not zero"
TMS28_loopz:      "Loop while zero"
TMS28_lpaddr:     "Set the AMODE bit"
TMS28_lret:       "Long return"
TMS28_lrete:      "Long return and enable interrupts"
TMS28_lretr:      "Long return using RPC"
TMS28_lsl:        "Logical shift left"
TMS28_lsl64:      "Logical shift left"
TMS28_lsll:       "Logical shift left"
TMS28_lsr:        "Logical shift right"
TMS28_lsr64:      "Logical shift right"
TMS28_lsrl:       "Logical shift right"
TMS28_mac:        "Multiply and accumulate"
TMS28_max:        "Find the maximum"
TMS28_maxcul:     "Conditionally find the unsigned maximum"
TMS28_maxl:       "Find the 32-bit maximum"
TMS28_min:        "Find the minimum"
TMS28_mincul:     "Conditionally find the unsigned minimum"
TMS28_minl:       "Find the 32-bit minimum"
TMS28_mov:        "Load/Store value"
TMS28_mova:       "Load T register and add previous product"
TMS28_movad:      "Load T register"
TMS28_movb:       "Load/Save byte value"
TMS28_movdl:      "Store XT and load new XT"
TMS28_movh:       "Load/Save high word"
TMS28_movl:       "Load/Store 32-bit value"
TMS28_movp:       "Load the T register and store P in the accumulator"
TMS28_movs:       "Load T and subtract P from the accumulator"
TMS28_movu:       "Load/Store unsigned word"
TMS28_movw:       "Load the entire data page"
TMS28_movx:       "Load lower half of XT with sign extension"
TMS28_movz:       "Load (lower half of XARn)|(data page) and clear upper half"
TMS28_mpy:        "16 X 16-Bit multiply"
TMS28_mpya:       "16 X 16-Bit multiply and add previous product"
TMS28_mpyb:       "Multiply by 8-bit Constant"
TMS28_mpys:       "16 X 16-bit multiply and subtract"
TMS28_mpyu:       "Unsigned 16 X 16 multiply"
TMS28_mpyxu:      "Multiply signed value by unsigned value"
TMS28_nasp:       "Unalign stack pointer"
TMS28_neg:        "Negate accumulator"
TMS28_neg64:      "Negate accumulator register and product register"
TMS28_negtc:      "If TC is equivalent to 1, negate ACC"
TMS28_nop:        "No operation with optional indirect address modification"
TMS28_norm:       "Normalize ACC and modify selected auxiliary register"
TMS28_not:        "Complement value"
TMS28_or:         "Bitwise OR"
TMS28_orb:        "Bitwise OR immediate byte value"
TMS28_out:        "Output data to port"
TMS28_pop:        "Pop top of stack"
TMS28_pread:      "Read from program memory"
TMS28_push:       "Push onto stack"
TMS28_pwrite:     "Write to program memory"
TMS28_qmacl:      "Signed 32 X 32-bit multiply and accumulate (upper half)"
TMS28_qmpyal:     "Signed 32-bit multiply (upper half) and add previous P"
TMS28_qmpyl:      "Signed 32 X 32-bit multiply (upper half)"
TMS28_qmpysl:     "Signed 32-bit multiply (upper half) and subtract previous P"
TMS28_qmpyul:     "Unsigned 32 X 32-bit multiply (upper half)"
TMS28_qmpyxul:    "Signed X unsigned 32-bit multiply (upper half)"
TMS28_rol:        "Rotate accumulator left"
TMS28_ror:        "Rotate accumulator right"
TMS28_rpt:        "Repeat next instruction"
TMS28_sat:        "Saturate accumulator"
TMS28_sat64:      "Saturate 64-bit value ACC:P"
TMS28_sb:         "Short conditional branch"
TMS28_sbbu:       "Subtract unsigned value plus inverse borrow"
TMS28_sbf:        "Short branch fast"
TMS28_sbrk:       "Subtract from current auxiliary register"
TMS28_setc:       "Set multiple status bits"
TMS28_sfr:        "Shift accumulator right"
TMS28_spm:        "Set product mode shift bits"
TMS28_sqra:       "Square value and add P to ACC"
TMS28_sqrs:       "Square value and subtract P from ACC"
TMS28_sub:        "Subtract value"
TMS28_subb:       "Subtract immediate byte value"
TMS28_subbl:      "Subtract 32-bit value plus inverse borrow"
TMS28_subcu:      "Subtract conditional 16 bits"
TMS28_subcul:     "Subtract Conditional 32 Bits"
TMS28_subl:       "Subtract 32-bit value"
TMS28_subr:       "Reverse-subtract specified location from AX"
TMS28_subrl:      "Reverse-subtract specified location from ACC"
TMS28_subu:       "Subtract unsigned 16-bit value"
TMS28_subul:      "Subtract unsigned 32-bit value"
TMS28_sxtb:       "Sign extend LSB of AX reg into MSB"
TMS28_tbit:       "Test specified bit"
TMS28_tclr:       "Test and clear specified bit"
TMS28_test:       "Test and set specified bit"
TMS28_trap:       "Software trap"
TMS28_tset:       "Test and set specified bit"
TMS28_uout:       "Unprotected output data to I/O port"
TMS28_xb:         "C2xLP source-compatible indirect branch"
TMS28_xbanz:      "C2xLP source-compatible branch if ARn is not zero"
TMS28_xcall:      "C2xLP source-compatible function call"
TMS28_xmac:       "C2xLP source-compatible multiply and accumulate"
TMS28_xmacd:      "C2xLP source-compatible multiply and accumulate with data move"
TMS28_xor:        "Bitwise exclusive OR"
TMS28_xorb:       "Bitwise exclusive OR 8-bit value"
TMS28_xpread:     "C2xLP source-compatible program read"
TMS28_xpwrite:    "C2xLP source-compatible program write"
TMS28_xret:       "C2xLP source-compatible conditional return"
TMS28_xretc:      "C2xLP source-compatible conditional return"
TMS28_zalr:       "Zero AL and load AH with rounding"
TMS28_zap:        "Clear overflow counter"
TMS28_zapa:       "Zero accumulator and P register"

// Floating Point Unit (FPU)
TMS28_absf32:           "32-bit Floating-Point Absolute Value"
TMS28_addf32:           "32-bit Floating-Point Addition"
TMS28_cmpf32:           "32-bit Floating-Point Compare for Equal, Less Than or Greater Than"
TMS28_einvf32:          "32-bit Floating-Point Reciprocal Approximation"
TMS28_eisqrtf32:        "32-bit Floating-Point Square-Root Reciprocal Approximation"
TMS28_f32toi16:         "Convert 32-bit Floating-Point Value to 16-bit Integer"
TMS28_f32toi16r:        "Convert 32-bit Floating-Point Value to 16-bit Integer and Round"
TMS28_f32toi32:         "Convert 32-bit Floating-Point Value to 32-bit Integer"
TMS28_f32toui16:        "Convert 32-bit Floating-Point Value to 16-bit Unsigned Integer"
TMS28_f32toui16r:       "Convert 32-bit Floating-Point Value to 16-bit Unsigned Integer and Round"
TMS28_f32toui32:        "Convert 32-bit Floating-Point Value to 16-bit Unsigned Integer"
TMS28_fracf32:          "Fractional Portion of a 32-bit Floating-Point Value"
TMS28_i16tof32:         "Convert 16-bit Integer to 32-bit Floating-Point Value"
TMS28_i32tof32:         "Convert 32-bit Integer to 32-bit Floating-Point Value"
TMS28_macf32:           "32-bit Floating-Point Multiply with Parallel Add"
TMS28_maxf32:           "32-bit Floating-Point Maximum"
TMS28_minf32:           "32-bit Floating-Point Minimum"
TMS28_mov16:            "Move 16-bit Floating-Point Register Contents to Memory"
TMS28_mov32:            "Move 32-bit Value"
TMS28_movd32:           "Move 32-bit Value from Memory with Data Copy"
TMS28_movf32:           "Load the 32-bits of a 32-bit Floating-Point Register"
TMS28_moviz:            "Load the Upper 16-bits of a 32-bit Floating-Point Register"
TMS28_movst0:           "Load Selected STF Flags into ST0"
TMS28_movxi:            "Move Immediate to the Low 16-bits of a Floating-Point Register"
TMS28_mpyf32:           "32-bit Floating-Point Multiply"
TMS28_negf32:           "Conditional Negation"
TMS28_pop:              "Pop the RB Register from the Stack"
TMS28_push:             "Push the RB Register onto the Stack"
TMS28_restore:          "Restore the Floating-Point Registers"
TMS28_rptb:             "Repeat a Block of Code"
TMS28_save:             "Save Register Set to Shadow Registers and Execute SETFLG"
TMS28_setflg:           "Set or clear selected floating-point status flags"
TMS28_subf32:           "32-bit Floating-Point Subtraction"
TMS28_swapf:            "Conditional Swap"
TMS28_testtf:           "Test STF Register Flag Condition"
TMS28_ui16tof32:        "Convert unsigned 16-bit integer to 32-bit floating-point value"
TMS28_ui32tof32:        "Convert Unsigned 32-bit Integer to 32-bit Floating-Point Value"
TMS28_zero:             "Zero the Floating-Point Register RaH"
TMS28_zeroa:            "Zero All Floating-Point Registers"

// Floating Point Unit (FPU64)
TMS28_movdd32:          "Move From Register To Memory 32-bit Move"
TMS28_movix:            "Load the Upper 16-bits of a 32-bit Floating-Point Register"
TMS28_macf64:           "64-bit Floating-Point Multiply with Parallel Add"
TMS28_mpyf64:           "64-bit Floating-Point Multiply"
TMS28_addf64:           "64-bit Floating-Point Addition"
TMS28_subf64:           "64-bit Floating-Point Subtraction"
TMS28_cmpf64:           "64-bit Floating-Point Compare for Equal, Less Than or Greater Than"
TMS28_maxf64:           "64-bit Floating-Point Maximum"
TMS28_minf64:           "64-bit Floating-Point Minimum"
TMS28_f64toi32:         "Convert 64-bit Floating-Point Value to 32-bit Integer"
TMS28_f64toui32:        "Convert 64-bit Floating-Point Value to 32-bit Unsigned Integer"
TMS28_i32tof64:         "Convert 32-bit Integer to 64-bit Floating-Point Value"
TMS28_ui32tof64:        "Convert unsigned 32-bit Integer to 64-bit Floating-Point Value"
TMS28_f64toi64:         "Convert 64-bit Floating-Point Value to 64-bit Integer"
TMS28_f64toui64:        "Convert 64-bit Floating-Point Value to 64-bit unsigned Integer"
TMS28_i64tof64:         "Convert 64-bit Integer to 64-bit Floating-Point Value"
TMS28_ui64tof64:        "Convert 64-bit unsigned Integer to 64-bit Floating-Point Value"
TMS28_fracf64:          "Fractional Portion of a 64-bit Floating-Point Value"
TMS28_f64tof32:         "Convert 64-bit Floating-Point Value to 32-bit Floating-Point Value"
TMS28_f32tof64:         "Convert 32-bit Floating-Point Value to 64-bit Floating-Point Value"
TMS28_f32dtof64:        "Convert 32-bit Floating-Point Value to 64-bit Floating-Point Value"
TMS28_absf64:           "64-bit Floating-Point Absolute Value"
TMS28_negf64:           "Conditional Negation"
TMS28_mov64:            "Conditional 64-bit Move"
TMS28_eisqrtf64:        "64-bit Floating-Point Square-Root Reciprocal Approximation"
TMS28_einvf64:          "64-bit Floating-Point Reciprocal Approximation"

// Viterbi, Complex Math and CRC Unit (VCU)
TMS28_vclear:           "Clear General Purpose Register"
TMS28_vclearall:        "Clear All General Purpose and Transition Bit Registers"
TMS28_vclrovfi:         "Clear Imaginary Overflow Flag"
TMS28_vclrovfr:         "Clear Real Overflow Flag"
TMS28_vmov16:           "Store General Purpose Register, Low Half"
TMS28_vmov32:           "Store General Purpose Register"
TMS28_vmovd32:          "Load Register with Data Move"
TMS28_vmovix:           "Load Upper Half of a General Purpose Register with 16-bit Immediate"
TMS28_vmovzi:           "Load General Purpose Register with Immediate"
TMS28_vmovxi:           "Load Low Half of a General Purpose Register with Immediate"
TMS28_vrndoff:          "Disable Rounding"
TMS28_vrndon:           "Enable Rounding"
TMS28_vsatoff:          "Disable Saturation"
TMS28_vsaton:           "Enable Saturation"
TMS28_vsetshl:          "Initialize the Left Shift Value"
TMS28_vsetshr:          "Initialize the Right Shift Value"
TMS28_vcadd:            "Complex 32 + 32 = 32 Addition"
TMS28_vcdadd16:         "Complex 16 + 32 = 16 Addition"
TMS28_vcdsub16:         "Complex 16 - 32 = 16 Subtract"
TMS28_vcmac:            "Complex Multiply and Accumulate"
TMS28_vcmpy:            "Complex Multiply"
TMS28_vneg:             "Two's Complement Negate"
TMS28_vcsub:            "Complex 32 - 32 = 32 Subtraction"
TMS28_vcrc8h_1:         "CRC8, High Byte"
TMS28_vcrc8l_1:         "CRC8, Low Byte"
TMS28_vcrc16p1h_1:      "CRC16, Polynomial 1, High Byte"
TMS28_vcrc16p1l_1:      "CRC16, Polynomial 1, Low Byte"
TMS28_vcrc16p2h_1:      "CRC16, Polynomial 2, High Byte"
TMS28_vcrc16p2l_1:      "CRC16, Polynomial 2, Low Byte"
TMS28_vcrc32h_1:        "CRC32, High Byte"
TMS28_vcrc32l_1:        "CRC32, Low Byte"
TMS28_vcrcclr:          "Clear CRC Result Register"
TMS28_vitbm2:           "Code Rate 1:2 Branch Metric Calculation"
TMS28_vitbm3:           "Code Rate 1:3 Branch Metric Calculation"
TMS28_vitdhaddsub:      "Viterbi Double Add and Subtract, High"
TMS28_vitdhsubadd:      "Viterbi Add and Subtract Low"
TMS28_vitdladdsub:      "Viterbi Add and Subtract Low"
TMS28_vitdlsubadd:      "Viterbi Subtract and Add Low"
TMS28_vithsel:          "Viterbi Select High"
TMS28_vitlsel:          "Viterbi Select, Low Word"
TMS28_vtclear:          "Clear Transition Bit Registers"
TMS28_vtrace:           "Viterbi Traceback, Store to Memory"

// Cyclic Redundancy Check (VCRC)
TMS28_vnop:             "No operation"
TMS28_vsetcrcmsgflip:   "Set CRCMSGFLIP bit in the VSTATUS Register"
TMS28_vclrcrcmsgflip:   "Clear CRCMSGFLIP bit in the VSTATUS"
TMS28_vcrc32p2l_1:      "CRC32, Polynomial 2, Low Byte"
TMS28_vcrc32p2h_1:      "CRC32, Polynomial 2, High Byte"
TMS28_vcrc24l_1:        "CRC24, Polynomial 1, Low Byte"
TMS28_vcrc24h_1:        "CRC24, Polynomial 1, High Byte"
TMS28_vsetcrcsize:      "VCRCSIZE.DSIZE bit field to a 3-bit value and the VCRCSIZE.PSIZE bit field to a 5-bit value"
TMS28_vcrcl:            "compute CRC on VCRCDSIZE bits using polynomial VCRCPOLY of size VCRCPSIZE"
TMS28_vcrch:            "compute CRC on VCRCDSIZE bits using polynomial VCRCPOLY of size VCRCPSIZE"
TMS28_vswapcrc:         "Byte Swap VCRCL"

// C28 Viterbi, Complex Math and CRC Unit-II (VCU-II)
TMS28_vclrcpack:        "Clears CPACK bit in the VSTATUS Register"
TMS28_vclropack:        "Clears OPACK bit in the VSTATUS Register"
TMS28_vsetcpack:        "Set CPACK bit in the VSTATUS Register"
TMS28_vsetopack:        "Set OPACK bit in the VSTATUS Register"
TMS28_vswap32:          "32-bit Register Swap"
TMS28_vxormov32:        "32-bit Load and XOR From Memory"
TMS28_vashl32:          "Arithmetic Shift Left"
TMS28_vashr32:          "Arithmetic Shift Right"
TMS28_vbitflip:         "Bit Flip"
TMS28_vlshl32:          "Logical Shift Left"
TMS28_vlshr32:          "Logical Shift Right"
TMS28_vccmac:           "Complex Conjugate Multiply and Accumulate"
TMS28_vccmpy:           "Complex Conjugate Multiply"
TMS28_vccon:            "Complex Conjugate"
TMS28_vcflip:           "Swap Upper and Lower Half of VCU Register"
TMS28_vcmag:            "Magnitude ofaComplex Number // used by: VCMAG VRb, VRa"
TMS28_vcshl16:          "Complex Shift Left"
TMS28_vcshr16:          "Complex Shift Right"
TMS28_vclrdive:         "Clear DIVE bit in the VSTATUS Register"
TMS28_vdec:             "16-bit Decrement"
TMS28_vinc:             "16-bit Increment"
TMS28_vmod32:           "Modulo Operation"
TMS28_vmpyadd:          "Multiply Add 16-Bit"
TMS28_vcfft1:           "Complex FFT calculation instruction"
TMS28_vcfft2:           "Complex FFT calculation instruction"
TMS28_vcfft3:           "Complex FFT calculation instruction"
TMS28_vcfft4:           "Complex FFT calculation instruction"
TMS28_vcfft5:           "Complex FFT calculation instruction"
TMS28_vcfft6:           "Complex FFT calculation instruction"
TMS28_vcfft7:           "Complex FFT calculation instruction"
TMS28_vcfft8:           "Complex FFT calculation instruction"
TMS28_vcfft9:           "Complex FFT calculation instruction"
TMS28_vcfft10:          "Complex FFT calculation instruction"
TMS28_vgfacc:           "Galois Field Instruction"
TMS28_vgfadd4:          "Galois Field Four Parallel Byte X Byte Add"
TMS28_vgfinit:          "Initialize Galois Field Polynomial and Order"
TMS28_vgfmac4:          "Galois Field Four Parallel Byte X Byte Multiply and Accumulate"
TMS28_vgfmpy4:          "Galois Field Four Parallel Byte X Byte Multiply"
TMS28_vpack4:           "Byte Packing"
TMS28_vrevb:            "Byte Reversal"
TMS28_vshlmb:           "Shift Left and Merge Right Bytes"
TMS28_vitstage:         "Parallel Butterfly Computation"
TMS28_vsetk:            "Set Constraint Length for Viterbi Operation"
TMS28_vsminit:          "State Metrics Register initialization"

// Fast Integer Division Unit (FINTDIV)
TMS28_absi32div32:      "<n/a>"
TMS28_absi32div32u:     "<n/a>"
TMS28_absi64div32:      "<n/a>"
TMS28_absi64div32u:     "<n/a>"
TMS28_absi64div64:      "<n/a>"
TMS28_absi64div64u:     "<n/a>"
TMS28_subc4ui32:        "<n/a>"
TMS28_subc2ui64:        "<n/a>"
TMS28_negi32div32:      "<n/a>"
TMS28_enegi32div32:     "<n/a>"
TMS28_mnegi32div32:     "<n/a>"
TMS28_negi64div32:      "<n/a>"
TMS28_enegi64div32:     "<n/a>"
TMS28_mnegi64div32:     "<n/a>"
TMS28_negi64div64:      "<n/a>"
TMS28_enegi64div64:     "<n/a>"
TMS28_mnegi64div64:     "<n/a>"

// Trigonometric Math Unit (TMU)
TMS28_mpy2pif32:        "32-Bit Floating-Point Multiply by Two Pi"
TMS28_div2pif32:        "32-Bit Floating-Point Divide by Two Pi"
TMS28_divf32:           "32-Bit Floating-Point Division"
TMS28_sqrtf32:          "32-Bit Floating-Point Square Root"
TMS28_sinpuf32:         "32-Bit Floating-Point Sine (per unit)"
TMS28_cospuf32:         "32-Bit Floating-Point Cosine (per unit)"
TMS28_atanpuf32:        "32-Bit Floating-Point Arc Tangent (per unit)"
TMS28_quadf32:          "Quadrant Determination Used in Conjunction With ATANPUF32()"
TMS28_iexp2f32:         "32-Bit Floating-Point Inverse Exponent"
TMS28_log2f32:          "32-Bit Floating-Point Base-2 Logarithm"