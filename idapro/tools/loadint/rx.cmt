  RX_null:    "Unknown Operation"

  RX_abs:     "Absolute value"
  RX_adc:     "Addition with carry"
  RX_add:     "Addition without carry"
  RX_and:     "Logical AND"
  RX_bra:     "Unconditional relative branch"
  RX_brk:     "Unconditional trap"
  RX_bclr:    "Clearing a bit"
  RX_bfmov:   "Transferring bit-fields"
  RX_bfmovz:  "Transferring a bit-field and setting the other bits at the destination to zero"
  RX_beq:     "Relative conditional branch, Equal to"
  RX_bne:     "Relative conditional branch, Not equal to"
  RX_bgeu:    "Relative conditional branch, Equal to or greater than"
  RX_bltu:    "Relative conditional branch, Less than"
  RX_bgtu:    "Relative conditional branch, Greater than"
  RX_bleu:    "Relative conditional branch, Equal to or less than"
  RX_bpz:     "Relative conditional branch, Positive or zero"
  RX_bn:      "Relative conditional branch, Negative"
  RX_bge:     "Relative conditional branch, Equal to or greater than as signed integer"
  RX_blt:     "Relative conditional branch, Less than as signed integer"
  RX_bgt:     "Relative conditional branch, Greater than as signed integer"
  RX_ble:     "Relative conditional branch, Equal to or less than as signed integer"
  RX_bo:      "Relative conditional branch, O flag is 1"
  RX_bno:     "Relative conditional branch, O flag is 0"
  RX_bmeq:    "Conditional bit transfer, Equal to"
  RX_bmne:    "Conditional bit transfer, Not equal to"
  RX_bmgeu:   "Conditional bit transfer, Equal to or greater than"
  RX_bmltu:   "Conditional bit transfer, Less than"
  RX_bmgtu:   "Conditional bit transfer, Greater than"
  RX_bmleu:   "Conditional bit transfer, Equal to or less than"
  RX_bmpz:    "Conditional bit transfer, Positive or zero"
  RX_bmn:     "Conditional bit transfer, Negative"
  RX_bmge:    "Conditional bit transfer, Equal to or greater than as signed integer"
  RX_bmlt:    "Conditional bit transfer, Less than as signed integer"
  RX_bmgt:    "Conditional bit transfer, Greater than as signed integer"
  RX_bmle:    "Conditional bit transfer, Equal to or less than as signed integer"
  RX_bmo:     "Conditional bit transfer, O flag is 1"
  RX_bmno:    "Conditional bit transfer, O flag is 0"
  RX_bnot:    "Inverting a bit"
  RX_bset:    "Setting a bit"
  RX_bsr:     "Relative subroutine branch"
  RX_btst:    "Testing a bit"
  RX_clrpsw:  "Clear a flag or bit in the PSW"
  RX_cmp:     "Comparison"
  RX_div:     "Signed division"
  RX_divu:    "Unsigned division"
  RX_emaca:   "Extend multiply-accumulate to the accumulator"
  RX_emsba:   "Extended multiply-subtract to the accumulator"
  RX_emula:   "Extended multiply to the accumulator"
  RX_emul:    "Signed multiplication"
  RX_emulu:   "Unsigned multiplication"
  RX_fadd:    "Single-precision floating-point addition"
  RX_fcmp:    "Single-precision floating-point comparison"
  RX_fdiv:    "Single-precision floating-point division"
  RX_fmul:    "Single-precision floating-point multiplication"
  RX_fsqrt:   "Single-precision floating-point square root"
  RX_fsub:    "Single-precision floating-point subtraction"
  RX_ftoi:    "Single-precision floating-point number to signed integer conversion"
  RX_ftou:    "Single-precision floating-point number to unsigned integer conversion"
  RX_int:     "Software interrupt"
  RX_itof:    "Signed integer to single-precision floating-point number conversion"
  RX_jmp:     "Unconditional jump"
  RX_jsr:     "Jump to a subroutine"
  RX_machi:   "Multiply-Accumulate the upper word"
  RX_maclo:   "Multiply-Accumulate the lower word"
  RX_maclh:   "Multiply-Accumulate the lower word and upper word"
  RX_max:     "Selecting the highest value"
  RX_min:     "Selecting the lowest value"
  RX_mov:     "Transferring data"
  RX_movco:   "Storing with LI flag clear"
  RX_movli:   "Loading with LI flag set"
  RX_movu:    "Transfer unsigned data"
  RX_msbhi:   "Multiply-Subtract the upper word"
  RX_msblo:   "Multiply-Subtract the lower word"
  RX_msblh:   "Multiply-Subtract the lower word and upper word"
  RX_mul:     "Multiplication"
  RX_mulhi:   "Multiply the upper word"
  RX_mullo:   "Multiply the lower word"
  RX_mullh:   "Multiply the lower word and upper word"
  RX_mvfachi: "Move the upper longword from accumulator"
  RX_mvfaclo: "Move the lower longword from the accumulator"
  RX_mvfacmi: "Move the middle-order longword from the accumulator"
  RX_mvfacgu: "Move the guard longword from the accumulator"
  RX_mvfc:    "Transfer from a control register"
  RX_mvtacgu: "Move the guard longword to the accumulator"
  RX_mvtachi: "Move the upper longword to the accumulator"
  RX_mvtaclo: "Move the lower longword to the accumulator"
  RX_mvtc:    "Transfer to a control register"
  RX_mvtipl:  "Interrupt priority level setting"
  RX_neg:     "Negation"
  RX_nop:     "No operation"
  RX_not:     "Bitwise negation"
  RX_or:      "Logical OR"
  RX_pop:     "Restoring data from stack to register"
  RX_popc:    "Restoring a control register"
  RX_popm:    "Restoring multiple registers from the stack"
  RX_push:    "Saving data on the stack"
  RX_pushc:   "Saving a control register"
  RX_pushm:   "Saving multiple registers"
  RX_racl:    "Round the accumulator longword"
  RX_rdacl:   "Round the accumulator longword"
  RX_racw:    "Round the accumulator word"
  RX_rdacw:   "Round the accumulator word"
  RX_revl:    "Endian conversion"
  RX_revw:    "Endian conversion"
  RX_rmpa:    "Multiply-and-accumulate operation"
  RX_rolc:    "Rotation with carry to left"
  RX_rorc:    "Rotation with carry to right"
  RX_rotl:    "Rotation to left"
  RX_rotr:    "Rotation to right"
  RX_round:   "Conversion from single-precision floating-point number to signed integer"
  RX_rstr:    "Collective restoration of register values"
  RX_rte:     "Return from the exception"
  RX_rtfi:    "Return from the fast interrupt"
  RX_rts:     "Returning from a subroutine"
  RX_rtsd:    "Releasing stack frame and returning from subroutine"
  RX_sat:     "Saturation of signed 32-bit data"
  RX_satr:    "Saturation of signed 64-bit data for RMPA"
  RX_save:    "Collective saving of register values"
  RX_sbb:     "Subtraction with borrow"
  RX_sceq:    "Condition setting, Equal to"
  RX_scne:    "Condition setting, Not equal to"
  RX_scgeu:   "Condition setting, Equal to or greater than"
  RX_scltu:   "Condition setting, Less than"
  RX_scgtu:   "Condition setting, Greater than"
  RX_scleu:   "Condition setting, Equal to or less than"
  RX_scpz:    "Condition setting, Positive or zero"
  RX_scn:     "Condition setting, Negative"
  RX_scge:    "Condition setting, Equal to or greater than as signed integer"
  RX_sclt:    "Condition setting, Less than as signed integer"
  RX_scgt:    "Condition setting, Greater than as signed integer"
  RX_scle:    "Condition setting, Equal to or less than as signed integer"
  RX_sco:     "Condition setting, O flag is 1"
  RX_scno:    "Condition setting, O flag is 0"
  RX_scmpu:   "String comparison"
  RX_setpsw:  "Setting a flag or bit in the PSW"
  RX_shar:    "Arithmetic shift to the right"
  RX_shll:    "Logical and arithmetic shift to the left"
  RX_shlr:    "Logical shift to the right"
  RX_smovb:   "Transferring a string backward"
  RX_smovf:   "Transferring a string forward"
  RX_smovu:   "Transferring a string"
  RX_sstr:    "Storing a string"
  RX_stnz:    "Transfer with condition (Z == 0)"
  RX_stz:     "Transfer with condition (Z == 1)"
  RX_sub:     "Subtraction without borrow"
  RX_suntil:  "Searching for a string"
  RX_swhile:  "Searching for a string"
  RX_tst:     "Logical test"
  RX_utof:    "Unsigned integer to single-precision floating-point number conversion"
  RX_wait:    "Waiting"
  RX_xchg:    "Exchanging values"
  RX_xor:     "Logical Exclusive OR"
  RX_dabs:    "Double-precision floating-point absolute value"
  RX_dadd:    "Double-precision floating-point addition without carry"
  RX_dcmpun:  "Double-precision floating-point comparison, This condition is for detecting cases where classification of order based on the comparison is impossible."
  RX_dcmpeq:  "Double-precision floating-point comparison, This condition is for detecting that src2 is equal to src."
  RX_dcmplt:  "Double-precision floating-point comparison, This condition is for detecting that src2 is less than src."
  RX_dcmple:  "Double-precision floating-point comparison, This condition is for detecting that src2 is less than or equal to src."
  RX_ddiv:    "Double-precision floating-point division"
  RX_dmov:    "Double-precision floating-point transferring data"
  RX_dmul:    "Double-precision floating-point multiplication"
  RX_dneg:    "Double-precision floating-point negate"
  RX_dpopm:   "Restoring multiple double-precision floating-point registers"
  RX_dpushm:  "Saving multiple double-precision floating-point registers"
  RX_dround:  "Conversion from double-precision floating-point number to signed integer"
  RX_dsqrt:   "Double-precision floating-point square root"
  RX_dsub:    "Double-precision floating-point subtraction"
  RX_dtof:    "Double-precision floating-point number to single-precision floating-point number conversion"
  RX_dtoi:    "Double-precision floating-point number to signed integer conversion"
  RX_dtou:    "Double-precision floating-point number to unsigned integer conversion"
  RX_ftod:    "Single-precision floating-point number to double-precision floating-point number conversion"
  RX_itod:    "Signed integer to double-precision floating-point number conversion"
  RX_mvfdc:   "Transfer from double-precision floating-point control register"
  RX_mvfdr:   "Transfer from double-precision floating-point comparison result register"
  RX_mvtdc:   "Transfer to double-precision floating-point control register"
  RX_utod:    "Unsigned integer to double-precision floating-point number conversion"
